import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient';

// MenuApprenants V1 Corrig√© - Wrapper intelligent compatible avec structure existante
export default function MenuApprenants({
  cellKey,                    // cl√© de case (ex: "0-0-Matin")
  creneauData: {             // donn√©es pour filtrage intelligent
    date,
    jour, 
    creneau,
    lieu_id
  },
  apprenantsParCase,         // √©tat existant (lecture seule) - structure: {"0-0-Matin": ["", "id1", "id2"]}
  apprenants,                // liste compl√®te apprenants
  onApprenantChange,         // handler existant: (dayIndex, lieuIndex, creneau, selectIndex, value)
  onAddApprenant,            // handler existant: (dayIndex, lieuIndex, creneau)
  onRemoveApprenant,         // handler existant: (dayIndex, lieuIndex, creneau)
  disabled = false,
  couleurEnregistree         // NOUVEAU: couleur persistante post-enregistrement
}) {
  // √âtat pour apprenants disponibles apr√®s filtrage intelligent
  const [apprenantsDisponibles, setApprenantsDisponibles] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  
  // üö® CIRCUIT BREAKER - Protection contre boucle infinie
  const [requestCount, setRequestCount] = useState(0);
  const MAX_REQUESTS_PER_MINUTE = 10;
  const [lastRequestTime, setLastRequestTime] = useState(Date.now());
  
  // üöÄ CACHE - √âviter requ√™tes r√©p√©titives
  const [cache] = useState(() => new Map());

  // Fonctions de validation (copi√©es de MenuApprenants original)
  const validateDatesFormation = (apprenant, dateTest) => {
    if (!apprenant.date_entree_formation) return false;
    
    const dateEntree = new Date(apprenant.date_entree_formation);
    const dateFin = new Date(
      apprenant.date_fin_formation_reelle || 
      apprenant.date_sortie_previsionnelle
    );
    const dateTestObj = new Date(dateTest);
    
    return dateTestObj >= dateEntree && dateTestObj <= dateFin;
  };

  const validateStatutActuel = (apprenant, dateTest, suspensions) => {
    if (apprenant.statut_formation !== 'en_cours') return false;
    
    const suspensionActive = suspensions.find(s => 
      s.apprenant_id === apprenant.id &&
      new Date(s.date_suspension) <= new Date(dateTest) &&
      new Date(s.date_reprise_prevue) >= new Date(dateTest)
    );
    
    return !suspensionActive;
  };

  const validatePlanningType = (apprenantId, planningTypes, jourRequis, creneauRequis, lieuIdRequis) => {
    const planning = planningTypes.find(pt => 
      pt.apprenant_id === apprenantId &&
      pt.jour === jourRequis.toLowerCase() &&
      pt.creneau === creneauRequis
    );
    
    if (!planning) return false;
    
    if (lieuIdRequis && planning.lieu_id && planning.lieu_id !== lieuIdRequis) {
      return false;
    }
    
    return true;
  };

  // Fonction de filtrage intelligent (adapt√©e de MenuApprenants original)
  const getApprenantsDisponibles = async (dateTest, jour, creneau, lieuId) => {
    try {
      console.log(`üéØ MenuApprenants V1 Corrig√© filtrage: ${dateTest}, ${jour}, ${creneau}, lieu: ${lieuId}`);

      // 1. R√©cup√©rer tous les apprenants actifs
      let { data: apprenantsData, error: apprenantsError } = await supabase
        .from('apprenants_actifs')
        .select('*');
      
      if (apprenantsError && apprenantsError.code === 'PGRST106') {
        const result = await supabase
          .from('users')
          .select('*')
          .eq('role', 'apprenant')
          .eq('archive', false);
        
        apprenantsData = result.data;
      } else if (apprenantsError) {
        throw apprenantsError;
      }

      if (!apprenantsData || apprenantsData.length === 0) {
        return [];
      }

      // 2. R√©cup√©rer les planning types
      const creneauDB = creneau === 'Matin' ? 'matin' : 'AM';
      const { data: planningTypes, error: planningError } = await supabase
        .from('planning_apprenants')
        .select('apprenant_id, lieu_id, jour, creneau')
        .eq('jour', jour.toLowerCase())
        .eq('creneau', creneauDB)
        .eq('actif', true);
      
      if (planningError && planningError.code !== 'PGRST106') throw planningError;

      // 3. R√©cup√©rer les suspensions actives
      let suspensions = [];
      try {
        const { data: suspensionsData, error: suspensionsError } = await supabase
          .from('suspensions_parcours')
          .select('apprenant_id, date_suspension, date_reprise_prevue')
          .lte('date_suspension', dateTest)
          .gte('date_reprise_prevue', dateTest);
        
        if (!suspensionsError) {
          suspensions = suspensionsData || [];
        }
      } catch (suspError) {
        console.log('Suspensions non disponibles, poursuite sans');
      }

      // 4. Appliquer les trois filtres
      const results = apprenantsData
        .map(apprenant => {
          const critere1 = validateDatesFormation(apprenant, dateTest);
          if (!critere1) return null;
          
          const critere2 = validateStatutActuel(apprenant, dateTest, suspensions);
          if (!critere2) return null;
          
          const critere3 = validatePlanningType(apprenant.id, planningTypes || [], jour, creneauDB, lieuId);
          if (!critere3) return null;
          
          return apprenant;
        })
        .filter(Boolean);
      
      console.log(`‚úÖ MenuApprenants V1 Corrig√©: ${results.length} apprenants disponibles`);
      return results;
      
    } catch (error) {
      console.error('Erreur filtrage MenuApprenants V1 Corrig√©:', error);
      throw error;
    }
  };

  // D√©clencher le filtrage quand les donn√©es changent - AVEC PROTECTION
  useEffect(() => {
    // üö® CIRCUIT BREAKER CHECK
    const now = Date.now();
    if (now - lastRequestTime > 60000) {
      // Reset counter every minute
      setRequestCount(0);
      setLastRequestTime(now);
    }
    
    if (requestCount >= MAX_REQUESTS_PER_MINUTE) {
      console.error('üö® CIRCUIT BREAKER: Trop de requ√™tes MenuApprenants, arr√™t forc√©');
      setError('Trop de requ√™tes - rechargez la page');
      return;
    }
    
    if (date && jour && creneau && lieu_id) {
      // üöÄ CHECK CACHE FIRST
      const cacheKey = `${date}-${jour}-${creneau}-${lieu_id}`;
      if (cache.has(cacheKey)) {
        console.log('üöÄ Cache hit MenuApprenants:', cacheKey);
        setApprenantsDisponibles(cache.get(cacheKey));
        return;
      }
      
      setLoading(true);
      setError('');
      setRequestCount(prev => prev + 1);
      
      console.log(`üì° MenuApprenants fetch #${requestCount + 1}: ${cacheKey}`);
      
      getApprenantsDisponibles(date, jour, creneau, lieu_id)
        .then(disponibles => {
          // Store in cache
          cache.set(cacheKey, disponibles);
          setApprenantsDisponibles(disponibles);
        })
        .catch(err => {
          console.error('Erreur filtrage:', err);
          setError(err.message);
          setApprenantsDisponibles([]);
        })
        .finally(() => {
          setLoading(false);
        });
    } else {
      setApprenantsDisponibles([]);
    }
  }, [date, jour, creneau, lieu_id]); // D√©pendances conserv√©es mais prot√©g√©es

  // Extraire les indices de la cellKey pour les handlers
  const [dayIndex, lieuIndex, creneauName] = cellKey.split('-');
  const dayIdx = parseInt(dayIndex);
  const lieuIdx = parseInt(lieuIndex);

  // Liste actuelle des apprenants s√©lectionn√©s pour cette case
  const selectedApprenants = apprenantsParCase[cellKey] || [''];

  return (
    <>
      
      <div style={{
        padding: '6px',
        background: 'rgba(34, 197, 94, 0.1)',
        borderRadius: '4px',
        border: '2px solid rgba(34, 197, 94, 0.3)'
      }}>
        <div className="apprenant-header" style={{ 
          fontSize: '10px', 
          fontWeight: '600', 
          marginBottom: '4px',
          textAlign: 'center'
        }}>
          APPRENANTS
        </div>
      
      {/* Rendu des selects pour chaque apprenant s√©lectionn√© - Structure identique √† l'existant */}
      {selectedApprenants.map((selectedId, i) => (
        <div key={i}>
          <select
            style={{
              width: '100%',
              padding: '3px',
              border: '1px solid #d1d5db',
              borderRadius: '3px',
              fontSize: '10px',
              background: couleurEnregistree || 'rgba(255,255,255,0.9)',
              color: '#374151',
              marginBottom: '3px'
            }}
            value={selectedId}
            onChange={(e) => onApprenantChange(dayIdx, lieuIdx, creneauName, i, e.target.value)}
            disabled={disabled || loading}
          >
            <option value="">
              {loading ? '‚è≥ Filtrage...' : 
               disabled ? 'üìç Lieu requis' : 
               error ? '‚ùå Erreur' :
               'Apprenant'}
            </option>
            {!disabled && !loading && !error && apprenantsDisponibles
              .filter(a => {
                // Logique anti-doublons identique √† l'existant
                const currentSelections = selectedApprenants || [];
                return !currentSelections.includes(a.id) || currentSelections[i] === a.id;
              })
              .map(a => (
                <option key={a.id} value={a.id}>
                  {a.prenom} {a.nom}
                </option>
              ))}
          </select>
        </div>
      ))}

      {/* Boutons +/- identiques √† l'existant */}
      <div className="no-print" style={{ display: 'flex', gap: '3px', justifyContent: 'center', marginTop: '3px' }}>
        <button
          onClick={() => onAddApprenant(dayIdx, lieuIdx, creneauName)}
          style={{
            padding: '3px 6px',
            background: '#3b82f6',
            color: 'white',
            border: 'none',
            borderRadius: '3px',
            fontSize: '10px',
            cursor: 'pointer',
            fontWeight: 'bold'
          }}
          disabled={disabled}
        >
          +
        </button>
        {selectedApprenants.length > 1 && (
          <button
            onClick={() => onRemoveApprenant(dayIdx, lieuIdx, creneauName)}
            style={{
              padding: '3px 6px',
              background: '#ef4444',
              color: 'white',
              border: 'none',
              borderRadius: '3px',
              fontSize: '10px',
              cursor: 'pointer',
              fontWeight: 'bold'
            }}
            disabled={disabled}
          >
            ‚àí
          </button>
        )}
      </div>

      </div>
    </>
  );
}