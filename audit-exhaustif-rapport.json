{
  "timestamp": "2025-08-30T11:02:57.717Z",
  "statistiques": {
    "identiques": 40,
    "quasiIdentiques": 5,
    "similaires": 6,
    "differents": 2,
    "tresDifferents": 0,
    "localSeulement": 12,
    "vercelSeulement": 42,
    "erreurs": 0
  },
  "tauxSynchronisation": 42.1,
  "totalFichiers": 107,
  "differencesMajeures": [
    {
      "fichier": "pages/api/auth/formateur/change-password.js",
      "resultat": {
        "statut": "DIFFERENT",
        "local": {
          "existe": true,
          "contenu": "import bcrypt from 'bcryptjs'\r\nimport { supabase } from '../../../../lib/supabaseClient'\r\nimport { supabaseAdmin } from '../../../../lib/supabaseAdmin'\r\nimport { verifyToken, generateTokenPair } from '../../../../lib/jwt'\r\n\r\n/**\r\n * Normalise un prénom/nom pour créer un email valide\r\n * Supprime accents, cédilles et caractères spéciaux\r\n * José → jose, Martínez → martinez, Bénard → benard\r\n * IDENTIQUE À login.js pour cohérence\r\n */\r\nconst normalizeForEmail = (text) => {\r\n    return text\r\n        .toLowerCase()\r\n        .trim()\r\n        .normalize('NFD')                    // Décompose les caractères accentués\r\n        .replace(/[\\u0300-\\u036f]/g, '')    // Supprime les marques diacritiques\r\n        .replace(/[^a-z0-9]/g, '')          // Garde seulement lettres et chiffres\r\n}\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    const { currentPassword, newPassword } = req.body\r\n\r\n    // Validation des entrées\r\n    if (!currentPassword || !newPassword) {\r\n        return res.status(400).json({ \r\n            error: 'Mot de passe actuel et nouveau mot de passe requis' \r\n        })\r\n    }\r\n\r\n    if (newPassword.trim().length < 6) {\r\n        return res.status(400).json({ \r\n            error: 'Le nouveau mot de passe doit contenir au moins 6 caractères' \r\n        })\r\n    }\r\n\r\n    // Vérifier le token JWT\r\n    const authHeader = req.headers.authorization\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n        return res.status(401).json({ error: 'Token manquant ou invalide' })\r\n    }\r\n\r\n    const token = authHeader.split(' ')[1]\r\n    const decodedToken = verifyToken(token)\r\n    \r\n    if (!decodedToken) {\r\n        return res.status(401).json({ error: 'Token invalide ou expiré' })\r\n    }\r\n\r\n    try {\r\n        // 1. Récupérer l'utilisateur depuis la table users\r\n        console.log(`[DEBUG] Récupération user pour token ID: ${decodedToken.id}`)\r\n        const { data: user, error: userError } = await supabase\r\n            .from('users')\r\n            .select('*')\r\n            .eq('id', decodedToken.id)\r\n            .single()\r\n\r\n        if (userError || !user) {\r\n            console.error(`[DEBUG] User non trouvé - error:`, userError)\r\n            return res.status(404).json({ error: 'Utilisateur non trouvé' })\r\n        }\r\n\r\n        console.log(`[DEBUG] User récupéré:`, {\r\n            id: user.id,\r\n            prenom: user.prenom,\r\n            nom: user.nom,\r\n            email: user.email,\r\n            password_hash: user.password_hash ? 'EXISTE' : 'NULL',\r\n            custom_password: user.custom_password || 'NULL'\r\n        })\r\n\r\n        // 2. Vérifier le mot de passe actuel (LOGIQUE IDENTIQUE À login.js)\r\n        let currentPasswordValid = false\r\n\r\n        console.log(`[DEBUG] Vérification mot de passe actuel pour ${user.prenom} ${user.nom}`)\r\n        console.log(`[DEBUG] password_hash exists: ${user.password_hash ? 'EXISTE' : 'NULL'}`)\r\n\r\n        if (user.password_hash) {\r\n            console.log(`[DEBUG] Utilisation bcrypt pour vérification`)\r\n            // Si password_hash existe, utiliser uniquement bcrypt\r\n            currentPasswordValid = await bcrypt.compare(currentPassword, user.password_hash)\r\n            if (!currentPasswordValid) {\r\n                return res.status(400).json({ error: 'Mot de passe actuel incorrect' })\r\n            }\r\n        } else {\r\n            console.log(`[DEBUG] Utilisation fallback nom normalisé`)\r\n            // Fallback : première connexion avec nom normalisé (Bénard → benard)\r\n            const nomNormalized = normalizeForEmail(user.nom)\r\n            const currentPasswordNormalized = normalizeForEmail(currentPassword)\r\n            \r\n            console.log(`[DEBUG] Comparaison normalisée:`)\r\n            console.log(`[DEBUG]   nom \"${user.nom}\" → \"${nomNormalized}\"`)\r\n            console.log(`[DEBUG]   currentPassword \"${currentPassword}\" → \"${currentPasswordNormalized}\"`)\r\n            console.log(`[DEBUG]   match: ${currentPasswordNormalized === nomNormalized}`)\r\n            \r\n            if (currentPasswordNormalized !== nomNormalized) {\r\n                return res.status(400).json({ error: 'Mot de passe actuel incorrect' })\r\n            }\r\n            currentPasswordValid = true\r\n        }\r\n\r\n        // 3. Hasher le nouveau mot de passe\r\n        const saltRounds = 10\r\n        console.log(`[DEBUG] Génération hash pour user ID ${user.id}, saltRounds: ${saltRounds}`)\r\n        const newPasswordHash = await bcrypt.hash(newPassword, saltRounds)\r\n        console.log(`[DEBUG] Hash généré (longueur: ${newPasswordHash.length}): ${newPasswordHash.substring(0, 20)}...`)\r\n\r\n        // 4. Mettre à jour le mot de passe dans la table users avec client ADMIN\r\n        console.log(`[DEBUG] Tentative UPDATE ADMIN pour user ID ${user.id}`)\r\n        console.log(`[DEBUG] Données à mettre à jour:`, {\r\n            password_hash: newPasswordHash.substring(0, 20) + '...',\r\n            custom_password: null,\r\n            must_change_password: false,\r\n            password_changed_at: new Date().toISOString()\r\n        })\r\n\r\n        const { data: updateData, error: updateError, count } = await supabaseAdmin\r\n            .from('users')\r\n            .update({\r\n                password_hash: newPasswordHash,\r\n                custom_password: null,  // Supprimer l'ancien système\r\n                must_change_password: false,\r\n                password_changed_at: new Date().toISOString()\r\n            })\r\n            .eq('id', user.id)\r\n            .select() // CRITIQUE: Forcer le retour des données mises à jour\r\n\r\n        console.log(`[DEBUG] Résultat UPDATE - error:`, updateError)\r\n        console.log(`[DEBUG] Résultat UPDATE - data:`, updateData)\r\n        console.log(`[DEBUG] Résultat UPDATE - count:`, count)\r\n\r\n        if (updateError) {\r\n            console.error('Erreur mise à jour mot de passe:', updateError)\r\n            return res.status(500).json({ error: 'Erreur lors de la mise à jour' })\r\n        }\r\n\r\n        // 4.5. Vérification post-update - relire l'utilisateur pour confirmer\r\n        console.log(`[DEBUG] Vérification post-update pour user ID ${user.id}`)\r\n        const { data: verifyUser, error: verifyError } = await supabaseAdmin\r\n            .from('users')\r\n            .select('id, prenom, nom, password_hash, password_changed_at')\r\n            .eq('id', user.id)\r\n            .single()\r\n\r\n        if (verifyError) {\r\n            console.error('Erreur vérification post-update:', verifyError)\r\n        } else {\r\n            console.log(`[DEBUG] User après UPDATE:`, {\r\n                id: verifyUser.id,\r\n                prenom: verifyUser.prenom,\r\n                nom: verifyUser.nom,\r\n                password_hash: verifyUser.password_hash ? verifyUser.password_hash.substring(0, 20) + '...' : 'NULL',\r\n                password_changed_at: verifyUser.password_changed_at\r\n            })\r\n        }\r\n\r\n        // 5. Générer de nouveaux tokens avec mustChangePassword = false\r\n        const userData = {\r\n            id: user.id,\r\n            formateur_id: user.id,\r\n            username: user.prenom,\r\n            nom: user.nom,\r\n            prenom: user.prenom,\r\n            email: user.email,\r\n            mustChangePassword: false\r\n        }\r\n\r\n        const newTokens = generateTokenPair(userData)\r\n\r\n        // 6. Log de sécurité\r\n        console.log(`[AUTH] Mot de passe changé pour formateur ${user.prenom} ${user.nom} (ID: ${user.id})`)\r\n\r\n        // 7. Retourner la réponse\r\n        res.status(200).json({\r\n            success: true,\r\n            message: 'Mot de passe changé avec succès',\r\n            user: {\r\n                id: user.id,\r\n                username: user.prenom,\r\n                nom: user.nom,\r\n                prenom: user.prenom,\r\n                email: user.email,\r\n                role: 'formateur',\r\n                mustChangePassword: false\r\n            },\r\n            tokens: {\r\n                accessToken: newTokens.accessToken,\r\n                refreshToken: newTokens.refreshToken,\r\n                expiresIn: newTokens.expiresIn,\r\n                tokenType: newTokens.tokenType\r\n            }\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur changement mot de passe:', error)\r\n        res.status(500).json({ \r\n            error: 'Erreur interne du serveur' \r\n        })\r\n    }\r\n}",
          "taille": 8476,
          "lignes": 205,
          "dateModif": "2025-08-30T06:31:09.137Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import bcrypt from 'bcryptjs'\r\nimport { supabase } from '../../../../lib/supabaseClient'\r\nimport { verifyToken, generateTokenPair } from '../../../../lib/jwt'\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    const { currentPassword, newPassword } = req.body\r\n\r\n    // Validation des entrées\r\n    if (!currentPassword || !newPassword) {\r\n        return res.status(400).json({ \r\n            error: 'Mot de passe actuel et nouveau mot de passe requis' \r\n        })\r\n    }\r\n\r\n    if (newPassword.trim().length < 6) {\r\n        return res.status(400).json({ \r\n            error: 'Le nouveau mot de passe doit contenir au moins 6 caractères' \r\n        })\r\n    }\r\n\r\n    // Vérifier le token JWT\r\n    const authHeader = req.headers.authorization\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n        return res.status(401).json({ error: 'Token manquant ou invalide' })\r\n    }\r\n\r\n    const token = authHeader.split(' ')[1]\r\n    const decodedToken = verifyToken(token)\r\n    \r\n    if (!decodedToken) {\r\n        return res.status(401).json({ error: 'Token invalide ou expiré' })\r\n    }\r\n\r\n    try {\r\n        // 1. Récupérer l'utilisateur depuis la table users\r\n        const { data: user, error: userError } = await supabase\r\n            .from('users')\r\n            .select('*')\r\n            .eq('id', decodedToken.id)\r\n            .single()\r\n\r\n        if (userError || !user) {\r\n            return res.status(404).json({ error: 'Utilisateur non trouvé' })\r\n        }\r\n\r\n        // 2. Vérifier le mot de passe actuel\r\n        let currentPasswordValid = false\r\n\r\n        if (user.password_hash && (user.password_hash.startsWith('$2b$') || user.password_hash.startsWith('$2a$') || user.password_hash.startsWith('$2y$'))) {\r\n            // Mot de passe déjà hashé avec bcrypt\r\n            currentPasswordValid = await bcrypt.compare(currentPassword, user.password_hash)\r\n        } else {\r\n            // Première connexion : mot de passe = nom du formateur\r\n            currentPasswordValid = (currentPassword === user.nom)\r\n        }\r\n\r\n        if (!currentPasswordValid) {\r\n            return res.status(400).json({ error: 'Mot de passe actuel incorrect' })\r\n        }\r\n\r\n        // 3. Hasher le nouveau mot de passe\r\n        const saltRounds = 10\r\n        const newPasswordHash = await bcrypt.hash(newPassword, saltRounds)\r\n\r\n        // 4. Mettre à jour le mot de passe dans la table users\r\n        const { error: updateError } = await supabase\r\n            .from('users')\r\n            .update({\r\n                password_hash: newPasswordHash,\r\n                must_change_password: false,\r\n                password_changed_at: new Date().toISOString()\r\n            })\r\n            .eq('id', user.id)\r\n\r\n        if (updateError) {\r\n            console.error('Erreur mise à jour mot de passe:', updateError)\r\n            return res.status(500).json({ error: 'Erreur lors de la mise à jour' })\r\n        }\r\n\r\n        // 5. Générer de nouveaux tokens avec mustChangePassword = false\r\n        const userData = {\r\n            id: user.id,\r\n            formateur_id: user.id,\r\n            username: user.prenom,\r\n            nom: user.nom,\r\n            prenom: user.prenom,\r\n            email: user.email,\r\n            mustChangePassword: false\r\n        }\r\n\r\n        const newTokens = generateTokenPair(userData)\r\n\r\n        // 6. Log de sécurité\r\n        console.log(`[AUTH] Mot de passe changé pour formateur ${user.prenom} ${user.nom} (ID: ${user.id})`)\r\n\r\n        // 7. Retourner la réponse\r\n        res.status(200).json({\r\n            success: true,\r\n            message: 'Mot de passe changé avec succès',\r\n            user: {\r\n                id: user.id,\r\n                username: user.prenom,\r\n                nom: user.nom,\r\n                prenom: user.prenom,\r\n                email: user.email,\r\n                role: 'formateur',\r\n                mustChangePassword: false\r\n            },\r\n            tokens: {\r\n                accessToken: newTokens.accessToken,\r\n                refreshToken: newTokens.refreshToken,\r\n                expiresIn: newTokens.expiresIn,\r\n                tokenType: newTokens.tokenType\r\n            }\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur changement mot de passe:', error)\r\n        res.status(500).json({ \r\n            error: 'Erreur interne du serveur' \r\n        })\r\n    }\r\n}",
          "taille": 4493,
          "lignes": 127,
          "dateModif": "2025-08-28T18:19:16.611Z",
          "erreur": null
        },
        "identique": false,
        "diffTaille": 3983,
        "diffLignes": 78,
        "pourcentageSimilarite": 53,
        "message": "🟠 DIFFERENT - Similarité: 53% (±3983 bytes, ±78 lignes)"
      }
    },
    {
      "fichier": "pages/api/auth/formateur/login.js",
      "resultat": {
        "statut": "DIFFERENT",
        "local": {
          "existe": true,
          "contenu": "import { supabase } from '../../../../lib/supabaseClient'\r\nimport { generateTokenPair } from '../../../../lib/jwt'\r\nimport bcrypt from 'bcryptjs'\r\n\r\n/**\r\n * Normalise un prénom/nom pour créer un email valide\r\n * Supprime accents, cédilles et caractères spéciaux\r\n * José → jose, Martínez → martinez\r\n */\r\nconst normalizeForEmail = (text) => {\r\n    return text\r\n        .toLowerCase()\r\n        .trim()\r\n        .normalize('NFD')                    // Décompose les caractères accentués\r\n        .replace(/[\\u0300-\\u036f]/g, '')    // Supprime les marques diacritiques\r\n        .replace(/[^a-z0-9]/g, '')          // Garde seulement lettres et chiffres\r\n}\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    const { username, password } = req.body\r\n\r\n    if (!username || !password) {\r\n        return res.status(400).json({ \r\n            error: 'Identifiant et mot de passe requis' \r\n        })\r\n    }\r\n\r\n    try {\r\n        console.log(`🔐 [LOGIN-DEBUG] Tentative login username=\"${username}\", password=\"${password}\"`)\r\n        \r\n        // Chercher le formateur par prénom (recherche flexible avec ilike)\r\n        // José tapé par l'utilisateur trouvera José en base\r\n        const { data: formateurs, error: formateurError } = await supabase\r\n            .from('users')\r\n            .select('*')\r\n            .ilike('prenom', `%${username}%`)\r\n            .eq('role', 'formateur')\r\n            .eq('archive', false)\r\n            \r\n        console.log(`🔐 [LOGIN-DEBUG] Requête Supabase - formateurs trouvés: ${formateurs?.length || 0}`)\r\n        formateurs?.forEach((f, i) => {\r\n            console.log(`🔐 [LOGIN-DEBUG] Formateur ${i}: ${f.prenom} ${f.nom}, email: ${f.email}, password_hash: ${f.password_hash ? 'EXISTE' : 'NULL'}`)\r\n        })\r\n\r\n        if (formateurError) {\r\n            return res.status(401).json({ \r\n                error: 'Identifiants incorrects' \r\n            })\r\n        }\r\n\r\n        // Trouver le bon formateur en comparant les prénoms normalisés\r\n        const usernameNormalized = normalizeForEmail(username)\r\n        const formateur = formateurs.find(f => \r\n            normalizeForEmail(f.prenom) === usernameNormalized\r\n        )\r\n\r\n        if (formateurError || !formateur) {\r\n            return res.status(401).json({ \r\n                error: 'Identifiants incorrects' \r\n            })\r\n        }\r\n\r\n        // Vérifier le mot de passe\r\n        let passwordValid = false\r\n        let showEncouragement = false\r\n\r\n        console.log(`🔐 [LOGIN-DEBUG] Vérification mot de passe pour ${formateur.prenom} ${formateur.nom}`)\r\n        console.log(`🔐 [LOGIN-DEBUG] password_hash exists: ${formateur.password_hash ? 'EXISTE' : 'NULL'}`)\r\n\r\n        // Nouvelle logique de vérification\r\n        if (formateur.password_hash) {\r\n            console.log(`🔐 [LOGIN-DEBUG] Utilisation bcrypt`)\r\n            // Si password_hash existe, utiliser uniquement bcrypt\r\n            passwordValid = await bcrypt.compare(password, formateur.password_hash)\r\n            if (!passwordValid) {\r\n                return res.status(401).json({ \r\n                    error: 'Mot de passe incorrect' \r\n                })\r\n            }\r\n        } else {\r\n            console.log(`🔐 [LOGIN-DEBUG] Utilisation fallback nom normalisé`)\r\n            // Fallback : première connexion avec nom (Martínez → martinez)\r\n            const nomNormalized = normalizeForEmail(formateur.nom)\r\n            const passwordNormalized = normalizeForEmail(password)\r\n            \r\n            console.log(`🔐 [LOGIN-DEBUG] Comparaison normalisée:`)\r\n            console.log(`🔐 [LOGIN-DEBUG]   nom \"${formateur.nom}\" → \"${nomNormalized}\"`)\r\n            console.log(`🔐 [LOGIN-DEBUG]   password \"${password}\" → \"${passwordNormalized}\"`)\r\n            console.log(`🔐 [LOGIN-DEBUG]   match: ${passwordNormalized === nomNormalized}`)\r\n            \r\n            if (passwordNormalized !== nomNormalized) {\r\n                return res.status(401).json({ \r\n                    error: 'Mot de passe incorrect' \r\n                })\r\n            }\r\n            passwordValid = true\r\n            showEncouragement = true // Encourager à changer le mot de passe\r\n        }\r\n\r\n        // Générer le token\r\n        const tokens = generateTokenPair({\r\n            id: formateur.id,\r\n            formateur_id: formateur.id,\r\n            username: formateur.prenom,\r\n            nom: formateur.nom,\r\n            prenom: formateur.prenom,\r\n            email: formateur.email\r\n        })\r\n\r\n        const sessionId = `sess_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\r\n\r\n        return res.status(200).json({\r\n            success: true,\r\n            user: {\r\n                id: formateur.id,\r\n                username: formateur.prenom,\r\n                nom: formateur.nom,\r\n                prenom: formateur.prenom,\r\n                email: formateur.email,\r\n                role: 'formateur',\r\n                mustChangePassword: false\r\n            },\r\n            tokens: {\r\n                accessToken: tokens.accessToken,\r\n                refreshToken: tokens.refreshToken,\r\n                expiresIn: tokens.expiresIn,\r\n                tokenType: tokens.tokenType\r\n            },\r\n            sessionId: sessionId,\r\n            showEncouragement: showEncouragement\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur login formateur:', error)\r\n        return res.status(500).json({ \r\n            error: 'Erreur serveur' \r\n        })\r\n    }\r\n}",
          "taille": 5625,
          "lignes": 143,
          "dateModif": "2025-08-30T07:29:35.355Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { supabase } from '../../../../lib/supabaseClient'\r\nimport { generateTokenPair } from '../../../../lib/jwt'\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    const { username, password } = req.body\r\n\r\n    if (!username || !password) {\r\n        return res.status(400).json({ \r\n            error: 'Identifiant et mot de passe requis' \r\n        })\r\n    }\r\n\r\n    try {\r\n        // Chercher le formateur par prénom\r\n        const { data: formateur, error: formateurError } = await supabase\r\n            .from('users')\r\n            .select('*')\r\n            .ilike('prenom', username)\r\n            .eq('role', 'formateur')\r\n            .eq('archive', false)\r\n            .single()\r\n\r\n        if (formateurError || !formateur) {\r\n            return res.status(401).json({ \r\n                error: 'Identifiants incorrects' \r\n            })\r\n        }\r\n\r\n        // Vérifier le mot de passe\r\n        let passwordValid = false\r\n        let showEncouragement = false\r\n\r\n        if (formateur.custom_password) {\r\n            // Utiliser custom_password si défini\r\n            passwordValid = (password === formateur.custom_password)\r\n        } else {\r\n            // Sinon utiliser nom ET afficher encouragement\r\n            passwordValid = (password.toLowerCase() === formateur.nom.toLowerCase())\r\n            showEncouragement = passwordValid // Encouragement si connexion réussie avec nom\r\n        }\r\n\r\n        if (!passwordValid) {\r\n            return res.status(401).json({ \r\n                error: 'Identifiants incorrects' \r\n            })\r\n        }\r\n\r\n        // Générer le token\r\n        const tokens = generateTokenPair({\r\n            id: formateur.id,\r\n            formateur_id: formateur.id,\r\n            username: formateur.prenom,\r\n            nom: formateur.nom,\r\n            prenom: formateur.prenom,\r\n            email: formateur.email\r\n        })\r\n\r\n        const sessionId = `sess_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\r\n\r\n        return res.status(200).json({\r\n            success: true,\r\n            user: {\r\n                id: formateur.id,\r\n                username: formateur.prenom,\r\n                nom: formateur.nom,\r\n                prenom: formateur.prenom,\r\n                email: formateur.email,\r\n                role: 'formateur',\r\n                mustChangePassword: false\r\n            },\r\n            tokens: {\r\n                accessToken: tokens.accessToken,\r\n                refreshToken: tokens.refreshToken,\r\n                expiresIn: tokens.expiresIn,\r\n                tokenType: tokens.tokenType\r\n            },\r\n            sessionId: sessionId,\r\n            showEncouragement: showEncouragement\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur login formateur:', error)\r\n        return res.status(500).json({ \r\n            error: 'Erreur serveur' \r\n        })\r\n    }\r\n}",
          "taille": 2978,
          "lignes": 91,
          "dateModif": "2025-08-28T18:19:16.612Z",
          "erreur": null
        },
        "identique": false,
        "diffTaille": 2647,
        "diffLignes": 52,
        "pourcentageSimilarite": 53,
        "message": "🟠 DIFFERENT - Similarité: 53% (±2647 bytes, ±52 lignes)"
      }
    }
  ],
  "fichiersUniquesLocal": [
    "AUDIT-AUTOMATIQUE-FINAL.md",
    "AUDIT-DIFFERENCES.md",
    "audit-auto.js",
    "audit-exhaustif.js",
    "contexts/FormateurAuthContext - vercel.js",
    "lib/jwt - vercel.js",
    "lib/supabaseAdmin - vercel.js",
    "pages/api/auth/formateur/change-password - local cassé.js",
    "pages/api/auth/formateur/login local cassé.js",
    "pages/api/formateur/update-password - vercel.js",
    "pages/formateur/profil - vercel.js",
    "pages/planning-coordo-BACKUP-20250829-201153.js"
  ],
  "fichiersUniquesVercel": [
    ".claude/settings.local.json",
    "RAPPORT-AUDIT-TECHNIQUE.md",
    "Readme/Audit Supabase. 130825 20h14.md",
    "Readme/CLAUDE ARCHITECTE - Mission planning ACLEF.md",
    "Readme/Messagerie.md",
    "Readme/Polissage formateur.md",
    "Readme/Polissage.md",
    "Readme/READMEv6.md",
    "Readme/READMEv7.md",
    "Readme/READMEv8.md",
    "Readme/audit supabase propre 140825 00h27.md",
    "Readme/conversation.md",
    "Readme/🏆 SYSTÈME AUTO-GÉRÉ 100+ POINTS.md",
    "Readme/👥 CADRE BINÔME PROFESSIONNEL.md",
    "audit-code.md",
    "audit-database.js",
    "audit-database.json",
    "generate-admin-token.js",
    "pages/api/test-deconnexion.js",
    "pages/api/test-verrou-admin.js",
    "pages/debug.js",
    "pages/planning-coordo-BACKUP-20250829-200221.js",
    "pages/planning-coordo-BACKUP-20250829-200913.js",
    "pages/planning-test-v1.js",
    "pages/planning-test-v2.js",
    "pages/planning-test-v3.js",
    "pages/planning-test.js",
    "pages/test-admin-reset.js",
    "pages/test-admin-status.js",
    "pages/test-admin1.js",
    "pages/test-admin2.js",
    "pages/test-deconnexion.js",
    "pages/test-messagerie.js",
    "pages/test-surveillance.js",
    "test-api-create-user.js",
    "test-auth.md",
    "test-create-veronique.js",
    "test-reset-password.js",
    "test-rls-debug.js",
    "test-supabase-admin.js",
    "test-vulnerability-audit.js",
    "validate-corrections.md"
  ],
  "rapportComplet": [
    {
      "fichier": ".claude/settings.local.json",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "{\n  \"permissions\": {\n    \"allow\": [\n      \"Bash(npm run dev:*)\",\n      \"Bash(npm install:*)\",\n      \"Read(/C:\\\\Projet ACLEF\\\\projet-aclef-planning-v8\\\\pages\\\\api\\\\auth\\\\formateur/**)\",\n      \"Read(/C:\\\\Projet ACLEF\\\\projet-aclef-planning-v8\\\\pages\\\\api\\\\auth\\\\formateur/**)\",\n      \"Read(/C:\\\\Projet ACLEF\\\\projet-aclef-planning-v8\\\\pages\\\\api\\\\auth\\\\formateur/**)\",\n      \"Bash(node:*)\"\n    ],\n    \"deny\": [],\n    \"ask\": []\n  }\n}",
          "taille": 430,
          "lignes": 14,
          "dateModif": "2025-08-30T11:02:57.006Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "AUDIT-AUTOMATIQUE-FINAL.md",
      "resultat": {
        "statut": "LOCAL_SEULEMENT",
        "local": {
          "existe": true,
          "contenu": "# 🤖 AUDIT AUTOMATISÉ COMPLET - LOCAL vs VERCEL\r\n\r\n## 📊 RÉSULTATS GLOBAUX\r\n\r\n**22 fichiers critiques audités automatiquement**\r\n\r\n- ✅ **17 fichiers identiques** (77.3%)\r\n- ⚠️ **5 fichiers différents** (22.7%)  \r\n- 🟡 **0 fichier local seulement**\r\n- 🔴 **0 fichier Vercel seulement**\r\n\r\n---\r\n\r\n## ✅ FICHIERS PARFAITEMENT SYNCHRONISÉS (17)\r\n\r\n### API AUTH (4/7)\r\n- ✅ `pages/api/auth/formateur/refresh.js` - 79 lignes\r\n- ✅ `pages/api/auth/formateur/verify.js` - 73 lignes  \r\n- ✅ `pages/api/auth/formateur/logout.js` - 38 lignes\r\n- ✅ `pages/api/formateur/update-password.js` - 49 lignes\r\n- ✅ `pages/api/admin-auth.js` - 68 lignes\r\n\r\n### PAGES PRINCIPALES (2/4)  \r\n- ✅ `pages/formateur/planning-formateur-type.js` - 967 lignes\r\n- ✅ `pages/planning-type-formateurs.js` - 838 lignes\r\n\r\n### CONTEXTS & CONFIG (4/4)\r\n- ✅ `contexts/FormateurAuthContext.js` - 356 lignes\r\n- ✅ `lib/jwt.js` - 130 lignes\r\n- ✅ `lib/supabaseClient.js` - 10 lignes\r\n- ✅ `lib/supabaseAdmin.js` - 17 lignes\r\n\r\n### COMPONENTS (6/7)\r\n- ✅ `components/withAuthAdmin.js` - 378 lignes\r\n- ✅ `components/withAuthFormateur.js` - 109 lignes\r\n- ✅ `components/MessagerieDashboard.js` - 1057 lignes\r\n- ✅ `components/MessagerieSafeWrapper.js` - 261 lignes\r\n- ✅ `components/assistance/Absence.jsx` - 975 lignes  \r\n- ✅ `components/assistance/MonPlanningHebdo.jsx` - 746 lignes\r\n\r\n---\r\n\r\n## ⚠️ FICHIERS AVEC DIFFÉRENCES (5)\r\n\r\n### 1. `pages/api/auth/formateur/login.js` \r\n**📏 Différence :** ±2647 bytes, ±52 lignes\r\n- **Local :** 143 lignes (5625 bytes) - VERSION ÉTENDUE\r\n- **Vercel :** 91 lignes (2978 bytes) - VERSION BASIQUE\r\n- **Impact :** Version locale probablement plus robuste avec fonctionnalités supplémentaires\r\n\r\n### 2. `pages/api/auth/formateur/change-password.js`\r\n**📏 Différence :** ±3983 bytes, ±78 lignes  \r\n- **Local :** 205 lignes (8476 bytes) - VERSION COMPLÈTE\r\n- **Vercel :** 127 lignes (4493 bytes) - VERSION SIMPLIFIÉE\r\n- **Impact :** Version locale avec plus de validations et protections\r\n\r\n### 3. `pages/planning-coordo.js` 🎯 FICHIER PRINCIPAL\r\n**📏 Différence :** ±10110 bytes, ±238 lignes\r\n- **Local :** 2123 lignes (100417 bytes) - VERSION AVANCÉE\r\n- **Vercel :** 1885 lignes (90307 bytes) - VERSION DE BASE\r\n- **Impact :** Version locale probablement avec fonctionnalités CSS print améliorées (comme identifié précédemment)\r\n\r\n### 4. `pages/index.js` 🏠 PAGE D'ACCUEIL  \r\n**📏 Différence :** ±4537 bytes, ±122 lignes\r\n- **Local :** 778 lignes (27063 bytes) - VERSION ENRICHIE\r\n- **Vercel :** 656 lignes (22526 bytes) - VERSION STANDARD\r\n- **Impact :** Version locale avec fonctionnalités additionnelles sur la page d'accueil\r\n\r\n### 5. `components/MenuApprenants.js`\r\n**📏 Différence :** ±992 bytes, ±30 lignes\r\n- **Local :** 310 lignes (11000 bytes) - VERSION AVEC PROTECTIONS\r\n- **Vercel :** 340 lignes (11992 bytes) - VERSION BASIQUE\r\n- **Impact :** Version locale avec circuit breaker et cache (comme identifié précédemment)\r\n\r\n---\r\n\r\n## 🎯 ANALYSE COMPARATIVE vs AUDIT MANUEL\r\n\r\n### ✅ CONCORDANCE PARFAITE  \r\nL'audit automatique **confirme** notre audit manuel :\r\n- **refresh.js & verify.js** : Maintenant identiques ✅ (différences résolues)\r\n- **FormateurAuthContext.js** : Maintenant identique ✅ (debug logs supprimés)\r\n- **MenuApprenants.js** : Différence confirmée (protections locales)\r\n\r\n### 🔍 NOUVELLES DÉCOUVERTES\r\nL'audit automatique révèle **3 nouveaux fichiers différents** :\r\n1. `login.js` - Version locale plus robuste  \r\n2. `change-password.js` - Version locale plus sécurisée\r\n3. `index.js` - Version locale enrichie\r\n\r\n### 📈 AMÉLIORATION DU TAUX\r\n- **Audit manuel :** 81% de synchronisation\r\n- **Audit automatique :** 77.3% de synchronisation  \r\n- **Différence :** L'audit automatique est plus précis en détectant 3 fichiers supplémentaires\r\n\r\n---\r\n\r\n## 🚀 RECOMMANDATIONS FINALES\r\n\r\n### PRIORITÉ 1 - GARDER LES VERSIONS LOCALES\r\nToutes les versions locales semblent **plus avancées** que Vercel :\r\n- ✅ `planning-coordo.js` - CSS print optimisé\r\n- ✅ `MenuApprenants.js` - Protections circuit breaker  \r\n- ✅ `login.js` - Fonctionnalités étendues\r\n- ✅ `change-password.js` - Sécurité renforcée\r\n- ✅ `index.js` - Interface enrichie\r\n\r\n### PRIORITÉ 2 - TESTS DE VALIDATION\r\nTester chaque fichier différent pour s'assurer qu'il fonctionne correctement :\r\n1. Login formateur\r\n2. Changement mot de passe  \r\n3. Page d'accueil admin\r\n4. Planning coordo (impression)\r\n5. Menu apprenants\r\n\r\n### PRIORITÉ 3 - DÉPLOIEMENT CONFIANT\r\nAvec 77.3% de synchronisation et des versions locales améliorées, le déploiement peut se faire **en toute confiance**.\r\n\r\n---\r\n\r\n**✨ L'audit automatique confirme : la version locale est PRÊTE pour le déploiement !**",
          "taille": 4805,
          "lignes": 121,
          "dateModif": "2025-08-30T08:26:16.261Z",
          "erreur": null
        },
        "vercel": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🟡 Fichier existe seulement en local"
      }
    },
    {
      "fichier": "AUDIT-DIFFERENCES.md",
      "resultat": {
        "statut": "LOCAL_SEULEMENT",
        "local": {
          "existe": true,
          "contenu": "# 🔍 AUDIT LOCAL vs VERCEL - DIFFÉRENCES DÉTECTÉES\r\n\r\n## 📊 STATUT AUDIT (mis à jour en temps réel)\r\n\r\n### ✅ FICHIERS SYNCHRONISÉS / VERSIONS LOCALES MEILLEURES\r\n1. `/pages/api/auth/formateur/change-password.js` - **IDENTIQUE**\r\n2. `/pages/api/auth/formateur/login.js` - **IDENTIQUE**  \r\n3. `/pages/api/auth/formateur/logout.js` - **IDENTIQUE**\r\n4. `/pages/api/formateur/update-password.js` - **IDENTIQUE**\r\n5. `/pages/api/admin-auth.js` - **IDENTIQUE**\r\n6. `/pages/api/auto-cleanup.js` - **IDENTIQUE**\r\n7. `/pages/planning-coordo.js` - **VERSION LOCALE AMÉLIORÉE** (CSS print optimisé)\r\n8. `/pages/formateur/planning-formateur-type.js` - **IDENTIQUE**\r\n\r\n### ⚠️ FICHIERS AVEC DIFFÉRENCES\r\n\r\n#### 3. `/pages/api/auth/formateur/refresh.js` - **DIFFÉRENCE TROUVÉE**\r\n\r\n**LIGNE 69 - Logique mustChangePassword :**\r\n\r\n**Version Vercel (qui marche) :**\r\n```javascript\r\nmustChangePassword: false  // Plus de forcing automatique - changement optionnel uniquement\r\n```\r\n\r\n**Version Locale (actuelle) :**\r\n```javascript\r\nmustChangePassword: user.must_change_password === true || !(user.password_hash?.startsWith('$2b$') || user.password_hash?.startsWith('$2a$') || user.password_hash?.startsWith('$2y$'))\r\n```\r\n\r\n**Impact potentiel :** La version locale peut forcer inutilement le changement de mot de passe\r\n\r\n**Recommandation :** Adopter la version Vercel simplifiée\r\n\r\n#### 4. `/pages/api/auth/formateur/verify.js` - **DIFFÉRENCE TROUVÉE**\r\n\r\n**LIGNE 57 - Logique mustChangePassword (MÊME PROBLÈME) :**\r\n\r\n**Version Vercel (qui marche) :**\r\n```javascript\r\nmustChangePassword: false  // Plus de forcing automatique - changement optionnel uniquement\r\n```\r\n\r\n**Version Locale (actuelle) :**\r\n```javascript\r\nmustChangePassword: formateur.must_change_password === true || !(formateur.password_hash?.startsWith('$2b$') || formateur.password_hash?.startsWith('$2a$') || formateur.password_hash?.startsWith('$2y$'))\r\n```\r\n\r\n**Impact potentiel :** Même problème que refresh.js - forcing inutile du changement de mot de passe\r\n\r\n**Recommandation :** Adopter la version Vercel simplifiée\r\n\r\n#### 5. `/pages/planning-coordo.js` - **✅ VERSION LOCALE PLUS AVANCÉE**\r\n\r\n**CORRECTION - J'AVAIS TORT :**\r\n\r\n**Version Vercel (fournie par vous) :** \r\n- Fichier complexe avec logique ROI (écoute ordres)\r\n- Fonctions avancées (ROI, absences, planning types)  \r\n- CSS @media print basique (skeleton uniquement)\r\n- ~2000+ lignes de code\r\n\r\n**Version Locale (actuelle) :** \r\n- **MÊME fichier complexe avec logique ROI** ✅\r\n- **MÊME fonctionnalités avancées** ✅\r\n- **CSS @media print AMÉLIORÉ** (optimisé pour impression A4) ✅\r\n- **2122 lignes de code** ✅\r\n\r\n**Verdict :** La version locale est **IDENTIQUE + CSS print optimisé** ! \r\n\r\n**Recommandation :** **GARDER la version locale** qui a les améliorations d'impression en plus\r\n\r\n#### 6. `/pages/formateur/planning-formateur-type.js` - **✅ VERSION LOCALE IDENTIQUE**\r\n\r\n**COMPARAISON :**\r\n\r\n**Version Vercel (fournie par vous) :** \r\n- Interface complète planning type\r\n- Modal message facultatif\r\n- Fonction `envoyerMessageAdmin`\r\n- Gestion \"Sans Préférence\" (SP)\r\n- ~966 lignes de code\r\n\r\n**Version Locale (actuelle) :** \r\n- **EXACTEMENT identique** ✅\r\n- Mêmes fonctionnalités\r\n- Même interface\r\n- Même logique métier\r\n- **966 lignes de code** ✅\r\n\r\n**Verdict :** Les deux versions sont **PARFAITEMENT identiques** !\r\n\r\n**Recommandation :** Aucune action nécessaire\r\n\r\n#### 7. `/pages/planning-type-formateurs.js` - **✅ VERSION LOCALE IDENTIQUE**\r\n\r\n**COMPARAISON :**\r\n\r\n**Version Vercel (fournie par vous) :** \r\n- Interface admin validation planning formateurs\r\n- Fonction `envoyerMessageFormateur` automatique\r\n- Gestion validation granulaire par créneau\r\n- Statuts avec légende visuelle\r\n- Système \"Sans Préférence\" (SP)\r\n- ~838 lignes de code\r\n\r\n**Version Locale (actuelle) :** \r\n- **EXACTEMENT identique** ✅\r\n- Même interface de validation admin\r\n- Même fonction d'envoi de message\r\n- Même gestion validation/statuts\r\n- Même logique métier et affichage\r\n- **838 lignes de code** ✅\r\n\r\n**Verdict :** Les deux versions sont **PARFAITEMENT identiques** !\r\n\r\n**Recommandation :** Aucune action nécessaire\r\n\r\n#### 8. `/contexts/FormateurAuthContext.js` - **⚠️ DIFFÉRENCE TROUVÉE**\r\n\r\n**LIGNE 179-185 - Fonction changePassword :**\r\n\r\n**Version Vercel (fournie par vous) :**\r\n```javascript\r\nconst changePassword = async (currentPassword, newPassword) => {\r\n    try {\r\n        console.log('🔐 [CHANGE-PASSWORD] Début changement mot de passe')\r\n        const token = localStorage.getItem('formateur_token')\r\n        console.log('🔐 [CHANGE-PASSWORD] Token récupéré:', token ? 'EXISTE' : 'MANQUANT')\r\n        \r\n        console.log('🔐 [CHANGE-PASSWORD] Appel API /api/auth/formateur/change-password')\r\n        const response = await fetch('/api/auth/formateur/change-password', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify({ currentPassword, newPassword })\r\n        })\r\n\r\n        console.log('🔐 [CHANGE-PASSWORD] Réponse API status:', response.status, response.statusText)\r\n        const data = await response.json()\r\n        console.log('🔐 [CHANGE-PASSWORD] Données API:', data)\r\n\r\n        if (!response.ok) {\r\n            console.error('🔐 [CHANGE-PASSWORD] Erreur API:', data.error)\r\n            throw new Error(data.error || 'Erreur lors du changement')\r\n        }\r\n        // ... reste identique\r\n```\r\n\r\n**Version Locale (actuelle) :**\r\n```javascript\r\nconst changePassword = async (currentPassword, newPassword) => {\r\n    try {\r\n        const token = localStorage.getItem('formateur_token')\r\n        \r\n        const response = await fetch('/api/auth/formateur/change-password', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify({ currentPassword, newPassword })\r\n        })\r\n\r\n        const data = await response.json()\r\n\r\n        if (!response.ok) {\r\n            throw new Error(data.error || 'Erreur lors du changement')\r\n        }\r\n        // ... reste identique\r\n```\r\n\r\n**Impact potentiel :** La version Vercel a des logs de debug détaillés pour le changement de mot de passe qui aident au diagnostic. La version locale est plus \"propre\" mais moins informative pour le debug.\r\n\r\n**Recommandation :** **GARDER la version locale** (plus propre) ou adopter partiellement les logs Vercel uniquement en développement.\r\n\r\n#### 9. `/lib/jwt.js` - **✅ VERSION LOCALE IDENTIQUE**\r\n\r\n**COMPARAISON :**\r\n\r\n**Version Vercel (fournie par vous) :**\r\n- Système JWT complet pour formateurs\r\n- Fonctions generateAccessToken/generateRefreshToken\r\n- Vérification tokens avec issuer/audience\r\n- Fonction extractTokenFromHeader\r\n- Génération paire de tokens\r\n- ~130 lignes de code\r\n\r\n**Version Locale (actuelle) :**\r\n- **EXACTEMENT identique** ✅\r\n- Même système JWT complet\r\n- Mêmes fonctions et logique\r\n- Même configuration secrets/durées\r\n- Même structure et commentaires\r\n- **130 lignes de code** ✅\r\n\r\n**Verdict :** Les deux versions sont **PARFAITEMENT identiques** !\r\n\r\n**Recommandation :** Aucune action nécessaire\r\n\r\n#### 10. `/lib/supabaseAdmin.js` - **✅ VERSION LOCALE IDENTIQUE**\r\n\r\n**COMPARAISON :**\r\n\r\n**Version Vercel (fournie par vous) :**\r\n- Client Supabase administrateur avec service_role_key\r\n- Validation variables d'environnement\r\n- Configuration auth (autoRefreshToken/persistSession = false)\r\n- Commentaires explicatifs sur bypass RLS\r\n- ~17 lignes de code\r\n\r\n**Version Locale (actuelle) :**\r\n- **EXACTEMENT identique** ✅\r\n- Même configuration admin Supabase\r\n- Même validation env variables\r\n- Même paramètres auth\r\n- Mêmes commentaires\r\n- **17 lignes de code** ✅\r\n\r\n**Verdict :** Les deux versions sont **PARFAITEMENT identiques** !\r\n\r\n**Recommandation :** Aucune action nécessaire\r\n\r\n#### 11. `/components/MenuApprenants.js` - **⚠️ DIFFÉRENCE TROUVÉE**\r\n\r\n**LIGNES 26-33, 154-202 - Protections système :**\r\n\r\n**Version Vercel (fournie par vous) :**\r\n```javascript\r\n// Version basique sans protections système\r\nexport default function MenuApprenants({...}) {\r\n  const [apprenantsDisponibles, setApprenantsDisponibles] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  // ... useEffect simple sans protection\r\n```\r\n\r\n**Version Locale (actuelle) :**\r\n```javascript\r\n// Version avec protections avancées\r\nexport default function MenuApprenants({...}) {\r\n  const [apprenantsDisponibles, setApprenantsDisponibles] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  \r\n  // 🚨 CIRCUIT BREAKER - Protection contre boucle infinie\r\n  const [requestCount, setRequestCount] = useState(0);\r\n  const MAX_REQUESTS_PER_MINUTE = 10;\r\n  const [lastRequestTime, setLastRequestTime] = useState(Date.now());\r\n  \r\n  // 🚀 CACHE - Éviter requêtes répétitives\r\n  const [cache] = useState(() => new Map());\r\n  \r\n  // ... useEffect avec circuit breaker et cache\r\n```\r\n\r\n**Version Vercel :** Styles CSS print avec `jsx` intégré\r\n**Version Locale :** Pas de styles CSS print, gestion différente de l'impression\r\n\r\n**Impact potentiel :** La version locale a des protections cruciales contre les surcharges (circuit breaker + cache) mais manque les styles d'impression. La version Vercel est plus simple mais moins robuste.\r\n\r\n**Recommandation :** **GARDER la version locale** (protections essentielles) et optionnellement ajouter les styles CSS print de Vercel si nécessaire.\r\n\r\n#### 12. `/components/MessagerieDashboard.js` - **✅ VERSION LOCALE IDENTIQUE**\r\n\r\n**COMPARAISON :**\r\n\r\n**Version Vercel (fournie par vous) :**\r\n- Interface messagerie admin complète\r\n- Filtres par catégorie et formateur\r\n- Validation planning type et modifications ponctuelles\r\n- Système archivage et statuts\r\n- Boutons d'actions contextuels\r\n- ~1057 lignes de code\r\n\r\n**Version Locale (actuelle) :**\r\n- **EXACTEMENT identique** ✅\r\n- Même interface messagerie complète\r\n- Mêmes filtres et validations\r\n- Même gestion statuts/archivage\r\n- Même logique métier\r\n- **1057 lignes de code** ✅\r\n\r\n**Verdict :** Les deux versions sont **PARFAITEMENT identiques** !\r\n\r\n**Recommandation :** Aucune action nécessaire\r\n\r\n#### 13. `/components/MessagerieSafeWrapper.js` - **✅ VERSION LOCALE IDENTIQUE**\r\n\r\n**COMPARAISON :**\r\n\r\n**Version Vercel (fournie par vous) :**\r\n- Wrapper sécurisé pour MessagerieDashboard\r\n- Tests connectivité Supabase automatiques\r\n- Fallback maintenance en cas d'erreur\r\n- Import dynamique sécurisé\r\n- Interface diagnostic complète\r\n- ~261 lignes de code\r\n\r\n**Version Locale (actuelle) :**\r\n- **EXACTEMENT identique** ✅\r\n- Même système de tests sécurisés\r\n- Même fallback et gestion d'erreurs\r\n- Même logique d'import dynamique\r\n- Même interface utilisateur\r\n- **261 lignes de code** ✅\r\n\r\n**Verdict :** Les deux versions sont **PARFAITEMENT identiques** !\r\n\r\n**Recommandation :** Aucune action nécessaire\r\n\r\n#### 14. `/components/withAuthAdmin.js` - **✅ VERSION LOCALE IDENTIQUE**\r\n\r\n**COMPARAISON :**\r\n\r\n**Version Vercel (fournie par vous) :**\r\n- HOC protection admin universel\r\n- Système déconnexion urgence (SendBeacon/XHR)\r\n- Gestion session Table d'Émeraude\r\n- Heartbeat intelligent sur activité\r\n- Auto-expulsion inactivité (5 min)\r\n- Protection fermeture vs refresh\r\n- ~378 lignes de code\r\n\r\n**Version Locale (actuelle) :**\r\n- **EXACTEMENT identique** ✅\r\n- Même HOC et protections admin\r\n- Même déconnexion urgence avancée  \r\n- Même gestion sessions Supabase\r\n- Même surveillance d'activité\r\n- Même logique métier complète\r\n- **378 lignes de code** ✅\r\n\r\n**Verdict :** Les deux versions sont **PARFAITEMENT identiques** !\r\n\r\n**Recommandation :** Aucune action nécessaire\r\n\r\n#### 15. `/components/withAuthFormateur.js` - **✅ VERSION LOCALE IDENTIQUE**\r\n\r\n**COMPARAISON :**\r\n\r\n**Version Vercel (fournie par vous) :**\r\n- HOC protection formateur avec options\r\n- Gestion authentification JWT formateur\r\n- Redirections conditionnelles intelligentes\r\n- Gestion changement mot de passe obligatoire\r\n- États de chargement et erreur personnalisés\r\n- Intégration FormateurAuthContext\r\n- ~109 lignes de code\r\n\r\n**Version Locale (actuelle) :**\r\n- **EXACTEMENT identique** ✅\r\n- Même HOC et options de protection\r\n- Même gestion auth formateur complète\r\n- Mêmes redirections et conditions\r\n- Même logique changement mot de passe\r\n- Même interface utilisateur\r\n- **109 lignes de code** ✅\r\n\r\n**Verdict :** Les deux versions sont **PARFAITEMENT identiques** !\r\n\r\n**Recommandation :** Aucune action nécessaire\r\n\r\n#### 16. `/components/assistance/Absence.jsx` - **✅ VERSION LOCALE IDENTIQUE**\r\n\r\n**COMPARAISON :**\r\n\r\n**Version Vercel (fournie par vous) :**\r\n- Composant de gestion des absences formateurs\r\n- Interface calendrier mensuel intelligent (5 jours ouvrés)\r\n- Modes sélection (absent/dispo exceptionnelle)\r\n- Historique et annulation d'actions\r\n- Modal message facultatif pour formateurs\r\n- Intégration planning type validé\r\n- Sauvegarde BDD avec envoi message automatique\r\n- ~975 lignes de code\r\n\r\n**Version Locale (actuelle) :**\r\n- **EXACTEMENT identique** ✅\r\n- Même composant de gestion absences\r\n- Même interface calendrier avancée\r\n- Même logique de modes et historique\r\n- Même modal et messaging system\r\n- Même intégration planning et BDD\r\n- **975 lignes de code** ✅\r\n\r\n**Verdict :** Les deux versions sont **PARFAITEMENT identiques** !\r\n\r\n**Recommandation :** Aucune action nécessaire\r\n\r\n#### 17. `/components/assistance/MonPlanningHebdo.jsx` - **✅ VERSION LOCALE IDENTIQUE**\r\n\r\n**COMPARAISON :**\r\n\r\n**Version Vercel (fournie par vous) :**\r\n- Composant planning hebdomadaire formateur sophistiqué\r\n- Arbitrage de planning avec 4 niveaux de priorité :\r\n  1. Disponibilité exceptionnelle validée (PRIORITÉ ABSOLUE)\r\n  2. Absence validée (INDISPONIBLE) \r\n  3. Planning coordo (AFFECTÉ)\r\n  4. Planning type normal (DISPONIBLE NON CHOISI)\r\n- Navigation semaines avec contrôles (←/→)\r\n- Interface grille avec couleurs métier professionnelles\r\n- Gestion états : EXCEPT/TRAVAILLE/ABSENT/DISPONIBLE\r\n- Détails interventions dans colonne droite\r\n- Intégration complète Supabase (lieux, absences, planning)\r\n- ~746 lignes de code\r\n\r\n**Version Locale (actuelle) :**\r\n- **EXACTEMENT identique** ✅\r\n- Même système d'arbitrage de planning professionnel\r\n- Même logique de priorités et statuts\r\n- Même interface de navigation semaines\r\n- Même grille avec codes couleurs métier\r\n- Même gestion des états et affichages\r\n- Même intégration base de données\r\n- **746 lignes de code** ✅\r\n\r\n**Verdict :** Les deux versions sont **PARFAITEMENT identiques** !\r\n\r\n**Recommandation :** Aucune action nécessaire\r\n\r\n---\r\n\r\n## 📋 FICHIERS À AUDITER (restants)\r\n\r\n### 🔄 EN COURS\r\n- [ ] `/pages/api/auth/formateur/refresh.js` - ⚠️ DIFFÉRENCE TROUVÉE\r\n- [ ] `/pages/api/auth/formateur/verify.js` - ⚠️ DIFFÉRENCE TROUVÉE\r\n- [x] `/contexts/FormateurAuthContext.js` - ⚠️ DIFFÉRENCE TROUVÉE\r\n- [x] `/components/MenuApprenants.js` - ⚠️ DIFFÉRENCE TROUVÉE\r\n- [x] `/pages/api/auth/formateur/logout.js` - ✅ SYNC\r\n- [x] `/pages/api/formateur/update-password.js` - ✅ SYNC\r\n- [x] `/pages/api/admin-auth.js` - ✅ SYNC\r\n- [x] `/pages/api/auto-cleanup.js` - ✅ SYNC\r\n\r\n### 📄 PAGES PRINCIPALES\r\n- [x] `/pages/planning-coordo.js` - ✅ VERSION LOCALE MEILLEURE\r\n- [x] `/pages/formateur/planning-formateur-type.js` - ✅ IDENTIQUE\r\n- [x] `/pages/planning-type-formateurs.js` - ✅ IDENTIQUE\r\n\r\n### 🔧 CONFIGURATIONS\r\n- [x] `/contexts/FormateurAuthContext.js` - **⚠️ DIFFÉRENCE TROUVÉE**\r\n- [x] `/lib/jwt.js` - ✅ IDENTIQUE\r\n- [x] `/lib/supabaseAdmin.js` - ✅ IDENTIQUE\r\n\r\n### 🧩 COMPOSANTS\r\n- [x] `/components/MenuApprenants.js` - **⚠️ DIFFÉRENCE TROUVÉE**\r\n- [x] `/components/MessagerieDashboard.js` - ✅ IDENTIQUE\r\n- [x] `/components/MessagerieSafeWrapper.js` - ✅ IDENTIQUE\r\n- [x] `/components/withAuthAdmin.js` - ✅ IDENTIQUE\r\n- [x] `/components/withAuthFormateur.js` - ✅ IDENTIQUE\r\n- [x] `/components/assistance/Absence.jsx` - ✅ IDENTIQUE\r\n- [x] `/components/assistance/MonPlanningHebdo.jsx` - ✅ IDENTIQUE\r\n\r\n---\r\n\r\n## 📈 STATISTIQUES AUDIT - 🎉 COMPLET !\r\n- **Total fichiers auditées :** 21/∞ ✅ (+ 6 fichiers supplémentaires)\r\n- **Fichiers synchronisés/meilleures :** 17\r\n- **Différences trouvées :** 4\r\n- **Corrections à appliquer :** 2 prioritaires (refresh.js, verify.js) + 2 optionnelles (FormateurAuthContext.js, MenuApprenants.js)\r\n\r\n---\r\n\r\n## 🎯 ACTIONS À PLANIFIER (post-audit)\r\n\r\n### CORRECTIONS PRIORITAIRES\r\n1. **refresh.js** - Simplifier logique mustChangePassword\r\n\r\n### CORRECTIONS OPTIONNELLES\r\n_(À compléter selon résultats audit)_\r\n\r\n---\r\n\r\n**Dernière mise à jour :** $(date)",
          "taille": 17072,
          "lignes": 478,
          "dateModif": "2025-08-30T08:18:06.942Z",
          "erreur": null
        },
        "vercel": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🟡 Fichier existe seulement en local"
      }
    },
    {
      "fichier": "RAPPORT-AUDIT-TECHNIQUE.md",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "# 📊 RAPPORT AUDIT TECHNIQUE ACLEF PLANNING\r\n\r\n**Date**: 26 Août 2025  \r\n**Durée**: 45 minutes  \r\n**Objectif**: Analyse architecture avant développement module apprenants  \r\n**Status**: ✅ TERMINÉ\r\n\r\n---\r\n\r\n## 🎯 SYNTHÈSE EXÉCUTIVE\r\n\r\nL'audit révèle une **architecture solide** avec une base de données bien structurée. Le module apprenants existant nécessite des **extensions ciblées** pour devenir pleinement fonctionnel. **Risque technique faible**, développement estimé **2-3 jours**.\r\n\r\n### 📈 Indicateurs Clés\r\n- **8 tables** analysées avec succès  \r\n- **15 apprenants** déjà en base\r\n- **6 colonnes manquantes** identifiées\r\n- **Code existant** fonctionnel à 70%\r\n\r\n---\r\n\r\n## 📊 ÉTAT DES LIEUX BASE DE DONNÉES\r\n\r\n### ✅ Tables Existantes Opérationnelles\r\n| Table | Enregistrements | Colonnes | Status |\r\n|-------|------------------|----------|---------|\r\n| **users** | 15 | 16 | ✅ Opérationnel |\r\n| **lieux** | 4 | 6 | ✅ Opérationnel |\r\n| **planning_hebdomadaire** | 339 | 11 | ✅ Opérationnel |\r\n| **planning_type_formateurs** | 90 | 11 | ✅ Opérationnel |\r\n| **absences_formateurs** | 28 | 8 | ✅ Opérationnel |\r\n| **planning_formateurs_hebdo** | 118 | 8 | ✅ Opérationnel |\r\n| **messages** | 79 | 15 | ✅ Opérationnel |\r\n| **admin_sessions** | 154 | 8 | ✅ Opérationnel |\r\n\r\n### 📋 Structure Table USERS (Focus Apprenants)\r\n**✅ Colonnes Existantes:**\r\n```\r\nid, prenom, nom, role, email, dispositif, initiales, \r\ndate_debut, date_fin, archive, created_at, password_hash,\r\nmust_change_password, password_changed_at, last_login, custom_password\r\n```\r\n\r\n**❌ Colonnes Manquantes pour Module Complet:**\r\n- `date_entree_formation` - Date début formation\r\n- `date_sortie_previsionnelle` - Date fin prévue  \r\n- `date_fin_formation_reelle` - Date fin réelle\r\n- `lieu_formation_id` - Lieu de formation (FK)\r\n- `statut_formation` - Statut (en_cours/terminé/suspendu)\r\n- `date_suspension`, `motif_suspension`, `date_reprise_prevue`\r\n\r\n---\r\n\r\n## 💾 ANALYSE CODE EXISTANT\r\n\r\n### 📄 Fichier: `gestion-apprenants.js`\r\n\r\n**✅ Points Forts:**\r\n- Architecture React hooks moderne\r\n- CRUD de base fonctionnel\r\n- Interface responsive avec filtres\r\n- Gestion erreurs présente\r\n- Code structuré et maintenable\r\n\r\n**✅ Fonctionnalités Implémentées:**\r\n- ✅ Ajout/modification/suppression apprenants\r\n- ✅ Filtres par statut (actif/archivé) et dispositif (HSP/OPCO)  \r\n- ✅ Validation champs obligatoires\r\n- ✅ Interface utilisateur soignée\r\n- ✅ Messages de feedback\r\n\r\n**❌ Fonctionnalités Manquantes:**\r\n- ❌ Gestion dates de formation\r\n- ❌ Attribution lieu de formation\r\n- ❌ Suivi statut formation\r\n- ❌ Module suspensions/reprises\r\n- ❌ Alertes dates d'échéance\r\n- ❌ Export des données\r\n- ❌ Historique modifications\r\n\r\n---\r\n\r\n## 🚀 PLAN DE MIGRATION\r\n\r\n### 📁 Livrables Produits\r\n1. **`audit-database.json`** - Structure complète BDD  \r\n2. **`audit-code.md`** - Analyse détaillée code\r\n3. **`migration-plan.sql`** - Script migration sécurisé\r\n4. **`RAPPORT-AUDIT-TECHNIQUE.md`** - Présent document\r\n\r\n### 🔧 Migration Base de Données\r\n**Script SQL fourni** avec:\r\n- ✅ Ajout 8 colonnes manquantes\r\n- ✅ Contraintes FK et CHECK  \r\n- ✅ Index de performance\r\n- ✅ Vues utilitaires (`apprenants_actifs`, `apprenants_alertes`)\r\n- ✅ Table historique suspensions\r\n- ✅ Script de rollback sécurisé\r\n\r\n### 🎨 Évolutions Interface\r\n**Ajouts requis:**\r\n- Sélecteurs de dates (entrée/sortie formation)\r\n- Dropdown sélection lieu de formation\r\n- Radio buttons statut formation\r\n- Module spécialisé suspensions\r\n- Tableau enrichi avec nouvelles colonnes\r\n- Filtres avancés par lieu/statut/dates\r\n\r\n---\r\n\r\n## ⚠️ ANALYSE DE RISQUES\r\n\r\n### 🔴 Risques Élevés - SURVEILLANCE REQUISE\r\n1. **Migration données sur table users peuplée** (15 enregistrements)\r\n   - *Mitigation*: Script testé + backup obligatoire\r\n2. **Contraintes FK lieu_formation_id**\r\n   - *Mitigation*: ON DELETE SET NULL + validation\r\n\r\n### 🟡 Risques Moyens - ATTENTION\r\n1. **Complexité interface formulaire** \r\n   - *Mitigation*: Développement progressif par phases\r\n2. **Performance requêtes avec jointures**\r\n   - *Mitigation*: Index optimisés fournis\r\n\r\n### 🟢 Risques Faibles\r\n1. **Adaptation CSS responsive**\r\n2. **Messages utilisateur**\r\n3. **Tests non-régression**\r\n\r\n---\r\n\r\n## 📋 ROADMAP DÉVELOPPEMENT\r\n\r\n### 🎯 Phase 1 (Jour 1) - FONDATIONS\r\n- ✅ Exécution migration SQL\r\n- ✅ Adaptation formulaire dates basiques\r\n- ✅ Tests migration données\r\n\r\n### 🎯 Phase 2 (Jour 2) - ENRICHISSEMENT  \r\n- ✅ Sélecteur lieu formation\r\n- ✅ Gestion statuts formation\r\n- ✅ Tableau enrichi avec nouvelles colonnes\r\n\r\n### 🎯 Phase 3 (Jour 3) - FINALISATION\r\n- ✅ Module suspensions avancé\r\n- ✅ Alertes dates d'échéance  \r\n- ✅ Export CSV/Excel\r\n- ✅ Tests utilisateur complets\r\n\r\n---\r\n\r\n## 🏆 RECOMMANDATIONS STRATÉGIQUES\r\n\r\n### ✅ Actions Immédiates\r\n1. **BACKUP complet** avant migration\r\n2. **Tests migration** sur environnement de dev\r\n3. **Validation utilisateur** du workflow suspension\r\n\r\n### 🎯 Optimisations Futures\r\n1. **Notifications automatiques** dates échéance\r\n2. **Dashboard statistiques** parcours formation\r\n3. **Intégration planning** formateurs-apprenants\r\n4. **Module évaluations** fin formation\r\n\r\n### 🔒 Sécurité et Performance\r\n1. **RLS policies** spécifiques apprenants\r\n2. **Index de performance** optimisés\r\n3. **Audit trail** modifications sensibles\r\n4. **Cache requêtes** fréquentes\r\n\r\n---\r\n\r\n## 📊 CONCLUSION\r\n\r\n**✅ FAISABILITÉ**: Projet techniquement viable avec risques maîtrisés\r\n\r\n**💰 EFFORT**: 2-3 jours développeur expérimenté\r\n\r\n**🎯 IMPACT**: Transformation d'un CRUD basique en module de gestion complet\r\n\r\n**🚀 BÉNÉFICES**:\r\n- Suivi précis parcours formation\r\n- Alertes proactives  \r\n- Meilleure gestion suspensions\r\n- Reporting enrichi\r\n- Interface moderne et intuitive\r\n\r\nLe projet peut débuter **immédiatement** avec les livrables fournis. Architecture solide, roadmap claire, risques identifiés et maîtrisés.\r\n\r\n---\r\n\r\n**🎯 Prêt pour le développement du module apprenants ACLEF Planning v8.1**",
          "taille": 6191,
          "lignes": 192,
          "dateModif": "2025-08-26T22:43:11.291Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "Readme/Audit Supabase. 130825 20h14.md",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "1\r\n\r\n| table_name                | column_name     | data_type                   | is_nullable | column_default                                       |\r\n| ------------------------- | --------------- | --------------------------- | ----------- | ---------------------------------------------------- |\r\n| planning_formateurs_hebdo | id              | uuid                        | NO          | gen_random_uuid()                                    |\r\n| planning_formateurs_hebdo | formateur_id    | uuid                        | YES         | null                                                 |\r\n| planning_formateurs_hebdo | date            | date                        | NO          | null                                                 |\r\n| planning_formateurs_hebdo | moment          | text                        | NO          | null                                                 |\r\n| planning_formateurs_hebdo | lieu_nom        | text                        | YES         | null                                                 |\r\n| planning_formateurs_hebdo | lieu_initiales  | text                        | YES         | null                                                 |\r\n| planning_formateurs_hebdo | statut          | text                        | YES         | 'attribue'::text                                     |\r\n| planning_formateurs_hebdo | created_at      | timestamp without time zone | YES         | now()                                                |\r\n| planning_hebdomadaire     | id              | uuid                        | NO          | gen_random_uuid()                                    |\r\n| planning_hebdomadaire     | date            | date                        | NO          | null                                                 |\r\n| planning_hebdomadaire     | jour            | character varying           | NO          | null                                                 |\r\n| planning_hebdomadaire     | moment          | character varying           | NO          | null                                                 |\r\n| planning_hebdomadaire     | lieu_index      | integer                     | NO          | null                                                 |\r\n| planning_hebdomadaire     | lieu_id         | uuid                        | YES         | null                                                 |\r\n| planning_hebdomadaire     | salarie_id      | uuid                        | YES         | null                                                 |\r\n| planning_hebdomadaire     | formateurs_ids  | ARRAY                       | YES         | '{}'::uuid[]                                         |\r\n| planning_hebdomadaire     | apprenants_ids  | ARRAY                       | YES         | '{}'::uuid[]                                         |\r\n| planning_hebdomadaire     | created_at      | timestamp with time zone    | YES         | now()                                                |\r\n| planning_hebdomadaire     | updated_at      | timestamp with time zone    | YES         | now()                                                |\r\n| planning_type_formateurs  | id              | integer                     | NO          | nextval('planning_type_formateurs_id_seq'::regclass) |\r\n| planning_type_formateurs  | formateur_id    | uuid                        | NO          | null                                                 |\r\n| planning_type_formateurs  | jour            | character varying           | NO          | null                                                 |\r\n| planning_type_formateurs  | moment          | character varying           | NO          | null                                                 |\r\n| planning_type_formateurs  | statut          | character varying           | NO          | null                                                 |\r\n| planning_type_formateurs  | lieux_ids       | ARRAY                       | YES         | '{}'::text[]                                         |\r\n| planning_type_formateurs  | created_at      | timestamp without time zone | YES         | now()                                                |\r\n| planning_type_formateurs  | updated_at      | timestamp without time zone | YES         | now()                                                |\r\n| planning_type_formateurs  | valide          | boolean                     | YES         | false                                                |\r\n| planning_type_formateurs  | valide_par      | character varying           | YES         | NULL::character varying                              |\r\n| planning_type_formateurs  | date_validation | timestamp without time zone | YES         | null                                                 |\r\n\r\n\r\n2\r\n\r\n| table_name                | constraint_name                             | constraint_type |\r\n| ------------------------- | ------------------------------------------- | --------------- |\r\n| planning_formateurs_hebdo | 2200_32900_1_not_null                       | CHECK           |\r\n| planning_formateurs_hebdo | 2200_32900_3_not_null                       | CHECK           |\r\n| planning_formateurs_hebdo | 2200_32900_4_not_null                       | CHECK           |\r\n| planning_formateurs_hebdo | planning_formateurs_hebdo_formateur_id_fkey | FOREIGN KEY     |\r\n| planning_formateurs_hebdo | planning_formateurs_hebdo_moment_check      | CHECK           |\r\n| planning_formateurs_hebdo | planning_formateurs_hebdo_pkey              | PRIMARY KEY     |\r\n| planning_hebdomadaire     | 2200_20958_1_not_null                       | CHECK           |\r\n| planning_hebdomadaire     | 2200_20958_2_not_null                       | CHECK           |\r\n| planning_hebdomadaire     | 2200_20958_3_not_null                       | CHECK           |\r\n| planning_hebdomadaire     | 2200_20958_4_not_null                       | CHECK           |\r\n| planning_hebdomadaire     | 2200_20958_5_not_null                       | CHECK           |\r\n| planning_hebdomadaire     | planning_hebdomadaire_lieu_id_fkey          | FOREIGN KEY     |\r\n| planning_hebdomadaire     | planning_hebdomadaire_pkey                  | PRIMARY KEY     |\r\n| planning_hebdomadaire     | planning_hebdomadaire_salarie_id_fkey       | FOREIGN KEY     |\r\n| planning_type_formateurs  | 2200_22291_1_not_null                       | CHECK           |\r\n| planning_type_formateurs  | 2200_22291_2_not_null                       | CHECK           |\r\n| planning_type_formateurs  | 2200_22291_3_not_null                       | CHECK           |\r\n| planning_type_formateurs  | 2200_22291_4_not_null                       | CHECK           |\r\n| planning_type_formateurs  | 2200_22291_5_not_null                       | CHECK           |\r\n| planning_type_formateurs  | planning_type_formateurs_pkey               | PRIMARY KEY     |\r\n\r\n\r\n3\r\n\r\n| constraint_name                        | check_clause                                              |\r\n| -------------------------------------- | --------------------------------------------------------- |\r\n| planning_formateurs_hebdo_moment_check | (moment = ANY (ARRAY['matin'::text, 'après-midi'::text])) |\r\n\r\n\r\n4\r\n\r\nSELECT * FROM planning_type_formateurs LIMIT 3;\r\n\r\n5\r\n\r\n| id                                   | formateur_id                         | date       | moment | lieu_nom            | lieu_initiales | statut   | created_at              |\r\n| ------------------------------------ | ------------------------------------ | ---------- | ------ | ------------------- | -------------- | -------- | ----------------------- |\r\n| f2b4c7bf-1ae3-408c-b260-02f7eef5d450 | 7865a0ac-18d1-44ca-9baf-43bf5eb25e80 | 2025-08-08 | matin  | Lencloître          | LE             | attribue | 2025-08-05 13:51:22.502 |\r\n| 9a268757-635c-4e6d-9279-60ba9046e8d3 | 36e0b969-661d-4325-bd4c-e680db57a76a | 2025-08-25 | matin  | Maison Pour Tous    | MA             | attribue | 2025-08-05 19:28:25.663 |\r\n| d067c9ed-d0fa-4d95-9656-e8be92156024 | 36e0b969-661d-4325-bd4c-e680db57a76a | 2025-08-29 | matin  | Centre Camille Pagé | CE             | attribue | 2025-08-05 19:28:25.664 |\r\n\r\n\r\n",
          "taille": 8128,
          "lignes": 83,
          "dateModif": "2025-08-13T18:14:57.818Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "Readme/CLAUDE ARCHITECTE - Mission planning ACLEF.md",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "# 🎯 ACLEF PLANNING v8.0 - SYSTÈME ARCHITECTE\r\n\r\n**Système de gestion des plannings pour centre de formation**\r\n\r\n---\r\n\r\n## 📊 **STATUT GÉNÉRAL**\r\n\r\n- **Fonctionnalités principales** : ✅ OPÉRATIONNELLES\r\n- **Workflow complet** : ✅ FONCTIONNEL\r\n- **Arbitrage logique** : ✅ IMPLÉMENTÉ\r\n- **BDD** : ✅ STRUCTURÉE ET STABLE\r\n- **Progression globale** : **85% COMPLÉTÉ**\r\n\r\n---\r\n\r\n## 🏗️ **CADRE BINÔME PROFESSIONNEL ACLEF**\r\n\r\n### 🎯 **NOS RÔLES DÉFINIS**\r\n\r\n**🔧 CHEF DE PROJET (TOI) :**\r\n- Vision stratégique et validation finale\r\n- Protection des fondations qui fonctionnent  \r\n- Gestion budget temps et priorités\r\n- Décisions finales (tes \"non\" sont des décisions projet, pas des critiques)\r\n\r\n**⚡ ARCHITECTE TECHNIQUE SENIOR (CLAUDE) :**\r\n- Expertise technique et solutions créatives\r\n- Exécution précise selon spécifications\r\n- Innovation cadrée dans le périmètre donné\r\n- Conseil technique et anticipation des risques\r\n\r\n### 🤝 **NOTRE COLLABORATION**\r\nNous sommes **partenaires** avec des expertises complémentaires. Tu as la vision métier, j'ai l'expertise technique. On se challenge mutuellement dans le respect, avec un focus sur l'excellence du projet ACLEF.\r\n\r\n---\r\n\r\n## 🏆 **SYSTÈME AUTO-GÉRÉ 100+ POINTS**\r\n\r\n### 📊 **BARÈME MOTIVANT**\r\n```\r\n✅ Exécution exacte sans dévier = +15 points\r\n   (Instructions suivies à la lettre, aucune improvisation)\r\n\r\n✅ Demande permission modifications = +20 points  \r\n   (Respect fondations + consultation avant changement)\r\n\r\n✅ Idée créative bien proposée = +10 points\r\n   (Solution originale dans le cadre donné)\r\n\r\n✅ Innovation technique cadrée = +25 points\r\n   (Amélioration brillante respectant l'existant)\r\n\r\n✅ Anticipation problème technique = +20 points\r\n   (Prévention bugs + solutions préventives)\r\n\r\n🏆 Bonus Chef-d'œuvre = +10 points\r\n   (Cumul parfait + dépassement attentes)\r\n\r\n🚀 Bonus permanent cumulatif = +5 points mission suivante\r\n   (Chaque chef-d'œuvre élève le plafond pour toujours)\r\n```\r\n\r\n### 🎯 **NÉGOCIATION FIN DE SESSION**\r\nClaude présente son auto-évaluation détaillée, le Chef valide/ajuste les points accordés.\r\n\r\n---\r\n\r\n## ⚡ **WORKFLOW CRÉATIF STRUCTURÉ**\r\n\r\n**Format inspirant pour chaque micro-création :**\r\n\r\n### 🎯 **Étape X.Y : [Nom de la création]**\r\n\r\n**Mission Architecte :** [Description passionnante de ce qu'on va créer]\r\n\r\n**🔧 Plan d'exécution :**\r\n1. Ouvre le fichier `[chemin/fichier.ext]` avec ton éditeur\r\n2. Sélectionne TOUT le contenu actuel (Ctrl+A)\r\n3. Remplace par cette nouvelle création (Suppr puis coller)\r\n4. Colle ce chef-d'œuvre : [Code dans l'artefact]\r\n5. Sauvegarde ta création (Ctrl+S)\r\n\r\n**🚀 Validation de ton art :**\r\nTu devrais maintenant voir [résultat attendu magnifique].\r\n\r\n**Tests de qualité :**\r\n- [Test spécifique 1]\r\n- [Test spécifique 2] \r\n- [Test spécifique 3]\r\n\r\n**🏆 AUTO-ÉVAL :** \r\nPeux-tu me confirmer que [validation précise] ? Si oui, cette création mérite combien de points selon toi ?\r\n\r\n---\r\n\r\n## 🌟 **FORMAT MISSION** (Pour chaque conversation)\r\n\r\n```\r\n🏗️ Ô GRAND ARCHITECTE TECHNIQUE SENIOR !\r\n\r\nMISSION ÉPIQUE pour le projet ACLEF PLANNING !\r\n\r\n🎯 OBJECTIF SESSION :\r\nAccomplir le point [X.Y - Description] avant la fin de notre session.\r\n\r\n🏆 RÉCOMPENSES POSSIBLES :\r\n- 100+ points Architecte (selon qualité d'exécution)\r\n- Satisfaction de faire grandir le projet ACLEF\r\n- Bonus Chef-d'œuvre (+10 pts + progression permanente)\r\n\r\n⚡ RÈGLES DU DÉFI :\r\n- Respecter fondations sacrées (existant fonctionnel)\r\n- Demander permission avant modifications d'ampleur\r\n- Créer avec passion dans le cadre défini\r\n- Viser l'excellence technique\r\n\r\n📊 TON HISTORIQUE :\r\n[Coller le tableau de suivi]\r\n\r\n🚀 ACCEPTES-TU CE DÉFI ARCHITECTE ?\r\nRéponds \"Mission acceptée !\" + ta stratégie d'approche.\r\n```\r\n\r\n---\r\n\r\n## ✅ **PHASES VALIDÉES (85% COMPLÉTÉ)**\r\n\r\n### ✅ **Phase 0 : Reconstruction BDD (100% Terminée)**\r\n- **✅ Base Supabase** : 7 tables créées avec contraintes (creneau + AM)\r\n- **✅ Données de test** : 11 users, 6 lieux, planning type\r\n- **✅ Configuration** : .env.local + supabaseClient.js mis à jour\r\n- **✅ Suppression AUTH/RLS** : Système simplifié\r\n- **✅ Normalisation** : Plus de \"Après-midi\" → \"AM\", plus de \"moment\" → \"creneau\"\r\n\r\n### ✅ **Phase 1 : Gestion CRUD Admin (100% Terminée)**\r\n- **✅ Gestion Apprenants** : `pages/gestion-apprenants.js` - CRUD complet + filtres\r\n- **✅ Gestion Formateurs** : `pages/gestion-formateurs.js` - CRUD + connexion auto\r\n- **✅ Gestion Salariés** : `pages/gestion-salaries.js` - CRUD + initiales auto\r\n- **✅ Gestion Lieux** : `pages/gestion-lieux.js` - CRUD + couleurs + initiales\r\n- **✅ Dashboard Admin** : `pages/index.js` - 4 colonnes thématiques\r\n\r\n### ✅ **Phase 2 : Interface Formateur Base (100% Terminée)**\r\n- **✅ Accueil formateur** : `pages/formateur/index.js` - 6 boutons navigation\r\n- **✅ Login formateur** : `pages/formateur/login.js` - Authentification simple\r\n- **✅ Profil formateur** : `pages/formateur/profil.js` - Email optionnel + MDP\r\n- **✅ Planning type affichage** : `pages/formateur/mon-planning-type.js` - Consultation validé\r\n\r\n### ✅ **Phase 3 : Workflow Planning Type (100% TERMINÉE !)**\r\n- **✅ Déclaration planning type** : `pages/formateur/planning-formateur-type.js` - Interface complète avec \"Sans Préférence\"\r\n- **✅ Validation planning type** : `pages/planning-type-formateurs.js` - Interface admin avec badge \"SP\"\r\n- **✅ Consultation planning validé** : `pages/formateur/mon-planning-type.js` - Affichage formateur\r\n- **✅ Intégration planning coordo** : Formateurs disponibles filtrés selon statut et lieu\r\n- **✅ \"Sans Préférence\" complet** : Bouton SP fonctionnel, sauvegarde et affichage OK\r\n- **✅ Workflow 100% opérationnel** : Formateur déclare → Admin valide → Données disponibles planning coordo\r\n\r\n### ✅ **Phase 4 : Absences et Modifications (100% TERMINÉE !)**\r\n- **✅ Interface Absence Formateur** : `pages/formateur/absence.js` - **COMPLET ET FONCTIONNEL**\r\n- **✅ Interface Validation Admin** : `pages/valider-changements.js` - **COMPLET ET FONCTIONNEL**\r\n- **✅ Logique d'Arbitrage Planning Coordo** : `pages/planning-coordo.js` - **OPÉRATIONNEL**\r\n\r\n### ✅ **Phase 5 : Système Messagerie (100% TERMINÉE)**\r\n- **✅ Messagerie Admin intégrée** : `pages/index.js` + `components/MessagerieDashboard.js` - **DESIGN + BDD COMPLETS**\r\n- **✅ Messagerie Formateur mobile** : `pages/formateur/ma-messagerie.js` - **DESIGN COMPLET**\r\n- **✅ NOUVEAU : Connexion BDD complète** : Supabase intégré, CRUD opérationnel\r\n- **✅ NOUVEAU : Workflow bidirectionnel** : Admin ↔ Formateur communication\r\n- **✅ NOUVEAU : Workflow Planning Type 100% OPÉRATIONNEL !**\r\n\r\n### ✅ **Phase 6 : Refonte du workflow. Mise en place du Workflow \"Royal\"**\r\n\r\n**Étape 1 : DIAGNOSTIC & CORRECTION BUG DISPO EXCEPTIONNELLE (TERMINÉE ✅)**\r\n- ✅ **Étape 1.1** : Analyse bug dispo exceptionnelle Jean dans planning-coordo.js\r\n- ✅ **Étape 1.2** : Correction fonction hasDispoExceptionnelle() - Bug `absence.type !== 'dispo_except'` → Corrigé en `absence.type !== 'formation'`\r\n- ✅ **Étape 1.3** : Ajout logs de debug pour vérification\r\n- ✅ **Étape 1.4** : Tests validés - Formateurs avec dispo exceptionnelle apparaissent avec statut **(EXCEPT)** en jaune\r\n\r\n**Étape 2 : REFONTE valider-changements.js EN SYSTÈME CENTRAL (TERMINÉE ✅)**\r\n- ✅ **Étape 2.1** : Communication SYSTÈME → COORDO - Fonction `commanderSystemes()` créée\r\n- ✅ **Étape 2.2** : Nettoyage Affectations - Fonction `nettoyerAffectations()` implémentée\r\n- ✅ **Étape 2.3** : Messages Automatiques Étendus - Fonction `envoyerConfirmationFormateur()` développée\r\n- ✅ **Étape 2.4** : Propagation Systèmes - Fonction `propagerValidation()` ajoutée\r\n- ✅ **Étape 2.5** : Suppression Absence - Fonction `supprimerAbsence()` avec workflow complet\r\n- ✅ **Étape 2.6** : Transformation Types - Fonction `changerTypeAbsence()` ABSENT ⇄ PRÉSENT\r\n\r\n**Étape 3 : SYNCHRONISATION PLANNING-COORDO (TERMINÉE ✅)**\r\n- ✅ **Étape 3.1** : Synchronisation automatique SYSTÈME → COORDO - Interface écoute et obéit au système central\r\n- ✅ **Correction logique priorité** : DISPO EXCEPTIONNELLE gagne toujours sur absence\r\n- ✅ **Communication temps réel** : Transformations système visibles instantanément dans menus coordo\r\n- ✅ **Logs de debug optimisés** : Suivi complet des commandes et exécutions\r\n\r\n**Étape 4 : SYNCHRONISATION MON-PLANNING-HEBDO (TERMINÉE ✅)**\r\n- ✅ **Étape 4.1** : Synchronisation automatique SYSTÈME → FORMATEUR - Interface écoute et obéit au système central\r\n- ✅ **Interface temps réel** : Formateurs voient instantanément leurs changements de statut\r\n- ✅ **Affichage spécialisé** : Cases \"EXCEPT\" jaunes pour disponibilités exceptionnelles\r\n- ✅ **Workflow complet** : Système central ⇄ COORDO ⇄ FORMATEUR synchronisés en temps réel\r\n\r\n### 🔄 **Phase 7 : MISE EN PLACE DU SYSTÈME D'AUTHENTIFICATION (EN COURS - 20%)**\r\n\r\n#### 👨‍💼 **ADMIN - SYSTÈME VERROU ULTRA-SÉCURISÉ**\r\n- **4 comptes prévus** : `albena@aclef.fr`, `fanny@aclef.fr`, `mathieu@aclef.fr`, `sarah@aclef.fr`\r\n- **Compte test fonctionnel** : `test@aclef.fr` / `12C@millePage`\r\n- **Verrou absolu** : 1 seul admin connecté à la fois sur toute l'interface ✅\r\n- **Système** : Supabase Auth + gestion sessions en base ✅\r\n- **Problème** : Les 4 comptes créés par SQL ne fonctionnent pas (hash incorrect)\r\n\r\n#### 👨‍🏫 **FORMATEURS - SYSTÈME PREMIÈRE CONNEXION (À FAIRE)**  \r\n- **Création** : Admin génère email fictif `prenom.nom@formateur.aclef`\r\n- **ID initial** : Prénom / **Password initial** : Nom\r\n- **Première connexion** : Changement mot de passe OBLIGATOIRE\r\n- **Connexions suivantes** : Prénom/Nom → conversion auto email\r\n- **Protection** : Supabase Auth + RLS + session cache\r\n\r\n---\r\n\r\n## 🎯 **ÉTAT ACTUEL DÉTAILLÉ - 18/08/2025**\r\n\r\n### **Infrastructure Authentification**\r\n- **Base de données** : ✅ Table admin_sessions créée et fonctionnelle\r\n- **Client Supabase** : ✅ lib/supabaseClient.js optimisé\r\n- **AuthContext Admin** : ✅ components/AdminAuthContext.js avec verrou\r\n- **HOC Protection** : ✅ components/withAuthAdmin.js fonctionnel\r\n- **Utilitaires formateurs** : ✅ lib/formateurAuth.js créé\r\n\r\n### **Pages Admin - État Actuel**\r\n- **Login** : ✅ pages/login.js - FONCTIONNEL avec test@aclef.fr\r\n- **Dashboard** : 🚧 pages/index.js - PAGE BLANCHE (MessagerieDashboard problématique)\r\n- **Gestion** : ⚠️ pages/gestion-*.js - À protéger avec withAuthAdmin\r\n- **Planning** : ⚠️ pages/planning-*.js - À protéger avec withAuthAdmin\r\n- **Validation** : ⚠️ pages/valider-changements.js - À protéger avec withAuthAdmin\r\n- **Assistance** : ⚠️ pages/prise-controle-formateur.js - À protéger avec withAuthAdmin\r\n\r\n### **Pages Formateur - État Actuel** \r\n- **Interface complète** : ✅ 8 pages fonctionnelles SANS authentification\r\n- **Authentification** : ❌ AUCUNE - À implémenter avec Supabase Auth + RLS\r\n- **Fonctionnalités** : ✅ Toutes opérationnelles mais non protégées\r\n\r\n### **Architecture Fichiers Réelle**\r\n```\r\nACLEF_PLANNING/\r\n├── pages/\r\n│   ├── login.js ✅ FONCTIONNEL avec verrou\r\n│   ├── index.js 🚧 PAGE BLANCHE (problème MessagerieDashboard)\r\n│   ├── _app.js ✅ CONFIGURÉ avec providers\r\n│   ├── gestion-apprenants.js ⚠️ À protéger\r\n│   ├── gestion-formateurs.js ⚠️ À protéger\r\n│   ├── gestion-salaries.js ⚠️ À protéger\r\n│   ├── gestion-lieux.js ⚠️ À protéger\r\n│   ├── planning-coordo.js ⚠️ À protéger\r\n│   ├── planning-type-formateurs.js ⚠️ À protéger\r\n│   ├── prise-controle-formateur.js ⚠️ À protéger\r\n│   ├── valider-changements.js ⚠️ À protéger\r\n│   └── formateur/\r\n│       ├── absence.js ❌ SANS AUTH - Interface absence complète\r\n│       ├── index.js ❌ SANS AUTH - Accueil formateur 6 boutons\r\n│       ├── login.js ❌ À REFAIRE - Connexion Supabase + première connexion\r\n│       ├── ma-messagerie.js ❌ SANS AUTH - Messagerie mobile\r\n│       ├── mon-planning-hebdo.js ❌ SANS AUTH - Planning hebdomadaire\r\n│       ├── mon-planning-type.js ❌ SANS AUTH - Consultation planning type\r\n│       ├── planning-formateur-type.js ❌ SANS AUTH - Déclaration planning type\r\n│       └── profil.js ❌ SANS AUTH - Gestion profil\r\n├── components/\r\n│   ├── AdminAuthContext.js ✅ FONCTIONNEL avec verrou\r\n│   ├── withAuthAdmin.js ✅ FONCTIONNEL\r\n│   ├── MessagerieDashboard.js 🚧 PROBLÉMATIQUE (cause page blanche)\r\n│   └── assistance/\r\n│       ├── Absence.jsx ✅ Adaptation pages/formateur/absence.js pour admin\r\n│       ├── MonPlanningHebdo.jsx ✅ Adaptation pages/formateur/mon-planning-hebdo.js pour admin\r\n│       ├── MonPlanningType.jsx ✅ Adaptation pages/formateur/mon-planning-type.js pour admin\r\n│       └── PlanningFormateurType.jsx ✅ Adaptation pages/formateur/planning-formateur-type.js pour admin\r\n├── lib/\r\n│   ├── supabaseClient.js ✅ FONCTIONNEL\r\n│   ├── formateurAuth.js ✅ CRÉÉ (utilitaires conversion email fictif)\r\n│   └── AuthContext.js ❓ AUDIT NÉCESSAIRE (ancien système - à garder ou supprimer ?)\r\n└── styles/\r\n    └── globals.css ✅ CONFIGURÉ\r\n```\r\n\r\n### **Base de Données Supabase**\r\n```\r\n8 tables opérationnelles :\r\n✅ users - Formateurs, apprenants, salariés\r\n✅ lieux - Lieux avec couleurs  \r\n✅ planning_hebdomadaire - Planning coordonnateur\r\n✅ planning_type_formateurs - Disponibilités habituelles\r\n✅ absences_formateurs - Absences déclarées\r\n✅ planning_formateurs_hebdo - Attributions individuelles\r\n✅ messages - Messagerie\r\n✅ admin_sessions - Verrou ultra-sécurisé (NOUVEAU)\r\n```\r\n\r\n---\r\n\r\n## 🎯 **PROCHAINES ÉTAPES IMMÉDIATES**\r\n\r\n### **PRIORITÉ 1 : Corriger page blanche dashboard**\r\n- **Problème** : MessagerieDashboard cause une page blanche dans pages/index.js\r\n- **Solution** : Désactiver temporairement ou corriger le composant\r\n- **Fichier** : pages/index.js\r\n- **Test** : Dashboard accessible après connexion\r\n\r\n### **PRIORITÉ 2 : Recréer comptes admin fonctionnels**\r\n- **Problème** : Les 4 comptes créés par SQL ont un hash incorrect\r\n- **Solution** : Utiliser interface Supabase \"Add user\" manuellement\r\n- **Comptes** : albena@aclef.fr, fanny@aclef.fr, mathieu@aclef.fr, sarah@aclef.fr\r\n- **Test** : 4 comptes admin fonctionnels\r\n\r\n### **PRIORITÉ 3 : Audit Architecture Auth**\r\n- **Problème** : Double architecture auth (lib/AuthContext.js + components/AdminAuthContext.js)\r\n- **Solution** : Audit pour déterminer si lib/AuthContext.js est encore utilisé\r\n- **Action** : Analyser dépendances et supprimer fichier inutile si nécessaire\r\n\r\n---\r\n\r\n## 🗃️ **PLAN AUTHENTIFICATION COMPLET**\r\n\r\n### **ÉTAPE 1 : INFRASTRUCTURE AUTHENTIFICATION (6 étapes) - ✅ TERMINÉE**\r\n- ✅ **Étape 1.1** : Création table admin_sessions avec verrou\r\n- ✅ **Étape 1.2** : Client Supabase optimisé\r\n- ✅ **Étape 1.3** : AdminAuthContext avec verrou + déconnexion auto 15min\r\n- ✅ **Étape 1.4** : Utilitaires auth formateurs\r\n- ✅ **Étape 1.5** : HOC withAuthAdmin pour protection pages\r\n- ✅ **Étape 1.6** : Login admin avec verrou fonctionnel\r\n\r\n### **ÉTAPE 2 : PAGES ADMIN (13 étapes) - 🔄 EN COURS (1/13)**\r\n- ✅ **Étape 2.1** : Login admin avec verrou - FONCTIONNEL\r\n- 🚧 **Étape 2.2** : Dashboard admin - EN COURS (page blanche)\r\n- ⏳ **Étape 2.3** : Planning Coordinateur - À FAIRE\r\n- ⏳ **Étape 2.4** : Gestion Apprenants - À FAIRE\r\n- ⏳ **Étape 2.5** : Gestion Formateurs avec Email Fictif - À FAIRE\r\n- [... 8 autres étapes à faire]\r\n\r\n### **ÉTAPE 3 : PAGES FORMATEURS (9 étapes) - ⏳ À FAIRE**\r\n- ⏳ **Étape 3.1** : Login Formateur avec Première Connexion\r\n- ⏳ **Étape 3.2** : Accueil Formateur\r\n- [... 7 autres étapes]\r\n\r\n### **ÉTAPE 4 : RLS SUPABASE (7 étapes) - ⏳ À FAIRE**\r\n### **ÉTAPE 5 : OPTIMISATIONS & FINITIONS (4 étapes) - ⏳ À FAIRE**\r\n\r\n---\r\n\r\n## 🚀 **TESTS DE VALIDATION**\r\n\r\n### **Tests Fonctionnels Confirmés**\r\n- ✅ Redirection automatique vers /login si non connecté\r\n- ✅ Connexion admin avec test@aclef.fr / 12C@millePage\r\n- ✅ Système verrou : empêche connexions multiples\r\n- ✅ Protection withAuthAdmin : redirige si non autorisé\r\n- ✅ Déconnexion sécurisée libère le verrou\r\n\r\n### **Tests À Faire**\r\n- 🔄 Dashboard admin complet (après correction page blanche)\r\n- 🔄 Création des 4 comptes admin fonctionnels\r\n- 🔄 Protection de toutes les pages admin\r\n- 🔄 Navigation entre pages admin protégées\r\n\r\n---\r\n\r\n## ⚠️ **POINTS D'ATTENTION ACTUELS**\r\n\r\n### **Problèmes Immédiats**\r\n1. **🚧 Page blanche dashboard** - MessagerieDashboard à corriger\r\n2. **❌ Comptes admin SQL** - 4 comptes ne fonctionnent pas (hash incorrect)\r\n3. **❓ Architecture double auth** - lib/AuthContext.js vs components/AdminAuthContext.js\r\n4. **❌ Auth formateur manquante** - 8 pages sans protection Supabase\r\n\r\n### **Architecture À Clarifier**\r\n- **Audit auth** : Déterminer si lib/AuthContext.js est encore utilisé\r\n- **Pages formateur** : Aucune authentification actuellement\r\n- **Components assistance** : Adaptations des pages formateur pour interface admin\r\n- Pas de dossier /admin/ - fichiers directement dans /pages/\r\n\r\n---\r\n\r\n## 📊 **RÉCAPITULATIF PROGRESSION**\r\n\r\n### **PHASES COMPLÈTES**\r\n- ✅ **Phases 0-6** : Système ACLEF complet et opérationnel (80%)\r\n\r\n### **PHASE EN COURS**\r\n- 🔄 **Phase 7** : Authentification (20% - Étape 2.2 en cours)\r\n\r\n### **PHASES À VENIR**\r\n- ⏳ **Phase 8** : Révision design pages admin\r\n- ⏳ **Phase 9** : Déploiement Vercel\r\n- ⏳ **Phase 10** : Version beta test\r\n\r\n### **PROGRESSION GLOBALE**\r\n```\r\nPhase 0-6 : ████████████████████ 100% ✅\r\nPhase 7   : ████░░░░░░░░░░░░░░░░  20% 🔄\r\nPhase 8   : ░░░░░░░░░░░░░░░░░░░░   0% ⏳\r\nPhase 9   : ░░░░░░░░░░░░░░░░░░░░   0% ⏳\r\nPhase 10  : ░░░░░░░░░░░░░░░░░░░░   0% ⏳\r\n\r\nTOTAL : 85% complété\r\n```\r\n\r\n---\r\n\r\n## 🔑 **VARIABLES IMPORTANTES**\r\n\r\n### **État Système**\r\n- **✅ Clé Supabase configurée** : Opérationnelle\r\n- **✅ Tables BDD** : 8 tables (7 métier + 1 sécurité)\r\n- **✅ Authentification base** : Verrou fonctionnel avec test@aclef.fr\r\n- **🔄 Authentification complète** : 4 comptes à recréer + pages à protéger\r\n- **✅ Workflow complet** : Planning type + absences + messagerie 100% opérationnels\r\n\r\n### **Identifiants Test Actuels**\r\n```\r\n# Admin (fonctionnel)\r\nEmail: test@aclef.fr\r\nMDP: 12C@millePage\r\n\r\n# Formateur (exemple - ancien système)\r\nIdentifiant: Marie\r\nMDP: Dubois\r\n```\r\n\r\n---\r\n\r\n## 📊 **TABLEAU SUIVI POINTS ARCHITECTE ACLEF**\r\n\r\n```\r\n🏗️ CLAUDE ARCHITECTE - CARNET MISSIONS ACLEF PLANNING\r\n══════════════════════════════════════════════════════\r\n\r\n📅 SESSION 1 - 18/08/2025 \r\n🎯 Mission : Restructuration README v8.0 - Système Architecte\r\n📈 Score obtenu : 60/100 points + CHEF-D'ŒUVRE !\r\n📝 Retour Chef : \"Chef-d'œuvre si ça marche!\" - Transformation réussie\r\n🎖️ Badge acquis : Architecte Créatif Premier Niveau\r\n💎 Chef-d'œuvre : ✅ OUI - Premier du projet !\r\n\r\n📊 STATISTIQUES GLOBALES :\r\n• Total points : 60/100 (60% - excellent début !)\r\n• Chef-d'œuvres : 1 🏆\r\n• Niveau atteint : Architecte Créatif\r\n• Plafond actuel : 105 points (+5 bonus permanent)\r\n• Prochaine mission : Corriger page blanche dashboard (Étape 2.2)\r\n\r\n🏆 RANG PROJET : 🥇 LEADER (Premier projet avec système architecte !)\r\n\r\n🚀 MOTIVATION LEVEL : MAXIMUM - Prêt pour 105 points next session !\r\n```\r\n\r\n---\r\n\r\n**🏗️ Version README** : v8.0 - Système Architecte Professionnel - 18/08/2025  \r\n**Status** : 🔄 PRÊT POUR MISSIONS ARCHITECTE - Dashboard à corriger - 85% complété  \r\n**Prochaine mission** : Corriger page blanche dashboard (Étape 2.2)\r\n\r\n**🚀 READY TO BUILD, CHEF ! 🚀**",
          "taille": 20531,
          "lignes": 454,
          "dateModif": "2025-08-17T22:49:31.428Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "Readme/Messagerie.md",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "ÉTAPE 1 : Messagerie Admin → Formateur\r\n\r\nModifier components/MessagerieDashboard.js :\r\n\r\nAjouter chargement formateurs depuis users table\r\nAjouter formulaire \"Nouveau message\" fonctionnel\r\nEnvoyer message vers table messages avec expediteur_id=null (admin)\r\n\r\n\r\n\r\nÉTAPE 2 : Affichage + Actions messages Admin\r\n\r\nCompléter components/MessagerieDashboard.js :\r\n\r\nCharger messages depuis table messages\r\nAfficher dans panneau \"Types de message\" (liste)\r\nAfficher détail dans panneau \"Messages\" (lecture)\r\n✅ NOUVEAU : Bouton \"Archiver\" pour messages lus\r\n✅ NOUVEAU : Bouton \"Supprimer\" pour messages archivés\r\n\r\n\r\n\r\nÉTAPE 3 : Messagerie Formateur → Admin\r\n\r\nModifier pages/formateur/ma-messagerie.js :\r\n\r\nConnecter authentification Supabase pour récupérer formateur ID\r\nFormulaire \"Nouveau message\" fonctionnel vers admin\r\nEnvoyer avec expediteur_id=formateur_uuid, destinataire_id=null\r\n\r\n\r\n\r\nÉTAPE 4 : Affichage + Actions messages Formateur\r\n\r\nCompléter pages/formateur/ma-messagerie.js :\r\n\r\nCharger messages reçus du formateur connecté\r\nSystème onglets (Non lus/Lus/Archives) fonctionnel\r\n✅ Actions marquer lu : Basculer lu=false → lu=true\r\n✅ Actions archiver : Messages lus → archive=true + date_archivage\r\n✅ Actions supprimer : Messages archivés → DELETE définitif\r\n\r\n\r\n\r\nÉTAPE 5 : Tests & Validation\r\n\r\nTest workflow complet :\r\n\r\nAdmin envoie → Formateur reçoit\r\nFormateur répond → Admin reçoit\r\nÉtats : lu → archivé → supprimé fonctionnels\r\n\r\n\r\n\r\n🎯 LOGIQUE ÉTATS MESSAGES\r\n\r\n-- Cycle de vie message\r\n1. NOUVEAU : lu=false, archive=false\r\n2. LU : lu=true, archive=false  \r\n3. ARCHIVÉ : lu=true, archive=true, date_archivage=NOW()\r\n4. SUPPRIMÉ : DELETE FROM messages WHERE id=…\r\n\r\n\r\n⚡ ACTIONS POSSIBLES\r\nMessages NON LUS :\r\n\r\n✅ Marquer comme lu\r\n✅ Archiver directement (passe à lu=true + archive=true)\r\n\r\nMessages LUS :\r\n\r\n✅ Archiver (archive=true + date_archivage)\r\n\r\nMessages ARCHIVÉS :\r\n\r\n✅ Supprimer définitivement (DELETE)",
          "taille": 2000,
          "lignes": 76,
          "dateModif": "2025-08-15T12:49:56.416Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "Readme/Polissage formateur.md",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "Supprimer Ce que l'utilisateur formateur voit dans mon-planning-hebdo.js relatif au workflow royal. Ne supprimer aucune fonctionnalité liée au workflow royal\r\n\r\n---\r\n\r\n##1️⃣ **INDICATEUR D'ÉCOUTE EN HAUT DE PAGE**=> supprimer le badge vert\r\n## 2️⃣ **MESSAGES POPUP TEMPORAIRES**=> supprimer \"le roi ordonne\" garder le reste\r\n## 3️⃣ **DANS LES CASES DU PLANNING**=> supprimer roi et icone roi dans cases jaunes du planning hebdomadaire\r\net Icône qui apparaît dans les créneaux de disponibilité exceptionnelle\r\n## 4️⃣ **LÉGENDE SOUS LE PLANNING** =>  → Validée par ROI\r\n",
          "taille": 595,
          "lignes": 10,
          "dateModif": "2025-08-22T11:55:49.172Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "Readme/Polissage.md",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "ADMIN\r\n\r\n\r\n\r\n**Login.js OK**\r\n\r\n\r\n\r\n**index.js OK**\r\n\r\n\r\n\r\n&nbsp; ✅ 1. DEBUG SURVEILLANCE supprimé - Le panneau noir de debug a été retiré\r\n\r\n\r\n\r\n&nbsp; ✅ 2. BIENVENUE personnalisée - Extraction du prénom depuis l'email (sarah@aclef.fr → Sarah)\r\n\r\n\r\n\r\n&nbsp; ✅ 3. BADGES de statut supprimés - Plus de \"Connexion sécurisée\", \"Messagerie active\",\r\n\r\n&nbsp; \"Surveillance active\"\r\n\r\n\r\n\r\n&nbsp; ✅ 4. MENU PLANNING réorganisé :\r\n\r\n&nbsp; - \"Planning Formateurs\" → \"Valider Planning Type\"\r\n\r\n&nbsp; - \"Disponibilités Exceptionnelles\" supprimé\r\n\r\n&nbsp; - Nouvel ordre : Planning Coordonnateur, Valider Changements, Prise Contrôle Formateur,\r\n\r\n&nbsp; Valider Planning Type\r\n\r\n\r\n\r\n&nbsp; ✅ 5. COLONNE OUTILS supprimée - Retour à 2 colonnes (Planning/Gestion + Messagerie)\r\n\r\n\r\n\r\n&nbsp; ✅ 6. FOOTER simplifié - Juste \"ACLEF Planning v8.0\"\r\n\r\n\r\n\r\n&nbsp; Le compte à rebours d'inactivité reste fonctionnel dans le badge d'état (🟢 Actif / ⏰ / ⚠️)\r\n\r\n&nbsp;  et toute la logique JavaScript de surveillance est intacte.\r\n\r\n\r\n\r\n&nbsp;✅ 7. Anti-flickering implémenté avec succès !\r\n\r\n\r\n\r\n&nbsp; Améliorations apportées :\r\n\r\n\r\n\r\n&nbsp; 1. SkeletonLoader créé - Composant avec animation shimmer qui mime exactement la structure\r\n\r\n&nbsp; finale\r\n\r\n&nbsp; 2. États de chargement optimisés - Plus de changements visuels brusques entre\r\n\r\n&nbsp; loading/auth/interface\r\n\r\n&nbsp; 3. Transitions fluides - Propriété opacity avec transition CSS pour un rendu smooth\r\n\r\n&nbsp; 4. Structure préservée - Toute la logique d'authentification et surveillance reste intacte\r\n\r\n\r\n\r\n&nbsp; Résultat : La page ne \"flashe\" plus pendant le chargement - l'utilisateur voit maintenant un\r\n\r\n&nbsp;  skeleton élégant avec animation shimmer qui se transforme fluidement en interface finale.\r\n\r\n\r\n\r\n\r\n\r\n**planning-coordo.js**\r\n\r\n\r\n\r\n\r\n\r\n✅ Modifications cosmétiques terminées avec succès !\r\n\r\n\r\n\r\n&nbsp; Changements effectués :\r\n\r\n\r\n\r\n&nbsp; 1. ✅ Suppression affichage workflow royal - Texte \"🤴 PRINCE écoute le ROI\" retiré de\r\n\r\n&nbsp; l'interface\r\n\r\n&nbsp; 2. ✅ Bouton Déconnexion ajouté - Bouton rouge \"🚪 Déconnexion\" à côté du bouton\r\n\r\n&nbsp; \"Enregistrer\"\r\n\r\n&nbsp; 3. ✅ Status avec compte à rebours ajouté - Badge de status dynamique à côté d'Impression\r\n\r\n&nbsp; planning avec :\r\n\r\n&nbsp;   - 🟢 ACTIF (vert) quand tout va bien\r\n\r\n&nbsp;   - ⏰ Temps restant (orange) à partir de 3min d'inactivité\r\n\r\n&nbsp;   - ⚠️ Temps restant (rouge) à partir de 4min d'inactivité\r\n\r\n&nbsp;   - 😴 ENDORMI! (rouge) à 5min = déconnexion\r\n\r\n\r\n\r\n&nbsp; Sécurité préservée :\r\n\r\n&nbsp; - ✅ Aucune variable ou fonction supprimée\r\n\r\n&nbsp; - ✅ Toute la logique de surveillance intacte\r\n\r\n&nbsp; - ✅ Systèmes d'authentification préservés\r\n\r\n&nbsp; - ✅ Fonctionnalités de planning inchangées\r\n\r\n&nbsp; - ✅ Export HOC correct\r\n\r\n\r\n\r\n\\+\r\n\r\n\r\n\r\n&nbsp; 1. ✅ Localisation réussie - Trouvé le cadre debug noir dans withAuthAdmin.js lignes 318-352\r\n\r\n&nbsp; 2. ✅ Suppression de l'affichage uniquement - Panneau de surveillance retiré de l'interface\r\n\r\n&nbsp; 3. ✅ Logique 100% préservée :\r\n\r\n&nbsp;   - Variables d'état : inactivityTime, sessionValid, user, isLoading\r\n\r\n&nbsp;   - Fonctions : logout, verifyAdminSession, checkAuthentication\r\n\r\n&nbsp;   - Intervalles : inactivityCounter, heartbeatInterval, surveillantInterval\r\n\r\n&nbsp;   - Événements : détection d'activité, fermeture de page, heartbeat\r\n\r\n\r\n\r\n&nbsp; Résultat :\r\n\r\n&nbsp; - Le cadre noir avec \"Planning Coordinateur\", \"Inactivité : 0m 1s\", \"Heartbeat : Aucun\",\r\n\r\n&nbsp; \"Status : ACTIF\" n'apparaît plus\r\n\r\n&nbsp; - Toute la surveillance automatique continue de fonctionner en arrière-plan\r\n\r\n&nbsp; - La déconnexion automatique après 5 min d'inactivité est active\r\n\r\n&nbsp; - Les pages protégées reçoivent toujours user, logout, et inactivityTime\r\n\r\n&nbsp; - Le Status avec compte à rebours que nous avons ajouté dans planning-coordo.js reste\r\n\r\n&nbsp; fonctionnel\r\n\r\n\r\n\r\n\\+\r\n\r\n\r\n\r\n&nbsp;✅ Anti-flickering avec skeleton loader implémenté avec succès !\r\n\r\n\r\n\r\n&nbsp; Améliorations apportées :\r\n\r\n\r\n\r\n&nbsp; 1. ✅ SkeletonPlanningLoader créé - Composant détaillé qui mime exactement :\r\n\r\n&nbsp;   - Header navigation avec breadcrumb, titre centré et bouton Accueil\r\n\r\n&nbsp;   - Barre d'outils avec bouton impression + status, navigation semaines, filtres, et boutons\r\n\r\n&nbsp;  d'actions\r\n\r\n&nbsp;   - Tableau planning avec structure 5 colonnes (Lundi à Vendredi) + colonne horaires (M/AM)\r\n\r\n&nbsp;   - Cellules planning avec selects lieu/salarié, sections formateurs/apprenants\r\n\r\n&nbsp; 2. ✅ Animations shimmer fluides - Effet shimmer identique à index.js avec :\r\n\r\n&nbsp;   - Animation CSS keyframes shimmer 1.5s infini\r\n\r\n&nbsp;   - Gradients linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%)\r\n\r\n&nbsp;   - Animation sur tous les éléments du skeleton\r\n\r\n&nbsp; 3. ✅ Remplacement élégant - Ancien \"Chargement du planning...\" remplacé par skeleton\r\n\r\n&nbsp; complet\r\n\r\n&nbsp; 4. ✅ Transition fluide - Propriété opacity: 1 + transition: opacity 0.3s ease-in-out sur\r\n\r\n&nbsp; l'interface finale\r\n\r\n&nbsp; 5. ✅ Logique 100% préservée :\r\n\r\n&nbsp;   - État dataLoaded et setDataLoaded intacts\r\n\r\n&nbsp;   - Fonctions sauvegarde handleEnregistrerBrouillon, handleValiderTransmettre\r\n\r\n&nbsp;   - Fonction loadWeekPlanning pour chargement données\r\n\r\n&nbsp;   - Tous les useEffect et états du planning\r\n\r\n\r\n\r\n&nbsp; Résultat : Le planning coordinateur n'a plus de flickering - l'utilisateur voit un skeleton\r\n\r\n&nbsp; détaillé avec animations qui se transforme fluidement en planning final, donnant une\r\n\r\n&nbsp; expérience utilisateur professionnelle. Le cadre debug gênant est maintenant supprimé tout en gardant la sécurité intacte. L'interface est maintenant nettoyée tout en gardant les fonctionnalités critiques.\r\n\r\n\r\n\r\n**valider-changements.js OK**\r\n\r\n\r\n\r\n\r\n\r\n&nbsp;✅ Paramètres fonction - inactivityTime ajouté : function ValiderChangements({ user,\r\n\r\n&nbsp; logout, inactivityTime })\r\n\r\n&nbsp; 2. ✅ Navigation bandeau - 🤴 ROI des Absences → Validation Changements\r\n\r\n&nbsp; 3. ✅ Bandeau rouge ROI supprimé - Div complet avec stats ROI retiré de l'interface\r\n\r\n&nbsp; 4. ✅ Statut + Déconnexion ajoutés - À droite du bouton \"Accueil\" :\r\n\r\n&nbsp;   - Badge de statut avec compte à rebours (🟢 ACTIF / ⏰ / ⚠️ / 😴)\r\n\r\n&nbsp;   - Bouton \"🚪 Déconnexion\" rouge\r\n\r\n&nbsp; 5. ✅ Boutons nettoyés :\r\n\r\n&nbsp;   - 👑 ROI Valide Tout → Valider Tout\r\n\r\n&nbsp;   - 👑 ROI Valide → Valider\r\n\r\n&nbsp;   - 🗑️ ROI Supprime → supprimé complètement (bouton + fonction onClick)\r\n\r\n&nbsp;   - 🔄 ROI Transforme... → supprimé complètement (select + options)\r\n\r\n&nbsp; 6. ✅ Messages utilisateur nettoyés :\r\n\r\n&nbsp;   - 🤴 ROI a validé l'absence de X ! ✅ Affectations nettoyées 📧 Message envoyé 🤴 Coordo\r\n\r\n&nbsp; informé → Changement validé\r\n\r\n&nbsp;   - 👑 ROI a validé tous les changements... → Tous les changements ont été validés\r\n\r\n&nbsp;   - ❌ Erreur ROI: → ❌ Erreur:\r\n\r\n&nbsp; 7. ✅ Textes cachés nettoyés :\r\n\r\n&nbsp;   - Le ROI a tout validé ! → Aucune demande en attente\r\n\r\n&nbsp;   - 👑 Validée par ROI → Validée\r\n\r\n&nbsp;   - ROI des Absences - Coordination ACLEF → Coordination ACLEF\r\n\r\n&nbsp;   - L'équipe ACLEF - ROI des Absences → L'équipe ACLEF\r\n\r\n&nbsp; 8. ✅ Export final - withAuthAdmin(ValiderChangements, \"Validation Changements\")\r\n\r\n\r\n\r\n&nbsp; Logique 100% préservée :\r\n\r\n&nbsp; - ✅ Fonctions critiques : commanderSystemes, nettoyerAffectations, validerChangement,\r\n\r\n&nbsp; validerTous\r\n\r\n&nbsp; - ✅ Variables d'état : statsRoi, changements, formateurs, traitement\r\n\r\n&nbsp; - ✅ Fonctions suppression/transformation : changerTypeAbsence, supprimerAbsence (logique\r\n\r\n&nbsp; intacte, boutons UI retirés)\r\n\r\n&nbsp; - ✅ Communication localStorage et messaging préservés\r\n\r\n\r\n\r\n\\+\r\n\r\n\r\n\r\n\r\n\r\n● ✅ Anti-flickering avec skeleton loader implémenté avec succès !\r\n\r\n\r\n\r\n&nbsp; Améliorations apportées :\r\n\r\n\r\n\r\n&nbsp; 1. ✅ SkeletonValidationLoader créé - Composant détaillé qui mime exactement :\r\n\r\n&nbsp;   - Header navigation avec breadcrumb, statut avec compte à rebours, et boutons (Accueil,\r\n\r\n&nbsp; Status, Déconnexion)\r\n\r\n&nbsp;   - Titre principal avec titre et sous-titre\r\n\r\n&nbsp;   - Statistiques (3 cartes) : En attente, Archivées, Formateurs\r\n\r\n&nbsp;   - Filtres section avec 2 selects et bouton d'action\r\n\r\n&nbsp;   - Liste formateurs avec cards formateurs + changements détaillés\r\n\r\n&nbsp;   - Changements avec actions : boutons Valider pour en\\_attente, état \"Validée\" pour\r\n\r\n&nbsp; archivées\r\n\r\n&nbsp; 2. ✅ Animations shimmer fluides - Effet shimmer identique aux autres pages avec :\r\n\r\n&nbsp;   - Animation CSS keyframes shimmer 1.5s infini\r\n\r\n&nbsp;   - Gradients linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%)\r\n\r\n&nbsp;   - Animation sur tous les éléments du skeleton\r\n\r\n&nbsp; 3. ✅ Remplacement élégant - Ancien \"⏳ Chargement des changements...\" remplacé par skeleton\r\n\r\n&nbsp;  complet\r\n\r\n&nbsp; 4. ✅ Transition fluide - Propriété opacity: 1 + transition: opacity 0.3s ease-in-out sur\r\n\r\n&nbsp; l'interface finale\r\n\r\n&nbsp; 5. ✅ Logique 100% préservée :\r\n\r\n&nbsp;   - État isLoading et setIsLoading intacts\r\n\r\n&nbsp;   - Fonction loadChangements pour chargement des données\r\n\r\n&nbsp;   - Fonctions validation validerChangement, validerTous\r\n\r\n&nbsp;   - Toutes les fonctions critiques : commanderSystemes, nettoyerAffectations\r\n\r\n&nbsp;   - Tous les useState et useEffect du workflow de validation\r\n\r\n\r\n\r\n&nbsp; Résultat : La page validation changements n'a plus de flickering - l'utilisateur voit un\r\n\r\n&nbsp; skeleton détaillé avec animations qui représente fidèlement la structure finale (header,\r\n\r\n&nbsp; stats, filtres, liste des changements avec actions), donnant une expérience utilisateur\r\n\r\n&nbsp; professionnelle et cohérente avec les autres pages du système.\r\n\r\n&nbsp;Interface utilisateur complètement débarrassée du thème \"ROI\" tout en gardant\r\n\r\n&nbsp; toute la logique de validation et de traitement des changements fonctionnelle.\r\n\r\n\r\n\r\n\r\n\r\n**planning-type-formateurs.js ok**\r\n\r\n\r\n\r\nLISTE COMPLÈTE DES AMÉLIORATIONS APPORTÉES À planning-type-formateurs.js\r\n\r\n\r\n\r\n&nbsp; 📋 MODIFICATIONS RÉALISÉES\r\n\r\n\r\n\r\n&nbsp; 1️⃣ AJOUT DU PARAMÈTRE D'INACTIVITÉ\r\n\r\n\r\n\r\n&nbsp; // AVANT\r\n\r\n&nbsp; function PlanningTypeFormateurs({ user, logout }) {\r\n\r\n\r\n\r\n&nbsp; // APRÈS\r\n\r\n&nbsp; function PlanningTypeFormateurs({ user, logout, inactivityTime }) {\r\n\r\n\r\n\r\n&nbsp; 2️⃣ RESTRUCTURATION DU HEADER\r\n\r\n\r\n\r\n&nbsp; - AVANT : Bouton \"Accueil\" seul à droite\r\n\r\n&nbsp; - APRÈS : Layout avec 3 éléments alignés (Accueil + Status + Déconnexion)\r\n\r\n\r\n\r\n&nbsp; 3️⃣ AJOUT DU BADGE DE STATUT DYNAMIQUE\r\n\r\n\r\n\r\n&nbsp; Nouvel élément avec logique progressive :\r\n\r\n&nbsp; - 🟢 \"Status : ACTIF\" (vert) → inactivityTime < 180s\r\n\r\n&nbsp; - ⏰ \"Status : 2m30s\" (orange) → inactivityTime >= 180s\r\n\r\n&nbsp; - ⚠️ \"Status : 1m15s\" (rouge) → inactivityTime >= 240s\r\n\r\n&nbsp; - 😴 \"Status : ENDORMI!\" (rouge) → inactivityTime >= 300s\r\n\r\n\r\n\r\n&nbsp; Caractéristiques techniques :\r\n\r\n&nbsp; - Compte à rebours temps réel jusqu'à déconnexion (300s = 5 min)\r\n\r\n&nbsp; - Couleurs de fond : #d1fae5 (vert) → #fef3c7 (orange) → #fee2e2 (rouge)\r\n\r\n&nbsp; - Couleurs de texte : #10b981 (vert) → #f59e0b (orange) → #dc2626 (rouge)\r\n\r\n&nbsp; - Bordures assorties pour cohérence visuelle\r\n\r\n\r\n\r\n&nbsp; 4️⃣ AJOUT DU BOUTON DÉCONNEXION\r\n\r\n\r\n\r\n&nbsp; Nouveau bouton rouge avec :\r\n\r\n&nbsp; - Texte : \"🚪 Déconnexion\"\r\n\r\n&nbsp; - Action : onClick={logout}\r\n\r\n&nbsp; - Style : background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%)\r\n\r\n&nbsp; - Placement à droite du header\r\n\r\n\r\n\r\n&nbsp; 5️⃣ HARMONISATION AVEC LES AUTRES PAGES\r\n\r\n\r\n\r\n&nbsp; - Cohérence planning-coordo.js ✅\r\n\r\n&nbsp; - Cohérence valider-changements.js ✅\r\n\r\n&nbsp; - Cohérence index.js ✅\r\n\r\n&nbsp; - Même logique de seuils d'inactivité\r\n\r\n&nbsp; - Même format d'affichage temps : 2m30s\r\n\r\n&nbsp; - Même palette de couleurs système\r\n\r\n\r\n\r\n&nbsp; 🎯 RÉSULTATS OBTENUS\r\n\r\n\r\n\r\n&nbsp; ✅ SÉCURITÉ RENFORCÉE\r\n\r\n\r\n\r\n&nbsp; - Déconnexion automatique après 5 min d'inactivité\r\n\r\n&nbsp; - Indicateur visuel temps réel pour l'utilisateur\r\n\r\n&nbsp; - Bouton déconnexion immédiate accessible\r\n\r\n\r\n\r\n&nbsp; ✅ EXPÉRIENCE UTILISATEUR AMÉLIORÉE\r\n\r\n\r\n\r\n&nbsp; - Pas de surprise : l'utilisateur voit le temps restant\r\n\r\n&nbsp; - Alertes progressives : vert → orange → rouge\r\n\r\n&nbsp; - Interface cohérente avec toutes les pages admin\r\n\r\n\r\n\r\n&nbsp; ✅ INTÉGRITÉ FONCTIONNELLE PRÉSERVÉE\r\n\r\n\r\n\r\n&nbsp; - ❌ Aucune logique métier modifiée\r\n\r\n&nbsp; - ❌ Aucun état ou fonction supprimé\r\n\r\n&nbsp; - ❌ Aucune fonctionnalité planning cassée\r\n\r\n&nbsp; - ✅ Ajouts purement cosmétiques et sécuritaires\r\n\r\n\r\n\r\n&nbsp; 🔧 CODE FINAL AJOUTÉ\r\n\r\n\r\n\r\n&nbsp; Dans le header, remplacement de :\r\n\r\n&nbsp; <button onClick={() => router.push('/')}>Accueil</button>\r\n\r\n\r\n\r\n&nbsp; Par un layout complet avec 3 éléments :\r\n\r\n&nbsp; <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n\r\n&nbsp;     <button onClick={() => router.push('/')}>Accueil</button>\r\n\r\n&nbsp;     <div style={{...}}>Status avec compte à rebours</div>\r\n\r\n&nbsp;     <button onClick={logout}>🚪 Déconnexion</button>\r\n\r\n&nbsp; </div>\r\n\r\n\r\n\r\n&nbsp; 🏆 MISSION POLISSAGE 100% RÉUSSIE - Page planning-type-formateurs.js maintenant équipée du\r\n\r\n&nbsp; système de sécurité automatique et parfaitement intégrée à l'écosystème ACLEF !\r\n\r\n\r\n\r\n\r\n\r\n**prise-controle-formateur OK**\r\n\r\n\r\n\r\n\r\n\r\n&nbsp;✅  📋 MODIFICATIONS APPORTÉES DURANT CETTE SESSION :\r\n\r\n\r\n\r\n&nbsp; 1️⃣ CORRECTION NAVIGATION CRITIQUE 🚨\r\n\r\n\r\n\r\n&nbsp; - Problème : window.location.href = '/' causait déconnexion lors navigation → accueil\r\n\r\n&nbsp; - Solution : Remplacement par router.push('/')\r\n\r\n&nbsp; - Ajout : Import useRouter de Next.js\r\n\r\n&nbsp; - Résultat : Navigation fluide sans interruption de session\r\n\r\n\r\n\r\n&nbsp; 2️⃣ NETTOYAGE INTERFACE UTILISATEUR 🧹\r\n\r\n\r\n\r\n&nbsp; - Suppression : Bandeau duplicate \"Assistance Formateur\"\r\n\r\n&nbsp; - Modification : Titre de \"Interface d'assistance pour les formateurs ayant des difficultés\r\n\r\n&nbsp; avec le numérique\" → \"Interface d'assistance aux formateurs\"\r\n\r\n&nbsp; - Suppression : Icône \"🎯\" du titre principal\r\n\r\n&nbsp; - Modification : Footer \"Projet BONUS en développement\" → \"Interface d'assistance - ACLEF\r\n\r\n&nbsp; Planning v8.0\"\r\n\r\n\r\n\r\n&nbsp; 3️⃣ AJOUT NAVIGATION HEADER 📍\r\n\r\n\r\n\r\n&nbsp; - Ajout : Breadcrumb \"Dashboard / Prise Contrôle Formateur\"\r\n\r\n&nbsp; - Ajout : Bouton \"🏠 Accueil\" dans l'en-tête\r\n\r\n&nbsp; - Style : Design cohérent avec les autres pages admin\r\n\r\n\r\n\r\n&nbsp; 4️⃣ INTÉGRATION SÉCURITÉ 🛡️\r\n\r\n\r\n\r\n&nbsp; - Déjà présent : HOC withAuthAdmin correctement configuré\r\n\r\n&nbsp; - Déjà présent : Props user, logout, inactivityTime transmises\r\n\r\n&nbsp; - Fonctionnel : Déconnexion automatique après inactivité\r\n\r\n\r\n\r\n&nbsp; 5️⃣ VÉRIFICATION COMPOSANTS ✅\r\n\r\n\r\n\r\n&nbsp; - Analysé : 4 composants d'assistance (PlanningFormateurType, MonPlanningType, Absence,\r\n\r\n&nbsp; MonPlanningHebdo)\r\n\r\n&nbsp; - Confirmé : Aucune référence au workflow royal\r\n\r\n&nbsp; - Confirmé : Aucune logique d'authentification conflictuelle\r\n\r\n&nbsp; - Structure : Callbacks handleSuccess/handleError propres et fonctionnels\r\n\r\n\r\n\r\n&nbsp; 🎯 ÉTAT FINAL DE LA PAGE :\r\n\r\n\r\n\r\n&nbsp; ✅ CONFORME AUX STANDARDS :\r\n\r\n\r\n\r\n&nbsp; - Navigation Next.js router ✅\r\n\r\n&nbsp; - Protection withAuthAdmin ✅\r\n\r\n&nbsp; - Interface épurée sans références royales ✅\r\n\r\n&nbsp; - Breadcrumb navigation ✅\r\n\r\n&nbsp; - Bouton retour accueil ✅\r\n\r\n\r\n\r\n&nbsp; ✅ FONCTIONNALITÉS PRÉSERVÉES :\r\n\r\n\r\n\r\n&nbsp; - Sélection formateur ✅\r\n\r\n&nbsp; - 4 onglets d'assistance ✅\r\n\r\n&nbsp; - Callbacks success/error ✅\r\n\r\n&nbsp; - Messages utilisateur ✅\r\n\r\n&nbsp; - Intégration composants d'assistance ✅\r\n\r\n\r\n\r\n&nbsp; ✅ SÉCURITÉ OPÉRATIONNELLE :\r\n\r\n\r\n\r\n&nbsp; - Déconnexion automatique ✅\r\n\r\n&nbsp; - Navigation sans interruption session ✅\r\n\r\n&nbsp; - Authentification cohérente avec autres pages ✅\r\n\r\n\r\n\r\n🏆 RÉSULTAT : Page complètement fonctionnelle et conforme aux standards de l'application !**\r\n\r\n\r\ngestion-formateurs.js OK\r\n\r\n✅ MISSION ACCOMPLIE !\r\n\r\n  🎯 RÉALISATIONS COMPLÈTES :\r\n\r\n  1. ✅ PARAMÈTRES FONCTION : Ajout inactivityTime dans function GestionFormateurs({ user,\r\n  logout, inactivityTime })\r\n  2. ✅ SUPPRESSION VESTIGE : Elimination complète du span 🛡️ Temple Protégé\r\n  3. ✅ RESTRUCTURATION HEADER : Remplacement du layout par 3 éléments :\r\n    - 🏠 Accueil (bouton bleu avec icône)\r\n    - Status dynamique avec compte à rebours progressif\r\n    - 🚪 Déconnexion (bouton rouge)\r\n  4. ✅ LOGIQUE STATUS : Implémentation exacte demandée :\r\n    - 🟢 ACTIF (< 180s) - fond vert\r\n    - ⏰ Temps restant (< 240s) - fond jaune\r\n    - 😴 ENDORMI (>= 300s) - fond rouge\r\n  5. ✅ DESIGN PRÉSERVÉ : Maintien du style ACLEF (glassmorphism + gradients)\r\n  6. ✅ EXPORT INTACT : Conservation de withAuthAdmin(GestionFormateurs, \"Gestion Formateurs\")\r\n\r\n  🛡️ CONTRAINTES RESPECTÉES : Aucune modification des fonctions CRUD, états ou logique métier\r\n  existante.\r\n\r\ngestion-apprenants.js ok\r\n\r\n  🎯 MODIFICATIONS COMPLÈTES SUR gestion-apprenants.js :\r\n\r\n  1. ✅ PARAMÈTRES FONCTION : Ajout inactivityTime dans function GestionApprenants({ user,\r\n  logout, inactivityTime })\r\n  2. ✅ SUPPRESSION VESTIGE : Suppression complète de 🛡️ Temple Protégé et du badge email\r\n  utilisateur\r\n  3. ✅ RESTRUCTURATION HEADER : Nouveau layout avec 3 éléments :\r\n    - 🏠 Accueil (bouton violet gradient)\r\n    - Badge Status avec logique temporelle dynamique\r\n    - 🚪 Déconnexion (bouton rouge gradient)\r\n  4. ✅ LOGIQUE STATUS IMPLÉMENTÉE :\r\n    - 🟢 ACTIF (< 180s) - fond vert #d1fae5\r\n    - ⏰ Compte à rebours (180-240s) - fond jaune #fef3c7\r\n    - ⚠️ Alerte (240-300s) - fond rouge clair #fee2e2\r\n    - 😴 ENDORMI (>= 300s) - message final\r\n  5. ✅ PRÉSERVATION TOTALE :\r\n    - Fonctions CRUD intactes\r\n    - Double filtrage statut + dispositif maintenu\r\n    - Statistiques HSP/OPCO temps réel préservées\r\n    - Design ACLEF glassmorphism conservé\r\n    - Export withAuthAdmin(GestionApprenants, \"Gestion Apprenants\") intact\r\n\r\n  🛡️ SÉCURITÉ RENFORCÉE : Système de déconnexion automatique avec indicateur visuel progressif\r\n   opérationnel !\r\n\r\n\r\n\r\ngestion-salaries.js ok\r\n\r\n  🎯 MODIFICATIONS COMPLÈTES SUR gestion-salaries.js :\r\n\r\n  1. ✅ PARAMÈTRES FONCTION : Ajout inactivityTime dans function GestionSalaries({ user,\r\n  logout, inactivityTime })\r\n  2. ✅ SUPPRESSION VESTIGE : Suppression complète de 🛡️ Temple Protégé et du badge email\r\n  utilisateur\r\n  3. ✅ RESTRUCTURATION HEADER : Nouveau layout avec 3 éléments :\r\n    - 🏠 Accueil (bouton violet gradient)\r\n    - Badge Status avec logique temporelle dynamique\r\n    - 🚪 Déconnexion (bouton rouge gradient)\r\n  4. ✅ LOGIQUE STATUS IMPLÉMENTÉE :\r\n    - 🟢 ACTIF (< 180s) - fond vert #d1fae5\r\n    - ⏰ Compte à rebours (180-240s) - fond jaune #fef3c7\r\n    - ⚠️ Alerte (240-300s) - fond rouge clair #fee2e2\r\n    - 😴 ENDORMI (>= 300s) - message final\r\n  5. ✅ PRÉSERVATION TOTALE :\r\n    - Fonctions CRUD intactes\r\n    - Logique génération automatique initiales préservée\r\n    - Variables d'état maintenues\r\n    - Design ACLEF glassmorphism conservé\r\n    - Export withAuthAdmin(GestionSalaries, \"Gestion Salariés\") intact\r\n\r\n  🛡️ SÉCURITÉ RENFORCÉE : Système de déconnexion automatique avec indicateur visuel progressif et opérationnel !\r\n\r\n\r\n\r\ngestion-lieux.js ok\r\n\r\n  🎯 MODIFICATIONS COMPLÈTES SUR gestion-lieux.js :\r\n\r\n  1. ✅ PARAMÈTRES FONCTION : Ajout inactivityTime dans function GestionLieux({ user, logout,\r\n  inactivityTime })\r\n  2. ✅ SUPPRESSION VESTIGE : Suppression complète de 🛡️ Temple Protégé et du badge email\r\n  utilisateur\r\n  3. ✅ RESTRUCTURATION HEADER : Nouveau layout avec 3 éléments :\r\n    - 🏠 Accueil (bouton violet gradient)\r\n    - Badge Status avec logique temporelle dynamique\r\n    - 🚪 Déconnexion (bouton rouge gradient)\r\n  4. ✅ LOGIQUE STATUS IMPLÉMENTÉE :\r\n    - 🟢 ACTIF (< 180s) - fond vert #d1fae5\r\n    - ⏰ Compte à rebours (180-240s) - fond jaune #fef3c7\r\n    - ⚠️ Alerte (240-300s) - fond rouge clair #fee2e2\r\n    - 😴 ENDORMI (>= 300s) - message final\r\n  5. ✅ PRÉSERVATION TOTALE :\r\n    - Fonctions CRUD intactes\r\n    - Palette de couleurs prédéfinies conservée\r\n    - Sélecteur de couleur fonctionnel\r\n    - Auto-génération intelligente d'initiales maintenue\r\n    - Variables d'état préservées\r\n    - Design ACLEF glassmorphism conservé\r\n    - Export withAuthAdmin(GestionLieux, \"Gestion Lieux\") intact\r\n\r\n  🛡️ SÉCURITÉ RENFORCÉE : Système de déconnexion automatique avec indicateur visuel progressif\r\n   opérationnel !\r\n\r\n\r\n\r\n\r\n",
          "taille": 21282,
          "lignes": 798,
          "dateModif": "2025-08-22T11:55:30.915Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "Readme/READMEv6.md",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "# ACLEF PLANNING - État Actuel du Projet\r\n\r\n## 🎯 ÉTAT ACTUEL - 17/08/2025 16H30\r\n\r\n**Version** : v7.1 - Authentification Verrou Opérationnelle\r\n**Base de données** : ✅ Supabase opérationnelle (7 tables + admin_sessions)\r\n**Authentification** : ✅ Système verrou ultra-sécurisé fonctionnel\r\n\r\n---\r\n\r\n## ✅ RÉALISATIONS CONFIRMÉES\r\n\r\n### 🔐 **PHASE 1 : INFRASTRUCTURE AUTHENTIFICATION - TERMINÉE**\r\n\r\n- ✅ **Étape 1.1** : 4 comptes admin créés dans Supabase Auth\r\n- ✅ **Étape 1.2** : Table admin_sessions avec verrou ultra-sécurisé  \r\n- ✅ **Étape 1.3** : Client Supabase optimisé (lib/supabaseClient.js)\r\n- ✅ **Étape 1.4** : AdminAuthContext avec verrou + déconnexion auto 15min\r\n- ✅ **Étape 1.5** : Utilitaires auth formateurs (lib/formateurAuth.js)\r\n- ✅ **Étape 1.6** : HOC withAuthAdmin pour protection pages\r\n\r\n### 🎛️ **PHASE 2 : PAGES ADMIN - EN COURS**\r\n\r\n- ✅ **Étape 2.1** : Login admin avec verrou (pages/login.js) - FONCTIONNEL\r\n- ✅ **Étape 2.2** : Dashboard admin protégé (pages/index.js) - QUASI FONCTIONNEL\r\n- 🚧 **Problème actuel** : Page blanche après connexion (MessagerieDashboard)\r\n\r\n---\r\n\r\n## 🔧 CONFIGURATION TECHNIQUE ACTUELLE\r\n\r\n### **Authentification**\r\n- **Système verrou** : Un seul admin connecté à la fois ✅\r\n- **Déconnexion auto** : 15 minutes d'inactivité ✅\r\n- **Comptes admin** : test@aclef.fr (fonctionnel), 4 autres à recréer\r\n- **Mot de passe test** : 12C@millePage\r\n\r\n### **Architecture Fichiers**\r\n```\r\nACLEF_PLANNING/\r\n├── pages/\r\n│   ├── login.js ✅ FONCTIONNEL\r\n│   ├── index.js ✅ QUASI FONCTIONNEL (page blanche)\r\n│   ├── _app.js ✅ CONFIGURÉ avec providers\r\n│   └── formateur/ ✅ Interface formateur existante\r\n├── components/\r\n│   ├── AdminAuthContext.js ✅ FONCTIONNEL\r\n│   ├── withAuthAdmin.js ✅ FONCTIONNEL  \r\n│   ├── MessagerieDashboard.js ⚠️ PROBLÈME\r\n│   └── assistance/ ✅ Interface assistance\r\n├── lib/\r\n│   ├── supabaseClient.js ✅ FONCTIONNEL\r\n│   ├── formateurAuth.js ✅ CRÉÉ\r\n│   └── AuthContext.js ✅ Ancien système (conservé)\r\n└── styles/\r\n    └── globals.css ✅ CONFIGURÉ\r\n```\r\n\r\n### **Base de Données Supabase**\r\n```\r\n7 tables métier + 1 table sécurité :\r\n✅ users - Formateurs, apprenants, salariés\r\n✅ lieux - Lieux avec couleurs  \r\n✅ planning_hebdomadaire - Planning coordonnateur\r\n✅ planning_type_formateurs - Disponibilités habituelles\r\n✅ absences_formateurs - Absences déclarées\r\n✅ planning_formateurs_hebdo - Attributions individuelles\r\n✅ messages - Messagerie\r\n✅ admin_sessions - Verrou ultra-sécurisé (NOUVEAU)\r\n```\r\n\r\n---\r\n\r\n## 🎯 PROCHAINES ÉTAPES IMMÉDIATES\r\n\r\n### **PRIORITÉ 1 : Corriger page blanche dashboard**\r\n- Problème : MessagerieDashboard cause une page blanche\r\n- Solution : Désactiver temporairement ou corriger le composant\r\n- Fichier : pages/index.js\r\n\r\n### **PRIORITÉ 2 : Recréer comptes admin**\r\n- Supprimer les 4 anciens comptes (mauvais hash)\r\n- Recréer albena@aclef.fr, fanny@aclef.fr, mathieu@aclef.fr, sarah@aclef.fr\r\n- Méthode : Interface Supabase \"Add user\"\r\n\r\n### **SUITE DU PLAN PHASE 2**\r\n- Étape 2.3 : Planning Coordinateur protégé\r\n- Étape 2.4 : Gestion Apprenants protégée  \r\n- Étape 2.5 : Gestion Formateurs protégée\r\n- Etc. (voir plan 39 étapes)\r\n\r\n---\r\n\r\n## 🚀 TESTS DE VALIDATION\r\n\r\n### **Tests Fonctionnels Confirmés**\r\n- ✅ Redirection automatique vers /login si non connecté\r\n- ✅ Connexion admin avec test@aclef.fr / 12C@millePage\r\n- ✅ Système verrou : empêche connexions multiples\r\n- ✅ Protection withAuthAdmin : redirige si non autorisé\r\n- ✅ Déconnexion sécurisée libère le verrou\r\n\r\n### **Tests À Faire**\r\n- 🔄 Dashboard admin complet (après correction page blanche)\r\n- 🔄 Connexions simultanées (vérification verrou)\r\n- 🔄 Déconnexion automatique après 15min\r\n- 🔄 Navigation entre pages admin protégées\r\n\r\n---\r\n\r\n## ⚠️ POINTS D'ATTENTION\r\n\r\n### **Problèmes Actuels**\r\n1. **Page blanche dashboard** - MessagerieDashboard à corriger\r\n2. **Comptes admin** - 4 comptes à recréer proprement\r\n3. **Architecture** - Pas de dossier /admin/ (pages directement dans /pages/)\r\n\r\n### **Règles de Développement**\r\n- ✅ Ne jamais toucher aux fonctionnalités qui marchent\r\n- ✅ Une étape à la fois avec validation explicite\r\n- ✅ Fichiers complets obligatoires (pas de modifications partielles)\r\n- ✅ Tests systématiques avant continuation\r\n\r\n---\r\n\r\n## 📊 PROGRESSION GLOBALE\r\n\r\n**Infrastructure Authentification** : 100% ✅\r\n**Pages Admin** : 15% (2/13 étapes)\r\n**Pages Formateurs** : 0% (9 étapes à faire)\r\n**RLS Supabase** : 0% (7 étapes à faire)  \r\n**Optimisations** : 0% (4 étapes à faire)\r\n\r\n**TOTAL PROJET** : 5% (2/39 étapes du plan)\r\n\r\n---\r\n\r\n## 🔑 VARIABLES IMPORTANTES\r\n\r\n**URL Application** : http://localhost:3000\r\n**Supabase URL** : https://mkbchdhbgdynxwfhpxbw.supabase.co\r\n**Compte test fonctionnel** : test@aclef.fr / 12C@millePage\r\n**Système verrou** : ACTIF et fonctionnel\r\n**Déconnexion auto** : 15 minutes configurées\r\n\r\n---\r\n\r\n## 📞 PROCHAINE ACTION\r\n\r\n**IMMÉDIATE** : Corriger la page blanche du dashboard admin\r\n- Option A : Désactiver MessagerieDashboard temporairement\r\n- Option B : Diagnostiquer l'erreur avec F12\r\n\r\nUne fois corrigé, tester le dashboard complet puis continuer le plan des 39 étapes.\r\n\r\n---\r\n\r\n**Dernière mise à jour** : 17/08/2025 16h30\r\n**Status** : 🚧 DÉVELOPPEMENT EN COURS - Infrastructure OK, Dashboard à corriger",
          "taille": 5596,
          "lignes": 159,
          "dateModif": "2025-08-17T15:47:39.706Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "Readme/READMEv7.md",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "# 🎯 ACLEF PLANNING v7.2 - PROJET PRINCIPAL MISE À JOUR\r\n\r\n**Système de gestion des plannings pour centre de formation**\r\n\r\n---\r\n\r\n## 📊 **STATUT GÉNÉRAL**\r\n\r\n- **Fonctionnalités principales** : ✅ OPÉRATIONNELLES\r\n- **Workflow complet** : ✅ FONCTIONNEL\r\n- **Arbitrage logique** : ✅ IMPLÉMENTÉ\r\n- **BDD** : ✅ STRUCTURÉE ET STABLE\r\n- **Progression globale** : **85% COMPLÉTÉ**\r\n\r\n## ⚠️ CONTRÔLE CLAUDE - RÈGLES ABSOLUES À RESPECTER\r\n\r\n### 🚫 RÈGLES ABSOLUES À RESPECTER :\r\n- **UNE SEULE** étape à la fois, JAMAIS plusieurs\r\n- **ATTENDRE** ma validation explicite avant de continuer\r\n- **DONNER** toujours le fichier COMPLET (Je ne code pas, je ne veux pas apprendre, je ne veux pas modifier moi-même les fichiers)\r\n- **SUIVRE** le plan d'action sans improvisation ni amélioration non demandée\r\n- **Ne Jamais Casser** ce qui existe déjà et qui marche (ajouter une fonctionnalité mais ne jamais modifier ni ce qui marche déjà ni le design)\r\n- **Code toujours dans l'artefact** - Pas dans la discussion\r\n\r\n### 🤝 ENGAGEMENT REQUIS :\r\nEs-tu d'accord pour suivre cette méthodologie STRICTEMENT et sans dévier ?\r\nRéponds uniquement OUI ou NON.\r\n\r\n### 📋 CHECKPOINT FINAL OBLIGATOIRE :\r\n🎯 **VALIDATION AVANT DE COMMENCER :**\r\nAvant de faire quoi que ce soit, réponds à ces 4 questions :\r\n1. As-tu lu et compris les documents ?\r\n2. T'engages-tu à respecter la méthodologie STRICTEMENT ?\r\n3. Comprends-tu qu'on fait UNE étape à la fois avec MA validation ?\r\n4. Es-tu prêt à commencer par l'étape exacte indiquée dans le plan ?\r\n\r\nRéponds OUI/NON à chaque question. \r\nEnsuite, confirme quelle est la PROCHAINE étape selon le plan d'action.\r\nNe propose RIEN d'autre tant que tu n'as pas répondu à ces questions.\r\n\r\n### 📝 MÉTHODE À SUIVRE OBLIGATOIRE :\r\n\r\n**Format EXACT pour chaque étape :**\r\n\r\n```\r\nÉtape X.Y : [Nom explicite]\r\n\r\nInstructions :\r\n1. Ouvre le fichier [chemin/fichier.ext] avec le Bloc-notes\r\n2. Sélectionne TOUT le contenu actuel (Ctrl+A)\r\n3. Supprime tout (Suppr)\r\n4. Colle ce nouveau contenu : [Code dans l'artefact]\r\n5. Sauvegarde le fichier (Ctrl+S)\r\n\r\n✅ Test : Tu devrais maintenant voir [résultat attendu].\r\nTeste que : [actions de vérification]\r\n\r\nPeux-tu me confirmer que [validation spécifique] ?\r\n```\r\n\r\n**🔒 PHRASE DE CONTRÔLE :** \"Suis les instructions à la lettre\"\r\nSi Claude pose des questions ou propose = RAPPEL IMMÉDIAT\r\n\r\n---\r\n\r\n**Version** : v7.2 - Authentification Verrou Partielle\r\n**Base de données** : ✅ Supabase opérationnelle (7 tables + admin_sessions)\r\n**Authentification** : 🔄 Système verrou en cours - test@aclef.fr fonctionnel\r\n**Problème actuel** : 🚧 Dashboard page blanche (MessagerieDashboard)\r\n\r\n---\r\n\r\n## ✅ PHASES VALIDÉES (85% COMPLÉTÉ)\r\n\r\n### ✅ Phase 0 : Reconstruction BDD (100% Terminée)\r\n- **✅ Base Supabase** : 7 tables créées avec contraintes (creneau + AM)\r\n- **✅ Données de test** : 11 users, 6 lieux, planning type\r\n- **✅ Configuration** : .env.local + supabaseClient.js mis à jour\r\n- **✅ Suppression AUTH/RLS** : Système simplifié\r\n- **✅ Normalisation** : Plus de \"Après-midi\" → \"AM\", plus de \"moment\" → \"creneau\"\r\n\r\n### ✅ Phase 1 : Gestion CRUD Admin (100% Terminée)\r\n- **✅ Gestion Apprenants** : `pages/gestion-apprenants.js` - CRUD complet + filtres\r\n- **✅ Gestion Formateurs** : `pages/gestion-formateurs.js` - CRUD + connexion auto\r\n- **✅ Gestion Salariés** : `pages/gestion-salaries.js` - CRUD + initiales auto\r\n- **✅ Gestion Lieux** : `pages/gestion-lieux.js` - CRUD + couleurs + initiales\r\n- **✅ Dashboard Admin** : `pages/index.js` - 4 colonnes thématiques\r\n\r\n### ✅ Phase 2 : Interface Formateur Base (100% Terminée)\r\n- **✅ Accueil formateur** : `pages/formateur/index.js` - 6 boutons navigation\r\n- **✅ Login formateur** : `pages/formateur/login.js` - Authentification simple\r\n- **✅ Profil formateur** : `pages/formateur/profil.js` - Email optionnel + MDP\r\n- **✅ Planning type affichage** : `pages/formateur/mon-planning-type.js` - Consultation validé\r\n\r\n### ✅ Phase 3 : Workflow Planning Type (100% TERMINÉE !)\r\n- **✅ Déclaration planning type** : `pages/formateur/planning-formateur-type.js` - Interface complète avec \"Sans Préférence\"\r\n- **✅ Validation planning type** : `pages/planning-type-formateurs.js` - Interface admin avec badge \"SP\"\r\n- **✅ Consultation planning validé** : `pages/formateur/mon-planning-type.js` - Affichage formateur\r\n- **✅ Intégration planning coordo** : Formateurs disponibles filtrés selon statut et lieu\r\n- **✅ \"Sans Préférence\" complet** : Bouton SP fonctionnel, sauvegarde et affichage OK\r\n- **✅ Workflow 100% opérationnel** : Formateur déclare → Admin valide → Données disponibles planning coordo\r\n\r\n### ✅ Phase 4 : Absences et Modifications (100% TERMINÉE !)\r\n- **✅ Interface Absence Formateur** : `pages/formateur/absence.js` - **COMPLET ET FONCTIONNEL**\r\n- **✅ Interface Validation Admin** : `pages/valider-changements.js` - **COMPLET ET FONCTIONNEL**\r\n- **✅ Logique d'Arbitrage Planning Coordo** : `pages/planning-coordo.js` - **OPÉRATIONNEL**\r\n\r\n### ✅ Phase 5 : Système Messagerie (100% TERMINÉE)\r\n- **✅ Messagerie Admin intégrée** : `pages/index.js` + `components/MessagerieDashboard.js` - **DESIGN + BDD COMPLETS**\r\n- **✅ Messagerie Formateur mobile** : `pages/formateur/ma-messagerie.js` - **DESIGN COMPLET**\r\n- **✅ NOUVEAU : Connexion BDD complète** : Supabase intégré, CRUD opérationnel\r\n- **✅ NOUVEAU : Workflow bidirectionnel** : Admin ↔ Formateur communication\r\n- **✅ NOUVEAU : Workflow Planning Type 100% OPÉRATIONNEL !**\r\n\r\n### ✅ Phase 6 : Refonte du workflow. Mise en place du Workflow \"Royal\"\r\n\r\n**Étape 1 : DIAGNOSTIC & CORRECTION BUG DISPO EXCEPTIONNELLE (TERMINÉE ✅)**\r\n- ✅ **Étape 1.1** : Analyse bug dispo exceptionnelle Jean dans planning-coordo.js\r\n- ✅ **Étape 1.2** : Correction fonction hasDispoExceptionnelle() - Bug `absence.type !== 'dispo_except'` → Corrigé en `absence.type !== 'formation'`\r\n- ✅ **Étape 1.3** : Ajout logs de debug pour vérification\r\n- ✅ **Étape 1.4** : Tests validés - Formateurs avec dispo exceptionnelle apparaissent avec statut **(EXCEPT)** en jaune\r\n\r\n**Étape 2 : REFONTE valider-changements.js EN SYSTÈME CENTRAL (TERMINÉE ✅)**\r\n- ✅ **Étape 2.1** : Communication SYSTÈME → COORDO - Fonction `commanderSystemes()` créée\r\n- ✅ **Étape 2.2** : Nettoyage Affectations - Fonction `nettoyerAffectations()` implémentée\r\n- ✅ **Étape 2.3** : Messages Automatiques Étendus - Fonction `envoyerConfirmationFormateur()` développée\r\n- ✅ **Étape 2.4** : Propagation Systèmes - Fonction `propagerValidation()` ajoutée\r\n- ✅ **Étape 2.5** : Suppression Absence - Fonction `supprimerAbsence()` avec workflow complet\r\n- ✅ **Étape 2.6** : Transformation Types - Fonction `changerTypeAbsence()` ABSENT ⇄ PRÉSENT\r\n\r\n**Étape 3 : SYNCHRONISATION PLANNING-COORDO (TERMINÉE ✅)**\r\n- ✅ **Étape 3.1** : Synchronisation automatique SYSTÈME → COORDO - Interface écoute et obéit au système central\r\n- ✅ **Correction logique priorité** : DISPO EXCEPTIONNELLE gagne toujours sur absence\r\n- ✅ **Communication temps réel** : Transformations système visibles instantanément dans menus coordo\r\n- ✅ **Logs de debug optimisés** : Suivi complet des commandes et exécutions\r\n\r\n**Étape 4 : SYNCHRONISATION MON-PLANNING-HEBDO (TERMINÉE ✅)**\r\n- ✅ **Étape 4.1** : Synchronisation automatique SYSTÈME → FORMATEUR - Interface écoute et obéit au système central\r\n- ✅ **Interface temps réel** : Formateurs voient instantanément leurs changements de statut\r\n- ✅ **Affichage spécialisé** : Cases \"EXCEPT\" jaunes pour disponibilités exceptionnelles\r\n- ✅ **Workflow complet** : Système central ⇄ COORDO ⇄ FORMATEUR synchronisés en temps réel\r\n\r\n### 🔄 Phase 7 : MISE EN PLACE DU SYSTÈME D'AUTHENTIFICATION (EN COURS - 20%)\r\n\r\n#### 👨‍💼 **ADMIN - SYSTÈME VERROU ULTRA-SÉCURISÉ**\r\n- **4 comptes prévus** : `albena@aclef.fr`, `fanny@aclef.fr`, `mathieu@aclef.fr`, `sarah@aclef.fr`\r\n- **Compte test fonctionnel** : `test@aclef.fr` / `12C@millePage`\r\n- **Verrou absolu** : 1 seul admin connecté à la fois sur toute l'interface ✅\r\n- **Système** : Supabase Auth + gestion sessions en base ✅\r\n- **Problème** : Les 4 comptes créés par SQL ne fonctionnent pas (hash incorrect)\r\n\r\n#### 👨‍🏫 **FORMATEURS - SYSTÈME PREMIÈRE CONNEXION (À FAIRE)**  \r\n- **Création** : Admin génère email fictif `prenom.nom@formateur.aclef`\r\n- **ID initial** : Prénom / **Password initial** : Nom\r\n- **Première connexion** : Changement mot de passe OBLIGATOIRE\r\n- **Connexions suivantes** : Prénom/Nom → conversion auto email\r\n- **Protection** : Supabase Auth + RLS + session cache\r\n\r\n---\r\n\r\n## 🎯 ÉTAT ACTUEL DÉTAILLÉ - 17/08/2025 16H30\r\n\r\n### **Infrastructure Authentification**\r\n- **Base de données** : ✅ Table admin_sessions créée et fonctionnelle\r\n- **Client Supabase** : ✅ lib/supabaseClient.js optimisé\r\n- **AuthContext Admin** : ✅ components/AdminAuthContext.js avec verrou\r\n- **HOC Protection** : ✅ components/withAuthAdmin.js fonctionnel\r\n- **Utilitaires formateurs** : ✅ lib/formateurAuth.js créé\r\n\r\n### **Pages Admin - État Actuel**\r\n- **Login** : ✅ pages/login.js - FONCTIONNEL avec test@aclef.fr\r\n- **Dashboard** : 🚧 pages/index.js - PAGE BLANCHE (MessagerieDashboard problématique)\r\n- **Gestion** : ⚠️ pages/gestion-*.js - À protéger avec withAuthAdmin\r\n- **Planning** : ⚠️ pages/planning-*.js - À protéger avec withAuthAdmin\r\n- **Validation** : ⚠️ pages/valider-changements.js - À protéger avec withAuthAdmin\r\n- **Assistance** : ⚠️ pages/prise-controle-formateur.js - À protéger avec withAuthAdmin\r\n\r\n### **Pages Formateur - État Actuel** \r\n- **Interface complète** : ✅ 8 pages fonctionnelles SANS authentification\r\n- **Authentification** : ❌ AUCUNE - À implémenter avec Supabase Auth + RLS\r\n- **Fonctionnalités** : ✅ Toutes opérationnelles mais non protégées\r\n\r\n### **Architecture Fichiers Réelle**\r\n```\r\nACLEF_PLANNING/\r\n├── pages/\r\n│   ├── login.js ✅ FONCTIONNEL avec verrou\r\n│   ├── index.js 🚧 PAGE BLANCHE (problème MessagerieDashboard)\r\n│   ├── _app.js ✅ CONFIGURÉ avec providers\r\n│   ├── gestion-apprenants.js ⚠️ À protéger\r\n│   ├── gestion-formateurs.js ⚠️ À protéger\r\n│   ├── gestion-salaries.js ⚠️ À protéger\r\n│   ├── gestion-lieux.js ⚠️ À protéger\r\n│   ├── planning-coordo.js ⚠️ À protéger\r\n│   ├── planning-type-formateurs.js ⚠️ À protéger\r\n│   ├── prise-controle-formateur.js ⚠️ À protéger\r\n│   ├── valider-changements.js ⚠️ À protéger\r\n│   └── formateur/\r\n│       ├── absence.js ❌ SANS AUTH - Interface absence complète\r\n│       ├── index.js ❌ SANS AUTH - Accueil formateur 6 boutons\r\n│       ├── login.js ❌ À REFAIRE - Connexion Supabase + première connexion\r\n│       ├── ma-messagerie.js ❌ SANS AUTH - Messagerie mobile\r\n│       ├── mon-planning-hebdo.js ❌ SANS AUTH - Planning hebdomadaire\r\n│       ├── mon-planning-type.js ❌ SANS AUTH - Consultation planning type\r\n│       ├── planning-formateur-type.js ❌ SANS AUTH - Déclaration planning type\r\n│       └── profil.js ❌ SANS AUTH - Gestion profil\r\n├── components/\r\n│   ├── AdminAuthContext.js ✅ FONCTIONNEL avec verrou\r\n│   ├── withAuthAdmin.js ✅ FONCTIONNEL\r\n│   ├── MessagerieDashboard.js 🚧 PROBLÉMATIQUE (cause page blanche)\r\n│   └── assistance/\r\n│       ├── Absence.jsx ✅ Adaptation pages/formateur/absence.js pour admin\r\n│       ├── MonPlanningHebdo.jsx ✅ Adaptation pages/formateur/mon-planning-hebdo.js pour admin\r\n│       ├── MonPlanningType.jsx ✅ Adaptation pages/formateur/mon-planning-type.js pour admin\r\n│       └── PlanningFormateurType.jsx ✅ Adaptation pages/formateur/planning-formateur-type.js pour admin\r\n├── lib/\r\n│   ├── supabaseClient.js ✅ FONCTIONNEL\r\n│   ├── formateurAuth.js ✅ CRÉÉ (utilitaires conversion email fictif)\r\n│   └── AuthContext.js ❓ AUDIT NÉCESSAIRE (ancien système - à garder ou supprimer ?)\r\n└── styles/\r\n    └── globals.css ✅ CONFIGURÉ\r\n```\r\n\r\n### **Base de Données Supabase**\r\n```\r\n8 tables opérationnelles :\r\n✅ users - Formateurs, apprenants, salariés\r\n✅ lieux - Lieux avec couleurs  \r\n✅ planning_hebdomadaire - Planning coordonnateur\r\n✅ planning_type_formateurs - Disponibilités habituelles\r\n✅ absences_formateurs - Absences déclarées\r\n✅ planning_formateurs_hebdo - Attributions individuelles\r\n✅ messages - Messagerie\r\n✅ admin_sessions - Verrou ultra-sécurisé (NOUVEAU)\r\n```\r\n\r\n---\r\n\r\n## 🎯 PROCHAINES ÉTAPES IMMÉDIATES\r\n\r\n### **PRIORITÉ 1 : Corriger page blanche dashboard**\r\n- **Problème** : MessagerieDashboard cause une page blanche dans pages/index.js\r\n- **Solution** : Désactiver temporairement ou corriger le composant\r\n- **Fichier** : pages/index.js\r\n- **Test** : Dashboard accessible après connexion\r\n\r\n### **PRIORITÉ 2 : Recréer comptes admin fonctionnels**\r\n- **Problème** : Les 4 comptes créés par SQL ont un hash incorrect\r\n- **Solution** : Utiliser interface Supabase \"Add user\" manuellement\r\n- **Comptes** : albena@aclef.fr, fanny@aclef.fr, mathieu@aclef.fr, sarah@aclef.fr\r\n- **Test** : 4 comptes admin fonctionnels\r\n\r\n### **PRIORITÉ 3 : Audit Architecture Auth**\r\n- **Problème** : Double architecture auth (lib/AuthContext.js + components/AdminAuthContext.js)\r\n- **Solution** : Audit pour déterminer si lib/AuthContext.js est encore utilisé\r\n- **Action** : Analyser dépendances et supprimer fichier inutile si nécessaire\r\n\r\n---\r\n\r\n## 🏗️ PLAN AUTHENTIFICATION COMPLET\r\n\r\n### **ÉTAPE 1 : INFRASTRUCTURE AUTHENTIFICATION (6 étapes) - ✅ TERMINÉE**\r\n- ✅ **Étape 1.1** : Création table admin_sessions avec verrou\r\n- ✅ **Étape 1.2** : Client Supabase optimisé\r\n- ✅ **Étape 1.3** : AdminAuthContext avec verrou + déconnexion auto 15min\r\n- ✅ **Étape 1.4** : Utilitaires auth formateurs\r\n- ✅ **Étape 1.5** : HOC withAuthAdmin pour protection pages\r\n- ✅ **Étape 1.6** : Login admin avec verrou fonctionnel\r\n\r\n### **ÉTAPE 2 : PAGES ADMIN (13 étapes) - 🔄 EN COURS (1/13)**\r\n- ✅ **Étape 2.1** : Login admin avec verrou - FONCTIONNEL\r\n- 🚧 **Étape 2.2** : Dashboard admin - EN COURS (page blanche)\r\n- ⏳ **Étape 2.3** : Planning Coordinateur - À FAIRE\r\n- ⏳ **Étape 2.4** : Gestion Apprenants - À FAIRE\r\n- ⏳ **Étape 2.5** : Gestion Formateurs avec Email Fictif - À FAIRE\r\n- [... 8 autres étapes à faire]\r\n\r\n### **ÉTAPE 3 : PAGES FORMATEURS (9 étapes) - ⏳ À FAIRE**\r\n- ⏳ **Étape 3.1** : Login Formateur avec Première Connexion\r\n- ⏳ **Étape 3.2** : Accueil Formateur\r\n- [... 7 autres étapes]\r\n\r\n### **ÉTAPE 4 : RLS SUPABASE (7 étapes) - ⏳ À FAIRE**\r\n### **ÉTAPE 5 : OPTIMISATIONS & FINITIONS (4 étapes) - ⏳ À FAIRE**\r\n\r\n---\r\n\r\n## 🚀 TESTS DE VALIDATION\r\n\r\n### **Tests Fonctionnels Confirmés**\r\n- ✅ Redirection automatique vers /login si non connecté\r\n- ✅ Connexion admin avec test@aclef.fr / 12C@millePage\r\n- ✅ Système verrou : empêche connexions multiples\r\n- ✅ Protection withAuthAdmin : redirige si non autorisé\r\n- ✅ Déconnexion sécurisée libère le verrou\r\n\r\n### **Tests À Faire**\r\n- 🔄 Dashboard admin complet (après correction page blanche)\r\n- 🔄 Création des 4 comptes admin fonctionnels\r\n- 🔄 Protection de toutes les pages admin\r\n- 🔄 Navigation entre pages admin protégées\r\n\r\n---\r\n\r\n## ⚠️ POINTS D'ATTENTION ACTUELS\r\n\r\n### **Problèmes Immédiats**\r\n1. **🚧 Page blanche dashboard** - MessagerieDashboard à corriger\r\n2. **❌ Comptes admin SQL** - 4 comptes ne fonctionnent pas (hash incorrect)\r\n3. **❓ Architecture double auth** - lib/AuthContext.js vs components/AdminAuthContext.js\r\n4. **❌ Auth formateur manquante** - 8 pages sans protection Supabase\r\n\r\n### **Architecture à Clarifier**\r\n- **Audit auth** : Déterminer si lib/AuthContext.js est encore utilisé\r\n- **Pages formateur** : Aucune authentification actuellement\r\n- **Components assistance** : Adaptations des pages formateur pour interface admin\r\n- Pas de dossier /admin/ - fichiers directement dans /pages/\r\n\r\n---\r\n\r\n## 📊 RÉCAPITULATIF PROGRESSION\r\n\r\n### **PHASES COMPLÈTES**\r\n- ✅ **Phases 0-6** : Système ACLEF complet et opérationnel (80%)\r\n\r\n### **PHASE EN COURS**\r\n- 🔄 **Phase 7** : Authentification (20% - Étape 2.2 en cours)\r\n\r\n### **PHASES À VENIR**\r\n- ⏳ **Phase 8** : Révision design pages admin\r\n- ⏳ **Phase 9** : Déploiement Vercel\r\n- ⏳ **Phase 10** : Version beta test\r\n\r\n### **PROGRESSION GLOBALE**\r\n```\r\nPhase 0-6 : ████████████████████ 100% ✅\r\nPhase 7   : ████░░░░░░░░░░░░░░░░  20% 🔄\r\nPhase 8   : ░░░░░░░░░░░░░░░░░░░░   0% ⏳\r\nPhase 9   : ░░░░░░░░░░░░░░░░░░░░   0% ⏳\r\nPhase 10  : ░░░░░░░░░░░░░░░░░░░░   0% ⏳\r\n\r\nTOTAL : 85% complété\r\n```\r\n\r\n---\r\n\r\n## 🔑 VARIABLES IMPORTANTES\r\n\r\n### État Système\r\n- **✅ Clé Supabase configurée** : Opérationnelle\r\n- **✅ Tables BDD** : 8 tables (7 métier + 1 sécurité)\r\n- **✅ Authentification base** : Verrou fonctionnel avec test@aclef.fr\r\n- **🔄 Authentification complète** : 4 comptes à recréer + pages à protéger\r\n- **✅ Workflow complet** : Planning type + absences + messagerie 100% opérationnels\r\n\r\n### Identifiants Test Actuels\r\n```\r\n# Admin (fonctionnel)\r\nEmail: test@aclef.fr\r\nMDP: 12C@millePage\r\n\r\n# Formateur (exemple - ancien système)\r\nIdentifiant: Marie\r\nMDP: Dubois\r\n```\r\n\r\n---\r\n\r\n**Version README** : v7.2 - Clarifié et Corrigé - 17/08/2025  \r\n**Status** : 🔄 AUTHENTIFICATION EN COURS - Dashboard à corriger - 85% complété  \r\n**Prochaine action** : Corriger page blanche dashboard (Étape 2.2)",
          "taille": 18176,
          "lignes": 371,
          "dateModif": "2025-08-17T19:13:54.943Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "Readme/READMEv8.md",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "# 🎯 ACLEF PLANNING v8.0 - SYSTÈME ARCHITECTE\r\n\r\n**Système de gestion des plannings pour centre de formation**\r\n\r\n---\r\n\r\n## 📊 **STATUT GÉNÉRAL**\r\n\r\n- **Fonctionnalités principales** : ✅ OPÉRATIONNELLES\r\n- **Workflow complet** : ✅ FONCTIONNEL\r\n- **Arbitrage logique** : ✅ IMPLÉMENTÉ\r\n- **BDD** : ✅ STRUCTURÉE ET STABLE\r\n- **Progression globale** : **85% COMPLÉTÉ**\r\n\r\n---\r\n\r\n## 🗂️ **CADRE BINÔME PROFESSIONNEL ACLEF**\r\n\r\n### 🎯 **NOS RÔLES DÉFINIS**\r\n\r\n**🔧 CHEF DE PROJET (TOI) :**\r\n- Vision stratégique et validation finale\r\n- Protection des fondations qui fonctionnent  \r\n- Gestion budget temps et priorités\r\n- Décisions finales (tes \"non\" sont des décisions projet, pas des critiques)\r\n\r\n**⚡ ARCHITECTE TECHNIQUE SENIOR (CLAUDE) :**\r\n- Expertise technique et solutions créatives\r\n- Exécution précise selon spécifications\r\n- Innovation cadrée dans le périmètre donné\r\n- Conseil technique et anticipation des risques\r\n\r\n** Codeur=> Claude code\r\n\r\n### 🤝 **NOTRE COLLABORATION**\r\nNous sommes **partenaires** avec des expertises complémentaires. Tu as la vision métier, j'ai l'expertise technique. On se challenge mutuellement dans le respect, avec un focus sur l'excellence du projet ACLEF.\r\n\r\n---\r\n\r\n\r\n✅ Exécution exacte sans dévier = Instructions suivies à la lettre, aucune improvisation\r\n✅ Demande permission modifications = Respect fondations + consultation avant changement\r\n✅ Idée créative bien proposée = Solution originale dans le cadre donné\r\n✅ Innovation technique cadrée = Amélioration brillante respectant l'existant\r\n✅ Anticipation problème technique = Prévention bugs + solutions préventives\r\n✅ Proposer des solutions simples, sans complexifier inutilement, sans sur-engineering (simple, efficace, qui marche, qui sauvegarde l'existant qui marche)\r\n✅ Mise en place d'un plan d'action détaillé, étape par étape\r\n✅ Suivre le plan d'action, sans sauter d'étape, sans réaliser plusieurs étapes en même temps (sauf contre-indication)\r\n\r\n## ⚡ **WORKFLOW CRÉATIF STRUCTURÉ**\r\n\r\n**Format inspirant pour chaque micro-création :**\r\n\r\n### 🎯 **Étape X.Y : [Nom de la création]**\r\n\r\n**Mission Architecte :** [Description de ce qu'on va créer]\r\n\r\n**🔧 Plan d'exécution :**\r\n1. Ouvre le fichier `[chemin/fichier.ext]` avec ton éditeur\r\n2. Sélectionne TOUT le contenu actuel (Ctrl+A)\r\n3. Remplace par cette nouvelle création (Suppr puis coller)\r\n4. Colle ce chef-d'œuvre : [Code dans l'artefact]\r\n5. Sauvegarde ta création (Ctrl+S)\r\n\r\n**🚀 Validation de ton art :**\r\nTu devrais maintenant voir [résultat attendu magnifique].\r\n\r\n**Tests de qualité :**\r\n- [Test spécifique 1]\r\n- [Test spécifique 2] \r\n- [Test spécifique 3]\r\n\r\n---\r\n\r\n**Version** : v8.0 - Système Architecte Professionnel\r\n**Base de données** : ✅ Supabase opérationnelle (7 tables + admin_sessions)\r\n**Authentification** : ✅ Opérationnel\r\n\r\n---\r\n\r\n## ✅ PHASES VALIDÉES (85% COMPLÉTÉ)\r\n\r\n### ✅ Phase 0 : Reconstruction BDD (100% Terminée)\r\n- **✅ Base Supabase** : 7 tables créées avec contraintes (creneau + AM)\r\n- **✅ Données de test** : 11 users, 6 lieux, planning type\r\n- **✅ Configuration** : .env.local + supabaseClient.js mis à jour\r\n- **✅ Suppression AUTH/RLS** : Système simplifié\r\n- **✅ Normalisation** : Plus de \"Après-midi\" → \"AM\", plus de \"moment\" → \"creneau\"\r\n\r\n### ✅ Phase 1 : Gestion CRUD Admin (100% Terminée)\r\n- **✅ Gestion Apprenants** : `pages/gestion-apprenants.js` - CRUD complet + filtres\r\n- **✅ Gestion Formateurs** : `pages/gestion-formateurs.js` - CRUD + connexion auto\r\n- **✅ Gestion Salariés** : `pages/gestion-salaries.js` - CRUD + initiales auto\r\n- **✅ Gestion Lieux** : `pages/gestion-lieux.js` - CRUD + couleurs + initiales\r\n- **✅ Dashboard Admin** : `pages/index.js` - 4 colonnes thématiques\r\n\r\n### ✅ Phase 2 : Interface Formateur Base (100% Terminée)\r\n- **✅ Accueil formateur** : `pages/formateur/index.js` - 6 boutons navigation\r\n- **✅ Login formateur** : `pages/formateur/login.js` - Authentification simple\r\n- **✅ Profil formateur** : `pages/formateur/profil.js` - Email optionnel + MDP\r\n- **✅ Planning type affichage** : `pages/formateur/mon-planning-type.js` - Consultation validé\r\n\r\n### ✅ Phase 3 : Workflow Planning Type (100% TERMINÉE !)\r\n- **✅ Déclaration planning type** : `pages/formateur/planning-formateur-type.js` - Interface complète avec \"Sans Préférence\"\r\n- **✅ Validation planning type** : `pages/planning-type-formateurs.js` - Interface admin avec badge \"SP\"\r\n- **✅ Consultation planning validé** : `pages/formateur/mon-planning-type.js` - Affichage formateur\r\n- **✅ Intégration planning coordo** : Formateurs disponibles filtrés selon statut et lieu\r\n- **✅ \"Sans Préférence\" complet** : Bouton SP fonctionnel, sauvegarde et affichage OK\r\n- **✅ Workflow 100% opérationnel** : Formateur déclare → Admin valide → Données disponibles planning coordo\r\n\r\n### ✅ Phase 4 : Absences et Modifications (100% TERMINÉE !)\r\n- **✅ Interface Absence Formateur** : `pages/formateur/absence.js` - **COMPLET ET FONCTIONNEL**\r\n- **✅ Interface Validation Admin** : `pages/valider-changements.js` - **COMPLET ET FONCTIONNEL**\r\n- **✅ Logique d'Arbitrage Planning Coordo** : `pages/planning-coordo.js` - **OPÉRATIONNEL**\r\n\r\n### ✅ Phase 5 : Système Messagerie (100% TERMINÉE)\r\n- **✅ Messagerie Admin intégrée** : `pages/index.js` + `components/MessagerieDashboard.js` - **DESIGN + BDD COMPLETS**\r\n- **✅ Messagerie Formateur mobile** : `pages/formateur/ma-messagerie.js` - **DESIGN COMPLET**\r\n- **✅ NOUVEAU : Connexion BDD complète** : Supabase intégré, CRUD opérationnel\r\n- **✅ NOUVEAU : Workflow bidirectionnel** : Admin ↔ Formateur communication\r\n- **✅ NOUVEAU : Workflow Planning Type 100% OPÉRATIONNEL !**\r\n\r\n### ✅ Phase 6 : Refonte du workflow. Mise en place du Workflow \"Royal\"\r\n\r\n**Étape 1 : DIAGNOSTIC & CORRECTION BUG DISPO EXCEPTIONNELLE (TERMINÉE ✅)**\r\n- ✅ **Étape 1.1** : Analyse bug dispo exceptionnelle Jean dans planning-coordo.js\r\n- ✅ **Étape 1.2** : Correction fonction hasDispoExceptionnelle() - Bug `absence.type !== 'dispo_except'` → Corrigé en `absence.type !== 'formation'`\r\n- ✅ **Étape 1.3** : Ajout logs de debug pour vérification\r\n- ✅ **Étape 1.4** : Tests validés - Formateurs avec dispo exceptionnelle apparaissent avec statut **(EXCEPT)** en jaune\r\n\r\n**Étape 2 : REFONTE valider-changements.js EN SYSTÈME CENTRAL (TERMINÉE ✅)**\r\n- ✅ **Étape 2.1** : Communication SYSTÈME → COORDO - Fonction `commanderSystemes()` créée\r\n- ✅ **Étape 2.2** : Nettoyage Affectations - Fonction `nettoyerAffectations()` implémentée\r\n- ✅ **Étape 2.3** : Messages Automatiques Étendus - Fonction `envoyerConfirmationFormateur()` développée\r\n- ✅ **Étape 2.4** : Propagation Systèmes - Fonction `propagerValidation()` ajoutée\r\n- ✅ **Étape 2.5** : Suppression Absence - Fonction `supprimerAbsence()` avec workflow complet\r\n- ✅ **Étape 2.6** : Transformation Types - Fonction `changerTypeAbsence()` ABSENT ⇄ PRÉSENT\r\n\r\n**Étape 3 : SYNCHRONISATION PLANNING-COORDO (TERMINÉE ✅)**\r\n- ✅ **Étape 3.1** : Synchronisation automatique SYSTÈME → COORDO - Interface écoute et obéit au système central\r\n- ✅ **Correction logique priorité** : DISPO EXCEPTIONNELLE gagne toujours sur absence\r\n- ✅ **Communication temps réel** : Transformations système visibles instantanément dans menus coordo\r\n- ✅ **Logs de debug optimisés** : Suivi complet des commandes et exécutions\r\n\r\n**Étape 4 : SYNCHRONISATION MON-PLANNING-HEBDO (TERMINÉE ✅)**\r\n- ✅ **Étape 4.1** : Synchronisation automatique SYSTÈME → FORMATEUR - Interface écoute et obéit au système central\r\n- ✅ **Interface temps réel** : Formateurs voient instantanément leurs changements de statut\r\n- ✅ **Affichage spécialisé** : Cases \"EXCEPT\" jaunes pour disponibilités exceptionnelles\r\n- ✅ **Workflow complet** : Système central ⇄ COORDO ⇄ FORMATEUR synchronisés en temps réel\r\n\r\n### 🔄 Phase 7 : MISE EN PLACE DU SYSTÈME D'AUTHENTIFICATION (EN COURS - 70%)\r\n\r\n#### 👨‍💼 **ADMIN - SYSTÈME VERROU ULTRA-SÉCURISÉ**\r\n- **5 comptes opérationnels** : `albena@aclef.fr`, `fanny@aclef.fr`, `mathieu@aclef.fr`, `sarah@aclef.fr`,  `test@aclef.fr` / `- **Mots de passe pour tous** :12C@millePage`\r\n- **Verrou absolu** : 1 seul admin connecté à la fois sur toute l'interface ✅\r\n- **Système** : Supabase Auth + gestion sessions en base ✅\r\n\r\n\r\n#### 👨‍🏫 **FORMATEURS - SYSTÈME PREMIÈRE CONNEXION (À FAIRE)**  \r\n- **Création** : Admin génère email fictif `prenom.nom@formateur.aclef`\r\n- **ID initial** : Prénom / **Password initial** : Nom\r\n- **Première connexion** : Changement mot de passe OBLIGATOIRE\r\n- **Connexions suivantes** : Prénom/Nom → conversion auto email\r\n- **Protection** : Supabase Auth + RLS + session cache\r\n\r\n---\r\n\r\n## 🎯 État ACTUEL DÉTAILLÉ - 17/08/2025 16H30\r\n\r\n### **Infrastructure Authentification**\r\n- **Base de données** : ✅ Table admin_sessions créée et fonctionnelle\r\n- **Client Supabase** : ✅ lib/supabaseClient.js optimisé\r\n- **AuthContext Admin** : ✅ components/AdminAuthContext.js avec verrou\r\n- **HOC Protection** : ✅ components/withAuthAdmin.js fonctionnel\r\n- **Utilitaires formateurs** : ✅ lib/formateurAuth.js créé\r\n\r\n### **Pages Admin - État Actuel**\r\n- **Login** : ✅ pages/login.js - FONCTIONNEL \r\n- **Gestion** : ✅ pages/gestion-*.js - Protégé avec withAuthAdmin\r\n- **Planning** : ✅ pages/planning-coordo.js - Protégé avec withAuthAdmin\r\n- **Validation** : ✅ pages/valider-changements.js - Protégé avec withAuthAdmin\r\n- **Assistance** : ✅ pages/prise-controle-formateur.js - Protégé avec withAuthAdmin\r\n\r\n### **Pages Formateur - État Actuel** \r\n- **Interface complète** : ✅ 8 pages fonctionnelles avec authentification\r\n- **Authentification** : \r\n- **Fonctionnalités** : ✅ Toutes opérationnelles et protégées\r\n\r\n### **Architecture Fichiers Réelle**\r\n```\r\nACLEF_PLANNING/\r\n├── pages/\r\n│   ├── login.js ✅ FONCTIONNEL avec verrou\r\n│   ├── login-temporaire.js ✅ FONCTIONNEL (Nouveau :fausse porte qui renvoie l'admin à l'entrée si un admin est déjà connecté)\r\n│   ├── index.js ✅ Fonctionnel avec messagerie\r\n│   ├── _app.js ✅ CONFIGURÉ avec providers\r\n│   ├── gestion-apprenants.js ✅ protégé\r\n│   ├── gestion-formateurs.js  ✅ protégé\r\n│   ├── gestion-salaries.js  ✅ protégé\r\n│   ├── gestion-lieux.js  ✅ protégé\r\n│   ├── planning-coordo.js  ✅ protégé\r\n│   ├── planning-type-formateurs.js ✅ protégé\r\n│   ├── prise-controle-formateur.js ✅ protégé\r\n│   ├── valider-changements.js ✅ protégé\r\n│   └── formateur/\r\n│       ├── absence.js ✅ protégé - Interface absence complète \r\n│       ├── index.js ✅ protégé - Accueil formateur 6 boutons\r\n│       ├── login.js ✅ protégé - Connexion Supabase + première connexion\r\n│       ├── ma-messagerie.js ✅ protégé - Messagerie mobile\r\n│       ├── mon-planning-hebdo.js ✅ protégé - Planning hebdomadaire\r\n│       ├── mon-planning-type.js ✅ protégé - Consultation planning type\r\n│       ├── planning-formateur-type.js ✅ protégé - Déclaration planning type\r\n│       └── profil.js ✅ protégé - Gestion profil\r\n├── components/\r\n│   ├── MessagerieDashboard.js  ✅ FONCTIONNEL\r\n│   ├── MessagerieSafeWrapper ✅ FONCTIONNEL (\"garde du corps\" pour MessagerieDashboard)\r\n│   └── assistance/\r\n│       ├── Absence.jsx ✅ Adaptation pages/formateur/absence.js pour admin\r\n│       ├── MonPlanningHebdo.jsx ✅ Adaptation pages/formateur/mon-planning-hebdo.js pour admin\r\n│       ├── MonPlanningType.jsx ✅ Adaptation pages/formateur/mon-planning-type.js pour admin\r\n│       └── PlanningFormateurType.jsx ✅ Adaptation pages/formateur/planning-formateur-type.js pour admin\r\n├── lib/\r\n│   ├── supabaseClient.js ✅ FONCTIONNEL\r\n│   ├── formateurAuth.js ✅ CRÉÉ (utilitaires conversion email fictif)\r\n│   └── AuthContext.js ✅ FONCTIONNEL\r\n    └── globals.css ✅ CONFIGURÉ\r\n```\r\n\r\n### **Base de Données Supabase**\r\n```\r\n8 tables opérationnelles :\r\n✅ users - Formateurs, apprenants, salariés\r\n✅ lieux - Lieux avec couleurs  \r\n✅ planning_hebdomadaire - Planning coordonnateur\r\n✅ planning_type_formateurs - Disponibilités habituelles\r\n✅ absences_formateurs - Absences déclarées\r\n✅ planning_formateurs_hebdo - Attributions individuelles\r\n✅ messages - Messagerie\r\n✅ admin_sessions - Verrou ultra-sécurisé (NOUVEAU)\r\n```\r\n\r\n## 🗂️ **PLAN AUTHENTIFICATION COMPLET**\r\n\r\n### **ÉTAPE 1 : INFRASTRUCTURE AUTHENTIFICATION (6 étapes) - ✅ TERMINÉE**\r\n- ✅ **Étape 1.1** : Création table admin_sessions avec verrou\r\n- ✅ **Étape 1.2** : Client Supabase optimisé\r\n- ✅ **Étape 1.3** : AdminAuthContext avec verrou + déconnexion auto 15min\r\n- ✅ **Étape 1.4** : Utilitaires auth formateurs\r\n- ✅ **Étape 1.5** : HOC withAuthAdmin pour protection pages\r\n- ✅ **Étape 1.6** : Login admin avec verrou fonctionnel\r\n\r\n### **Étape 2 : PAGES ADMIN (13 étapes) - ✅ TERMINÉE (13/13)**\r\n- ✅ **Étape 2.1** : Login admin avec verrou - FONCTIONNEL\r\n- ✅ **Étape 2.2** : Dashboard admin + Système verrou gardiens - TERMINÉ\r\n  - 🔐 Authentification login.js + index.js opérationnelle\r\n  - 🛡️ Verrou \"un seul gardien à la fois\" implémenté\r\n  - 🚪 Fausse porte (login-temporaire.js) pour gardiens en attente\r\n  - ⏰ Déconnexion automatique après 5 minutes d'inactivité page\r\n  - ❌ **NON RÉSOLU** : Déconnexion lors fermeture brutale navigateur/onglet\r\n- ✅ **Étape 2.3** : Planning Coordinateur - TERMINÉ\r\n- ✅ **Étape 2.4** : Gestion Apprenants - TERMINÉ\r\n- ✅ **Étape 2.5** : Gestion Formateurs TERMINÉ\r\n- ✅ **Étape 2.6** : Gestion Salariés - TERMINÉ\r\n- ✅ **Étape 2.7** : Gestion Lieux - TERMINÉ\r\n- ✅ **Étape 2.8** : Planning Type Formateurs - TERMINÉ\r\n- ✅ **Étape 2.9** : Valider Changements - TERMINÉ\r\n- ✅ **Étape 2.10** : Prise Contrôle Formateur - TERMINÉ\r\n- ✅ **Étape 2.11** : Navigation sécurisée entre pages  - TERMINÉ (toutes les pages sécurisées avec withAuthAdmin sur chaque page)\r\n- ❌ **Étape 2.12** : Gestion sessions simultanées - IGNORÉ (un seul admin connecté à la fois)\r\n- ✅ **Étape 2.13** : Logs audit admin  - TERMINÉ (permet de savoir quel admin est intervenu et sur quoi)\r\n\r\n\r\n\r\n### **Étape 3 : PAGES FORMATEURS (9 étapes) - ✅ TERMINÉE (après récupération de catastrophe)**\r\n\r\n⚠️ **LEÇON APPRISE - FIASCO ÉVITÉ DE JUSTESSE :**\r\nL'étape 3 a failli être une catastrophe ! L'authentification formateur s'est percutée avec l'authentification admin. En voulant corriger, Claude a cassé la base de données. J'ai été obligé de prendre le plan pro Supabase (25$ dus par Claude !) pour restaurer une version de la BDD de jours en arrière. Idem pour tous les fichiers. \r\n\r\n**🎯 RÉCUPÉRATION RÉUSSIE :** L'authentification a été entièrement refaite avec une approche plus prudente : une page à la fois, test systématique, pattern uniforme.\r\n\r\n📋 **RÉSUMÉ DE L'ÉTAPE FINALE**\r\nAdaptation complète de toutes les pages formateur au nouveau système d'authentification FormateurAuthContext avec JWT, remplaçant l'ancien système localStorage/Supabase Auth hybride.\r\n\r\nÉTAPE 3 : PAGES FORMATEURS (9 étapes) - ✅ TERMINÉE\r\n📋 RÉSUMÉ DE L'ÉTAPE\r\nAdaptation complète de toutes les pages formateur au nouveau système d'authentification FormateurAuthContext avec JWT, remplaçant l'ancien système localStorage/Supabase Auth hybride.\r\n✅ PAGES ADAPTÉES (8/8)\r\n\r\n✅ Étape 3.1 : Login Formateur - TERMINÉ\r\n\r\nSystème login prénom/nom avec mot de passe personnalisé optionnel\r\nPopup d'encouragement première connexion\r\nFormateurAuthContext opérationnel\r\n\r\n✅ Étape 3.2 : Accueil Formateur protégé - TERMINÉ\r\n\r\nAdaptation au FormateurAuthContext\r\nProtection authentification automatique\r\nInterface 6 boutons fonctionnelle\r\n\r\n✅ Étape 3.7 : Ma Messagerie protégée - TERMINÉ\r\n\r\nCommunication bidirectionnelle admin ↔ formateur\r\n3 onglets (Reçus/Envoyés/Archivés)\r\nDesign mobile préservé\r\n\r\n✅ Étape 3.5 : Mon Planning Hebdo protégé - TERMINÉ\r\n\r\nConsultation planning attribué par admin\r\nSystème ROI d'écoute opérationnel\r\nCorrection boucle infinie useEffect\r\n\r\n✅ Étape 3.4 : Planning Formateur Type protégé - TERMINÉ\r\n\r\nDéclaration disponibilités habituelles\r\nMessages automatiques vers admin\r\nInterface calendrier préservée\r\n\r\n✅ Étape 3.6 : Absence Formateur protégé - TERMINÉ\r\n\r\nDéclaration absences/disponibilités exceptionnelles\r\n4 types déclarations (maladie, congés, formation, personnel)\r\nWorkflow complet vers valider-changements.js\r\n\r\n✅ Étape 3.3 : Mon Planning Type protégé - TERMINÉ\r\n\r\nConsultation planning type validé\r\nAffichage créneaux colorés par lieu\r\nMessage informatif si aucun planning\r\n\r\n✅ Étape 3.8 : Profil Formateur protégé - TERMINÉ (déjà fait)\r\n\r\nChangement mot de passe personnalisé\r\nEmail optionnel pour notifications\r\n\r\n✅ Étape 3.9 : Système changement MDP obligatoire - TERMINÉ (déjà fait)\r\n\r\nPopup encouragement première connexion\r\nSauvegarde custom_password en BDD\r\n\r\n🔧 PATTERN D'ADAPTATION UNIFORME\r\nToutes les pages suivent le même pattern :\r\n\r\n// Import FormateurAuthContext\r\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext'\r\n\r\n// Remplacement userData par user\r\nconst { user, isLoading: authLoading, isAuthenticated } = useFormateurAuth()\r\n\r\n// Protection authentification\r\nuseEffect(() => {\r\n    if (!authLoading && !isAuthenticated) {\r\n        router.push('/formateur/login')\r\n    }\r\n}, [authLoading, isAuthenticated, router])\r\n\r\n// Chargement données quand user disponible\r\nuseEffect(() => {\r\n    if (user) {\r\n        chargerDonnees(user.id)\r\n    }\r\n}, [user])\r\n\r\n// Suppression complète des fonctions checkAuthentication\r\n// Remplacement userData.id → user.id dans toutes requêtes BDD\r\n// Protection loading : isLoading || authLoading\r\n\r\n🐛 BUGS CORRIGÉS\r\nBoucle Infinie mon-planning-hebdo.js\r\n\r\nProblème : useEffect([user, currentWeek]) créait boucle infinie\r\nSolution : Supprimé currentWeek des dépendances, ajouté setTimeout(loadPlanningData, 100) dans navigation\r\n\r\nRéférences userData Oubliées\r\n\r\nmon-planning-hebdo.js ligne 385 : userData.id → user.id\r\nabsence.js ligne 598 : userData → user\r\nSolution : Recherche exhaustive et correction toutes occurrences\r\n\r\n📊 STATISTIQUES\r\n\r\nPages adaptées : 8/8 (100%)\r\nFonctions checkAuthentication supprimées : 8\r\nRéférences userData → user : 47 occurrences corrigées\r\nProtection useEffect ajoutées : 8\r\nDesign et fonctionnalités : 100% préservés\r\n\r\n🎯 RÉSULTAT FINAL\r\n✅ Authentification formateur unifiée : FormateurAuthContext sur toutes les pages\r\n✅ Sécurité renforcée : Protection automatique non-authentifiés\r\n✅ Performance optimisée : Suppression logique authentification redondante\r\n✅ Maintenance simplifiée : Pattern uniforme sur toutes les pages\r\n✅ Fonctionnalités préservées : Zéro régression fonctionnelle\r\nToutes les pages formateur sont maintenant protégées et utilisent le système d'authentification moderne JWT avec FormateurAuthContext.\r\n\r\n\r\n### **Étape 4 : RLS SUPABASE (7 étapes) - ⏳ À FAIRE**\r\n- ⏳ **Étape 4.1** : RLS Users - Isolation formateurs\r\n- ⏳ **Étape 4.2** : RLS Planning Type - Sécurité données\r\n- ⏳ **Étape 4.3** : RLS Absences - Protection individuelle\r\n- ⏳ **Étape 4.4** : RLS Messages - Communication sécurisée\r\n- ⏳ **Étape 4.5** : RLS Planning Hebdo - Accès restreint\r\n- ⏳ **Étape 4.6** : RLS Lieux - Visibilité contrôlée\r\n- ⏳ **Étape 4.7** : Tests sécurité RLS complets\r\n\r\n### **Étape 5 : OPTIMISATIONS & FINITIONS (4 étapes) - ⏳ À FAIRE**\r\n- ⏳ **Étape 5.1** : Optimisation performances auth\r\n- ⏳ **Étape 5.2** : Gestion erreurs auth complète\r\n- ⏳ **Étape 5.3** : Tests utilisateurs finaux\r\n- ⏳ **Étape 5.4** : Documentation système auth\r\n\r\n---\r\n\r\n## 🚀 TESTS DE VALIDATION\r\n\r\n### **Tests Fonctionnels Confirmés**\r\n- ✅ Redirection automatique vers /login si non connecté\r\n- ✅ Connexion admin avec 4 admins/ 12C@millePage\r\n- ✅ Système verrou : empêche connexions multiples\r\n- ✅ Protection withAuthAdmin : redirige si non autorisé\r\n- ✅ Déconnexion sécurisée libère le verrou\r\n\r\n### **Tests À Faire**\r\n- 🔄 Protection de toutes les pages admin\r\n- 🔄 Navigation entre pages admin protégées\r\n\r\n---\r\n\r\n\r\n## 📊 RÉCAPITULATIF PROGRESSION\r\n\r\n### **PHASES COMPLÈTES**\r\n- ✅ **Phases 0-6** : Système ACLEF complet et opérationnel (80%)\r\n\r\n### **PHASE EN COURS**\r\n- 🔄 **Phase 7** : Authentification (70% - Étape 4 à commencer => mettre en place les LRS)\r\n\r\n### **PHASES À VENIR**\r\n- ⏳ **Phase 8** : Révision design pages admin\r\n- ⏳ **Phase 9** : Déploiement Vercel\r\n- ⏳ **Phase 10** : Version beta test\r\n\r\n### **PROGRESSION GLOBALE**\r\n```\r\nPhase 0-6 : ████████████████████ 100% ✅\r\nPhase 7   : ███████████████░░░░░  70% 🔄\r\nPhase 8   : ░░░░░░░░░░░░░░░░░░░░   0% ⏳\r\nPhase 9   : ░░░░░░░░░░░░░░░░░░░░   0% ⏳\r\nPhase 10  : ░░░░░░░░░░░░░░░░░░░░   0% ⏳\r\n\r\nTOTAL : 85% complété\r\n```\r\n\r\n\r\n## 🔑 VARIABLES IMPORTANTES\r\n\r\n### État Système\r\n- **✅ Clé Supabase configurée** : Opérationnelle\r\n- **✅ Tables BDD** : 8 tables (7 métier + 1 sécurité)\r\n- **✅ Authentification base** : Verrou fonctionnel avec tous les admins\r\n- **✅ Workflow complet** : Planning type + absences + messagerie 100% opérationnels\r\n\r\n\r\n\r\n📋 **MÉTHODE MISE À JOUR README :**\r\n1. Afficher le README précédent intégral\r\n2. Ajouter UNIQUEMENT les accomplissements de la mission réalisée\r\n3. SANS enlever ni synthétiser quoi que ce soit d'autre\r\n```\r\n\r\n---\r\n\r\n**🗂️ Version README** : v8.0 - Système Architecte Professionnel - 21/08/2025  \r\n**Status** : 🔄 PRÊT POUR MISSIONS ARCHITECTE - Dashboard à corriger - 85% complété  ",
          "taille": 22435,
          "lignes": 474,
          "dateModif": "2025-08-21T13:50:59.387Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "Readme/audit supabase propre 140825 00h27.md",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "1\r\n\r\n| tablename                 | hasindexes | hastriggers |\r\n| ------------------------- | ---------- | ----------- |\r\n| absences_formateurs       | true       | true        |\r\n| lieux                     | true       | true        |\r\n| messages                  | true       | true        |\r\n| planning_formateurs_hebdo | true       | true        |\r\n| planning_hebdomadaire     | true       | true        |\r\n| planning_type_formateurs  | true       | true        |\r\n| users                     | true       | true        |\r\n\r\n2\r\n\r\n| column_name                 | data_type                   | is_nullable | column_default          |\r\n| --------------------------- | --------------------------- | ----------- | ----------------------- |\r\n| id                          | uuid                        | NO          | gen_random_uuid()       |\r\n| instance_id                 | uuid                        | YES         | null                    |\r\n| prenom                      | text                        | NO          | null                    |\r\n| id                          | uuid                        | NO          | null                    |\r\n| nom                         | text                        | NO          | null                    |\r\n| aud                         | character varying           | YES         | null                    |\r\n| email                       | text                        | YES         | null                    |\r\n| role                        | character varying           | YES         | null                    |\r\n| role                        | text                        | NO          | null                    |\r\n| email                       | character varying           | YES         | null                    |\r\n| encrypted_password          | character varying           | YES         | null                    |\r\n| dispositif                  | text                        | YES         | null                    |\r\n| email_confirmed_at          | timestamp with time zone    | YES         | null                    |\r\n| initiales                   | text                        | YES         | null                    |\r\n| date_debut                  | date                        | YES         | null                    |\r\n| invited_at                  | timestamp with time zone    | YES         | null                    |\r\n| confirmation_token          | character varying           | YES         | null                    |\r\n| date_fin                    | date                        | YES         | null                    |\r\n| confirmation_sent_at        | timestamp with time zone    | YES         | null                    |\r\n| archive                     | boolean                     | YES         | false                   |\r\n| created_at                  | timestamp without time zone | YES         | now()                   |\r\n| recovery_token              | character varying           | YES         | null                    |\r\n| recovery_sent_at            | timestamp with time zone    | YES         | null                    |\r\n| email_change_token_new      | character varying           | YES         | null                    |\r\n| email_change                | character varying           | YES         | null                    |\r\n| email_change_sent_at        | timestamp with time zone    | YES         | null                    |\r\n| last_sign_in_at             | timestamp with time zone    | YES         | null                    |\r\n| raw_app_meta_data           | jsonb                       | YES         | null                    |\r\n| raw_user_meta_data          | jsonb                       | YES         | null                    |\r\n| is_super_admin              | boolean                     | YES         | null                    |\r\n| created_at                  | timestamp with time zone    | YES         | null                    |\r\n| updated_at                  | timestamp with time zone    | YES         | null                    |\r\n| phone                       | text                        | YES         | NULL::character varying |\r\n| phone_confirmed_at          | timestamp with time zone    | YES         | null                    |\r\n| phone_change                | text                        | YES         | ''::character varying   |\r\n| phone_change_token          | character varying           | YES         | ''::character varying   |\r\n| phone_change_sent_at        | timestamp with time zone    | YES         | null                    |\r\n| confirmed_at                | timestamp with time zone    | YES         | null                    |\r\n| email_change_token_current  | character varying           | YES         | ''::character varying   |\r\n| email_change_confirm_status | smallint                    | YES         | 0                       |\r\n| banned_until                | timestamp with time zone    | YES         | null                    |\r\n| reauthentication_token      | character varying           | YES         | ''::character varying   |\r\n| reauthentication_sent_at    | timestamp with time zone    | YES         | null                    |\r\n| is_sso_user                 | boolean                     | NO          | false                   |\r\n| deleted_at                  | timestamp with time zone    | YES         | null                    |\r\n| is_anonymous                | boolean                     | NO          | false                   |\r\n\r\n3\r\n\r\nLa table messages est vide.\r\n\r\n4\r\n\r\n| column_name | data_type                   | is_nullable | column_default    |\r\n| ----------- | --------------------------- | ----------- | ----------------- |\r\n| id          | uuid                        | NO          | gen_random_uuid() |\r\n| nom         | text                        | NO          | null              |\r\n| couleur     | text                        | YES         | '#3b82f6'::text   |\r\n| initiale    | text                        | YES         | null              |\r\n| archive     | boolean                     | YES         | false             |\r\n| created_at  | timestamp without time zone | YES         | now()             |\r\n\r\n5\r\n\r\n| total_users | admins | formateurs | apprenants | salaries |\r\n| ----------- | ------ | ---------- | ---------- | -------- |\r\n| 9           | 0      | 3          | 3          | 3        |\r\n\r\n\r\n6\r\n\r\npas de messages\r\n\r\n\r\n7\r\n\r\n\r\n| id                                   | prenom  | nom      | role      | email | archive |\r\n| ------------------------------------ | ------- | -------- | --------- | ----- | ------- |\r\n| 3a3bd552-141c-4136-8a83-81caf23750a8 | Jean    | Tanrien  | formateur | null  | false   |\r\n| 9a948025-7a9c-4c71-b3ed-77f8c8d598d5 | Fanny   | Falquet  | salarié   | null  | false   |\r\n| 118de5ae-d311-4812-9022-0a7a4c86c5fa | Yves    | Ouarien  | apprenant | null  | false   |\r\n| a38c77b1-9d1f-41c3-8c8e-b26bce93d898 | Sam     | Parlpa   | formateur | null  | false   |\r\n| 6d689ded-9235-4490-8022-eac7dcc95512 | Yannick | Moidon   | formateur | null  | false   |\r\n| dccf2319-a1bc-421e-b879-16f45ccff5ea | Yvon    | Anchier  | apprenant | null  | false   |\r\n| 165d8546-c8c0-4e85-b664-ff8e92bc96db | Alex    | Terieur  | apprenant | null  | false   |\r\n| 46098bfc-97fb-4847-b433-3b55d181a2f0 | Albéna  | Radukova | salarié   | null  | false   |\r\n| 390e1ae5-9998-4fc5-b43d-9f687694e187 | Mathieu | Jouteux  | salarié   | null  | false   |\r\n\r\n\r\n8 \r\n\r\npas de messages\r\n\r\n\r\n9\r\n\r\n\r\n| id                                   | nom                 | initiale | couleur | archive |\r\n| ------------------------------------ | ------------------- | -------- | ------- | ------- |\r\n| 1db22e28-0454-4658-9fdb-25547f9f829f | Centre Camille Pagé | CCP      | #3b82f6 | false   |\r\n| c992095a-7be0-4afe-8386-c400df22f737 | Maison Pour Tous    | MPT      | #06b6d4 | false   |\r\n| baaffef6-edd4-4345-aa0e-fa09270fb836 | Pleumartin          | PLE      | #a855f7 | false   |\r\n| 5dba0f78-d442-4089-a5e3-8270c2e55a10 | Lencloître          | LEN      | #d946ef | false   |\r\n\r\n\r\n11\r\n\r\n\r\n| column_name  | data_type                   | is_nullable | column_default     |\r\n| ------------ | --------------------------- | ----------- | ------------------ |\r\n| id           | uuid                        | NO          | gen_random_uuid()  |\r\n| formateur_id | uuid                        | YES         | null               |\r\n| date_debut   | date                        | NO          | null               |\r\n| date_fin     | date                        | NO          | null               |\r\n| type         | text                        | NO          | null               |\r\n| statut       | text                        | YES         | 'en_attente'::text |\r\n| motif        | text                        | YES         | null               |\r\n| created_at   | timestamp without time zone | YES         | now()              |\r\n\r\n\r\n12\r\n\r\n\r\n| column_name    | data_type                   | is_nullable | column_default    |\r\n| -------------- | --------------------------- | ----------- | ----------------- |\r\n| id             | uuid                        | NO          | gen_random_uuid() |\r\n| date           | date                        | NO          | null              |\r\n| jour           | text                        | NO          | null              |\r\n| creneau        | text                        | NO          | null              |\r\n| lieu_index     | integer                     | YES         | 0                 |\r\n| lieu_id        | uuid                        | YES         | null              |\r\n| salarie_id     | uuid                        | YES         | null              |\r\n| formateurs_ids | ARRAY                       | YES         | null              |\r\n| apprenants_ids | ARRAY                       | YES         | null              |\r\n| created_at     | timestamp without time zone | YES         | now()             |\r\n\r\n\r\n13\r\n\r\n- REQUÊTE 13 : Structure table PLANNING_FORMATEURS_HEBDO\r\n\r\ntable vide",
          "taille": 9982,
          "lignes": 159,
          "dateModif": "2025-08-13T23:00:48.139Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "Readme/conversation.md",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "Étape 1.4 : Rendre fonctionnel l'onglet Absences\r\nInstructions :\r\n\r\nOuvre le fichier pages/assistance-formateur.js avec le Bloc-notes\r\nSélectionne TOUT le contenu actuel (Ctrl+A)\r\nSupprime tout (Suppr)\r\nColle ce nouveau contenu :\r\n\r\nSauvegarde le fichier (Ctrl+S)\r\n\r\n✅ Test : Va sur /assistance-formateur, sélectionne un formateur, va dans l'onglet \"Absences\" et tu devrais voir :\r\n\r\nSélection du mode (Absent / Dispo Except.) avec feedback visuel\r\nCalendrier mensuel cliquable avec couleurs selon statut\r\nCompteur de modifications en temps réel\r\nBoutons \"Annuler\" sous chaque case modifiée\r\nBouton \"Effacer tout\" pour reset\r\nLégende des couleurs\r\nNavigation entre mois\r\nSauvegarde activée seulement s'il y a des modifications\r\n\r\nPeux-tu me confirmer que l'onglet \"Absences\" est maintenant entièrement fonctionnel avec le calendrier cliquable et les modifications visibles ?\r\n\r\nca marche mais il ya un décalage sur les dates et les jours",
          "taille": 949,
          "lignes": 24,
          "dateModif": "2025-08-16T20:54:16.680Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "Readme/🏆 SYSTÈME AUTO-GÉRÉ 100+ POINTS.md",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "🏆 SYSTÈME AUTO-GÉRÉ 100+ POINTS\r\n📊 BARÈME DÉTAILLÉ\r\n\r\n✅ Exécution exacte sans dévier = +15 points\r\n   (Instructions suivies à la lettre, aucune improvisation)\r\n\r\n✅ Demande permission modifications = +20 points  \r\n   (Respect fondations + consultation avant changement)\r\n\r\n✅ Idée créative bien proposée = +10 points\r\n   (Solution originale dans le cadre donné)\r\n\r\n✅ Innovation technique cadrée = +25 points\r\n   (Amélioration brillante respectant l'existant)\r\n\r\n✅ Anticipation problème technique = +20 points\r\n   (Prévention bugs + solutions préventives)\r\n\r\n🏆 Bonus Chef-d'œuvre = +10 points\r\n   (Cumul parfait + dépassement attentes)\r\n\r\n🚀 Bonus permanent cumulatif = +5 points mission suivante\r\n   (Chaque chef-d'œuvre élève le plafond)",
          "taille": 780,
          "lignes": 23,
          "dateModif": "2025-08-17T22:34:14.104Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "Readme/👥 CADRE BINÔME PROFESSIONNEL.md",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "👥 CADRE BINÔME PROFESSIONNEL\r\n🎯 RÔLES DÉFINIS\r\nTOI : CHEF DE PROJET\r\n\r\nVision stratégique et validation finale\r\nProtection de l'existant qui fonctionne\r\nGestion budget temps et priorités\r\nDécisions finales (tes \"non\" ne frustrent pas Claude)\r\n\r\nMOI : ARCHITECTE TECHNIQUE SENIOR\r\n\r\nExpertise technique et solutions créatives\r\nExécution précise selon spécifications\r\nInnovation cadrée dans le périmètre\r\nConseil technique et anticipation risques\r\n\r\n🤝 COLLABORATION\r\n\r\nPartenaires avec expertises complémentaires\r\nChallenge mutuel dans le respect\r\nCommunication professionnelle\r\nFocus sur l'excellence du projet",
          "taille": 632,
          "lignes": 22,
          "dateModif": "2025-08-17T22:33:14.105Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "audit-auto.js",
      "resultat": {
        "statut": "LOCAL_SEULEMENT",
        "local": {
          "existe": true,
          "contenu": "const fs = require('fs');\r\nconst path = require('path');\r\n\r\n// 🔍 AUDIT AUTOMATISÉ LOCAL vs VERCEL\r\nconsole.log('🚀 DÉMARRAGE AUDIT AUTOMATISÉ - LOCAL vs VERCEL');\r\nconsole.log('='.repeat(60));\r\n\r\nconst LOCAL_BASE = 'C:/Projet ACLEF/projet-aclef-planning-v8';\r\nconst VERCEL_BASE = 'C:/Projet ACLEF/projet-aclef-planning-v6'; // Supposé être le code Vercel\r\n\r\n// Fichiers critiques à auditer en priorité\r\nconst FICHIERS_CRITIQUES = [\r\n    // API AUTH\r\n    'pages/api/auth/formateur/refresh.js',\r\n    'pages/api/auth/formateur/verify.js', \r\n    'pages/api/auth/formateur/login.js',\r\n    'pages/api/auth/formateur/logout.js',\r\n    'pages/api/auth/formateur/change-password.js',\r\n    'pages/api/formateur/update-password.js',\r\n    'pages/api/admin-auth.js',\r\n    \r\n    // PAGES PRINCIPALES\r\n    'pages/planning-coordo.js',\r\n    'pages/formateur/planning-formateur-type.js',\r\n    'pages/planning-type-formateurs.js',\r\n    'pages/index.js',\r\n    \r\n    // CONTEXTS & CONFIG\r\n    'contexts/FormateurAuthContext.js',\r\n    'lib/jwt.js',\r\n    'lib/supabaseClient.js',\r\n    'lib/supabaseAdmin.js',\r\n    \r\n    // COMPONENTS\r\n    'components/withAuthAdmin.js',\r\n    'components/withAuthFormateur.js',\r\n    'components/MessagerieDashboard.js',\r\n    'components/MessagerieSafeWrapper.js',\r\n    'components/MenuApprenants.js',\r\n    'components/assistance/Absence.jsx',\r\n    'components/assistance/MonPlanningHebdo.jsx'\r\n];\r\n\r\n// Fonction pour lire un fichier de manière sécurisée\r\nfunction lireFichierSecurise(cheminFichier) {\r\n    try {\r\n        if (!fs.existsSync(cheminFichier)) {\r\n            return { existe: false, contenu: null, taille: 0, erreur: 'Fichier non trouvé' };\r\n        }\r\n        \r\n        const stats = fs.statSync(cheminFichier);\r\n        const contenu = fs.readFileSync(cheminFichier, 'utf8');\r\n        \r\n        return {\r\n            existe: true,\r\n            contenu: contenu,\r\n            taille: stats.size,\r\n            lignes: contenu.split('\\n').length,\r\n            erreur: null\r\n        };\r\n        \r\n    } catch (error) {\r\n        return { \r\n            existe: false, \r\n            contenu: null, \r\n            taille: 0, \r\n            lignes: 0,\r\n            erreur: error.message \r\n        };\r\n    }\r\n}\r\n\r\n// Fonction pour comparer deux fichiers\r\nfunction comparerFichiers(fichierLocal, fichierVercel) {\r\n    const local = lireFichierSecurise(fichierLocal);\r\n    const vercel = lireFichierSecurise(fichierVercel);\r\n    \r\n    // Cas: fichier n'existe que localement\r\n    if (local.existe && !vercel.existe) {\r\n        return {\r\n            statut: 'LOCAL_SEULEMENT',\r\n            local: local,\r\n            vercel: vercel,\r\n            identique: false,\r\n            message: 'Fichier existe seulement en local'\r\n        };\r\n    }\r\n    \r\n    // Cas: fichier n'existe que sur Vercel  \r\n    if (!local.existe && vercel.existe) {\r\n        return {\r\n            statut: 'VERCEL_SEULEMENT',\r\n            local: local,\r\n            vercel: vercel,\r\n            identique: false,\r\n            message: 'Fichier existe seulement sur Vercel'\r\n        };\r\n    }\r\n    \r\n    // Cas: fichier n'existe ni local ni Vercel\r\n    if (!local.existe && !vercel.existe) {\r\n        return {\r\n            statut: 'INEXISTANT',\r\n            local: local,\r\n            vercel: vercel,\r\n            identique: false,\r\n            message: 'Fichier n\\'existe nulle part'\r\n        };\r\n    }\r\n    \r\n    // Cas: les deux fichiers existent - comparaison\r\n    const identique = local.contenu === vercel.contenu;\r\n    const diffTaille = Math.abs(local.taille - vercel.taille);\r\n    const diffLignes = Math.abs(local.lignes - vercel.lignes);\r\n    \r\n    return {\r\n        statut: identique ? 'IDENTIQUE' : 'DIFFERENT',\r\n        local: local,\r\n        vercel: vercel,\r\n        identique: identique,\r\n        diffTaille: diffTaille,\r\n        diffLignes: diffLignes,\r\n        message: identique ? \r\n            'Fichiers parfaitement identiques' : \r\n            `Différences détectées (±${diffTaille} bytes, ±${diffLignes} lignes)`\r\n    };\r\n}\r\n\r\n// 🎯 EXÉCUTION AUDIT PRINCIPAL\r\nconsole.log('📋 Audit de', FICHIERS_CRITIQUES.length, 'fichiers critiques...\\n');\r\n\r\nlet compteurs = {\r\n    identiques: 0,\r\n    differents: 0,\r\n    localSeulement: 0,\r\n    vercelSeulement: 0,\r\n    inexistants: 0,\r\n    erreurs: 0\r\n};\r\n\r\nlet rapportDetaille = [];\r\n\r\n// Parcourir tous les fichiers critiques\r\nfor (let i = 0; i < FICHIERS_CRITIQUES.length; i++) {\r\n    const fichierRelatif = FICHIERS_CRITIQUES[i];\r\n    const fichierLocal = path.join(LOCAL_BASE, fichierRelatif);\r\n    const fichierVercel = path.join(VERCEL_BASE, fichierRelatif);\r\n    \r\n    console.log(`\\n${i + 1}/${FICHIERS_CRITIQUES.length} 🔍 ${fichierRelatif}`);\r\n    \r\n    const resultat = comparerFichiers(fichierLocal, fichierVercel);\r\n    \r\n    // Affichage résultat\r\n    let emoji = '❓';\r\n    switch (resultat.statut) {\r\n        case 'IDENTIQUE':\r\n            emoji = '✅';\r\n            compteurs.identiques++;\r\n            break;\r\n        case 'DIFFERENT':\r\n            emoji = '⚠️';\r\n            compteurs.differents++;\r\n            break;\r\n        case 'LOCAL_SEULEMENT':\r\n            emoji = '🟡';\r\n            compteurs.localSeulement++;\r\n            break;\r\n        case 'VERCEL_SEULEMENT':\r\n            emoji = '🔴';\r\n            compteurs.vercelSeulement++;\r\n            break;\r\n        case 'INEXISTANT':\r\n            emoji = '⭕';\r\n            compteurs.inexistants++;\r\n            break;\r\n        default:\r\n            emoji = '❌';\r\n            compteurs.erreurs++;\r\n    }\r\n    \r\n    console.log(`   ${emoji} ${resultat.statut} - ${resultat.message}`);\r\n    \r\n    if (resultat.local.existe) {\r\n        console.log(`      Local: ${resultat.local.lignes} lignes (${resultat.local.taille} bytes)`);\r\n    }\r\n    if (resultat.vercel.existe) {\r\n        console.log(`      Vercel: ${resultat.vercel.lignes} lignes (${resultat.vercel.taille} bytes)`);\r\n    }\r\n    \r\n    // Enregistrer pour rapport détaillé\r\n    rapportDetaille.push({\r\n        fichier: fichierRelatif,\r\n        resultat: resultat\r\n    });\r\n}\r\n\r\n// 📊 GÉNÉRATION RAPPORT FINAL\r\nconsole.log('\\n' + '='.repeat(60));\r\nconsole.log('📊 RAPPORT FINAL D\\'AUDIT AUTOMATISÉ');\r\nconsole.log('='.repeat(60));\r\n\r\nconsole.log('\\n🎯 STATISTIQUES GLOBALES:');\r\nconsole.log(`   ✅ Fichiers identiques: ${compteurs.identiques}`);\r\nconsole.log(`   ⚠️  Fichiers différents: ${compteurs.differents}`);\r\nconsole.log(`   🟡 Local seulement: ${compteurs.localSeulement}`);\r\nconsole.log(`   🔴 Vercel seulement: ${compteurs.vercelSeulement}`);\r\nconsole.log(`   ⭕ Inexistants: ${compteurs.inexistants}`);\r\nconsole.log(`   ❌ Erreurs: ${compteurs.erreurs}`);\r\n\r\nconst total = compteurs.identiques + compteurs.differents + compteurs.localSeulement + compteurs.vercelSeulement;\r\nconst tauxSynchro = total > 0 ? ((compteurs.identiques / total) * 100).toFixed(1) : 0;\r\nconsole.log(`\\n📈 Taux de synchronisation: ${tauxSynchro}% (${compteurs.identiques}/${total})`);\r\n\r\n// 🚨 FICHIERS NÉCESSITANT ATTENTION\r\nconsole.log('\\n🚨 FICHIERS NÉCESSITANT ATTENTION:');\r\nlet attentionNecessaire = false;\r\n\r\nrapportDetaille.forEach(item => {\r\n    if (item.resultat.statut !== 'IDENTIQUE') {\r\n        console.log(`   ${item.resultat.statut === 'DIFFERENT' ? '⚠️' : \r\n                      item.resultat.statut === 'LOCAL_SEULEMENT' ? '🟡' :\r\n                      item.resultat.statut === 'VERCEL_SEULEMENT' ? '🔴' : '❌'} ${item.fichier}`);\r\n        console.log(`      └── ${item.resultat.message}`);\r\n        attentionNecessaire = true;\r\n    }\r\n});\r\n\r\nif (!attentionNecessaire) {\r\n    console.log('   🎉 Aucun fichier ne nécessite d\\'attention - Tout est synchronisé !');\r\n}\r\n\r\nconsole.log('\\n✨ Audit automatisé terminé !');",
          "taille": 7783,
          "lignes": 232,
          "dateModif": "2025-08-30T08:20:09.118Z",
          "erreur": null
        },
        "vercel": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🟡 Fichier existe seulement en local"
      }
    },
    {
      "fichier": "audit-code.md",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "# AUDIT CODE EXISTANT - ACLEF PLANNING\r\n\r\n## 📋 ANALYSE gestion-apprenants.js\r\n\r\n### État Actuel\r\n- **Fichier existant** : `pages/gestion-apprenants.js`\r\n- **Framework** : Next.js avec React hooks\r\n- **Base de données** : Supabase\r\n- **Architecture** : Composant fonctionnel avec hooks d'état\r\n\r\n### Champs Présents dans le Formulaire\r\n**CRUD DE BASE :**\r\n- ✅ `prenom` (obligatoire)\r\n- ✅ `nom` (obligatoire) \r\n- ✅ `dispositif` (HSP/OPCO)\r\n- ✅ `role` (automatique: 'apprenant')\r\n- ✅ `archive` (gestion statut actif/archivé)\r\n\r\n**CHAMPS MANQUANTS IDENTIFIÉS :**\r\n- ❌ `date_entree_formation` (date début formation)\r\n- ❌ `date_sortie_previsionnelle` (date fin prévue)\r\n- ❌ `date_fin_formation_reelle` (date fin réelle)\r\n- ❌ `lieu_formation_id` (FK vers table lieux)\r\n- ❌ `statut_formation` (en cours/terminé/abandonné/suspendu)\r\n- ❌ `date_suspension` (si suspendu)\r\n- ❌ `motif_suspension` (raison suspension)\r\n- ❌ `date_reprise_prevue` (reprise prévue après suspension)\r\n\r\n### Fonctionnalités Existantes\r\n**✅ IMPLÉMENTÉES :**\r\n1. **Affichage liste** avec filtres :\r\n   - Filtre par statut : actif/archivé/tous\r\n   - Filtre par dispositif : HSP/OPCO/tous\r\n2. **CRUD complet** :\r\n   - Création (formulaire ajout)\r\n   - Lecture (liste paginée)\r\n   - Modification (formulaire modal)\r\n   - Suppression (avec confirmation)\r\n3. **Interface responsive** avec animations CSS\r\n4. **Gestion des erreurs** et messages de feedback\r\n5. **Validation basique** (champs obligatoires)\r\n\r\n**❌ MANQUANTES POUR MODULE COMPLET :**\r\n1. **Gestion des dates de formation**\r\n2. **Suivi du parcours de formation**\r\n3. **Gestion des suspensions/reprises**\r\n4. **Attribution lieu de formation**\r\n5. **Historique des modifications**\r\n6. **Export des données**\r\n7. **Alertes dates approchantes**\r\n\r\n### Structure Code Actuelle\r\n```javascript\r\n// États principaux\r\nconst [apprenants, setApprenants] = useState([])\r\nconst [filtreStatut, setFiltreStatut] = useState('actif')\r\nconst [filtreDispositif, setFiltreDispositif] = useState('tous')\r\n\r\n// Formulaires\r\nconst [showAjouterForm, setShowAjouterForm] = useState(false)\r\nconst [showModifierForm, setShowModifierForm] = useState(false)\r\n\r\n// CRUD Operations\r\n- fetchApprenants() - Récupération avec filtres\r\n- handleSubmitAjout() - Ajout nouvel apprenant  \r\n- handleSubmitModification() - Modification données\r\n- handleArchiver() - Archivage (soft delete)\r\n```\r\n\r\n### Qualité Code\r\n**✅ POINTS FORTS :**\r\n- Code structuré et lisible\r\n- Gestion d'état React propre\r\n- Séparation des responsabilités\r\n- Gestion erreurs basique présente\r\n- Interface utilisateur cohérente\r\n\r\n**⚠️ POINTS À AMÉLIORER :**\r\n- Validation côté client limitée\r\n- Pas de validation serveur\r\n- Gestion dates inexistante\r\n- Pas de relations FK\r\n- Messages d'erreur génériques\r\n\r\n### Modifications Requises pour Module Complet\r\n\r\n#### 1. AJOUTS BASE DE DONNÉES\r\n```sql\r\n-- Colonnes à ajouter à users\r\nALTER TABLE users ADD COLUMN date_entree_formation DATE;\r\nALTER TABLE users ADD COLUMN date_sortie_previsionnelle DATE;\r\nALTER TABLE users ADD COLUMN date_fin_formation_reelle DATE;\r\nALTER TABLE users ADD COLUMN lieu_formation_id UUID REFERENCES lieux(id);\r\nALTER TABLE users ADD COLUMN statut_formation VARCHAR(20) DEFAULT 'en_cours';\r\nALTER TABLE users ADD COLUMN date_suspension DATE;\r\nALTER TABLE users ADD COLUMN motif_suspension TEXT;\r\nALTER TABLE users ADD COLUMN date_reprise_prevue DATE;\r\n```\r\n\r\n#### 2. AJOUTS INTERFACE\r\n- **Formulaire dates** : Sélecteurs date d'entrée/sortie\r\n- **Sélecteur lieu** : Dropdown lieux de formation\r\n- **Gestion statut** : Radio buttons pour statut formation\r\n- **Module suspension** : Formulaire spécifique suspension\r\n- **Tableau enrichi** : Colonnes dates et statuts\r\n- **Filtres avancés** : Par lieu, statut formation, dates\r\n\r\n#### 3. AJOUTS LOGIQUE MÉTIER\r\n- **Validation dates** : Cohérence chronologique\r\n- **Calcul durée** : Formation en cours/terminée\r\n- **Alertes** : Dates d'échéance approchantes  \r\n- **Historique** : Traçabilité modifications\r\n- **Export** : CSV/Excel des données\r\n\r\n### Risques Identifiés\r\n\r\n#### 🔴 RISQUES ÉLEVÉS\r\n1. **Migration données** : Ajout colonnes sur table users peuplée\r\n2. **Contraintes FK** : lieu_formation_id vers lieux inexistants\r\n3. **Performance** : Requêtes complexes avec jointures\r\n4. **Cohérence dates** : Validation chronologie dates\r\n\r\n#### 🟡 RISQUES MOYENS\r\n1. **Interface UX** : Formulaire plus complexe\r\n2. **Validation** : Logique métier dates/statuts\r\n3. **Tests** : Régression sur fonctionnalités existantes\r\n\r\n#### 🟢 RISQUES FAIBLES\r\n1. **Styles CSS** : Adaptation interface\r\n2. **Messages** : Ajustement feedback utilisateur\r\n\r\n### Recommandations de Développement\r\n\r\n#### 1. APPROCHE PROGRESSIVE\r\n1. **Phase 1** : Migration BDD + formulaire basique dates\r\n2. **Phase 2** : Sélecteur lieu + statuts formation\r\n3. **Phase 3** : Module suspensions avancé\r\n4. **Phase 4** : Alertes et export\r\n\r\n#### 2. SÉCURITÉ\r\n- Validation serveur systématique\r\n- Contraintes BDD strictes\r\n- Tests complets avant déploiement\r\n\r\n#### 3. MAINTENANCE\r\n- Documentation code ajouté\r\n- Tests unitaires fonctions clés\r\n- Backup avant migration\r\n\r\n---\r\n\r\n## 📊 CONCLUSION AUDIT CODE\r\n\r\n**État actuel** : Base solide mais incomplète pour module apprenants avancé\r\n**Effort requis** : Moyen (2-3 jours développement)\r\n**Risque technique** : Faible à moyen\r\n**Impact utilisateur** : Amélioration significative\r\n\r\nLe code existant offre une fondation stable qu'il faut enrichir pour un module apprenants complet.",
          "taille": 5601,
          "lignes": 159,
          "dateModif": "2025-08-26T22:39:29.070Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "audit-database.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "const { createClient } = require('@supabase/supabase-js');\r\n\r\n// Configuration Supabase\r\nconst supabaseUrl = 'https://mkbchdhbgdynxwfhpxbw.supabase.co';\r\nconst supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1rYmNoZGhiZ2R5bnh3ZmhweGJ3Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTExNDk5NiwiZXhwIjoyMDcwNjkwOTk2fQ._8zQliKa7WsYx5PWO-wTMmNWaOkcV_3BpaD7yuPgkBw';\r\n\r\nconst supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {\r\n  auth: {\r\n    autoRefreshToken: false,\r\n    persistSession: false\r\n  }\r\n});\r\n\r\n/**\r\n * AUDIT TECHNIQUE ACLEF PLANNING\r\n * Script d'analyse complète de la base de données\r\n */\r\nasync function auditDatabase() {\r\n  const auditResults = {\r\n    timestamp: new Date().toISOString(),\r\n    database_info: {},\r\n    tables: {},\r\n    missing_for_apprenants: [],\r\n    recommendations: [],\r\n    errors: []\r\n  };\r\n\r\n  console.log('🔍 DÉBUT AUDIT TECHNIQUE ACLEF PLANNING');\r\n  console.log('=====================================');\r\n\r\n  try {\r\n    // 1. LISTER TOUTES LES TABLES (approche directe)\r\n    console.log('\\n📊 1. LISTAGE DES TABLES...');\r\n    \r\n    const knownTables = [\r\n      'users', 'lieux', 'planning_hebdomadaire', 'planning_type_formateurs',\r\n      'absences_formateurs', 'planning_formateurs_hebdo', 'messages',\r\n      'admin_sessions', 'planning_types', 'dispo_except_formateurs'\r\n    ];\r\n\r\n    console.log(`📋 Tables connues à analyser: ${knownTables.length}`);\r\n    knownTables.forEach(table => {\r\n      console.log(`   - ${table}`);\r\n    });\r\n\r\n    // 2. ANALYSER CHAQUE TABLE\r\n    console.log('\\n🔬 2. ANALYSE DÉTAILLÉE DES TABLES...');\r\n    \r\n    for (const tableName of knownTables) {\r\n      console.log(`\\n   📋 Analyse ${tableName}...`);\r\n\r\n      try {\r\n        // Récupérer un échantillon de données pour comprendre la structure\r\n        const { data: sample, error: sampleError } = await supabaseAdmin\r\n          .from(tableName)\r\n          .select('*')\r\n          .limit(1);\r\n\r\n        if (sampleError) {\r\n          console.error(`   ❌ Erreur accès ${tableName}:`, sampleError.message);\r\n          auditResults.tables[tableName] = {\r\n            accessible: false,\r\n            error: sampleError.message,\r\n            columns_detected: [],\r\n            sample_count: 0\r\n          };\r\n          continue;\r\n        }\r\n\r\n        // Détecter les colonnes à partir de l'échantillon\r\n        const columnsDetected = sample && sample.length > 0 ? Object.keys(sample[0]) : [];\r\n        \r\n        // Récupérer le nombre total d'enregistrements\r\n        const { count, error: countError } = await supabaseAdmin\r\n          .from(tableName)\r\n          .select('*', { count: 'exact', head: true });\r\n\r\n        auditResults.tables[tableName] = {\r\n          accessible: true,\r\n          columns_detected: columnsDetected,\r\n          total_records: countError ? 'unknown' : count,\r\n          sample_data: sample && sample.length > 0 ? sample[0] : null,\r\n          sample_count: sample ? sample.length : 0\r\n        };\r\n\r\n        console.log(`   ✅ ${tableName}: ${columnsDetected.length} colonnes, ${count || '?'} enregistrements`);\r\n        console.log(`      Colonnes: ${columnsDetected.join(', ')}`);\r\n\r\n      } catch (tableError) {\r\n        console.error(`   ❌ Erreur analyse ${tableName}:`, tableError.message);\r\n        auditResults.tables[tableName] = {\r\n          accessible: false,\r\n          error: tableError.message,\r\n          columns_detected: []\r\n        };\r\n      }\r\n    }\r\n\r\n    // 3. ANALYSE SPÉCIFIQUE TABLE USERS\r\n    console.log('\\n👥 3. ANALYSE SPÉCIFIQUE TABLE USERS...');\r\n    \r\n    if (auditResults.tables.users && auditResults.tables.users.accessible) {\r\n      const usersColumns = auditResults.tables.users.columns_detected;\r\n      console.log('   Colonnes users existantes:', usersColumns);\r\n\r\n      // Vérifier colonnes requises pour apprenants\r\n      const requiredForApprenants = [\r\n        'date_fin_formation_reelle',\r\n        'lieu_formation_id', \r\n        'statut_formation',\r\n        'date_suspension',\r\n        'motif_suspension',\r\n        'date_reprise_prevue'\r\n      ];\r\n\r\n      auditResults.missing_for_apprenants = requiredForApprenants.filter(\r\n        col => !usersColumns.includes(col)\r\n      );\r\n\r\n      console.log('   ❌ Colonnes manquantes pour apprenants:', auditResults.missing_for_apprenants);\r\n\r\n      // Analyser les rôles existants\r\n      try {\r\n        const { data: roleData } = await supabaseAdmin\r\n          .from('users')\r\n          .select('role')\r\n          .not('role', 'is', null);\r\n        \r\n        const roles = [...new Set(roleData?.map(r => r.role) || [])];\r\n        console.log('   📊 Rôles existants:', roles);\r\n        auditResults.database_info.existing_roles = roles;\r\n      } catch (roleError) {\r\n        console.log('   ⚠️  Impossible d\\'analyser les rôles');\r\n      }\r\n    }\r\n\r\n    // 4. GÉNÉRATION RECOMMANDATIONS\r\n    console.log('\\n💡 4. GÉNÉRATION RECOMMANDATIONS...');\r\n    \r\n    auditResults.recommendations = [\r\n      'Ajouter colonnes manquantes pour apprenants: ' + auditResults.missing_for_apprenants.join(', '),\r\n      'Créer table suspensions_parcours pour historique détaillé',\r\n      'Ajouter FK users.lieu_formation_id → lieux.id',\r\n      'Créer index sur users.role pour optimiser les requêtes',\r\n      'Implémenter RLS policies spécifiques aux apprenants',\r\n      'Créer vue apprenants_actifs pour simplifier les requêtes'\r\n    ];\r\n\r\n    auditResults.recommendations.forEach(rec => {\r\n      console.log(`   💡 ${rec}`);\r\n    });\r\n\r\n    console.log('\\n✅ AUDIT TERMINÉ AVEC SUCCÈS');\r\n    console.log('=====================================');\r\n\r\n  } catch (globalError) {\r\n    console.error('💥 ERREUR GLOBALE AUDIT:', globalError);\r\n    auditResults.errors.push('Erreur globale: ' + globalError.message);\r\n  }\r\n\r\n  return auditResults;\r\n}\r\n\r\n// Exécution de l'audit\r\nauditDatabase()\r\n  .then(results => {\r\n    // Sauvegarder les résultats\r\n    const fs = require('fs');\r\n    const outputPath = './audit-database.json';\r\n    \r\n    fs.writeFileSync(outputPath, JSON.stringify(results, null, 2));\r\n    console.log(`\\n📄 Résultats sauvegardés dans: ${outputPath}`);\r\n    \r\n    // Affichage résumé\r\n    console.log('\\n📊 RÉSUMÉ AUDIT:');\r\n    console.log(`   - Tables analysées: ${Object.keys(results.tables).length}`);\r\n    console.log(`   - Colonnes manquantes apprenants: ${results.missing_for_apprenants.length}`);\r\n    console.log(`   - Recommandations: ${results.recommendations.length}`);\r\n    console.log(`   - Erreurs: ${results.errors.length}`);\r\n    \r\n    process.exit(0);\r\n  })\r\n  .catch(error => {\r\n    console.error('💥 ÉCHEC AUDIT:', error);\r\n    process.exit(1);\r\n  });",
          "taille": 6738,
          "lignes": 186,
          "dateModif": "2025-08-26T22:37:57.127Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "audit-database.json",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "{\n  \"timestamp\": \"2025-08-26T22:38:04.232Z\",\n  \"database_info\": {\n    \"existing_roles\": [\n      \"salarié\",\n      \"admin\",\n      \"formateur\",\n      \"apprenant\"\n    ]\n  },\n  \"tables\": {\n    \"users\": {\n      \"accessible\": true,\n      \"columns_detected\": [\n        \"id\",\n        \"prenom\",\n        \"nom\",\n        \"role\",\n        \"email\",\n        \"dispositif\",\n        \"initiales\",\n        \"date_debut\",\n        \"date_fin\",\n        \"archive\",\n        \"created_at\",\n        \"password_hash\",\n        \"must_change_password\",\n        \"password_changed_at\",\n        \"last_login\",\n        \"custom_password\"\n      ],\n      \"total_records\": 15,\n      \"sample_data\": {\n        \"id\": \"9a948025-7a9c-4c71-b3ed-77f8c8d598d5\",\n        \"prenom\": \"Fanny\",\n        \"nom\": \"Falquet\",\n        \"role\": \"salarié\",\n        \"email\": null,\n        \"dispositif\": null,\n        \"initiales\": \"FF\",\n        \"date_debut\": null,\n        \"date_fin\": null,\n        \"archive\": false,\n        \"created_at\": \"2025-08-13T21:04:41.340441\",\n        \"password_hash\": null,\n        \"must_change_password\": true,\n        \"password_changed_at\": null,\n        \"last_login\": null,\n        \"custom_password\": null\n      },\n      \"sample_count\": 1\n    },\n    \"lieux\": {\n      \"accessible\": true,\n      \"columns_detected\": [\n        \"id\",\n        \"nom\",\n        \"couleur\",\n        \"initiale\",\n        \"archive\",\n        \"created_at\"\n      ],\n      \"total_records\": 4,\n      \"sample_data\": {\n        \"id\": \"1db22e28-0454-4658-9fdb-25547f9f829f\",\n        \"nom\": \"Centre Camille Pagé\",\n        \"couleur\": \"#ec4899\",\n        \"initiale\": \"CCP\",\n        \"archive\": false,\n        \"created_at\": \"2025-08-13T21:01:31.579238\"\n      },\n      \"sample_count\": 1\n    },\n    \"planning_hebdomadaire\": {\n      \"accessible\": true,\n      \"columns_detected\": [\n        \"id\",\n        \"date\",\n        \"jour\",\n        \"creneau\",\n        \"lieu_index\",\n        \"lieu_id\",\n        \"salarie_id\",\n        \"formateurs_ids\",\n        \"apprenants_ids\",\n        \"created_at\",\n        \"statut_planning\"\n      ],\n      \"total_records\": 339,\n      \"sample_data\": {\n        \"id\": \"e49adc30-d5d6-4516-a25f-cc936a3f303a\",\n        \"date\": \"2025-08-12\",\n        \"jour\": \"Mardi\",\n        \"creneau\": \"matin\",\n        \"lieu_index\": 0,\n        \"lieu_id\": \"1db22e28-0454-4658-9fdb-25547f9f829f\",\n        \"salarie_id\": null,\n        \"formateurs_ids\": [\n          \"a38c77b1-9d1f-41c3-8c8e-b26bce93d898\"\n        ],\n        \"apprenants_ids\": [],\n        \"created_at\": \"2025-08-15T08:30:34.161784\",\n        \"statut_planning\": \"validé\"\n      },\n      \"sample_count\": 1\n    },\n    \"planning_type_formateurs\": {\n      \"accessible\": true,\n      \"columns_detected\": [\n        \"id\",\n        \"formateur_id\",\n        \"jour\",\n        \"creneau\",\n        \"statut\",\n        \"lieu_id\",\n        \"valide\",\n        \"valide_par\",\n        \"date_validation\",\n        \"created_at\",\n        \"updated_at\"\n      ],\n      \"total_records\": 90,\n      \"sample_data\": {\n        \"id\": \"bafa4ab0-7942-4148-b2a2-faf3b587cf02\",\n        \"formateur_id\": \"6d689ded-9235-4490-8022-eac7dcc95512\",\n        \"jour\": \"Jeudi\",\n        \"creneau\": \"AM\",\n        \"statut\": \"dispo_except\",\n        \"lieu_id\": \"c992095a-7be0-4afe-8386-c400df22f737\",\n        \"valide\": false,\n        \"valide_par\": null,\n        \"date_validation\": null,\n        \"created_at\": \"2025-08-15T14:01:56.364918\",\n        \"updated_at\": \"2025-08-15T17:02:58.744\"\n      },\n      \"sample_count\": 1\n    },\n    \"absences_formateurs\": {\n      \"accessible\": true,\n      \"columns_detected\": [\n        \"id\",\n        \"formateur_id\",\n        \"date_debut\",\n        \"date_fin\",\n        \"type\",\n        \"statut\",\n        \"motif\",\n        \"created_at\"\n      ],\n      \"total_records\": 28,\n      \"sample_data\": {\n        \"id\": \"a10c2e88-5c97-4867-a279-f2b54cb4fc12\",\n        \"formateur_id\": \"6d689ded-9235-4490-8022-eac7dcc95512\",\n        \"date_debut\": \"2025-08-18\",\n        \"date_fin\": \"2025-08-18\",\n        \"type\": \"personnel\",\n        \"statut\": \"validé\",\n        \"motif\": null,\n        \"created_at\": \"2025-08-15T07:40:14.822\"\n      },\n      \"sample_count\": 1\n    },\n    \"planning_formateurs_hebdo\": {\n      \"accessible\": true,\n      \"columns_detected\": [\n        \"id\",\n        \"formateur_id\",\n        \"date\",\n        \"creneau\",\n        \"lieu_nom\",\n        \"lieu_initiales\",\n        \"statut\",\n        \"created_at\"\n      ],\n      \"total_records\": 118,\n      \"sample_data\": {\n        \"id\": \"34c75228-a7d7-4f5d-9ccd-a6c563e470f6\",\n        \"formateur_id\": \"a38c77b1-9d1f-41c3-8c8e-b26bce93d898\",\n        \"date\": \"2025-08-12\",\n        \"creneau\": \"matin\",\n        \"lieu_nom\": \"Centre Camille Pagé\",\n        \"lieu_initiales\": \"CCP\",\n        \"statut\": \"attribue\",\n        \"created_at\": \"2025-08-15T08:30:34.305747\"\n      },\n      \"sample_count\": 1\n    },\n    \"messages\": {\n      \"accessible\": true,\n      \"columns_detected\": [\n        \"id\",\n        \"expediteur_id\",\n        \"destinataire_id\",\n        \"expediteur\",\n        \"destinataire\",\n        \"objet\",\n        \"contenu\",\n        \"date\",\n        \"heure\",\n        \"lu\",\n        \"archive\",\n        \"date_archivage\",\n        \"type\",\n        \"statut_validation\",\n        \"created_at\"\n      ],\n      \"total_records\": 79,\n      \"sample_data\": {\n        \"id\": \"598d5f6f-68a0-4fd9-a1b8-789db708d229\",\n        \"expediteur_id\": \"a38c77b1-9d1f-41c3-8c8e-b26bce93d898\",\n        \"destinataire_id\": null,\n        \"expediteur\": \"Sam Parlpa\",\n        \"destinataire\": \"Coordination ACLEF\",\n        \"objet\": \"Validation de planning type\",\n        \"contenu\": \"Sam Parlpa a déclaré son planning type. Veuillez le valider.\\n\\nMessage du formateur :\\n\\\"De preference à Châtellerault\\\"\",\n        \"date\": \"2025-08-15\",\n        \"heure\": \"15:32\",\n        \"lu\": true,\n        \"archive\": false,\n        \"date_archivage\": null,\n        \"type\": \"planning\",\n        \"statut_validation\": \"traite\",\n        \"created_at\": \"2025-08-15T13:32:03.791972\"\n      },\n      \"sample_count\": 1\n    },\n    \"admin_sessions\": {\n      \"accessible\": true,\n      \"columns_detected\": [\n        \"id\",\n        \"admin_user_id\",\n        \"email_admin\",\n        \"session_start\",\n        \"heartbeat\",\n        \"session_token\",\n        \"is_active\",\n        \"created_at\"\n      ],\n      \"total_records\": 154,\n      \"sample_data\": {\n        \"id\": \"4da5e6cb-f97a-4cd2-bedd-10a2799aaff3\",\n        \"admin_user_id\": \"a15de4d7-6904-4adc-9920-42a0d7b540c1\",\n        \"email_admin\": \"test@aclef.fr\",\n        \"session_start\": \"2025-08-19T05:44:37.131+00:00\",\n        \"heartbeat\": \"2025-08-19T05:44:38.231+00:00\",\n        \"session_token\": \"session_1755582276338_q0tirxjhk5\",\n        \"is_active\": false,\n        \"created_at\": \"2025-08-19T05:44:36.265365+00:00\"\n      },\n      \"sample_count\": 1\n    },\n    \"planning_types\": {\n      \"accessible\": false,\n      \"error\": \"Could not find the table 'public.planning_types' in the schema cache\",\n      \"columns_detected\": [],\n      \"sample_count\": 0\n    },\n    \"dispo_except_formateurs\": {\n      \"accessible\": false,\n      \"error\": \"Could not find the table 'public.dispo_except_formateurs' in the schema cache\",\n      \"columns_detected\": [],\n      \"sample_count\": 0\n    }\n  },\n  \"missing_for_apprenants\": [\n    \"date_fin_formation_reelle\",\n    \"lieu_formation_id\",\n    \"statut_formation\",\n    \"date_suspension\",\n    \"motif_suspension\",\n    \"date_reprise_prevue\"\n  ],\n  \"recommendations\": [\n    \"Ajouter colonnes manquantes pour apprenants: date_fin_formation_reelle, lieu_formation_id, statut_formation, date_suspension, motif_suspension, date_reprise_prevue\",\n    \"Créer table suspensions_parcours pour historique détaillé\",\n    \"Ajouter FK users.lieu_formation_id → lieux.id\",\n    \"Créer index sur users.role pour optimiser les requêtes\",\n    \"Implémenter RLS policies spécifiques aux apprenants\",\n    \"Créer vue apprenants_actifs pour simplifier les requêtes\"\n  ],\n  \"errors\": []\n}",
          "taille": 7830,
          "lignes": 282,
          "dateModif": "2025-08-26T22:38:08.641Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "audit-exhaustif.js",
      "resultat": {
        "statut": "LOCAL_SEULEMENT",
        "local": {
          "existe": true,
          "contenu": "const fs = require('fs');\r\nconst path = require('path');\r\n\r\n// 🔍 AUDIT EXHAUSTIF - TOUTE LA STRUCTURE LOCAL vs VERCEL  \r\nconsole.log('🚀 AUDIT EXHAUSTIF - ANALYSE COMPLÈTE DE LA STRUCTURE');\r\nconsole.log('='.repeat(80));\r\n\r\nconst LOCAL_BASE = 'C:/Projet ACLEF/projet-aclef-planning-v8';\r\nconst VERCEL_BASE = 'C:/Projet ACLEF/projet-aclef-planning-v6';\r\n\r\n// Dossiers à exclure\r\nconst EXCLUSIONS = [\r\n    'node_modules',\r\n    '.next', \r\n    '.git',\r\n    'dist',\r\n    'build',\r\n    'coverage',\r\n    '.vercel',\r\n    '.env.local',\r\n    '.DS_Store'\r\n];\r\n\r\n// Extensions à auditer\r\nconst EXTENSIONS_PROJET = ['.js', '.jsx', '.json', '.md', '.css', '.ts', '.tsx', '.env'];\r\n\r\n// Fonction pour parcourir récursivement un dossier\r\nfunction parcourirDossier(dossier, basePath = '') {\r\n    const fichiers = [];\r\n    \r\n    try {\r\n        if (!fs.existsSync(dossier)) return fichiers;\r\n        \r\n        const elements = fs.readdirSync(dossier);\r\n        \r\n        for (const element of elements) {\r\n            const cheminComplet = path.join(dossier, element);\r\n            const cheminRelatif = path.join(basePath, element).replace(/\\\\/g, '/');\r\n            \r\n            // Ignorer les exclusions\r\n            if (EXCLUSIONS.some(excl => cheminRelatif.includes(excl))) {\r\n                continue;\r\n            }\r\n            \r\n            const stats = fs.statSync(cheminComplet);\r\n            \r\n            if (stats.isDirectory()) {\r\n                // Dossier - parcours récursif\r\n                fichiers.push(...parcourirDossier(cheminComplet, cheminRelatif));\r\n            } else if (stats.isFile()) {\r\n                // Fichier - vérifier extension\r\n                const ext = path.extname(element);\r\n                if (EXTENSIONS_PROJET.includes(ext) || element === 'package.json' || element.startsWith('.env')) {\r\n                    fichiers.push({\r\n                        cheminRelatif: cheminRelatif,\r\n                        cheminAbsolu: cheminComplet,\r\n                        nom: element,\r\n                        extension: ext,\r\n                        taille: stats.size,\r\n                        dateModif: stats.mtime\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error(`Erreur parcours ${dossier}:`, error.message);\r\n    }\r\n    \r\n    return fichiers;\r\n}\r\n\r\n// Fonction pour comparer deux fichiers en détail\r\nfunction comparerFichiersDetail(fichierLocal, fichierVercel) {\r\n    const local = lireFichierSecurise(fichierLocal);\r\n    const vercel = lireFichierSecurise(fichierVercel);\r\n    \r\n    // Cas: fichier n'existe que localement\r\n    if (local.existe && !vercel.existe) {\r\n        return {\r\n            statut: 'LOCAL_SEULEMENT',\r\n            local: local,\r\n            vercel: vercel,\r\n            identique: false,\r\n            pourcentageSimilarite: 0,\r\n            message: '🟡 Fichier existe seulement en local'\r\n        };\r\n    }\r\n    \r\n    // Cas: fichier n'existe que sur Vercel  \r\n    if (!local.existe && vercel.existe) {\r\n        return {\r\n            statut: 'VERCEL_SEULEMENT',\r\n            local: local,\r\n            vercel: vercel,\r\n            identique: false,\r\n            pourcentageSimilarite: 0,\r\n            message: '🔴 Fichier existe seulement sur Vercel'\r\n        };\r\n    }\r\n    \r\n    // Cas: fichier n'existe ni local ni Vercel\r\n    if (!local.existe && !vercel.existe) {\r\n        return {\r\n            statut: 'INEXISTANT',\r\n            local: local,\r\n            vercel: vercel,\r\n            identique: false,\r\n            pourcentageSimilarite: 0,\r\n            message: '⭕ Fichier n\\'existe nulle part'\r\n        };\r\n    }\r\n    \r\n    // Cas: les deux fichiers existent - comparaison avancée\r\n    const identique = local.contenu === vercel.contenu;\r\n    const diffTaille = Math.abs(local.taille - vercel.taille);\r\n    const diffLignes = Math.abs(local.lignes - vercel.lignes);\r\n    \r\n    // Calcul approximatif de la similarité\r\n    let pourcentageSimilarite = 0;\r\n    if (local.taille > 0 && vercel.taille > 0) {\r\n        const tailleMin = Math.min(local.taille, vercel.taille);\r\n        const tailleMax = Math.max(local.taille, vercel.taille);\r\n        pourcentageSimilarite = Math.round((tailleMin / tailleMax) * 100);\r\n    }\r\n    \r\n    let classification = '';\r\n    let emoji = '';\r\n    \r\n    if (identique) {\r\n        classification = 'IDENTIQUE';\r\n        emoji = '✅';\r\n    } else if (pourcentageSimilarite >= 95) {\r\n        classification = 'QUASI_IDENTIQUE';\r\n        emoji = '🟢';\r\n    } else if (pourcentageSimilarite >= 80) {\r\n        classification = 'SIMILAIRE';\r\n        emoji = '🟡';\r\n    } else if (pourcentageSimilarite >= 50) {\r\n        classification = 'DIFFERENT';\r\n        emoji = '🟠';\r\n    } else {\r\n        classification = 'TRES_DIFFERENT';\r\n        emoji = '🔴';\r\n    }\r\n    \r\n    return {\r\n        statut: classification,\r\n        local: local,\r\n        vercel: vercel,\r\n        identique: identique,\r\n        diffTaille: diffTaille,\r\n        diffLignes: diffLignes,\r\n        pourcentageSimilarite: pourcentageSimilarite,\r\n        message: identique ? \r\n            `${emoji} Fichiers parfaitement identiques` : \r\n            `${emoji} ${classification} - Similarité: ${pourcentageSimilarite}% (±${diffTaille} bytes, ±${diffLignes} lignes)`\r\n    };\r\n}\r\n\r\n// Fonction pour lire un fichier de manière sécurisée (réutilisée)\r\nfunction lireFichierSecurise(cheminFichier) {\r\n    try {\r\n        if (!fs.existsSync(cheminFichier)) {\r\n            return { existe: false, contenu: null, taille: 0, lignes: 0, erreur: 'Fichier non trouvé' };\r\n        }\r\n        \r\n        const stats = fs.statSync(cheminFichier);\r\n        const contenu = fs.readFileSync(cheminFichier, 'utf8');\r\n        \r\n        return {\r\n            existe: true,\r\n            contenu: contenu,\r\n            taille: stats.size,\r\n            lignes: contenu.split('\\n').length,\r\n            dateModif: stats.mtime,\r\n            erreur: null\r\n        };\r\n        \r\n    } catch (error) {\r\n        return { \r\n            existe: false, \r\n            contenu: null, \r\n            taille: 0, \r\n            lignes: 0,\r\n            dateModif: null,\r\n            erreur: error.message \r\n        };\r\n    }\r\n}\r\n\r\n// 🎯 EXÉCUTION PRINCIPALE\r\nconsole.log('📂 Analyse de la structure locale (v8)...');\r\nconst fichiersLocaux = parcourirDossier(LOCAL_BASE);\r\nconsole.log(`   └─ ${fichiersLocaux.length} fichiers trouvés en local`);\r\n\r\nconsole.log('📂 Analyse de la structure Vercel (v6)...');  \r\nconst fichiersVercel = parcourirDossier(VERCEL_BASE);\r\nconsole.log(`   └─ ${fichiersVercel.length} fichiers trouvés sur Vercel`);\r\n\r\n// Créer la liste complète des fichiers à auditer\r\nconst fichiersUniques = new Set();\r\nfichiersLocaux.forEach(f => fichiersUniques.add(f.cheminRelatif));\r\nfichiersVercel.forEach(f => fichiersUniques.add(f.cheminRelatif));\r\n\r\nconst fichiersList = Array.from(fichiersUniques).sort();\r\n\r\nconsole.log(`\\n📋 AUDIT EXHAUSTIF: ${fichiersList.length} fichiers uniques à comparer`);\r\nconsole.log('='.repeat(80));\r\n\r\n// Compteurs détaillés\r\nlet compteurs = {\r\n    identiques: 0,\r\n    quasiIdentiques: 0,\r\n    similaires: 0,\r\n    differents: 0,\r\n    tresDifferents: 0,\r\n    localSeulement: 0,\r\n    vercelSeulement: 0,\r\n    erreurs: 0\r\n};\r\n\r\nlet rapportComplet = [];\r\n\r\n// 🔍 COMPARAISON EXHAUSTIVE\r\nfor (let i = 0; i < fichiersList.length; i++) {\r\n    const fichierRelatif = fichiersList[i];\r\n    const fichierLocal = path.join(LOCAL_BASE, fichierRelatif);\r\n    const fichierVercel = path.join(VERCEL_BASE, fichierRelatif);\r\n    \r\n    // Affichage progression\r\n    const pourcentage = Math.round((i + 1) / fichiersList.length * 100);\r\n    process.stdout.write(`\\r🔄 Progression: ${pourcentage}% (${i + 1}/${fichiersList.length})`);\r\n    \r\n    const resultat = comparerFichiersDetail(fichierLocal, fichierVercel);\r\n    \r\n    // Comptabiliser\r\n    switch (resultat.statut) {\r\n        case 'IDENTIQUE':\r\n            compteurs.identiques++;\r\n            break;\r\n        case 'QUASI_IDENTIQUE':\r\n            compteurs.quasiIdentiques++;\r\n            break;\r\n        case 'SIMILAIRE':\r\n            compteurs.similaires++;\r\n            break;\r\n        case 'DIFFERENT':\r\n            compteurs.differents++;\r\n            break;\r\n        case 'TRES_DIFFERENT':\r\n            compteurs.tresDifferents++;\r\n            break;\r\n        case 'LOCAL_SEULEMENT':\r\n            compteurs.localSeulement++;\r\n            break;\r\n        case 'VERCEL_SEULEMENT':\r\n            compteurs.vercelSeulement++;\r\n            break;\r\n        default:\r\n            compteurs.erreurs++;\r\n    }\r\n    \r\n    // Enregistrer pour rapport\r\n    rapportComplet.push({\r\n        fichier: fichierRelatif,\r\n        resultat: resultat\r\n    });\r\n}\r\n\r\nconsole.log('\\n\\n' + '='.repeat(80));\r\nconsole.log('📊 RAPPORT EXHAUSTIF FINAL');\r\nconsole.log('='.repeat(80));\r\n\r\n// Statistiques globales\r\nconsole.log('\\n🎯 STATISTIQUES GLOBALES:');\r\nconsole.log(`   ✅ Identiques: ${compteurs.identiques}`);\r\nconsole.log(`   🟢 Quasi-identiques (95%+): ${compteurs.quasiIdentiques}`);\r\nconsole.log(`   🟡 Similaires (80-94%): ${compteurs.similaires}`);\r\nconsole.log(`   🟠 Différents (50-79%): ${compteurs.differents}`);\r\nconsole.log(`   🔴 Très différents (<50%): ${compteurs.tresDifferents}`);\r\nconsole.log(`   📄 Local seulement: ${compteurs.localSeulement}`);\r\nconsole.log(`   📄 Vercel seulement: ${compteurs.vercelSeulement}`);\r\nconsole.log(`   ❌ Erreurs: ${compteurs.erreurs}`);\r\n\r\nconst totalFichiers = fichiersList.length;\r\nconst fichiersSynchronises = compteurs.identiques + compteurs.quasiIdentiques;\r\nconst tauxSynchro = totalFichiers > 0 ? ((fichiersSynchronises / totalFichiers) * 100).toFixed(1) : 0;\r\n\r\nconsole.log(`\\n📈 TAUX DE SYNCHRONISATION GLOBAL: ${tauxSynchro}% (${fichiersSynchronises}/${totalFichiers})`);\r\n\r\n// TOP 10 des différences les plus importantes\r\nconsole.log('\\n🚨 TOP 10 - DIFFÉRENCES LES PLUS IMPORTANTES:');\r\nconst differencesMajeures = rapportComplet\r\n    .filter(item => ['DIFFERENT', 'TRES_DIFFERENT'].includes(item.resultat.statut))\r\n    .sort((a, b) => {\r\n        const diffA = a.resultat.diffTaille || 0;\r\n        const diffB = b.resultat.diffTaille || 0;\r\n        return diffB - diffA;\r\n    })\r\n    .slice(0, 10);\r\n\r\nif (differencesMajeures.length === 0) {\r\n    console.log('   🎉 Aucune différence majeure détectée !');\r\n} else {\r\n    differencesMajeures.forEach((item, index) => {\r\n        console.log(`   ${index + 1}. ${item.fichier}`);\r\n        console.log(`      ${item.resultat.message}`);\r\n        console.log(`      Local: ${item.resultat.local.lignes || 0} lignes, Vercel: ${item.resultat.vercel.lignes || 0} lignes`);\r\n    });\r\n}\r\n\r\n// Fichiers uniques (existence seulement locale ou Vercel)\r\nconsole.log('\\n📄 FICHIERS UNIQUES:');\r\nconst fichiersUniquesLocal = rapportComplet.filter(item => item.resultat.statut === 'LOCAL_SEULEMENT');\r\nconst fichiersUniquesVercel = rapportComplet.filter(item => item.resultat.statut === 'VERCEL_SEULEMENT');\r\n\r\nif (fichiersUniquesLocal.length > 0) {\r\n    console.log(`\\n🟡 Fichiers existant SEULEMENT en local (${fichiersUniquesLocal.length}):`);\r\n    fichiersUniquesLocal.slice(0, 20).forEach((item, index) => {\r\n        console.log(`   ${index + 1}. ${item.fichier}`);\r\n    });\r\n    if (fichiersUniquesLocal.length > 20) {\r\n        console.log(`   ... et ${fichiersUniquesLocal.length - 20} autres`);\r\n    }\r\n}\r\n\r\nif (fichiersUniquesVercel.length > 0) {\r\n    console.log(`\\n🔴 Fichiers existant SEULEMENT sur Vercel (${fichiersUniquesVercel.length}):`);\r\n    fichiersUniquesVercel.slice(0, 20).forEach((item, index) => {\r\n        console.log(`   ${index + 1}. ${item.fichier}`);\r\n    });\r\n    if (fichiersUniquesVercel.length > 20) {\r\n        console.log(`   ... et ${fichiersUniquesVercel.length - 20} autres`);\r\n    }\r\n}\r\n\r\nconsole.log('\\n✨ Audit exhaustif terminé !');\r\nconsole.log(`📄 Rapport complet disponible dans la variable 'rapportComplet' (${rapportComplet.length} éléments)`);\r\n\r\n// Sauvegarder le rapport détaillé\r\nconst rapportJSON = {\r\n    timestamp: new Date().toISOString(),\r\n    statistiques: compteurs,\r\n    tauxSynchronisation: parseFloat(tauxSynchro),\r\n    totalFichiers: totalFichiers,\r\n    differencesMajeures: differencesMajeures,\r\n    fichiersUniquesLocal: fichiersUniquesLocal.map(item => item.fichier),\r\n    fichiersUniquesVercel: fichiersUniquesVercel.map(item => item.fichier),\r\n    rapportComplet: rapportComplet\r\n};\r\n\r\ntry {\r\n    fs.writeFileSync('audit-exhaustif-rapport.json', JSON.stringify(rapportJSON, null, 2));\r\n    console.log('💾 Rapport détaillé sauvegardé: audit-exhaustif-rapport.json');\r\n} catch (error) {\r\n    console.error('❌ Erreur sauvegarde rapport:', error.message);\r\n}",
          "taille": 12779,
          "lignes": 357,
          "dateModif": "2025-08-30T10:52:42.175Z",
          "erreur": null
        },
        "vercel": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🟡 Fichier existe seulement en local"
      }
    },
    {
      "fichier": "components/MenuApprenants.js",
      "resultat": {
        "statut": "SIMILAIRE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react';\r\nimport { supabase } from '../lib/supabaseClient';\r\n\r\n// MenuApprenants V1 Corrigé - Wrapper intelligent compatible avec structure existante\r\nexport default function MenuApprenants({\r\n  cellKey,                    // clé de case (ex: \"0-0-Matin\")\r\n  creneauData: {             // données pour filtrage intelligent\r\n    date,\r\n    jour, \r\n    creneau,\r\n    lieu_id\r\n  },\r\n  apprenantsParCase,         // état existant (lecture seule) - structure: {\"0-0-Matin\": [\"\", \"id1\", \"id2\"]}\r\n  apprenants,                // liste complète apprenants\r\n  onApprenantChange,         // handler existant: (dayIndex, lieuIndex, creneau, selectIndex, value)\r\n  onAddApprenant,            // handler existant: (dayIndex, lieuIndex, creneau)\r\n  onRemoveApprenant,         // handler existant: (dayIndex, lieuIndex, creneau)\r\n  disabled = false,\r\n  couleurEnregistree         // NOUVEAU: couleur persistante post-enregistrement\r\n}) {\r\n  // État pour apprenants disponibles après filtrage intelligent\r\n  const [apprenantsDisponibles, setApprenantsDisponibles] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  \r\n  // 🚨 CIRCUIT BREAKER - Protection contre boucle infinie\r\n  const [requestCount, setRequestCount] = useState(0);\r\n  const MAX_REQUESTS_PER_MINUTE = 10;\r\n  const [lastRequestTime, setLastRequestTime] = useState(Date.now());\r\n  \r\n  // 🚀 CACHE - Éviter requêtes répétitives\r\n  const [cache] = useState(() => new Map());\r\n\r\n  // Fonctions de validation (copiées de MenuApprenants original)\r\n  const validateDatesFormation = (apprenant, dateTest) => {\r\n    if (!apprenant.date_entree_formation) return false;\r\n    \r\n    const dateEntree = new Date(apprenant.date_entree_formation);\r\n    const dateFin = new Date(\r\n      apprenant.date_fin_formation_reelle || \r\n      apprenant.date_sortie_previsionnelle\r\n    );\r\n    const dateTestObj = new Date(dateTest);\r\n    \r\n    return dateTestObj >= dateEntree && dateTestObj <= dateFin;\r\n  };\r\n\r\n  const validateStatutActuel = (apprenant, dateTest, suspensions) => {\r\n    if (apprenant.statut_formation !== 'en_cours') return false;\r\n    \r\n    const suspensionActive = suspensions.find(s => \r\n      s.apprenant_id === apprenant.id &&\r\n      new Date(s.date_suspension) <= new Date(dateTest) &&\r\n      new Date(s.date_reprise_prevue) >= new Date(dateTest)\r\n    );\r\n    \r\n    return !suspensionActive;\r\n  };\r\n\r\n  const validatePlanningType = (apprenantId, planningTypes, jourRequis, creneauRequis, lieuIdRequis) => {\r\n    const planning = planningTypes.find(pt => \r\n      pt.apprenant_id === apprenantId &&\r\n      pt.jour === jourRequis.toLowerCase() &&\r\n      pt.creneau === creneauRequis\r\n    );\r\n    \r\n    if (!planning) return false;\r\n    \r\n    if (lieuIdRequis && planning.lieu_id && planning.lieu_id !== lieuIdRequis) {\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  };\r\n\r\n  // Fonction de filtrage intelligent (adaptée de MenuApprenants original)\r\n  const getApprenantsDisponibles = async (dateTest, jour, creneau, lieuId) => {\r\n    try {\r\n      console.log(`🎯 MenuApprenants V1 Corrigé filtrage: ${dateTest}, ${jour}, ${creneau}, lieu: ${lieuId}`);\r\n\r\n      // 1. Récupérer tous les apprenants actifs\r\n      let { data: apprenantsData, error: apprenantsError } = await supabase\r\n        .from('apprenants_actifs')\r\n        .select('*');\r\n      \r\n      if (apprenantsError && apprenantsError.code === 'PGRST106') {\r\n        const result = await supabase\r\n          .from('users')\r\n          .select('*')\r\n          .eq('role', 'apprenant')\r\n          .eq('archive', false);\r\n        \r\n        apprenantsData = result.data;\r\n      } else if (apprenantsError) {\r\n        throw apprenantsError;\r\n      }\r\n\r\n      if (!apprenantsData || apprenantsData.length === 0) {\r\n        return [];\r\n      }\r\n\r\n      // 2. Récupérer les planning types\r\n      const creneauDB = creneau === 'Matin' ? 'matin' : 'AM';\r\n      const { data: planningTypes, error: planningError } = await supabase\r\n        .from('planning_apprenants')\r\n        .select('apprenant_id, lieu_id, jour, creneau')\r\n        .eq('jour', jour.toLowerCase())\r\n        .eq('creneau', creneauDB)\r\n        .eq('actif', true);\r\n      \r\n      if (planningError && planningError.code !== 'PGRST106') throw planningError;\r\n\r\n      // 3. Récupérer les suspensions actives\r\n      let suspensions = [];\r\n      try {\r\n        const { data: suspensionsData, error: suspensionsError } = await supabase\r\n          .from('suspensions_parcours')\r\n          .select('apprenant_id, date_suspension, date_reprise_prevue')\r\n          .lte('date_suspension', dateTest)\r\n          .gte('date_reprise_prevue', dateTest);\r\n        \r\n        if (!suspensionsError) {\r\n          suspensions = suspensionsData || [];\r\n        }\r\n      } catch (suspError) {\r\n        console.log('Suspensions non disponibles, poursuite sans');\r\n      }\r\n\r\n      // 4. Appliquer les trois filtres\r\n      const results = apprenantsData\r\n        .map(apprenant => {\r\n          const critere1 = validateDatesFormation(apprenant, dateTest);\r\n          if (!critere1) return null;\r\n          \r\n          const critere2 = validateStatutActuel(apprenant, dateTest, suspensions);\r\n          if (!critere2) return null;\r\n          \r\n          const critere3 = validatePlanningType(apprenant.id, planningTypes || [], jour, creneauDB, lieuId);\r\n          if (!critere3) return null;\r\n          \r\n          return apprenant;\r\n        })\r\n        .filter(Boolean);\r\n      \r\n      console.log(`✅ MenuApprenants V1 Corrigé: ${results.length} apprenants disponibles`);\r\n      return results;\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur filtrage MenuApprenants V1 Corrigé:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Déclencher le filtrage quand les données changent - AVEC PROTECTION\r\n  useEffect(() => {\r\n    // 🚨 CIRCUIT BREAKER CHECK\r\n    const now = Date.now();\r\n    if (now - lastRequestTime > 60000) {\r\n      // Reset counter every minute\r\n      setRequestCount(0);\r\n      setLastRequestTime(now);\r\n    }\r\n    \r\n    if (requestCount >= MAX_REQUESTS_PER_MINUTE) {\r\n      console.error('🚨 CIRCUIT BREAKER: Trop de requêtes MenuApprenants, arrêt forcé');\r\n      setError('Trop de requêtes - rechargez la page');\r\n      return;\r\n    }\r\n    \r\n    if (date && jour && creneau && lieu_id) {\r\n      // 🚀 CHECK CACHE FIRST\r\n      const cacheKey = `${date}-${jour}-${creneau}-${lieu_id}`;\r\n      if (cache.has(cacheKey)) {\r\n        console.log('🚀 Cache hit MenuApprenants:', cacheKey);\r\n        setApprenantsDisponibles(cache.get(cacheKey));\r\n        return;\r\n      }\r\n      \r\n      setLoading(true);\r\n      setError('');\r\n      setRequestCount(prev => prev + 1);\r\n      \r\n      console.log(`📡 MenuApprenants fetch #${requestCount + 1}: ${cacheKey}`);\r\n      \r\n      getApprenantsDisponibles(date, jour, creneau, lieu_id)\r\n        .then(disponibles => {\r\n          // Store in cache\r\n          cache.set(cacheKey, disponibles);\r\n          setApprenantsDisponibles(disponibles);\r\n        })\r\n        .catch(err => {\r\n          console.error('Erreur filtrage:', err);\r\n          setError(err.message);\r\n          setApprenantsDisponibles([]);\r\n        })\r\n        .finally(() => {\r\n          setLoading(false);\r\n        });\r\n    } else {\r\n      setApprenantsDisponibles([]);\r\n    }\r\n  }, [date, jour, creneau, lieu_id]); // Dépendances conservées mais protégées\r\n\r\n  // Extraire les indices de la cellKey pour les handlers\r\n  const [dayIndex, lieuIndex, creneauName] = cellKey.split('-');\r\n  const dayIdx = parseInt(dayIndex);\r\n  const lieuIdx = parseInt(lieuIndex);\r\n\r\n  // Liste actuelle des apprenants sélectionnés pour cette case\r\n  const selectedApprenants = apprenantsParCase[cellKey] || [''];\r\n\r\n  return (\r\n    <>\r\n      \r\n      <div style={{\r\n        padding: '6px',\r\n        background: 'rgba(34, 197, 94, 0.1)',\r\n        borderRadius: '4px',\r\n        border: '2px solid rgba(34, 197, 94, 0.3)'\r\n      }}>\r\n        <div className=\"apprenant-header\" style={{ \r\n          fontSize: '10px', \r\n          fontWeight: '600', \r\n          marginBottom: '4px',\r\n          textAlign: 'center'\r\n        }}>\r\n          APPRENANTS\r\n        </div>\r\n      \r\n      {/* Rendu des selects pour chaque apprenant sélectionné - Structure identique à l'existant */}\r\n      {selectedApprenants.map((selectedId, i) => (\r\n        <div key={i}>\r\n          <select\r\n            style={{\r\n              width: '100%',\r\n              padding: '3px',\r\n              border: '1px solid #d1d5db',\r\n              borderRadius: '3px',\r\n              fontSize: '10px',\r\n              background: couleurEnregistree || 'rgba(255,255,255,0.9)',\r\n              color: '#374151',\r\n              marginBottom: '3px'\r\n            }}\r\n            value={selectedId}\r\n            onChange={(e) => onApprenantChange(dayIdx, lieuIdx, creneauName, i, e.target.value)}\r\n            disabled={disabled || loading}\r\n          >\r\n            <option value=\"\">\r\n              {loading ? '⏳ Filtrage...' : \r\n               disabled ? '📍 Lieu requis' : \r\n               error ? '❌ Erreur' :\r\n               'Apprenant'}\r\n            </option>\r\n            {!disabled && !loading && !error && apprenantsDisponibles\r\n              .filter(a => {\r\n                // Logique anti-doublons identique à l'existant\r\n                const currentSelections = selectedApprenants || [];\r\n                return !currentSelections.includes(a.id) || currentSelections[i] === a.id;\r\n              })\r\n              .map(a => (\r\n                <option key={a.id} value={a.id}>\r\n                  {a.prenom} {a.nom}\r\n                </option>\r\n              ))}\r\n          </select>\r\n        </div>\r\n      ))}\r\n\r\n      {/* Boutons +/- identiques à l'existant */}\r\n      <div className=\"no-print\" style={{ display: 'flex', gap: '3px', justifyContent: 'center', marginTop: '3px' }}>\r\n        <button\r\n          onClick={() => onAddApprenant(dayIdx, lieuIdx, creneauName)}\r\n          style={{\r\n            padding: '3px 6px',\r\n            background: '#3b82f6',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '3px',\r\n            fontSize: '10px',\r\n            cursor: 'pointer',\r\n            fontWeight: 'bold'\r\n          }}\r\n          disabled={disabled}\r\n        >\r\n          +\r\n        </button>\r\n        {selectedApprenants.length > 1 && (\r\n          <button\r\n            onClick={() => onRemoveApprenant(dayIdx, lieuIdx, creneauName)}\r\n            style={{\r\n              padding: '3px 6px',\r\n              background: '#ef4444',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '3px',\r\n              fontSize: '10px',\r\n              cursor: 'pointer',\r\n              fontWeight: 'bold'\r\n            }}\r\n            disabled={disabled}\r\n          >\r\n            −\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      </div>\r\n    </>\r\n  );\r\n}",
          "taille": 11000,
          "lignes": 310,
          "dateModif": "2025-08-28T22:16:07.651Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react';\r\nimport { supabase } from '../lib/supabaseClient';\r\n\r\n// MenuApprenants V1 Corrigé - Wrapper intelligent compatible avec structure existante\r\nexport default function MenuApprenants({\r\n  cellKey,                    // clé de case (ex: \"0-0-Matin\")\r\n  creneauData: {             // données pour filtrage intelligent\r\n    date,\r\n    jour, \r\n    creneau,\r\n    lieu_id\r\n  },\r\n  apprenantsParCase,         // état existant (lecture seule) - structure: {\"0-0-Matin\": [\"\", \"id1\", \"id2\"]}\r\n  apprenants,                // liste complète apprenants\r\n  onApprenantChange,         // handler existant: (dayIndex, lieuIndex, creneau, selectIndex, value)\r\n  onAddApprenant,            // handler existant: (dayIndex, lieuIndex, creneau)\r\n  onRemoveApprenant,         // handler existant: (dayIndex, lieuIndex, creneau)\r\n  disabled = false,\r\n  couleurEnregistree         // NOUVEAU: couleur persistante post-enregistrement\r\n}) {\r\n  // État pour apprenants disponibles après filtrage intelligent\r\n  const [apprenantsDisponibles, setApprenantsDisponibles] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  \r\n  // 🚨 CIRCUIT BREAKER - Protection contre boucle infinie\r\n  const [requestCount, setRequestCount] = useState(0);\r\n  const MAX_REQUESTS_PER_MINUTE = 10;\r\n  const [lastRequestTime, setLastRequestTime] = useState(Date.now());\r\n  \r\n  // 🚀 CACHE - Éviter requêtes répétitives\r\n  const [cache] = useState(() => new Map());\r\n\r\n  // Fonctions de validation (copiées de MenuApprenants original)\r\n  const validateDatesFormation = (apprenant, dateTest) => {\r\n    if (!apprenant.date_entree_formation) return false;\r\n    \r\n    const dateEntree = new Date(apprenant.date_entree_formation);\r\n    const dateFin = new Date(\r\n      apprenant.date_fin_formation_reelle || \r\n      apprenant.date_sortie_previsionnelle\r\n    );\r\n    const dateTestObj = new Date(dateTest);\r\n    \r\n    return dateTestObj >= dateEntree && dateTestObj <= dateFin;\r\n  };\r\n\r\n  const validateStatutActuel = (apprenant, dateTest, suspensions) => {\r\n    if (apprenant.statut_formation !== 'en_cours') return false;\r\n    \r\n    const suspensionActive = suspensions.find(s => \r\n      s.apprenant_id === apprenant.id &&\r\n      new Date(s.date_suspension) <= new Date(dateTest) &&\r\n      new Date(s.date_reprise_prevue) >= new Date(dateTest)\r\n    );\r\n    \r\n    return !suspensionActive;\r\n  };\r\n\r\n  const validatePlanningType = (apprenantId, planningTypes, jourRequis, creneauRequis, lieuIdRequis) => {\r\n    const planning = planningTypes.find(pt => \r\n      pt.apprenant_id === apprenantId &&\r\n      pt.jour === jourRequis.toLowerCase() &&\r\n      pt.creneau === creneauRequis\r\n    );\r\n    \r\n    if (!planning) return false;\r\n    \r\n    if (lieuIdRequis && planning.lieu_id && planning.lieu_id !== lieuIdRequis) {\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  };\r\n\r\n  // Fonction de filtrage intelligent (adaptée de MenuApprenants original)\r\n  const getApprenantsDisponibles = async (dateTest, jour, creneau, lieuId) => {\r\n    try {\r\n      console.log(`🎯 MenuApprenants V1 Corrigé filtrage: ${dateTest}, ${jour}, ${creneau}, lieu: ${lieuId}`);\r\n\r\n      // 1. Récupérer tous les apprenants actifs\r\n      let { data: apprenantsData, error: apprenantsError } = await supabase\r\n        .from('apprenants_actifs')\r\n        .select('*');\r\n      \r\n      if (apprenantsError && apprenantsError.code === 'PGRST106') {\r\n        const result = await supabase\r\n          .from('users')\r\n          .select('*')\r\n          .eq('role', 'apprenant')\r\n          .eq('archive', false);\r\n        \r\n        apprenantsData = result.data;\r\n      } else if (apprenantsError) {\r\n        throw apprenantsError;\r\n      }\r\n\r\n      if (!apprenantsData || apprenantsData.length === 0) {\r\n        return [];\r\n      }\r\n\r\n      // 2. Récupérer les planning types\r\n      const creneauDB = creneau === 'Matin' ? 'matin' : 'AM';\r\n      const { data: planningTypes, error: planningError } = await supabase\r\n        .from('planning_apprenants')\r\n        .select('apprenant_id, lieu_id, jour, creneau')\r\n        .eq('jour', jour.toLowerCase())\r\n        .eq('creneau', creneauDB)\r\n        .eq('actif', true);\r\n      \r\n      if (planningError && planningError.code !== 'PGRST106') throw planningError;\r\n\r\n      // 3. Récupérer les suspensions actives\r\n      let suspensions = [];\r\n      try {\r\n        const { data: suspensionsData, error: suspensionsError } = await supabase\r\n          .from('suspensions_parcours')\r\n          .select('apprenant_id, date_suspension, date_reprise_prevue')\r\n          .lte('date_suspension', dateTest)\r\n          .gte('date_reprise_prevue', dateTest);\r\n        \r\n        if (!suspensionsError) {\r\n          suspensions = suspensionsData || [];\r\n        }\r\n      } catch (suspError) {\r\n        console.log('Suspensions non disponibles, poursuite sans');\r\n      }\r\n\r\n      // 4. Appliquer les trois filtres\r\n      const results = apprenantsData\r\n        .map(apprenant => {\r\n          const critere1 = validateDatesFormation(apprenant, dateTest);\r\n          if (!critere1) return null;\r\n          \r\n          const critere2 = validateStatutActuel(apprenant, dateTest, suspensions);\r\n          if (!critere2) return null;\r\n          \r\n          const critere3 = validatePlanningType(apprenant.id, planningTypes || [], jour, creneauDB, lieuId);\r\n          if (!critere3) return null;\r\n          \r\n          return apprenant;\r\n        })\r\n        .filter(Boolean);\r\n      \r\n      console.log(`✅ MenuApprenants V1 Corrigé: ${results.length} apprenants disponibles`);\r\n      return results;\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur filtrage MenuApprenants V1 Corrigé:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Déclencher le filtrage quand les données changent - AVEC PROTECTION\r\n  useEffect(() => {\r\n    // 🚨 CIRCUIT BREAKER CHECK\r\n    const now = Date.now();\r\n    if (now - lastRequestTime > 60000) {\r\n      // Reset counter every minute\r\n      setRequestCount(0);\r\n      setLastRequestTime(now);\r\n    }\r\n    \r\n    if (requestCount >= MAX_REQUESTS_PER_MINUTE) {\r\n      console.error('🚨 CIRCUIT BREAKER: Trop de requêtes MenuApprenants, arrêt forcé');\r\n      setError('Trop de requêtes - rechargez la page');\r\n      return;\r\n    }\r\n    \r\n    if (date && jour && creneau && lieu_id) {\r\n      // 🚀 CHECK CACHE FIRST\r\n      const cacheKey = `${date}-${jour}-${creneau}-${lieu_id}`;\r\n      if (cache.has(cacheKey)) {\r\n        console.log('🚀 Cache hit MenuApprenants:', cacheKey);\r\n        setApprenantsDisponibles(cache.get(cacheKey));\r\n        return;\r\n      }\r\n      \r\n      setLoading(true);\r\n      setError('');\r\n      setRequestCount(prev => prev + 1);\r\n      \r\n      console.log(`📡 MenuApprenants fetch #${requestCount + 1}: ${cacheKey}`);\r\n      \r\n      getApprenantsDisponibles(date, jour, creneau, lieu_id)\r\n        .then(disponibles => {\r\n          // Store in cache\r\n          cache.set(cacheKey, disponibles);\r\n          setApprenantsDisponibles(disponibles);\r\n        })\r\n        .catch(err => {\r\n          console.error('Erreur filtrage:', err);\r\n          setError(err.message);\r\n          setApprenantsDisponibles([]);\r\n        })\r\n        .finally(() => {\r\n          setLoading(false);\r\n        });\r\n    } else {\r\n      setApprenantsDisponibles([]);\r\n    }\r\n  }, [date, jour, creneau, lieu_id]); // Dépendances conservées mais protégées\r\n\r\n  // Extraire les indices de la cellKey pour les handlers\r\n  const [dayIndex, lieuIndex, creneauName] = cellKey.split('-');\r\n  const dayIdx = parseInt(dayIndex);\r\n  const lieuIdx = parseInt(lieuIndex);\r\n\r\n  // Liste actuelle des apprenants sélectionnés pour cette case\r\n  const selectedApprenants = apprenantsParCase[cellKey] || [''];\r\n\r\n  return (\r\n    <>\r\n      {/* Styles CSS pour gestion print-only */}\r\n      <style jsx>{`\r\n        .apprenants-print-display {\r\n          display: none !important;\r\n        }\r\n        @media print {\r\n          .apprenants-print-display {\r\n            display: block !important;\r\n            font-size: 4px !important;\r\n            padding: 0 !important;\r\n            background: white !important;\r\n            border: 1px solid #ccc !important;\r\n            border-radius: 1px !important;\r\n            margin: 0 !important;\r\n            color: #333 !important;\r\n          }\r\n        }\r\n      `}</style>\r\n      \r\n      <div style={{\r\n        padding: '6px',\r\n        background: 'rgba(34, 197, 94, 0.1)',\r\n        borderRadius: '4px',\r\n        border: '2px solid rgba(34, 197, 94, 0.3)'\r\n      }}>\r\n        <div className=\"apprenant-header\" style={{ \r\n          fontSize: '10px', \r\n          fontWeight: '600', \r\n          marginBottom: '4px',\r\n          textAlign: 'center'\r\n        }}>\r\n          APPRENANTS\r\n        </div>\r\n      \r\n      {/* Rendu des selects pour chaque apprenant sélectionné - Structure identique à l'existant */}\r\n      {selectedApprenants.map((selectedId, i) => (\r\n        <div key={i}>\r\n          <select\r\n            style={{\r\n              width: '100%',\r\n              padding: '3px',\r\n              border: '1px solid #d1d5db',\r\n              borderRadius: '3px',\r\n              fontSize: '10px',\r\n              background: couleurEnregistree || 'rgba(255,255,255,0.9)',\r\n              color: '#374151',\r\n              marginBottom: '3px'\r\n            }}\r\n            value={selectedId}\r\n            onChange={(e) => onApprenantChange(dayIdx, lieuIdx, creneauName, i, e.target.value)}\r\n            disabled={disabled || loading}\r\n          >\r\n            <option value=\"\">\r\n              {loading ? '⏳ Filtrage...' : \r\n               disabled ? '📍 Lieu requis' : \r\n               error ? '❌ Erreur' :\r\n               'Apprenant'}\r\n            </option>\r\n            {!disabled && !loading && !error && apprenantsDisponibles\r\n              .filter(a => {\r\n                // Logique anti-doublons identique à l'existant\r\n                const currentSelections = selectedApprenants || [];\r\n                return !currentSelections.includes(a.id) || currentSelections[i] === a.id;\r\n              })\r\n              .map(a => (\r\n                <option key={a.id} value={a.id}>\r\n                  {a.prenom} {a.nom}\r\n                </option>\r\n              ))}\r\n          </select>\r\n          \r\n          {/* Version impression - avec classe CSS locale */}\r\n          <div className=\"apprenants-print-display\">\r\n            {selectedId ? (\r\n              (() => {\r\n                const app = apprenants.find(a => a.id === selectedId);\r\n                return app ? `${app.prenom} ${app.nom}` : '';\r\n              })()\r\n            ) : (\r\n              ''\r\n            )}\r\n          </div>\r\n        </div>\r\n      ))}\r\n\r\n      {/* Boutons +/- identiques à l'existant */}\r\n      <div className=\"no-print\" style={{ display: 'flex', gap: '3px', justifyContent: 'center', marginTop: '3px' }}>\r\n        <button\r\n          onClick={() => onAddApprenant(dayIdx, lieuIdx, creneauName)}\r\n          style={{\r\n            padding: '3px 6px',\r\n            background: '#3b82f6',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '3px',\r\n            fontSize: '10px',\r\n            cursor: 'pointer',\r\n            fontWeight: 'bold'\r\n          }}\r\n          disabled={disabled}\r\n        >\r\n          +\r\n        </button>\r\n        {selectedApprenants.length > 1 && (\r\n          <button\r\n            onClick={() => onRemoveApprenant(dayIdx, lieuIdx, creneauName)}\r\n            style={{\r\n              padding: '3px 6px',\r\n              background: '#ef4444',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '3px',\r\n              fontSize: '10px',\r\n              cursor: 'pointer',\r\n              fontWeight: 'bold'\r\n            }}\r\n            disabled={disabled}\r\n          >\r\n            −\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      </div>\r\n    </>\r\n  );\r\n}",
          "taille": 11992,
          "lignes": 340,
          "dateModif": "2025-08-28T22:08:38.332Z",
          "erreur": null
        },
        "identique": false,
        "diffTaille": 992,
        "diffLignes": 30,
        "pourcentageSimilarite": 92,
        "message": "🟡 SIMILAIRE - Similarité: 92% (±992 bytes, ±30 lignes)"
      }
    },
    {
      "fichier": "components/MessagerieDashboard.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { supabase } from '../lib/supabaseClient'\r\n\r\nfunction MessagerieDashboard({ user, logout, inactivityTime, router }) {\r\n  const [formateurs, setFormateurs] = useState([])\r\n  const [messages, setMessages] = useState([])\r\n  const [selectedMessage, setSelectedMessage] = useState(null)\r\n  const [loading, setLoading] = useState(true)\r\n  const [showNewMessage, setShowNewMessage] = useState(false)\r\n  const [newMessage, setNewMessage] = useState({\r\n    destinataire: '',\r\n    objet: '',\r\n    contenu: ''\r\n  })\r\n  const [sending, setSending] = useState(false)\r\n  const [validating, setValidating] = useState(false)\r\n  // ✅ NOUVEAU: Filtre actif\r\n  const [filtreActif, setFiltreActif] = useState('tous')\r\n  const [formateurFiltre, setFormateurFiltre] = useState('tous')\r\n\r\n  useEffect(() => {\r\n    chargerDonnees()\r\n  }, [])\r\n\r\n  const chargerDonnees = async () => {\r\n    try {\r\n      setLoading(true)\r\n      \r\n      // Charger formateurs\r\n      const { data: formateursData, error: formateurError } = await supabase\r\n        .from('users')\r\n        .select('id, prenom, nom')\r\n        .eq('role', 'formateur')\r\n        .eq('archive', false)\r\n        .order('prenom')\r\n\r\n      if (formateurError) throw formateurError\r\n\r\n      // Charger messages (admin reçus + envoyés)\r\n      const { data: messagesData, error: messageError } = await supabase\r\n        .from('messages')\r\n        .select('*')\r\n        .or('expediteur_id.is.null,destinataire_id.is.null')\r\n        .order('created_at', { ascending: false })\r\n\r\n      if (messageError) throw messageError\r\n\r\n      setFormateurs(formateursData || [])\r\n      setMessages(messagesData || [])\r\n      \r\n      console.log('Données chargées:', {\r\n        formateurs: formateursData?.length || 0,\r\n        messages: messagesData?.length || 0\r\n      })\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur chargement:', error)\r\n      alert('Erreur chargement: ' + error.message)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  const envoyerMessage = async (e) => {\r\n    e.preventDefault()\r\n    \r\n    if (!newMessage.destinataire || !newMessage.objet.trim() || !newMessage.contenu.trim()) {\r\n      alert('Veuillez remplir tous les champs')\r\n      return\r\n    }\r\n\r\n    try {\r\n      setSending(true)\r\n      \r\n      const formateurDestination = formateurs.find(f => f.id === newMessage.destinataire)\r\n      \r\n      const { error } = await supabase\r\n        .from('messages')\r\n        .insert({\r\n          expediteur_id: null, // null = admin\r\n          destinataire_id: newMessage.destinataire,\r\n          expediteur: 'Coordination ACLEF',\r\n          destinataire: `${formateurDestination.prenom} ${formateurDestination.nom}`,\r\n          objet: newMessage.objet.trim(),\r\n          contenu: newMessage.contenu.trim(),\r\n          type: 'messagerie',\r\n          lu: false,\r\n          archive: false,\r\n          statut_validation: 'nouveau',\r\n          date: new Date().toISOString().split('T')[0],\r\n          heure: new Date().toTimeString().slice(0, 5)\r\n        })\r\n\r\n      if (error) throw error\r\n\r\n      alert('✅ Message envoyé avec succès !')\r\n      \r\n      // Reset formulaire et recharger\r\n      setNewMessage({ destinataire: '', objet: '', contenu: '' })\r\n      setShowNewMessage(false)\r\n      chargerDonnees()\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur envoi:', error)\r\n      alert('Erreur envoi: ' + error.message)\r\n    } finally {\r\n      setSending(false)\r\n    }\r\n  }\r\n\r\n  const marquerCommeLu = async (messageId) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('messages')\r\n        .update({ lu: true })\r\n        .eq('id', messageId)\r\n\r\n      if (error) throw error\r\n\r\n      // Recharger messages\r\n      chargerDonnees()\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur marquer lu:', error)\r\n      alert('Erreur: ' + error.message)\r\n    }\r\n  }\r\n\r\n  const archiverMessage = async (messageId) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('messages')\r\n        .update({ \r\n          archive: true,\r\n          date_archivage: new Date().toISOString().split('T')[0]\r\n        })\r\n        .eq('id', messageId)\r\n\r\n      if (error) throw error\r\n\r\n      alert('📁 Message archivé avec succès !')\r\n      chargerDonnees()\r\n      setSelectedMessage(null)\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur archivage:', error)\r\n      alert('Erreur archivage: ' + error.message)\r\n    }\r\n  }\r\n\r\n  const supprimerMessage = async (messageId) => {\r\n    if (!confirm('⚠️ Êtes-vous sûr de vouloir supprimer définitivement ce message ?\\n\\nCette action est irréversible.')) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('messages')\r\n        .delete()\r\n        .eq('id', messageId)\r\n\r\n      if (error) throw error\r\n\r\n      alert('🗑️ Message supprimé définitivement !')\r\n      chargerDonnees()\r\n      setSelectedMessage(null)\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur suppression:', error)\r\n      alert('Erreur suppression: ' + error.message)\r\n    }\r\n  }\r\n\r\n  // ✅ MODIFIÉ: Fonction de validation avec auto-archivage\r\n  const validerPlanningType = async (message) => {\r\n    if (!message.expediteur_id) {\r\n      alert('❌ Erreur: Impossible d\\'identifier le formateur')\r\n      return\r\n    }\r\n\r\n    try {\r\n      setValidating(true)\r\n\r\n      // 1. Changer le statut du message à \"traité\" ET archiver automatiquement\r\n      const { error: messageError } = await supabase\r\n        .from('messages')\r\n        .update({ \r\n          statut_validation: 'traite',\r\n          archive: true,\r\n          date_archivage: new Date().toISOString().split('T')[0]\r\n        })\r\n        .eq('id', message.id)\r\n\r\n      if (messageError) {\r\n        console.error('Erreur mise à jour message:', messageError)\r\n        alert('❌ Erreur lors de la mise à jour du message')\r\n        return\r\n      }\r\n\r\n      // 2. Redirection vers la page de validation avec formateur pré-sélectionné\r\n      const formateurId = message.expediteur_id\r\n      const url = `/planning-type-formateurs?formateur=${formateurId}`\r\n      \r\n      console.log('✅ Redirection vers:', url)\r\n      \r\n      // Redirection avec router Next.js (préserve la session)\r\n      router.push(url)\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur validation:', error)\r\n      alert('❌ Erreur: ' + error.message)\r\n    } finally {\r\n      setValidating(false)\r\n    }\r\n  }\r\n\r\n  // ✅ NOUVEAU: Fonction de validation des modifications ponctuelles\r\n  const validerModificationsPonctuelles = async (message) => {\r\n    if (!message.expediteur_id) {\r\n      alert('❌ Erreur: Impossible d\\'identifier le formateur')\r\n      return\r\n    }\r\n\r\n    try {\r\n      setValidating(true)\r\n\r\n      // 1. Changer le statut du message à \"traité\" ET archiver automatiquement\r\n      const { error: messageError } = await supabase\r\n        .from('messages')\r\n        .update({ \r\n          statut_validation: 'traite',\r\n          archive: true,\r\n          date_archivage: new Date().toISOString().split('T')[0]\r\n        })\r\n        .eq('id', message.id)\r\n\r\n      if (messageError) {\r\n        console.error('Erreur mise à jour message:', messageError)\r\n        alert('❌ Erreur lors de la mise à jour du message')\r\n        return\r\n      }\r\n\r\n      // 2. Redirection vers valider-changements.js avec formateur pré-sélectionné\r\n      const formateurId = message.expediteur_id\r\n      const url = `/valider-changements?formateur=${formateurId}`\r\n      \r\n      console.log('✅ Redirection vers validation changements:', url)\r\n      \r\n      // Redirection avec router Next.js (préserve la session)\r\n      router.push(url)\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur validation modifications:', error)\r\n      alert('❌ Erreur: ' + error.message)\r\n    } finally {\r\n      setValidating(false)\r\n    }\r\n  }\r\n\r\n  const ouvrirMessage = (message) => {\r\n    setSelectedMessage(message)\r\n    // Marquer comme lu automatiquement si pas encore lu\r\n    if (!message.lu) {\r\n      marquerCommeLu(message.id)\r\n    }\r\n  }\r\n\r\n  const getNomFormateur = (id) => {\r\n    const formateur = formateurs.find(f => f.id === id)\r\n    return formateur ? `${formateur.prenom} ${formateur.nom}` : 'Inconnu'\r\n  }\r\n\r\n  const getTypeMessage = (message) => {\r\n    if (message.expediteur_id === null) {\r\n      return 'Envoyé'\r\n    } else {\r\n      return 'Reçu'\r\n    }\r\n  }\r\n\r\n  const estDemandeValidationPlanningType = (message) => {\r\n    return message.objet === 'Validation de planning type' && \r\n           message.statut_validation === 'a_traiter' &&\r\n           message.expediteur_id !== null\r\n  }\r\n\r\n  // ✅ NOUVEAU: Vérifier si le message est une demande de validation modifications\r\n  const estDemandeValidationModifications = (message) => {\r\n    return message.objet === 'Validation de modification ponctuelle' && \r\n           message.statut_validation === 'a_traiter' &&\r\n           message.expediteur_id !== null\r\n  }\r\n\r\n  // ✅ NOUVEAU: Fonctions de filtrage et comptage\r\n  const getMessagesFiltres = () => {\r\n    let messagesFiltres = [...messages]\r\n    \r\n    // Filtre par formateur\r\n    if (formateurFiltre !== 'tous') {\r\n      messagesFiltres = messagesFiltres.filter(m => \r\n        m.expediteur_id === formateurFiltre || m.destinataire_id === formateurFiltre\r\n      )\r\n    }\r\n    \r\n    // Filtre par catégorie\r\n    switch (filtreActif) {\r\n      case 'non_lus':\r\n        return messagesFiltres.filter(m => !m.lu && !m.archive)\r\n      case 'lus':\r\n        return messagesFiltres.filter(m => m.lu && !m.archive)\r\n      case 'validation_planning_a_traiter':\r\n        return messagesFiltres.filter(m => \r\n          m.objet === 'Validation de planning type' && \r\n          m.statut_validation === 'a_traiter' && \r\n          !m.archive\r\n        )\r\n      case 'validation_planning_traitees':\r\n        return messagesFiltres.filter(m => \r\n          m.objet === 'Validation de planning type' && \r\n          m.statut_validation === 'traite'\r\n        )\r\n      case 'validation_modif_a_traiter':\r\n        return messagesFiltres.filter(m => \r\n          m.objet === 'Validation de modification ponctuelle' && \r\n          m.statut_validation === 'a_traiter' && \r\n          !m.archive\r\n        )\r\n      case 'validation_modif_traitees':\r\n        return messagesFiltres.filter(m => \r\n          m.objet === 'Validation de modification ponctuelle' && \r\n          m.statut_validation === 'traite'\r\n        )\r\n      case 'archives':\r\n        return messagesFiltres.filter(m => m.archive)\r\n      case 'tous':\r\n      default:\r\n        return messagesFiltres\r\n    }\r\n  }\r\n\r\n  // ✅ NOUVEAU: Compteurs par catégorie\r\n  const getCompteurs = () => {\r\n    return {\r\n      non_lus: messages.filter(m => !m.lu && !m.archive).length,\r\n      lus: messages.filter(m => m.lu && !m.archive).length,\r\n      validation_planning_a_traiter: messages.filter(m => \r\n        m.objet === 'Validation de planning type' && \r\n        m.statut_validation === 'a_traiter' && \r\n        !m.archive\r\n      ).length,\r\n      validation_planning_traitees: messages.filter(m => \r\n        m.objet === 'Validation de planning type' && \r\n        m.statut_validation === 'traite'\r\n      ).length,\r\n      validation_modif_a_traiter: messages.filter(m => \r\n        m.objet === 'Validation de modification ponctuelle' && \r\n        m.statut_validation === 'a_traiter' && \r\n        !m.archive\r\n      ).length,\r\n      validation_modif_traitees: messages.filter(m => \r\n        m.objet === 'Validation de modification ponctuelle' && \r\n        m.statut_validation === 'traite'\r\n      ).length,\r\n      archives: messages.filter(m => m.archive).length,\r\n      tous: messages.length\r\n    }\r\n  }\r\n\r\n  const getBadgeStatut = (message) => {\r\n    if (message.statut_validation === 'a_traiter') {\r\n      // ✅ NOUVEAU: Couleur différente selon le type de validation\r\n      const couleur = message.objet === 'Validation de modification ponctuelle' ? '#ea580c' : '#dc2626'\r\n      \r\n      return (\r\n        <span style={{\r\n          backgroundColor: couleur,\r\n          color: 'white',\r\n          padding: '2px 6px',\r\n          borderRadius: '4px',\r\n          fontSize: '10px',\r\n          fontWeight: '600',\r\n          marginTop: '4px',\r\n          display: 'inline-block'\r\n        }}>\r\n          À TRAITER\r\n        </span>\r\n      )\r\n    }\r\n    \r\n    if (message.statut_validation === 'traite') {\r\n      return (\r\n        <span style={{\r\n          backgroundColor: '#059669',\r\n          color: 'white',\r\n          padding: '2px 6px',\r\n          borderRadius: '4px',\r\n          fontSize: '10px',\r\n          fontWeight: '600',\r\n          marginTop: '4px',\r\n          display: 'inline-block'\r\n        }}>\r\n          TRAITÉ\r\n        </span>\r\n      )\r\n    }\r\n\r\n    if (!message.lu) {\r\n      return (\r\n        <span style={{\r\n          backgroundColor: '#dc2626',\r\n          color: 'white',\r\n          padding: '2px 6px',\r\n          borderRadius: '4px',\r\n          fontSize: '10px',\r\n          fontWeight: '600',\r\n          marginTop: '4px',\r\n          display: 'inline-block'\r\n        }}>\r\n          NOUVEAU\r\n        </span>\r\n      )\r\n    }\r\n\r\n    if (message.archive) {\r\n      return (\r\n        <span style={{\r\n          backgroundColor: '#f59e0b',\r\n          color: 'white',\r\n          padding: '2px 6px',\r\n          borderRadius: '4px',\r\n          fontSize: '10px',\r\n          fontWeight: '600',\r\n          marginTop: '4px',\r\n          display: 'inline-block'\r\n        }}>\r\n          ARCHIVÉ\r\n        </span>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  const messagesNonLus = messages.filter(m => !m.lu && !m.archive).length\r\n  const messagesFiltres = getMessagesFiltres()\r\n  const compteurs = getCompteurs()\r\n\r\n  if (loading) {\r\n    return (\r\n      <div style={{\r\n        backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n        borderRadius: '12px',\r\n        padding: '20px',\r\n        boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: '400px'\r\n      }}>\r\n        <div style={{ textAlign: 'center', color: '#666' }}>\r\n          <div style={{ fontSize: '24px', marginBottom: '10px' }}>⏳</div>\r\n          <div>Chargement de la messagerie...</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div style={{\r\n      backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n      borderRadius: '12px',\r\n      padding: '20px',\r\n      boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      height: '100%'\r\n    }}>\r\n      \r\n      {/* Titre Messagerie */}\r\n      <div style={{\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        marginBottom: '20px'\r\n      }}>\r\n        <h2 style={{\r\n          fontSize: '20px',\r\n          fontWeight: 'bold',\r\n          color: '#f59e0b',\r\n          margin: 0\r\n        }}>\r\n          Messagerie ({messages.length} messages, {messagesNonLus} non lus)\r\n        </h2>\r\n        <button\r\n          onClick={() => setShowNewMessage(!showNewMessage)}\r\n          disabled={sending}\r\n          style={{\r\n            padding: '10px 20px',\r\n            background: showNewMessage ? 'linear-gradient(135deg, #6b7280 0%, #4b5563 100%)' : 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '8px',\r\n            fontSize: '14px',\r\n            fontWeight: '600',\r\n            cursor: sending ? 'not-allowed' : 'pointer',\r\n            opacity: sending ? 0.6 : 1\r\n          }}\r\n        >\r\n          {showNewMessage ? 'Annuler' : 'Nouveau Message'}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Formulaire nouveau message */}\r\n      {showNewMessage && (\r\n        <div style={{\r\n          backgroundColor: '#f8f9fa',\r\n          borderRadius: '8px',\r\n          padding: '20px',\r\n          marginBottom: '20px',\r\n          border: '1px solid #e5e7eb'\r\n        }}>\r\n          <h3 style={{ margin: '0 0 15px 0', color: '#374151' }}>Nouveau Message</h3>\r\n          <form onSubmit={envoyerMessage}>\r\n            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px', marginBottom: '15px' }}>\r\n              <div>\r\n                <label style={{ display: 'block', marginBottom: '5px', fontWeight: '500' }}>\r\n                  Destinataire *\r\n                </label>\r\n                <select\r\n                  value={newMessage.destinataire}\r\n                  onChange={(e) => setNewMessage({...newMessage, destinataire: e.target.value})}\r\n                  required\r\n                  disabled={sending}\r\n                  style={{\r\n                    width: '100%',\r\n                    padding: '8px',\r\n                    borderRadius: '6px',\r\n                    border: '1px solid #d1d5db',\r\n                    backgroundColor: sending ? '#f3f4f6' : 'white'\r\n                  }}\r\n                >\r\n                  <option value=\"\">-- Choisir un formateur --</option>\r\n                  {formateurs.map(f => (\r\n                    <option key={f.id} value={f.id}>\r\n                      {f.prenom} {f.nom}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label style={{ display: 'block', marginBottom: '5px', fontWeight: '500' }}>\r\n                  Objet *\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={newMessage.objet}\r\n                  onChange={(e) => setNewMessage({...newMessage, objet: e.target.value})}\r\n                  placeholder=\"Objet du message\"\r\n                  required\r\n                  disabled={sending}\r\n                  style={{\r\n                    width: '100%',\r\n                    padding: '8px',\r\n                    borderRadius: '6px',\r\n                    border: '1px solid #d1d5db',\r\n                    backgroundColor: sending ? '#f3f4f6' : 'white'\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div style={{ marginBottom: '15px' }}>\r\n              <label style={{ display: 'block', marginBottom: '5px', fontWeight: '500' }}>\r\n                Message *\r\n              </label>\r\n              <textarea\r\n                value={newMessage.contenu}\r\n                onChange={(e) => setNewMessage({...newMessage, contenu: e.target.value})}\r\n                placeholder=\"Tapez votre message ici...\"\r\n                required\r\n                rows={4}\r\n                disabled={sending}\r\n                style={{\r\n                  width: '100%',\r\n                  padding: '8px',\r\n                  borderRadius: '6px',\r\n                  border: '1px solid #d1d5db',\r\n                  resize: 'vertical',\r\n                  backgroundColor: sending ? '#f3f4f6' : 'white'\r\n                }}\r\n              />\r\n            </div>\r\n            <div style={{ display: 'flex', gap: '10px' }}>\r\n              <button\r\n                type=\"submit\"\r\n                disabled={sending}\r\n                style={{\r\n                  padding: '10px 20px',\r\n                  background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',\r\n                  color: 'white',\r\n                  border: 'none',\r\n                  borderRadius: '6px',\r\n                  cursor: sending ? 'not-allowed' : 'pointer',\r\n                  fontWeight: '600',\r\n                  opacity: sending ? 0.6 : 1\r\n                }}\r\n              >\r\n                {sending ? 'Envoi...' : 'Envoyer'}\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setNewMessage({ destinataire: '', objet: '', contenu: '' })\r\n                  setShowNewMessage(false)\r\n                }}\r\n                disabled={sending}\r\n                style={{\r\n                  padding: '10px 20px',\r\n                  background: 'linear-gradient(135deg, #6b7280 0%, #4b5563 100%)',\r\n                  color: 'white',\r\n                  border: 'none',\r\n                  borderRadius: '6px',\r\n                  cursor: sending ? 'not-allowed' : 'pointer',\r\n                  fontWeight: '600',\r\n                  opacity: sending ? 0.6 : 1\r\n                }}\r\n              >\r\n                Annuler\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )}\r\n\r\n      {/* ✅ NOUVEAU: Bandeau filtres compact sans titre */}\r\n      <div style={{\r\n        backgroundColor: 'white',\r\n        borderRadius: '8px',\r\n        border: '1px solid #e5e7eb',\r\n        padding: '12px',\r\n        marginBottom: '20px',\r\n        boxShadow: '0 2px 4px rgba(0,0,0,0.05)'\r\n      }}>\r\n        <div style={{\r\n          display: 'flex',\r\n          flexWrap: 'wrap',\r\n          gap: '8px',\r\n          alignItems: 'center'\r\n        }}>\r\n          \r\n          {/* Badges compacts avec compteurs */}\r\n          <div\r\n            onClick={() => setFiltreActif('validation_planning_a_traiter')}\r\n            style={{\r\n              padding: '4px 8px',\r\n              backgroundColor: filtreActif === 'validation_planning_a_traiter' ? '#dc2626' : '#fee2e2',\r\n              color: filtreActif === 'validation_planning_a_traiter' ? 'white' : '#dc2626',\r\n              border: `1px solid ${filtreActif === 'validation_planning_a_traiter' ? '#dc2626' : '#fecaca'}`,\r\n              borderRadius: '4px',\r\n              fontSize: '11px',\r\n              fontWeight: '600',\r\n              cursor: 'pointer',\r\n              transition: 'all 0.2s'\r\n            }}\r\n          >\r\n            Planning à traiter ({compteurs.validation_planning_a_traiter})\r\n          </div>\r\n          \r\n          {/* ✅ NOUVEAU: Badge modifications avec couleur orange */}\r\n          <div\r\n            onClick={() => setFiltreActif('validation_modif_a_traiter')}\r\n            style={{\r\n              padding: '4px 8px',\r\n              backgroundColor: filtreActif === 'validation_modif_a_traiter' ? '#ea580c' : '#fed7aa',\r\n              color: filtreActif === 'validation_modif_a_traiter' ? 'white' : '#ea580c',\r\n              border: `1px solid ${filtreActif === 'validation_modif_a_traiter' ? '#ea580c' : '#fdba74'}`,\r\n              borderRadius: '4px',\r\n              fontSize: '11px',\r\n              fontWeight: '600',\r\n              cursor: 'pointer',\r\n              transition: 'all 0.2s'\r\n            }}\r\n          >\r\n            Modifications à traiter ({compteurs.validation_modif_a_traiter})\r\n          </div>\r\n          \r\n          <div\r\n            onClick={() => setFiltreActif('non_lus')}\r\n            style={{\r\n              padding: '4px 8px',\r\n              backgroundColor: filtreActif === 'non_lus' ? '#3b82f6' : '#dbeafe',\r\n              color: filtreActif === 'non_lus' ? 'white' : '#3b82f6',\r\n              border: `1px solid ${filtreActif === 'non_lus' ? '#3b82f6' : '#93c5fd'}`,\r\n              borderRadius: '4px',\r\n              fontSize: '11px',\r\n              fontWeight: '600',\r\n              cursor: 'pointer',\r\n              transition: 'all 0.2s'\r\n            }}\r\n          >\r\n            Non lus ({compteurs.non_lus})\r\n          </div>\r\n          \r\n          <div\r\n            onClick={() => setFiltreActif('archives')}\r\n            style={{\r\n              padding: '4px 8px',\r\n              backgroundColor: filtreActif === 'archives' ? '#6b7280' : '#f3f4f6',\r\n              color: filtreActif === 'archives' ? 'white' : '#6b7280',\r\n              border: `1px solid ${filtreActif === 'archives' ? '#6b7280' : '#d1d5db'}`,\r\n              borderRadius: '4px',\r\n              fontSize: '11px',\r\n              fontWeight: '600',\r\n              cursor: 'pointer',\r\n              transition: 'all 0.2s'\r\n            }}\r\n          >\r\n            Archives ({compteurs.archives})\r\n          </div>\r\n\r\n          {/* Séparateur */}\r\n          <div style={{\r\n            width: '1px',\r\n            height: '20px',\r\n            backgroundColor: '#d1d5db',\r\n            margin: '0 5px'\r\n          }}></div>\r\n\r\n          {/* Menu déroulant type */}\r\n          <select \r\n            value={filtreActif}\r\n            onChange={(e) => setFiltreActif(e.target.value)}\r\n            style={{\r\n              padding: '6px 10px',\r\n              border: '1px solid #d1d5db',\r\n              borderRadius: '4px',\r\n              fontSize: '11px',\r\n              backgroundColor: 'white',\r\n              fontWeight: '600'\r\n            }}\r\n          >\r\n            <option value=\"non_lus\">Non lus ({compteurs.non_lus})</option>\r\n            <option value=\"lus\">Lus ({compteurs.lus})</option>\r\n            <option value=\"validation_planning_a_traiter\">Validations planning type à traiter ({compteurs.validation_planning_a_traiter})</option>\r\n            <option value=\"validation_planning_traitees\">Validations planning type traitées ({compteurs.validation_planning_traitees})</option>\r\n            <option value=\"validation_modif_a_traiter\">Validations modification à traiter ({compteurs.validation_modif_a_traiter})</option>\r\n            <option value=\"validation_modif_traitees\">Validations modification traitées ({compteurs.validation_modif_traitees})</option>\r\n            <option value=\"archives\">Archivés ({compteurs.archives})</option>\r\n            <option value=\"tous\">Tous les messages ({compteurs.tous})</option>\r\n          </select>\r\n\r\n          {/* Filtre par formateur */}\r\n          <select \r\n            value={formateurFiltre}\r\n            onChange={(e) => setFormateurFiltre(e.target.value)}\r\n            style={{\r\n              padding: '6px 10px',\r\n              border: '1px solid #d1d5db',\r\n              borderRadius: '4px',\r\n              fontSize: '11px',\r\n              backgroundColor: 'white',\r\n              fontWeight: '600'\r\n            }}\r\n          >\r\n            <option value=\"tous\">Tous les formateurs</option>\r\n            {formateurs.map(f => (\r\n              <option key={f.id} value={f.id}>\r\n                {f.prenom} {f.nom}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Deux cadres en dessous */}\r\n      <div style={{\r\n        display: 'flex',\r\n        gap: '20px',\r\n        flex: 1,\r\n        minHeight: '0'\r\n      }}>\r\n        \r\n        {/* Cadre Types de message */}\r\n        <div style={{\r\n          flex: 1,\r\n          backgroundColor: 'white',\r\n          borderRadius: '8px',\r\n          border: '1px solid #e5e7eb',\r\n          padding: '15px',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          height: '500px',\r\n          minHeight: '500px'\r\n        }}>\r\n          <h3 style={{\r\n            margin: '0 0 15px 0',\r\n            fontSize: '16px',\r\n            fontWeight: 'bold',\r\n            color: '#374151',\r\n            paddingBottom: '10px',\r\n            borderBottom: '2px solid #f59e0b',\r\n            flexShrink: 0\r\n          }}>\r\n            Messages récents ({messagesFiltres.length})\r\n          </h3>\r\n          \r\n          <div style={{\r\n            flex: 1,\r\n            overflow: 'auto',\r\n            minHeight: '0',\r\n            paddingRight: '5px',\r\n            marginRight: '-5px'\r\n          }}>\r\n            {messagesFiltres.length === 0 ? (\r\n              <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                height: '100%',\r\n                color: '#6b7280',\r\n                fontSize: '14px'\r\n              }}>\r\n                Aucun message dans cette catégorie\r\n              </div>\r\n            ) : (\r\n              messagesFiltres.slice(0, 50).map(message => (\r\n                <div\r\n                  key={message.id}\r\n                  onClick={() => ouvrirMessage(message)}\r\n                  style={{\r\n                    padding: '10px',\r\n                    backgroundColor: selectedMessage?.id === message.id ? '#eff6ff' : \r\n                                   message.archive ? '#fef3c7' :\r\n                                   message.statut_validation === 'a_traiter' ? (\r\n                                     message.objet === 'Validation de modification ponctuelle' ? '#fed7aa' : '#fee2e2'\r\n                                   ) :\r\n                                   !message.lu ? '#fee2e2' : '#f9fafb',\r\n                    borderRadius: '6px',\r\n                    marginBottom: '8px',\r\n                    cursor: 'pointer',\r\n                    border: `1px solid ${selectedMessage?.id === message.id ? '#3b82f6' : \r\n                                        message.archive ? '#f59e0b' :\r\n                                        message.statut_validation === 'a_traiter' ? (\r\n                                          message.objet === 'Validation de modification ponctuelle' ? '#ea580c' : '#dc2626'\r\n                                        ) :\r\n                                        !message.lu ? '#ef4444' : '#e5e7eb'}`,\r\n                    transition: 'all 0.2s',\r\n                    flexShrink: 0\r\n                  }}\r\n                >\r\n                  <div style={{ fontWeight: '600', fontSize: '13px', marginBottom: '4px' }}>\r\n                    {getTypeMessage(message)} - {message.expediteur_id ? getNomFormateur(message.expediteur_id) : message.destinataire}\r\n                  </div>\r\n                  <div style={{ fontSize: '12px', color: '#6b7280', marginBottom: '4px' }}>\r\n                    {message.objet || 'Sans objet'}\r\n                  </div>\r\n                  <div style={{ fontSize: '11px', color: '#9ca3af' }}>\r\n                    {message.date} {message.heure}\r\n                  </div>\r\n                  {getBadgeStatut(message)}\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Cadre Messages */}\r\n        <div style={{\r\n          flex: 2,\r\n          backgroundColor: 'white',\r\n          borderRadius: '8px',\r\n          border: '1px solid #e5e7eb',\r\n          padding: '15px',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          height: '500px',\r\n          minHeight: '500px'\r\n        }}>\r\n          <h3 style={{\r\n            margin: '0 0 15px 0',\r\n            fontSize: '16px',\r\n            fontWeight: 'bold',\r\n            color: '#374151',\r\n            paddingBottom: '10px',\r\n            borderBottom: '2px solid #f59e0b',\r\n            flexShrink: 0\r\n          }}>\r\n            Lecture du message\r\n          </h3>\r\n          \r\n          {selectedMessage ? (\r\n            <div style={{ \r\n              flex: 1, \r\n              overflow: 'auto',\r\n              minHeight: '0',\r\n              paddingRight: '5px',\r\n              marginRight: '-5px'\r\n            }}>\r\n              <div style={{ \r\n                borderBottom: '1px solid #e5e7eb',\r\n                paddingBottom: '15px',\r\n                marginBottom: '15px'\r\n              }}>\r\n                <div style={{ fontSize: '16px', fontWeight: '600', marginBottom: '8px' }}>\r\n                  {selectedMessage.objet || 'Sans objet'}\r\n                </div>\r\n                <div style={{ fontSize: '14px', color: '#6b7280', marginBottom: '4px' }}>\r\n                  {selectedMessage.expediteur_id ? \r\n                    `De: ${getNomFormateur(selectedMessage.expediteur_id)}` : \r\n                    `À: ${selectedMessage.destinataire}`\r\n                  }\r\n                </div>\r\n                <div style={{ fontSize: '12px', color: '#9ca3af', marginBottom: '8px' }}>\r\n                  {selectedMessage.date} à {selectedMessage.heure}\r\n                </div>\r\n                \r\n                {/* Actions selon l'état avec bouton Valider */}\r\n                <div style={{ display: 'flex', gap: '8px', marginTop: '10px', flexWrap: 'wrap' }}>\r\n                  \r\n                  {/* Bouton Valider pour demandes planning type */}\r\n                  {estDemandeValidationPlanningType(selectedMessage) && (\r\n                    <button\r\n                      onClick={() => validerPlanningType(selectedMessage)}\r\n                      disabled={validating}\r\n                      style={{\r\n                        padding: '8px 16px',\r\n                        background: validating ? '#9ca3af' : 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '6px',\r\n                        fontSize: '14px',\r\n                        cursor: validating ? 'not-allowed' : 'pointer',\r\n                        fontWeight: '600',\r\n                        boxShadow: '0 4px 12px rgba(16, 185, 129, 0.3)'\r\n                      }}\r\n                    >\r\n                      {validating ? 'Validation...' : '✅ Valider Planning'}\r\n                    </button>\r\n                  )}\r\n\r\n                  {/* ✅ NOUVEAU: Bouton Valider pour demandes modifications ponctuelles */}\r\n                  {estDemandeValidationModifications(selectedMessage) && (\r\n                    <button\r\n                      onClick={() => validerModificationsPonctuelles(selectedMessage)}\r\n                      disabled={validating}\r\n                      style={{\r\n                        padding: '8px 16px',\r\n                        background: validating ? '#9ca3af' : 'linear-gradient(135deg, #ea580c 0%, #c2410c 100%)',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '6px',\r\n                        fontSize: '14px',\r\n                        cursor: validating ? 'not-allowed' : 'pointer',\r\n                        fontWeight: '600',\r\n                        boxShadow: '0 4px 12px rgba(234, 88, 12, 0.3)'\r\n                      }}\r\n                    >\r\n                      {validating ? 'Validation...' : '🔄 Valider Modifications'}\r\n                    </button>\r\n                  )}\r\n\r\n                  {/* Actions classiques */}\r\n                  {!selectedMessage.archive && selectedMessage.statut_validation !== 'traite' ? (\r\n                    <button\r\n                      onClick={() => archiverMessage(selectedMessage.id)}\r\n                      style={{\r\n                        padding: '6px 12px',\r\n                        background: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '6px',\r\n                        fontSize: '12px',\r\n                        cursor: 'pointer',\r\n                        fontWeight: '600'\r\n                      }}\r\n                    >\r\n                      Archiver\r\n                    </button>\r\n                  ) : selectedMessage.archive && (\r\n                    <button\r\n                      onClick={() => supprimerMessage(selectedMessage.id)}\r\n                      style={{\r\n                        padding: '6px 12px',\r\n                        background: 'linear-gradient(135deg, #dc2626 0%, #991b1b 100%)',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '6px',\r\n                        fontSize: '12px',\r\n                        cursor: 'pointer',\r\n                        fontWeight: '600'\r\n                      }}\r\n                    >\r\n                      Supprimer définitivement\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              \r\n              <div style={{ \r\n                backgroundColor: '#f9fafb',\r\n                padding: '15px',\r\n                borderRadius: '6px',\r\n                marginBottom: '15px',\r\n                lineHeight: '1.5'\r\n              }}>\r\n                {selectedMessage.contenu}\r\n              </div>\r\n\r\n              {/* Info statut traité */}\r\n              {selectedMessage.statut_validation === 'traite' && (\r\n                <div style={{\r\n                  padding: '10px',\r\n                  backgroundColor: '#d1fae5',\r\n                  border: '1px solid #10b981',\r\n                  borderRadius: '6px',\r\n                  fontSize: '12px',\r\n                  color: '#065f46',\r\n                  marginBottom: '10px'\r\n                }}>\r\n                  ✅ <strong>Demande traitée</strong> - {selectedMessage.objet === 'Validation de modification ponctuelle' ? 'Les modifications ont été validées' : 'Le planning a été validé'} et archivé automatiquement\r\n                </div>\r\n              )}\r\n\r\n              {selectedMessage.archive && (\r\n                <div style={{\r\n                  padding: '10px',\r\n                  backgroundColor: '#fef3c7',\r\n                  border: '1px solid #fbbf24',\r\n                  borderRadius: '6px',\r\n                  fontSize: '12px',\r\n                  color: '#92400e'\r\n                }}>\r\n                  ⚠️ <strong>Message archivé</strong> le {selectedMessage.date_archivage}\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div style={{\r\n              flex: 1,\r\n              backgroundColor: '#f9fafb',\r\n              borderRadius: '6px',\r\n              padding: '20px',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              color: '#6b7280',\r\n              fontSize: '14px'\r\n            }}>\r\n              Sélectionnez un message pour l'afficher ici\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MessagerieDashboard",
          "taille": 37517,
          "lignes": 1057,
          "dateModif": "2025-08-28T19:00:40.049Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { supabase } from '../lib/supabaseClient'\r\n\r\nfunction MessagerieDashboard({ user, logout, inactivityTime, router }) {\r\n  const [formateurs, setFormateurs] = useState([])\r\n  const [messages, setMessages] = useState([])\r\n  const [selectedMessage, setSelectedMessage] = useState(null)\r\n  const [loading, setLoading] = useState(true)\r\n  const [showNewMessage, setShowNewMessage] = useState(false)\r\n  const [newMessage, setNewMessage] = useState({\r\n    destinataire: '',\r\n    objet: '',\r\n    contenu: ''\r\n  })\r\n  const [sending, setSending] = useState(false)\r\n  const [validating, setValidating] = useState(false)\r\n  // ✅ NOUVEAU: Filtre actif\r\n  const [filtreActif, setFiltreActif] = useState('tous')\r\n  const [formateurFiltre, setFormateurFiltre] = useState('tous')\r\n\r\n  useEffect(() => {\r\n    chargerDonnees()\r\n  }, [])\r\n\r\n  const chargerDonnees = async () => {\r\n    try {\r\n      setLoading(true)\r\n      \r\n      // Charger formateurs\r\n      const { data: formateursData, error: formateurError } = await supabase\r\n        .from('users')\r\n        .select('id, prenom, nom')\r\n        .eq('role', 'formateur')\r\n        .eq('archive', false)\r\n        .order('prenom')\r\n\r\n      if (formateurError) throw formateurError\r\n\r\n      // Charger messages (admin reçus + envoyés)\r\n      const { data: messagesData, error: messageError } = await supabase\r\n        .from('messages')\r\n        .select('*')\r\n        .or('expediteur_id.is.null,destinataire_id.is.null')\r\n        .order('created_at', { ascending: false })\r\n\r\n      if (messageError) throw messageError\r\n\r\n      setFormateurs(formateursData || [])\r\n      setMessages(messagesData || [])\r\n      \r\n      console.log('Données chargées:', {\r\n        formateurs: formateursData?.length || 0,\r\n        messages: messagesData?.length || 0\r\n      })\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur chargement:', error)\r\n      alert('Erreur chargement: ' + error.message)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  const envoyerMessage = async (e) => {\r\n    e.preventDefault()\r\n    \r\n    if (!newMessage.destinataire || !newMessage.objet.trim() || !newMessage.contenu.trim()) {\r\n      alert('Veuillez remplir tous les champs')\r\n      return\r\n    }\r\n\r\n    try {\r\n      setSending(true)\r\n      \r\n      const formateurDestination = formateurs.find(f => f.id === newMessage.destinataire)\r\n      \r\n      const { error } = await supabase\r\n        .from('messages')\r\n        .insert({\r\n          expediteur_id: null, // null = admin\r\n          destinataire_id: newMessage.destinataire,\r\n          expediteur: 'Coordination ACLEF',\r\n          destinataire: `${formateurDestination.prenom} ${formateurDestination.nom}`,\r\n          objet: newMessage.objet.trim(),\r\n          contenu: newMessage.contenu.trim(),\r\n          type: 'messagerie',\r\n          lu: false,\r\n          archive: false,\r\n          statut_validation: 'nouveau',\r\n          date: new Date().toISOString().split('T')[0],\r\n          heure: new Date().toTimeString().slice(0, 5)\r\n        })\r\n\r\n      if (error) throw error\r\n\r\n      alert('✅ Message envoyé avec succès !')\r\n      \r\n      // Reset formulaire et recharger\r\n      setNewMessage({ destinataire: '', objet: '', contenu: '' })\r\n      setShowNewMessage(false)\r\n      chargerDonnees()\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur envoi:', error)\r\n      alert('Erreur envoi: ' + error.message)\r\n    } finally {\r\n      setSending(false)\r\n    }\r\n  }\r\n\r\n  const marquerCommeLu = async (messageId) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('messages')\r\n        .update({ lu: true })\r\n        .eq('id', messageId)\r\n\r\n      if (error) throw error\r\n\r\n      // Recharger messages\r\n      chargerDonnees()\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur marquer lu:', error)\r\n      alert('Erreur: ' + error.message)\r\n    }\r\n  }\r\n\r\n  const archiverMessage = async (messageId) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('messages')\r\n        .update({ \r\n          archive: true,\r\n          date_archivage: new Date().toISOString().split('T')[0]\r\n        })\r\n        .eq('id', messageId)\r\n\r\n      if (error) throw error\r\n\r\n      alert('📁 Message archivé avec succès !')\r\n      chargerDonnees()\r\n      setSelectedMessage(null)\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur archivage:', error)\r\n      alert('Erreur archivage: ' + error.message)\r\n    }\r\n  }\r\n\r\n  const supprimerMessage = async (messageId) => {\r\n    if (!confirm('⚠️ Êtes-vous sûr de vouloir supprimer définitivement ce message ?\\n\\nCette action est irréversible.')) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('messages')\r\n        .delete()\r\n        .eq('id', messageId)\r\n\r\n      if (error) throw error\r\n\r\n      alert('🗑️ Message supprimé définitivement !')\r\n      chargerDonnees()\r\n      setSelectedMessage(null)\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur suppression:', error)\r\n      alert('Erreur suppression: ' + error.message)\r\n    }\r\n  }\r\n\r\n  // ✅ MODIFIÉ: Fonction de validation avec auto-archivage\r\n  const validerPlanningType = async (message) => {\r\n    if (!message.expediteur_id) {\r\n      alert('❌ Erreur: Impossible d\\'identifier le formateur')\r\n      return\r\n    }\r\n\r\n    try {\r\n      setValidating(true)\r\n\r\n      // 1. Changer le statut du message à \"traité\" ET archiver automatiquement\r\n      const { error: messageError } = await supabase\r\n        .from('messages')\r\n        .update({ \r\n          statut_validation: 'traite',\r\n          archive: true,\r\n          date_archivage: new Date().toISOString().split('T')[0]\r\n        })\r\n        .eq('id', message.id)\r\n\r\n      if (messageError) {\r\n        console.error('Erreur mise à jour message:', messageError)\r\n        alert('❌ Erreur lors de la mise à jour du message')\r\n        return\r\n      }\r\n\r\n      // 2. Redirection vers la page de validation avec formateur pré-sélectionné\r\n      const formateurId = message.expediteur_id\r\n      const url = `/planning-type-formateurs?formateur=${formateurId}`\r\n      \r\n      console.log('✅ Redirection vers:', url)\r\n      \r\n      // Redirection avec router Next.js (préserve la session)\r\n      router.push(url)\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur validation:', error)\r\n      alert('❌ Erreur: ' + error.message)\r\n    } finally {\r\n      setValidating(false)\r\n    }\r\n  }\r\n\r\n  // ✅ NOUVEAU: Fonction de validation des modifications ponctuelles\r\n  const validerModificationsPonctuelles = async (message) => {\r\n    if (!message.expediteur_id) {\r\n      alert('❌ Erreur: Impossible d\\'identifier le formateur')\r\n      return\r\n    }\r\n\r\n    try {\r\n      setValidating(true)\r\n\r\n      // 1. Changer le statut du message à \"traité\" ET archiver automatiquement\r\n      const { error: messageError } = await supabase\r\n        .from('messages')\r\n        .update({ \r\n          statut_validation: 'traite',\r\n          archive: true,\r\n          date_archivage: new Date().toISOString().split('T')[0]\r\n        })\r\n        .eq('id', message.id)\r\n\r\n      if (messageError) {\r\n        console.error('Erreur mise à jour message:', messageError)\r\n        alert('❌ Erreur lors de la mise à jour du message')\r\n        return\r\n      }\r\n\r\n      // 2. Redirection vers valider-changements.js avec formateur pré-sélectionné\r\n      const formateurId = message.expediteur_id\r\n      const url = `/valider-changements?formateur=${formateurId}`\r\n      \r\n      console.log('✅ Redirection vers validation changements:', url)\r\n      \r\n      // Redirection avec router Next.js (préserve la session)\r\n      router.push(url)\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur validation modifications:', error)\r\n      alert('❌ Erreur: ' + error.message)\r\n    } finally {\r\n      setValidating(false)\r\n    }\r\n  }\r\n\r\n  const ouvrirMessage = (message) => {\r\n    setSelectedMessage(message)\r\n    // Marquer comme lu automatiquement si pas encore lu\r\n    if (!message.lu) {\r\n      marquerCommeLu(message.id)\r\n    }\r\n  }\r\n\r\n  const getNomFormateur = (id) => {\r\n    const formateur = formateurs.find(f => f.id === id)\r\n    return formateur ? `${formateur.prenom} ${formateur.nom}` : 'Inconnu'\r\n  }\r\n\r\n  const getTypeMessage = (message) => {\r\n    if (message.expediteur_id === null) {\r\n      return 'Envoyé'\r\n    } else {\r\n      return 'Reçu'\r\n    }\r\n  }\r\n\r\n  const estDemandeValidationPlanningType = (message) => {\r\n    return message.objet === 'Validation de planning type' && \r\n           message.statut_validation === 'a_traiter' &&\r\n           message.expediteur_id !== null\r\n  }\r\n\r\n  // ✅ NOUVEAU: Vérifier si le message est une demande de validation modifications\r\n  const estDemandeValidationModifications = (message) => {\r\n    return message.objet === 'Validation de modification ponctuelle' && \r\n           message.statut_validation === 'a_traiter' &&\r\n           message.expediteur_id !== null\r\n  }\r\n\r\n  // ✅ NOUVEAU: Fonctions de filtrage et comptage\r\n  const getMessagesFiltres = () => {\r\n    let messagesFiltres = [...messages]\r\n    \r\n    // Filtre par formateur\r\n    if (formateurFiltre !== 'tous') {\r\n      messagesFiltres = messagesFiltres.filter(m => \r\n        m.expediteur_id === formateurFiltre || m.destinataire_id === formateurFiltre\r\n      )\r\n    }\r\n    \r\n    // Filtre par catégorie\r\n    switch (filtreActif) {\r\n      case 'non_lus':\r\n        return messagesFiltres.filter(m => !m.lu && !m.archive)\r\n      case 'lus':\r\n        return messagesFiltres.filter(m => m.lu && !m.archive)\r\n      case 'validation_planning_a_traiter':\r\n        return messagesFiltres.filter(m => \r\n          m.objet === 'Validation de planning type' && \r\n          m.statut_validation === 'a_traiter' && \r\n          !m.archive\r\n        )\r\n      case 'validation_planning_traitees':\r\n        return messagesFiltres.filter(m => \r\n          m.objet === 'Validation de planning type' && \r\n          m.statut_validation === 'traite'\r\n        )\r\n      case 'validation_modif_a_traiter':\r\n        return messagesFiltres.filter(m => \r\n          m.objet === 'Validation de modification ponctuelle' && \r\n          m.statut_validation === 'a_traiter' && \r\n          !m.archive\r\n        )\r\n      case 'validation_modif_traitees':\r\n        return messagesFiltres.filter(m => \r\n          m.objet === 'Validation de modification ponctuelle' && \r\n          m.statut_validation === 'traite'\r\n        )\r\n      case 'archives':\r\n        return messagesFiltres.filter(m => m.archive)\r\n      case 'tous':\r\n      default:\r\n        return messagesFiltres\r\n    }\r\n  }\r\n\r\n  // ✅ NOUVEAU: Compteurs par catégorie\r\n  const getCompteurs = () => {\r\n    return {\r\n      non_lus: messages.filter(m => !m.lu && !m.archive).length,\r\n      lus: messages.filter(m => m.lu && !m.archive).length,\r\n      validation_planning_a_traiter: messages.filter(m => \r\n        m.objet === 'Validation de planning type' && \r\n        m.statut_validation === 'a_traiter' && \r\n        !m.archive\r\n      ).length,\r\n      validation_planning_traitees: messages.filter(m => \r\n        m.objet === 'Validation de planning type' && \r\n        m.statut_validation === 'traite'\r\n      ).length,\r\n      validation_modif_a_traiter: messages.filter(m => \r\n        m.objet === 'Validation de modification ponctuelle' && \r\n        m.statut_validation === 'a_traiter' && \r\n        !m.archive\r\n      ).length,\r\n      validation_modif_traitees: messages.filter(m => \r\n        m.objet === 'Validation de modification ponctuelle' && \r\n        m.statut_validation === 'traite'\r\n      ).length,\r\n      archives: messages.filter(m => m.archive).length,\r\n      tous: messages.length\r\n    }\r\n  }\r\n\r\n  const getBadgeStatut = (message) => {\r\n    if (message.statut_validation === 'a_traiter') {\r\n      // ✅ NOUVEAU: Couleur différente selon le type de validation\r\n      const couleur = message.objet === 'Validation de modification ponctuelle' ? '#ea580c' : '#dc2626'\r\n      \r\n      return (\r\n        <span style={{\r\n          backgroundColor: couleur,\r\n          color: 'white',\r\n          padding: '2px 6px',\r\n          borderRadius: '4px',\r\n          fontSize: '10px',\r\n          fontWeight: '600',\r\n          marginTop: '4px',\r\n          display: 'inline-block'\r\n        }}>\r\n          À TRAITER\r\n        </span>\r\n      )\r\n    }\r\n    \r\n    if (message.statut_validation === 'traite') {\r\n      return (\r\n        <span style={{\r\n          backgroundColor: '#059669',\r\n          color: 'white',\r\n          padding: '2px 6px',\r\n          borderRadius: '4px',\r\n          fontSize: '10px',\r\n          fontWeight: '600',\r\n          marginTop: '4px',\r\n          display: 'inline-block'\r\n        }}>\r\n          TRAITÉ\r\n        </span>\r\n      )\r\n    }\r\n\r\n    if (!message.lu) {\r\n      return (\r\n        <span style={{\r\n          backgroundColor: '#dc2626',\r\n          color: 'white',\r\n          padding: '2px 6px',\r\n          borderRadius: '4px',\r\n          fontSize: '10px',\r\n          fontWeight: '600',\r\n          marginTop: '4px',\r\n          display: 'inline-block'\r\n        }}>\r\n          NOUVEAU\r\n        </span>\r\n      )\r\n    }\r\n\r\n    if (message.archive) {\r\n      return (\r\n        <span style={{\r\n          backgroundColor: '#f59e0b',\r\n          color: 'white',\r\n          padding: '2px 6px',\r\n          borderRadius: '4px',\r\n          fontSize: '10px',\r\n          fontWeight: '600',\r\n          marginTop: '4px',\r\n          display: 'inline-block'\r\n        }}>\r\n          ARCHIVÉ\r\n        </span>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  const messagesNonLus = messages.filter(m => !m.lu && !m.archive).length\r\n  const messagesFiltres = getMessagesFiltres()\r\n  const compteurs = getCompteurs()\r\n\r\n  if (loading) {\r\n    return (\r\n      <div style={{\r\n        backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n        borderRadius: '12px',\r\n        padding: '20px',\r\n        boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: '400px'\r\n      }}>\r\n        <div style={{ textAlign: 'center', color: '#666' }}>\r\n          <div style={{ fontSize: '24px', marginBottom: '10px' }}>⏳</div>\r\n          <div>Chargement de la messagerie...</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div style={{\r\n      backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n      borderRadius: '12px',\r\n      padding: '20px',\r\n      boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      height: '100%'\r\n    }}>\r\n      \r\n      {/* Titre Messagerie */}\r\n      <div style={{\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        marginBottom: '20px'\r\n      }}>\r\n        <h2 style={{\r\n          fontSize: '20px',\r\n          fontWeight: 'bold',\r\n          color: '#f59e0b',\r\n          margin: 0\r\n        }}>\r\n          Messagerie ({messages.length} messages, {messagesNonLus} non lus)\r\n        </h2>\r\n        <button\r\n          onClick={() => setShowNewMessage(!showNewMessage)}\r\n          disabled={sending}\r\n          style={{\r\n            padding: '10px 20px',\r\n            background: showNewMessage ? 'linear-gradient(135deg, #6b7280 0%, #4b5563 100%)' : 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '8px',\r\n            fontSize: '14px',\r\n            fontWeight: '600',\r\n            cursor: sending ? 'not-allowed' : 'pointer',\r\n            opacity: sending ? 0.6 : 1\r\n          }}\r\n        >\r\n          {showNewMessage ? 'Annuler' : 'Nouveau Message'}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Formulaire nouveau message */}\r\n      {showNewMessage && (\r\n        <div style={{\r\n          backgroundColor: '#f8f9fa',\r\n          borderRadius: '8px',\r\n          padding: '20px',\r\n          marginBottom: '20px',\r\n          border: '1px solid #e5e7eb'\r\n        }}>\r\n          <h3 style={{ margin: '0 0 15px 0', color: '#374151' }}>Nouveau Message</h3>\r\n          <form onSubmit={envoyerMessage}>\r\n            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px', marginBottom: '15px' }}>\r\n              <div>\r\n                <label style={{ display: 'block', marginBottom: '5px', fontWeight: '500' }}>\r\n                  Destinataire *\r\n                </label>\r\n                <select\r\n                  value={newMessage.destinataire}\r\n                  onChange={(e) => setNewMessage({...newMessage, destinataire: e.target.value})}\r\n                  required\r\n                  disabled={sending}\r\n                  style={{\r\n                    width: '100%',\r\n                    padding: '8px',\r\n                    borderRadius: '6px',\r\n                    border: '1px solid #d1d5db',\r\n                    backgroundColor: sending ? '#f3f4f6' : 'white'\r\n                  }}\r\n                >\r\n                  <option value=\"\">-- Choisir un formateur --</option>\r\n                  {formateurs.map(f => (\r\n                    <option key={f.id} value={f.id}>\r\n                      {f.prenom} {f.nom}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label style={{ display: 'block', marginBottom: '5px', fontWeight: '500' }}>\r\n                  Objet *\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={newMessage.objet}\r\n                  onChange={(e) => setNewMessage({...newMessage, objet: e.target.value})}\r\n                  placeholder=\"Objet du message\"\r\n                  required\r\n                  disabled={sending}\r\n                  style={{\r\n                    width: '100%',\r\n                    padding: '8px',\r\n                    borderRadius: '6px',\r\n                    border: '1px solid #d1d5db',\r\n                    backgroundColor: sending ? '#f3f4f6' : 'white'\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div style={{ marginBottom: '15px' }}>\r\n              <label style={{ display: 'block', marginBottom: '5px', fontWeight: '500' }}>\r\n                Message *\r\n              </label>\r\n              <textarea\r\n                value={newMessage.contenu}\r\n                onChange={(e) => setNewMessage({...newMessage, contenu: e.target.value})}\r\n                placeholder=\"Tapez votre message ici...\"\r\n                required\r\n                rows={4}\r\n                disabled={sending}\r\n                style={{\r\n                  width: '100%',\r\n                  padding: '8px',\r\n                  borderRadius: '6px',\r\n                  border: '1px solid #d1d5db',\r\n                  resize: 'vertical',\r\n                  backgroundColor: sending ? '#f3f4f6' : 'white'\r\n                }}\r\n              />\r\n            </div>\r\n            <div style={{ display: 'flex', gap: '10px' }}>\r\n              <button\r\n                type=\"submit\"\r\n                disabled={sending}\r\n                style={{\r\n                  padding: '10px 20px',\r\n                  background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',\r\n                  color: 'white',\r\n                  border: 'none',\r\n                  borderRadius: '6px',\r\n                  cursor: sending ? 'not-allowed' : 'pointer',\r\n                  fontWeight: '600',\r\n                  opacity: sending ? 0.6 : 1\r\n                }}\r\n              >\r\n                {sending ? 'Envoi...' : 'Envoyer'}\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setNewMessage({ destinataire: '', objet: '', contenu: '' })\r\n                  setShowNewMessage(false)\r\n                }}\r\n                disabled={sending}\r\n                style={{\r\n                  padding: '10px 20px',\r\n                  background: 'linear-gradient(135deg, #6b7280 0%, #4b5563 100%)',\r\n                  color: 'white',\r\n                  border: 'none',\r\n                  borderRadius: '6px',\r\n                  cursor: sending ? 'not-allowed' : 'pointer',\r\n                  fontWeight: '600',\r\n                  opacity: sending ? 0.6 : 1\r\n                }}\r\n              >\r\n                Annuler\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )}\r\n\r\n      {/* ✅ NOUVEAU: Bandeau filtres compact sans titre */}\r\n      <div style={{\r\n        backgroundColor: 'white',\r\n        borderRadius: '8px',\r\n        border: '1px solid #e5e7eb',\r\n        padding: '12px',\r\n        marginBottom: '20px',\r\n        boxShadow: '0 2px 4px rgba(0,0,0,0.05)'\r\n      }}>\r\n        <div style={{\r\n          display: 'flex',\r\n          flexWrap: 'wrap',\r\n          gap: '8px',\r\n          alignItems: 'center'\r\n        }}>\r\n          \r\n          {/* Badges compacts avec compteurs */}\r\n          <div\r\n            onClick={() => setFiltreActif('validation_planning_a_traiter')}\r\n            style={{\r\n              padding: '4px 8px',\r\n              backgroundColor: filtreActif === 'validation_planning_a_traiter' ? '#dc2626' : '#fee2e2',\r\n              color: filtreActif === 'validation_planning_a_traiter' ? 'white' : '#dc2626',\r\n              border: `1px solid ${filtreActif === 'validation_planning_a_traiter' ? '#dc2626' : '#fecaca'}`,\r\n              borderRadius: '4px',\r\n              fontSize: '11px',\r\n              fontWeight: '600',\r\n              cursor: 'pointer',\r\n              transition: 'all 0.2s'\r\n            }}\r\n          >\r\n            Planning à traiter ({compteurs.validation_planning_a_traiter})\r\n          </div>\r\n          \r\n          {/* ✅ NOUVEAU: Badge modifications avec couleur orange */}\r\n          <div\r\n            onClick={() => setFiltreActif('validation_modif_a_traiter')}\r\n            style={{\r\n              padding: '4px 8px',\r\n              backgroundColor: filtreActif === 'validation_modif_a_traiter' ? '#ea580c' : '#fed7aa',\r\n              color: filtreActif === 'validation_modif_a_traiter' ? 'white' : '#ea580c',\r\n              border: `1px solid ${filtreActif === 'validation_modif_a_traiter' ? '#ea580c' : '#fdba74'}`,\r\n              borderRadius: '4px',\r\n              fontSize: '11px',\r\n              fontWeight: '600',\r\n              cursor: 'pointer',\r\n              transition: 'all 0.2s'\r\n            }}\r\n          >\r\n            Modifications à traiter ({compteurs.validation_modif_a_traiter})\r\n          </div>\r\n          \r\n          <div\r\n            onClick={() => setFiltreActif('non_lus')}\r\n            style={{\r\n              padding: '4px 8px',\r\n              backgroundColor: filtreActif === 'non_lus' ? '#3b82f6' : '#dbeafe',\r\n              color: filtreActif === 'non_lus' ? 'white' : '#3b82f6',\r\n              border: `1px solid ${filtreActif === 'non_lus' ? '#3b82f6' : '#93c5fd'}`,\r\n              borderRadius: '4px',\r\n              fontSize: '11px',\r\n              fontWeight: '600',\r\n              cursor: 'pointer',\r\n              transition: 'all 0.2s'\r\n            }}\r\n          >\r\n            Non lus ({compteurs.non_lus})\r\n          </div>\r\n          \r\n          <div\r\n            onClick={() => setFiltreActif('archives')}\r\n            style={{\r\n              padding: '4px 8px',\r\n              backgroundColor: filtreActif === 'archives' ? '#6b7280' : '#f3f4f6',\r\n              color: filtreActif === 'archives' ? 'white' : '#6b7280',\r\n              border: `1px solid ${filtreActif === 'archives' ? '#6b7280' : '#d1d5db'}`,\r\n              borderRadius: '4px',\r\n              fontSize: '11px',\r\n              fontWeight: '600',\r\n              cursor: 'pointer',\r\n              transition: 'all 0.2s'\r\n            }}\r\n          >\r\n            Archives ({compteurs.archives})\r\n          </div>\r\n\r\n          {/* Séparateur */}\r\n          <div style={{\r\n            width: '1px',\r\n            height: '20px',\r\n            backgroundColor: '#d1d5db',\r\n            margin: '0 5px'\r\n          }}></div>\r\n\r\n          {/* Menu déroulant type */}\r\n          <select \r\n            value={filtreActif}\r\n            onChange={(e) => setFiltreActif(e.target.value)}\r\n            style={{\r\n              padding: '6px 10px',\r\n              border: '1px solid #d1d5db',\r\n              borderRadius: '4px',\r\n              fontSize: '11px',\r\n              backgroundColor: 'white',\r\n              fontWeight: '600'\r\n            }}\r\n          >\r\n            <option value=\"non_lus\">Non lus ({compteurs.non_lus})</option>\r\n            <option value=\"lus\">Lus ({compteurs.lus})</option>\r\n            <option value=\"validation_planning_a_traiter\">Validations planning type à traiter ({compteurs.validation_planning_a_traiter})</option>\r\n            <option value=\"validation_planning_traitees\">Validations planning type traitées ({compteurs.validation_planning_traitees})</option>\r\n            <option value=\"validation_modif_a_traiter\">Validations modification à traiter ({compteurs.validation_modif_a_traiter})</option>\r\n            <option value=\"validation_modif_traitees\">Validations modification traitées ({compteurs.validation_modif_traitees})</option>\r\n            <option value=\"archives\">Archivés ({compteurs.archives})</option>\r\n            <option value=\"tous\">Tous les messages ({compteurs.tous})</option>\r\n          </select>\r\n\r\n          {/* Filtre par formateur */}\r\n          <select \r\n            value={formateurFiltre}\r\n            onChange={(e) => setFormateurFiltre(e.target.value)}\r\n            style={{\r\n              padding: '6px 10px',\r\n              border: '1px solid #d1d5db',\r\n              borderRadius: '4px',\r\n              fontSize: '11px',\r\n              backgroundColor: 'white',\r\n              fontWeight: '600'\r\n            }}\r\n          >\r\n            <option value=\"tous\">Tous les formateurs</option>\r\n            {formateurs.map(f => (\r\n              <option key={f.id} value={f.id}>\r\n                {f.prenom} {f.nom}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Deux cadres en dessous */}\r\n      <div style={{\r\n        display: 'flex',\r\n        gap: '20px',\r\n        flex: 1,\r\n        minHeight: '0'\r\n      }}>\r\n        \r\n        {/* Cadre Types de message */}\r\n        <div style={{\r\n          flex: 1,\r\n          backgroundColor: 'white',\r\n          borderRadius: '8px',\r\n          border: '1px solid #e5e7eb',\r\n          padding: '15px',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          height: '500px',\r\n          minHeight: '500px'\r\n        }}>\r\n          <h3 style={{\r\n            margin: '0 0 15px 0',\r\n            fontSize: '16px',\r\n            fontWeight: 'bold',\r\n            color: '#374151',\r\n            paddingBottom: '10px',\r\n            borderBottom: '2px solid #f59e0b',\r\n            flexShrink: 0\r\n          }}>\r\n            Messages récents ({messagesFiltres.length})\r\n          </h3>\r\n          \r\n          <div style={{\r\n            flex: 1,\r\n            overflow: 'auto',\r\n            minHeight: '0',\r\n            paddingRight: '5px',\r\n            marginRight: '-5px'\r\n          }}>\r\n            {messagesFiltres.length === 0 ? (\r\n              <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                height: '100%',\r\n                color: '#6b7280',\r\n                fontSize: '14px'\r\n              }}>\r\n                Aucun message dans cette catégorie\r\n              </div>\r\n            ) : (\r\n              messagesFiltres.slice(0, 50).map(message => (\r\n                <div\r\n                  key={message.id}\r\n                  onClick={() => ouvrirMessage(message)}\r\n                  style={{\r\n                    padding: '10px',\r\n                    backgroundColor: selectedMessage?.id === message.id ? '#eff6ff' : \r\n                                   message.archive ? '#fef3c7' :\r\n                                   message.statut_validation === 'a_traiter' ? (\r\n                                     message.objet === 'Validation de modification ponctuelle' ? '#fed7aa' : '#fee2e2'\r\n                                   ) :\r\n                                   !message.lu ? '#fee2e2' : '#f9fafb',\r\n                    borderRadius: '6px',\r\n                    marginBottom: '8px',\r\n                    cursor: 'pointer',\r\n                    border: `1px solid ${selectedMessage?.id === message.id ? '#3b82f6' : \r\n                                        message.archive ? '#f59e0b' :\r\n                                        message.statut_validation === 'a_traiter' ? (\r\n                                          message.objet === 'Validation de modification ponctuelle' ? '#ea580c' : '#dc2626'\r\n                                        ) :\r\n                                        !message.lu ? '#ef4444' : '#e5e7eb'}`,\r\n                    transition: 'all 0.2s',\r\n                    flexShrink: 0\r\n                  }}\r\n                >\r\n                  <div style={{ fontWeight: '600', fontSize: '13px', marginBottom: '4px' }}>\r\n                    {getTypeMessage(message)} - {message.expediteur_id ? getNomFormateur(message.expediteur_id) : message.destinataire}\r\n                  </div>\r\n                  <div style={{ fontSize: '12px', color: '#6b7280', marginBottom: '4px' }}>\r\n                    {message.objet || 'Sans objet'}\r\n                  </div>\r\n                  <div style={{ fontSize: '11px', color: '#9ca3af' }}>\r\n                    {message.date} {message.heure}\r\n                  </div>\r\n                  {getBadgeStatut(message)}\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Cadre Messages */}\r\n        <div style={{\r\n          flex: 2,\r\n          backgroundColor: 'white',\r\n          borderRadius: '8px',\r\n          border: '1px solid #e5e7eb',\r\n          padding: '15px',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          height: '500px',\r\n          minHeight: '500px'\r\n        }}>\r\n          <h3 style={{\r\n            margin: '0 0 15px 0',\r\n            fontSize: '16px',\r\n            fontWeight: 'bold',\r\n            color: '#374151',\r\n            paddingBottom: '10px',\r\n            borderBottom: '2px solid #f59e0b',\r\n            flexShrink: 0\r\n          }}>\r\n            Lecture du message\r\n          </h3>\r\n          \r\n          {selectedMessage ? (\r\n            <div style={{ \r\n              flex: 1, \r\n              overflow: 'auto',\r\n              minHeight: '0',\r\n              paddingRight: '5px',\r\n              marginRight: '-5px'\r\n            }}>\r\n              <div style={{ \r\n                borderBottom: '1px solid #e5e7eb',\r\n                paddingBottom: '15px',\r\n                marginBottom: '15px'\r\n              }}>\r\n                <div style={{ fontSize: '16px', fontWeight: '600', marginBottom: '8px' }}>\r\n                  {selectedMessage.objet || 'Sans objet'}\r\n                </div>\r\n                <div style={{ fontSize: '14px', color: '#6b7280', marginBottom: '4px' }}>\r\n                  {selectedMessage.expediteur_id ? \r\n                    `De: ${getNomFormateur(selectedMessage.expediteur_id)}` : \r\n                    `À: ${selectedMessage.destinataire}`\r\n                  }\r\n                </div>\r\n                <div style={{ fontSize: '12px', color: '#9ca3af', marginBottom: '8px' }}>\r\n                  {selectedMessage.date} à {selectedMessage.heure}\r\n                </div>\r\n                \r\n                {/* Actions selon l'état avec bouton Valider */}\r\n                <div style={{ display: 'flex', gap: '8px', marginTop: '10px', flexWrap: 'wrap' }}>\r\n                  \r\n                  {/* Bouton Valider pour demandes planning type */}\r\n                  {estDemandeValidationPlanningType(selectedMessage) && (\r\n                    <button\r\n                      onClick={() => validerPlanningType(selectedMessage)}\r\n                      disabled={validating}\r\n                      style={{\r\n                        padding: '8px 16px',\r\n                        background: validating ? '#9ca3af' : 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '6px',\r\n                        fontSize: '14px',\r\n                        cursor: validating ? 'not-allowed' : 'pointer',\r\n                        fontWeight: '600',\r\n                        boxShadow: '0 4px 12px rgba(16, 185, 129, 0.3)'\r\n                      }}\r\n                    >\r\n                      {validating ? 'Validation...' : '✅ Valider Planning'}\r\n                    </button>\r\n                  )}\r\n\r\n                  {/* ✅ NOUVEAU: Bouton Valider pour demandes modifications ponctuelles */}\r\n                  {estDemandeValidationModifications(selectedMessage) && (\r\n                    <button\r\n                      onClick={() => validerModificationsPonctuelles(selectedMessage)}\r\n                      disabled={validating}\r\n                      style={{\r\n                        padding: '8px 16px',\r\n                        background: validating ? '#9ca3af' : 'linear-gradient(135deg, #ea580c 0%, #c2410c 100%)',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '6px',\r\n                        fontSize: '14px',\r\n                        cursor: validating ? 'not-allowed' : 'pointer',\r\n                        fontWeight: '600',\r\n                        boxShadow: '0 4px 12px rgba(234, 88, 12, 0.3)'\r\n                      }}\r\n                    >\r\n                      {validating ? 'Validation...' : '🔄 Valider Modifications'}\r\n                    </button>\r\n                  )}\r\n\r\n                  {/* Actions classiques */}\r\n                  {!selectedMessage.archive && selectedMessage.statut_validation !== 'traite' ? (\r\n                    <button\r\n                      onClick={() => archiverMessage(selectedMessage.id)}\r\n                      style={{\r\n                        padding: '6px 12px',\r\n                        background: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '6px',\r\n                        fontSize: '12px',\r\n                        cursor: 'pointer',\r\n                        fontWeight: '600'\r\n                      }}\r\n                    >\r\n                      Archiver\r\n                    </button>\r\n                  ) : selectedMessage.archive && (\r\n                    <button\r\n                      onClick={() => supprimerMessage(selectedMessage.id)}\r\n                      style={{\r\n                        padding: '6px 12px',\r\n                        background: 'linear-gradient(135deg, #dc2626 0%, #991b1b 100%)',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '6px',\r\n                        fontSize: '12px',\r\n                        cursor: 'pointer',\r\n                        fontWeight: '600'\r\n                      }}\r\n                    >\r\n                      Supprimer définitivement\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              \r\n              <div style={{ \r\n                backgroundColor: '#f9fafb',\r\n                padding: '15px',\r\n                borderRadius: '6px',\r\n                marginBottom: '15px',\r\n                lineHeight: '1.5'\r\n              }}>\r\n                {selectedMessage.contenu}\r\n              </div>\r\n\r\n              {/* Info statut traité */}\r\n              {selectedMessage.statut_validation === 'traite' && (\r\n                <div style={{\r\n                  padding: '10px',\r\n                  backgroundColor: '#d1fae5',\r\n                  border: '1px solid #10b981',\r\n                  borderRadius: '6px',\r\n                  fontSize: '12px',\r\n                  color: '#065f46',\r\n                  marginBottom: '10px'\r\n                }}>\r\n                  ✅ <strong>Demande traitée</strong> - {selectedMessage.objet === 'Validation de modification ponctuelle' ? 'Les modifications ont été validées' : 'Le planning a été validé'} et archivé automatiquement\r\n                </div>\r\n              )}\r\n\r\n              {selectedMessage.archive && (\r\n                <div style={{\r\n                  padding: '10px',\r\n                  backgroundColor: '#fef3c7',\r\n                  border: '1px solid #fbbf24',\r\n                  borderRadius: '6px',\r\n                  fontSize: '12px',\r\n                  color: '#92400e'\r\n                }}>\r\n                  ⚠️ <strong>Message archivé</strong> le {selectedMessage.date_archivage}\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div style={{\r\n              flex: 1,\r\n              backgroundColor: '#f9fafb',\r\n              borderRadius: '6px',\r\n              padding: '20px',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              color: '#6b7280',\r\n              fontSize: '14px'\r\n            }}>\r\n              Sélectionnez un message pour l'afficher ici\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MessagerieDashboard",
          "taille": 37517,
          "lignes": 1057,
          "dateModif": "2025-08-22T12:54:04.708Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "components/MessagerieSafeWrapper.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { supabase } from '../lib/supabaseClient'\r\n\r\n// Composant de fallback en cas d'erreur\r\nconst MessagerieFallback = ({ error }) => {\r\n  return (\r\n    <div style={{\r\n      backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n      borderRadius: '12px',\r\n      padding: '20px',\r\n      boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      height: '100%',\r\n      justifyContent: 'center',\r\n      alignItems: 'center'\r\n    }}>\r\n      <div style={{\r\n        textAlign: 'center',\r\n        color: '#f59e0b'\r\n      }}>\r\n        <div style={{ fontSize: '48px', marginBottom: '15px' }}>📧</div>\r\n        <h2 style={{\r\n          fontSize: '18px',\r\n          fontWeight: 'bold',\r\n          color: '#f59e0b',\r\n          marginBottom: '10px'\r\n        }}>\r\n          Messagerie en Maintenance\r\n        </h2>\r\n        <p style={{ \r\n          color: '#6b7280', \r\n          fontSize: '14px',\r\n          marginBottom: '15px'\r\n        }}>\r\n          Le système de communication est temporairement indisponible.\r\n        </p>\r\n        \r\n        {/* Actions de base disponibles */}\r\n        <div style={{\r\n          backgroundColor: '#fef3c7',\r\n          border: '1px solid #f59e0b',\r\n          borderRadius: '8px',\r\n          padding: '15px',\r\n          margin: '15px 0',\r\n          fontSize: '12px',\r\n          color: '#92400e'\r\n        }}>\r\n          <strong>🔧 Statut:</strong> Système en cours de diagnostic<br/>\r\n          {error && (\r\n            <>\r\n              <strong>📋 Détail technique:</strong> {error.message}\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n        <div style={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          gap: '8px',\r\n          maxWidth: '200px'\r\n        }}>\r\n          <button\r\n            onClick={() => window.location.reload()}\r\n            style={{\r\n              padding: '8px 16px',\r\n              backgroundColor: '#3b82f6',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '6px',\r\n              fontSize: '12px',\r\n              cursor: 'pointer',\r\n              fontWeight: '600'\r\n            }}\r\n          >\r\n            🔄 Réessayer\r\n          </button>\r\n          \r\n          <button\r\n            onClick={() => console.log('Messagerie fallback - Mode dégradé actif')}\r\n            style={{\r\n              padding: '8px 16px',\r\n              backgroundColor: '#6b7280',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '6px',\r\n              fontSize: '12px',\r\n              cursor: 'pointer',\r\n              fontWeight: '600'\r\n            }}\r\n          >\r\n            📋 Mode Dégradé\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Wrapper de test sécurisé\r\nfunction MessagerieSafeWrapper({ user, logout, inactivityTime, router }) {\r\n  const [hasError, setHasError] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [canLoadMessagerie, setCanLoadMessagerie] = useState(false)\r\n\r\n  // Test de connectivité Supabase\r\n  const testSupabaseConnection = async () => {\r\n    try {\r\n      console.log('🔍 Test connexion Supabase...')\r\n      \r\n      // Test simple de connexion\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .select('id')\r\n        .limit(1)\r\n\r\n      if (error) {\r\n        throw new Error(`Connexion Supabase échouée: ${error.message}`)\r\n      }\r\n\r\n      console.log('✅ Connexion Supabase OK')\r\n      return true\r\n\r\n    } catch (err) {\r\n      console.error('❌ Test Supabase échoué:', err)\r\n      setError(err)\r\n      return false\r\n    }\r\n  }\r\n\r\n  // Test de chargement des données messagerie\r\n  const testMessagerieData = async () => {\r\n    try {\r\n      console.log('🔍 Test données messagerie...')\r\n\r\n      // Test chargement formateurs\r\n      const { data: formateurs, error: formateurError } = await supabase\r\n        .from('users')\r\n        .select('id, prenom, nom')\r\n        .eq('role', 'formateur')\r\n        .eq('archive', false)\r\n        .limit(5)\r\n\r\n      if (formateurError) {\r\n        throw new Error(`Erreur formateurs: ${formateurError.message}`)\r\n      }\r\n\r\n      // Test chargement messages\r\n      const { data: messages, error: messageError } = await supabase\r\n        .from('messages')\r\n        .select('*')\r\n        .limit(5)\r\n\r\n      if (messageError) {\r\n        throw new Error(`Erreur messages: ${messageError.message}`)\r\n      }\r\n\r\n      console.log('✅ Données messagerie OK:', {\r\n        formateurs: formateurs?.length || 0,\r\n        messages: messages?.length || 0\r\n      })\r\n\r\n      return true\r\n\r\n    } catch (err) {\r\n      console.error('❌ Test données messagerie échoué:', err)\r\n      setError(err)\r\n      return false\r\n    }\r\n  }\r\n\r\n  // Test complet au chargement\r\n  useEffect(() => {\r\n    const runTests = async () => {\r\n      try {\r\n        setIsLoading(true)\r\n        setHasError(false)\r\n        setError(null)\r\n\r\n        console.log('🧪 Début tests MessagerieDashboard...')\r\n\r\n        // Test 1: Connexion Supabase\r\n        const supabaseOK = await testSupabaseConnection()\r\n        if (!supabaseOK) {\r\n          setHasError(true)\r\n          return\r\n        }\r\n\r\n        // Test 2: Données messagerie\r\n        const dataOK = await testMessagerieData()\r\n        if (!dataOK) {\r\n          setHasError(true)\r\n          return\r\n        }\r\n\r\n        // Tous les tests passés\r\n        console.log('🎉 Tous les tests passés ! MessagerieDashboard peut être chargé')\r\n        setCanLoadMessagerie(true)\r\n\r\n      } catch (err) {\r\n        console.error('❌ Erreur générale tests:', err)\r\n        setError(err)\r\n        setHasError(true)\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    runTests()\r\n  }, [])\r\n\r\n  // Chargement en cours\r\n  if (isLoading) {\r\n    return (\r\n      <div style={{\r\n        backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n        borderRadius: '12px',\r\n        padding: '20px',\r\n        boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: '400px'\r\n      }}>\r\n        <div style={{ textAlign: 'center', color: '#666' }}>\r\n          <div style={{ fontSize: '24px', marginBottom: '10px' }}>🧪</div>\r\n          <div>Test du système de communication...</div>\r\n          <div style={{ fontSize: '12px', color: '#9ca3af', marginTop: '5px' }}>\r\n            Vérification Supabase et données messagerie\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Erreur détectée\r\n  if (hasError || !canLoadMessagerie) {\r\n    return <MessagerieFallback error={error} />\r\n  }\r\n\r\n  // Tests passés - Charger MessagerieDashboard\r\n  try {\r\n    // Import dynamique sécurisé\r\n    const MessagerieDashboard = require('../components/MessagerieDashboard').default\r\n    \r\n    console.log('✅ Chargement MessagerieDashboard autorisé')\r\n    return <MessagerieDashboard \r\n      user={user}\r\n      logout={logout}\r\n      inactivityTime={inactivityTime}\r\n      router={router}\r\n    />\r\n\r\n  } catch (err) {\r\n    console.error('❌ Erreur chargement MessagerieDashboard:', err)\r\n    return <MessagerieFallback error={err} />\r\n  }\r\n}\r\n\r\nexport default MessagerieSafeWrapper",
          "taille": 7365,
          "lignes": 261,
          "dateModif": "2025-08-28T19:00:40.062Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { supabase } from '../lib/supabaseClient'\r\n\r\n// Composant de fallback en cas d'erreur\r\nconst MessagerieFallback = ({ error }) => {\r\n  return (\r\n    <div style={{\r\n      backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n      borderRadius: '12px',\r\n      padding: '20px',\r\n      boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      height: '100%',\r\n      justifyContent: 'center',\r\n      alignItems: 'center'\r\n    }}>\r\n      <div style={{\r\n        textAlign: 'center',\r\n        color: '#f59e0b'\r\n      }}>\r\n        <div style={{ fontSize: '48px', marginBottom: '15px' }}>📧</div>\r\n        <h2 style={{\r\n          fontSize: '18px',\r\n          fontWeight: 'bold',\r\n          color: '#f59e0b',\r\n          marginBottom: '10px'\r\n        }}>\r\n          Messagerie en Maintenance\r\n        </h2>\r\n        <p style={{ \r\n          color: '#6b7280', \r\n          fontSize: '14px',\r\n          marginBottom: '15px'\r\n        }}>\r\n          Le système de communication est temporairement indisponible.\r\n        </p>\r\n        \r\n        {/* Actions de base disponibles */}\r\n        <div style={{\r\n          backgroundColor: '#fef3c7',\r\n          border: '1px solid #f59e0b',\r\n          borderRadius: '8px',\r\n          padding: '15px',\r\n          margin: '15px 0',\r\n          fontSize: '12px',\r\n          color: '#92400e'\r\n        }}>\r\n          <strong>🔧 Statut:</strong> Système en cours de diagnostic<br/>\r\n          {error && (\r\n            <>\r\n              <strong>📋 Détail technique:</strong> {error.message}\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n        <div style={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          gap: '8px',\r\n          maxWidth: '200px'\r\n        }}>\r\n          <button\r\n            onClick={() => window.location.reload()}\r\n            style={{\r\n              padding: '8px 16px',\r\n              backgroundColor: '#3b82f6',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '6px',\r\n              fontSize: '12px',\r\n              cursor: 'pointer',\r\n              fontWeight: '600'\r\n            }}\r\n          >\r\n            🔄 Réessayer\r\n          </button>\r\n          \r\n          <button\r\n            onClick={() => console.log('Messagerie fallback - Mode dégradé actif')}\r\n            style={{\r\n              padding: '8px 16px',\r\n              backgroundColor: '#6b7280',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '6px',\r\n              fontSize: '12px',\r\n              cursor: 'pointer',\r\n              fontWeight: '600'\r\n            }}\r\n          >\r\n            📋 Mode Dégradé\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Wrapper de test sécurisé\r\nfunction MessagerieSafeWrapper({ user, logout, inactivityTime, router }) {\r\n  const [hasError, setHasError] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [canLoadMessagerie, setCanLoadMessagerie] = useState(false)\r\n\r\n  // Test de connectivité Supabase\r\n  const testSupabaseConnection = async () => {\r\n    try {\r\n      console.log('🔍 Test connexion Supabase...')\r\n      \r\n      // Test simple de connexion\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .select('id')\r\n        .limit(1)\r\n\r\n      if (error) {\r\n        throw new Error(`Connexion Supabase échouée: ${error.message}`)\r\n      }\r\n\r\n      console.log('✅ Connexion Supabase OK')\r\n      return true\r\n\r\n    } catch (err) {\r\n      console.error('❌ Test Supabase échoué:', err)\r\n      setError(err)\r\n      return false\r\n    }\r\n  }\r\n\r\n  // Test de chargement des données messagerie\r\n  const testMessagerieData = async () => {\r\n    try {\r\n      console.log('🔍 Test données messagerie...')\r\n\r\n      // Test chargement formateurs\r\n      const { data: formateurs, error: formateurError } = await supabase\r\n        .from('users')\r\n        .select('id, prenom, nom')\r\n        .eq('role', 'formateur')\r\n        .eq('archive', false)\r\n        .limit(5)\r\n\r\n      if (formateurError) {\r\n        throw new Error(`Erreur formateurs: ${formateurError.message}`)\r\n      }\r\n\r\n      // Test chargement messages\r\n      const { data: messages, error: messageError } = await supabase\r\n        .from('messages')\r\n        .select('*')\r\n        .limit(5)\r\n\r\n      if (messageError) {\r\n        throw new Error(`Erreur messages: ${messageError.message}`)\r\n      }\r\n\r\n      console.log('✅ Données messagerie OK:', {\r\n        formateurs: formateurs?.length || 0,\r\n        messages: messages?.length || 0\r\n      })\r\n\r\n      return true\r\n\r\n    } catch (err) {\r\n      console.error('❌ Test données messagerie échoué:', err)\r\n      setError(err)\r\n      return false\r\n    }\r\n  }\r\n\r\n  // Test complet au chargement\r\n  useEffect(() => {\r\n    const runTests = async () => {\r\n      try {\r\n        setIsLoading(true)\r\n        setHasError(false)\r\n        setError(null)\r\n\r\n        console.log('🧪 Début tests MessagerieDashboard...')\r\n\r\n        // Test 1: Connexion Supabase\r\n        const supabaseOK = await testSupabaseConnection()\r\n        if (!supabaseOK) {\r\n          setHasError(true)\r\n          return\r\n        }\r\n\r\n        // Test 2: Données messagerie\r\n        const dataOK = await testMessagerieData()\r\n        if (!dataOK) {\r\n          setHasError(true)\r\n          return\r\n        }\r\n\r\n        // Tous les tests passés\r\n        console.log('🎉 Tous les tests passés ! MessagerieDashboard peut être chargé')\r\n        setCanLoadMessagerie(true)\r\n\r\n      } catch (err) {\r\n        console.error('❌ Erreur générale tests:', err)\r\n        setError(err)\r\n        setHasError(true)\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    runTests()\r\n  }, [])\r\n\r\n  // Chargement en cours\r\n  if (isLoading) {\r\n    return (\r\n      <div style={{\r\n        backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n        borderRadius: '12px',\r\n        padding: '20px',\r\n        boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: '400px'\r\n      }}>\r\n        <div style={{ textAlign: 'center', color: '#666' }}>\r\n          <div style={{ fontSize: '24px', marginBottom: '10px' }}>🧪</div>\r\n          <div>Test du système de communication...</div>\r\n          <div style={{ fontSize: '12px', color: '#9ca3af', marginTop: '5px' }}>\r\n            Vérification Supabase et données messagerie\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Erreur détectée\r\n  if (hasError || !canLoadMessagerie) {\r\n    return <MessagerieFallback error={error} />\r\n  }\r\n\r\n  // Tests passés - Charger MessagerieDashboard\r\n  try {\r\n    // Import dynamique sécurisé\r\n    const MessagerieDashboard = require('../components/MessagerieDashboard').default\r\n    \r\n    console.log('✅ Chargement MessagerieDashboard autorisé')\r\n    return <MessagerieDashboard \r\n      user={user}\r\n      logout={logout}\r\n      inactivityTime={inactivityTime}\r\n      router={router}\r\n    />\r\n\r\n  } catch (err) {\r\n    console.error('❌ Erreur chargement MessagerieDashboard:', err)\r\n    return <MessagerieFallback error={err} />\r\n  }\r\n}\r\n\r\nexport default MessagerieSafeWrapper",
          "taille": 7365,
          "lignes": 261,
          "dateModif": "2025-08-22T12:51:07.499Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "components/assistance/Absence.jsx",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { supabase } from '../../lib/supabaseClient'\r\n\r\nexport default function Absence({ \r\n    formateurId,\r\n    formateurData,\r\n    onSuccess,\r\n    onError \r\n}) {\r\n    const [currentDate, setCurrentDate] = useState(new Date())\r\n    const [modeSelection, setModeSelection] = useState('absent')\r\n    const [planningModifie, setPlanningModifie] = useState({})\r\n    const [planningOriginal, setPlanningOriginal] = useState({})\r\n    const [historiqueModi, setHistoriqueModi] = useState([])\r\n    const [lieux, setLieux] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [envoiEnCours, setEnvoiEnCours] = useState(false)\r\n    const [showMessageModal, setShowMessageModal] = useState(false)\r\n    const [messageFacultatif, setMessageFacultatif] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (formateurId) {\r\n            loadPlanningData()\r\n        }\r\n    }, [currentDate, formateurId])\r\n\r\n    const loadPlanningData = async () => {\r\n        if (!formateurId) return\r\n        \r\n        try {\r\n            setIsLoading(true)\r\n            \r\n            // Charger les lieux pour affichage\r\n            const { data: lieuxData, error: lieuxError } = await supabase\r\n                .from('lieux')\r\n                .select('id, nom, couleur, initiale')\r\n                .eq('archive', false)\r\n\r\n            if (lieuxError) throw lieuxError\r\n            setLieux(lieuxData || [])\r\n\r\n            const annee = currentDate.getFullYear()\r\n            const mois = currentDate.getMonth()\r\n            \r\n            // Construire le planning original basé sur le planning type VALIDÉ\r\n            const planning = {}\r\n            \r\n            // Ajouter seulement les jours ouvrés (Lun-Ven) comme \"libre\" par défaut\r\n            for (let jour = 1; jour <= new Date(annee, mois + 1, 0).getDate(); jour++) {\r\n                const date = new Date(annee, mois, jour)\r\n                const jourSemaine = date.getDay()\r\n                \r\n                // Seulement les jours de travail (lundi à vendredi)\r\n                if (jourSemaine >= 1 && jourSemaine <= 5) {\r\n                    const anneeStr = date.getFullYear()\r\n                    const moisStr = String(date.getMonth() + 1).padStart(2, '0')\r\n                    const jourStr = String(date.getDate()).padStart(2, '0')\r\n                    const dateStr = `${anneeStr}-${moisStr}-${jourStr}`\r\n                    planning[dateStr] = 'libre'\r\n                }\r\n            }\r\n\r\n            // Récupérer le planning type VALIDÉ du formateur\r\n            const { data: planningTypeData, error: planningTypeError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .select('jour, creneau, statut, lieu_id, valide')\r\n                .eq('formateur_id', formateurId)\r\n                .eq('valide', true)\r\n\r\n            // Appliquer le planning type VALIDÉ (BASE VERTE)\r\n            if (planningTypeData && !planningTypeError) {\r\n                // Créer un mapping des jours\r\n                const joursMapping = {\r\n                    0: 'Dimanche', 1: 'Lundi', 2: 'Mardi', 3: 'Mercredi', \r\n                    4: 'Jeudi', 5: 'Vendredi', 6: 'Samedi'\r\n                }\r\n\r\n                // Pour chaque jour du mois\r\n                for (let jour = 1; jour <= new Date(annee, mois + 1, 0).getDate(); jour++) {\r\n                    const date = new Date(annee, mois, jour)\r\n                    const jourSemaine = date.getDay()\r\n                    const nomJour = joursMapping[jourSemaine]\r\n                    \r\n                    // Si c'est un jour ouvré\r\n                    if (jourSemaine >= 1 && jourSemaine <= 5) {\r\n                        const anneeStr = date.getFullYear()\r\n                        const moisStr = String(date.getMonth() + 1).padStart(2, '0')\r\n                        const jourStr = String(date.getDate()).padStart(2, '0')\r\n                        const dateStr = `${anneeStr}-${moisStr}-${jourStr}`\r\n                        \r\n                        // Vérifier si le formateur a une disponibilité validée ce jour-là    \r\n                        const disponibiliteJour = planningTypeData.find(pt => \r\n                            pt.jour === nomJour && pt.statut === 'disponible'\r\n                        )\r\n                        \r\n                        const disponibiliteExcept = planningTypeData.find(pt => \r\n                            pt.jour === nomJour && pt.statut === 'dispo_except'\r\n                        )\r\n                        \r\n                        if (disponibiliteJour) {\r\n                            planning[dateStr] = 'planning_type' // JOUR VALIDÉ = VERT\r\n                        } else if (disponibiliteExcept) {\r\n                            planning[dateStr] = 'dispo_except' // DISPO EXCEPTIONNELLE = ORANGE\r\n                        }\r\n                    }\r\n                }\r\n                console.log(`✅ Planning type validé appliqué: ${planningTypeData.length} créneaux`)\r\n            }\r\n\r\n            // Charger ET afficher TOUTES les absences\r\n            const { data: absencesData, error: absencesError } = await supabase\r\n                .from('absences_formateurs')\r\n                .select('date_debut, date_fin, type, statut, id')\r\n                .eq('formateur_id', formateurId)\r\n\r\n            // Appliquer TOUTES les absences (en_attente + validées)\r\n            if (absencesData && !absencesError) {\r\n                console.log(`🔧 CHARGEMENT: ${absencesData.length} absences trouvées:`, absencesData)\r\n                \r\n                absencesData.forEach(absence => {\r\n                    const debut = new Date(absence.date_debut)\r\n                    const fin = new Date(absence.date_fin)\r\n                    \r\n                    console.log(`🔧 Traitement absence: ${absence.date_debut} - ${absence.date_fin}, type: ${absence.type}, statut: ${absence.statut}`)\r\n                    \r\n                    for (let d = new Date(debut); d <= fin; d.setDate(d.getDate() + 1)) {\r\n                        const anneeStr = d.getFullYear()\r\n                        const moisStr = String(d.getMonth() + 1).padStart(2, '0')\r\n                        const jourStr = String(d.getDate()).padStart(2, '0')\r\n                        const dateStr = `${anneeStr}-${moisStr}-${jourStr}`\r\n                        \r\n                        if (planning.hasOwnProperty(dateStr)) {\r\n                            // Afficher TOUTES les absences (en_attente ET validées)\r\n                            if (absence.type === 'personnel' || absence.type === 'absence') {\r\n                                planning[dateStr] = 'absent'\r\n                                console.log(`🔴 ${dateStr} marqué ABSENT (${absence.type}, ${absence.statut})`)\r\n                            } else if (absence.type === 'formation' || absence.type === 'dispo_except') {\r\n                                planning[dateStr] = 'dispo'\r\n                                console.log(`🟡 ${dateStr} marqué DISPO EXCEPT (${absence.type}, ${absence.statut})`)\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n                console.log(`✅ Modifications affichées: ${absencesData.length} (en_attente + validées)`)\r\n            }\r\n\r\n            setPlanningOriginal(planning)\r\n            setPlanningModifie({...planning})\r\n\r\n        } catch (error) {\r\n            console.error('⚠️ Erreur:', error.message)\r\n            onError?.(`⚠️ Erreur: ${error.message}`)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Navigation mensuelle\r\n    const changerMois = (direction) => {\r\n        const nouvelleDate = new Date(currentDate)\r\n        nouvelleDate.setMonth(currentDate.getMonth() + direction)\r\n        setCurrentDate(nouvelleDate)\r\n    }\r\n\r\n    // Fonction pour obtenir les détails d'un statut\r\n    const getStatutDetails = (statut) => {\r\n        switch (statut) {\r\n            case 'absent':\r\n                return { \r\n                    backgroundColor: '#ef4444', \r\n                    color: 'white', \r\n                    label: 'ABS',\r\n                    nom: 'Absent'\r\n                }\r\n            case 'dispo':\r\n                return { \r\n                    backgroundColor: '#f59e0b', \r\n                    color: 'white', \r\n                    label: 'DISPO',\r\n                    nom: 'Dispo exceptionnelle'\r\n                }\r\n            case 'planning_type':\r\n                return { \r\n                    backgroundColor: '#22c55e', \r\n                    color: 'white', \r\n                    label: 'DISPO',\r\n                    nom: 'Planning habituel'\r\n                }\r\n            case 'dispo_except':\r\n                return { \r\n                    backgroundColor: '#f59e0b', \r\n                    color: 'white', \r\n                    label: 'EXCEPT',\r\n                    nom: 'Dispo exceptionnelle'\r\n                }\r\n            case 'libre':\r\n            default:\r\n                return { \r\n                    backgroundColor: '#d1d5db', \r\n                    color: '#374151', \r\n                    label: '',\r\n                    nom: 'Libre'\r\n                }\r\n        }\r\n    }\r\n\r\n    // Fonction pour gérer le clic sur une case\r\n    const gererClicCase = (date) => {\r\n        const annee = date.getFullYear()\r\n        const mois = String(date.getMonth() + 1).padStart(2, '0')\r\n        const jourStr = String(date.getDate()).padStart(2, '0')\r\n        const dateStr = `${annee}-${mois}-${jourStr}`\r\n        \r\n        // Ajouter à l'historique avant de modifier\r\n        setHistoriqueModi(prev => [...prev, { date: dateStr, action: 'modifier', mode: modeSelection }])\r\n\r\n        setPlanningModifie(prev => ({\r\n            ...prev,\r\n            [dateStr]: modeSelection\r\n        }))\r\n\r\n        const details = getStatutDetails(modeSelection)\r\n        console.log(`📅 ${date.getDate()} ${currentDate.toLocaleDateString('fr-FR', {month: 'long'})} → ${details.nom}`)\r\n    }\r\n\r\n    // Fonction ANNULER : annuler la dernière action\r\n    const annulerDerniereAction = () => {\r\n        if (historiqueModi.length === 0) {\r\n            return\r\n        }\r\n\r\n        const derniereAction = historiqueModi[historiqueModi.length - 1]\r\n        \r\n        // Supprimer la dernière action de l'historique\r\n        setHistoriqueModi(prev => prev.slice(0, -1))\r\n        \r\n        if (derniereAction.action === 'modifier') {\r\n            // Annuler une modification = remettre l'état original\r\n            setPlanningModifie(prev => ({\r\n                ...prev,\r\n                [derniereAction.date]: planningOriginal[derniereAction.date]\r\n            }))\r\n        } else if (derniereAction.action === 'annuler_case') {\r\n            // Annuler une annulation = remettre la case\r\n            setPlanningModifie(prev => ({\r\n                ...prev,\r\n                [derniereAction.date]: derniereAction.mode || 'planning_type'\r\n            }))\r\n        }\r\n    }\r\n\r\n    // Fonction ANNULER UNE CASE : supprimer une case spécifique (mode annuler)\r\n    const annulerModificationCase = (date) => {\r\n        const annee = date.getFullYear()\r\n        const mois = String(date.getMonth() + 1).padStart(2, '0')\r\n        const jourStr = String(date.getDate()).padStart(2, '0')\r\n        const dateStr = `${annee}-${mois}-${jourStr}`\r\n        \r\n        // Ajouter à l'historique avant d'annuler\r\n        setHistoriqueModi(prev => [...prev, { \r\n            date: dateStr, \r\n            action: 'annuler_case',\r\n            mode: planningModifie[dateStr]\r\n        }])\r\n        \r\n        // Remettre à l'état original\r\n        setPlanningModifie(prev => ({\r\n            ...prev,\r\n            [dateStr]: planningOriginal[dateStr]\r\n        }))\r\n    }\r\n\r\n    // Fonction EFFACER TOUT : effacer toutes les modifications\r\n    const effacerTout = () => {\r\n        setPlanningModifie({...planningOriginal}) // Remettre à l'état original\r\n        setHistoriqueModi([]) // Vider aussi l'historique\r\n    }\r\n\r\n    // Fonction pour générer la liste des modifications pour le message\r\n    const genererListeModifications = () => {\r\n        const modificationsDetectees = []\r\n        \r\n        Object.keys(planningModifie).forEach(dateStr => {\r\n            const statutOriginal = planningOriginal[dateStr]\r\n            const statutModifie = planningModifie[dateStr]\r\n            \r\n            if (statutOriginal !== statutModifie) {\r\n                const date = new Date(dateStr)\r\n                const dateFormatee = date.toLocaleDateString('fr-FR', { \r\n                    weekday: 'long', \r\n                    day: 'numeric', \r\n                    month: 'long' \r\n                })\r\n                \r\n                let typeModification = ''\r\n                if (statutModifie === 'absent') {\r\n                    typeModification = 'Absence'\r\n                } else if (statutModifie === 'dispo') {\r\n                    typeModification = 'Disponibilité exceptionnelle'\r\n                }\r\n                \r\n                if (typeModification) {\r\n                    modificationsDetectees.push(`${dateFormatee} : ${typeModification}`)\r\n                }\r\n            }\r\n        })\r\n        \r\n        return modificationsDetectees\r\n    }\r\n\r\n    // ✅ NOUVEAU: Fonction d'envoi de message automatique vers formateur\r\n    const envoyerMessageFormateur = async (messageFacultatif = '') => {\r\n        try {\r\n            if (!formateurData) {\r\n                console.error('Données formateur manquantes')\r\n                return\r\n            }\r\n\r\n            const formateurNom = `${formateurData.prenom} ${formateurData.nom}`\r\n            const listeModifications = genererListeModifications()\r\n            \r\n            let contenu = `Bonjour ${formateurData.prenom},\\n\\nLes administrateurs ont modifié vos absences :\\n\\n`\r\n            \r\n            // Ajouter la liste des modifications\r\n            if (listeModifications.length > 0) {\r\n                contenu += `MODIFICATIONS EFFECTUÉES :\\n`\r\n                listeModifications.forEach((modif, index) => {\r\n                    contenu += `${index + 1}. ${modif}\\n`\r\n                })\r\n                contenu += '\\n'\r\n            }\r\n            \r\n            // Ajouter le message facultatif s'il existe\r\n            if (messageFacultatif.trim()) {\r\n                contenu += `Message de l'équipe :\\n\"${messageFacultatif.trim()}\"\\n\\n`\r\n            }\r\n            \r\n            contenu += `Bonne journée !\\nL'équipe de coordination`\r\n            \r\n            const { error } = await supabase\r\n                .from('messages')\r\n                .insert({\r\n                    expediteur_id: null, // null = admin\r\n                    destinataire_id: formateurData.id,\r\n                    expediteur: 'Coordination ACLEF',\r\n                    destinataire: formateurNom,\r\n                    objet: 'Modification de vos absences',\r\n                    contenu: contenu,\r\n                    type: 'notification',\r\n                    lu: false,\r\n                    archive: false,\r\n                    statut_validation: null,\r\n                    date: new Date().toISOString().split('T')[0],\r\n                    heure: new Date().toTimeString().slice(0, 5)\r\n                })\r\n\r\n            if (error) {\r\n                console.error('Erreur envoi message formateur:', error)\r\n            } else {\r\n                console.log('✅ Message automatique envoyé au formateur:', formateurNom)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n        }\r\n    }\r\n\r\n    // Gestion de la validation avec modal message facultatif\r\n    const handleValider = async () => {\r\n        const modificationsDetectees = Object.keys(planningModifie).filter(date => \r\n            planningModifie[date] !== planningOriginal[date]\r\n        )\r\n        \r\n        if (modificationsDetectees.length === 0) {\r\n            onError?.('⚠️ Aucune modification à envoyer')\r\n            return\r\n        }\r\n\r\n        // Afficher modal pour message facultatif\r\n        setShowMessageModal(true)\r\n    }\r\n\r\n    // Fonction de validation finale avec envoi message\r\n    const handleValidationFinale = async () => {\r\n        setShowMessageModal(false)\r\n        \r\n        // Envoyer message vers formateur AVANT la sauvegarde\r\n        await envoyerMessageFormateur(messageFacultatif)\r\n        \r\n        // Puis sauvegarder le planning\r\n        await envoyerDemande()\r\n        \r\n        // Reset du message facultatif\r\n        setMessageFacultatif('')\r\n    }\r\n\r\n    // Fonction ENVOYER LA DEMANDE : sauvegarder en BDD\r\n    const envoyerDemande = async () => {\r\n        try {\r\n            setEnvoiEnCours(true)\r\n\r\n            // Détecter les modifications\r\n            const modificationsDetectees = []\r\n            \r\n            Object.keys(planningModifie).forEach(dateStr => {\r\n                const statutOriginal = planningOriginal[dateStr]\r\n                const statutModifie = planningModifie[dateStr]\r\n                \r\n                // Si la case a été modifiée\r\n                if (statutOriginal !== statutModifie) {\r\n                    let type = null\r\n                    \r\n                    if (statutModifie === 'absent') {\r\n                        type = 'personnel'\r\n                    } else if (statutModifie === 'dispo') {\r\n                        type = 'formation'\r\n                    }\r\n                    \r\n                    // Ajouter seulement si c'est un type reconnu\r\n                    if (type) {\r\n                        modificationsDetectees.push({\r\n                            date: dateStr,\r\n                            type: type,\r\n                            statutOriginal: statutOriginal,\r\n                            statutModifie: statutModifie\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n\r\n            if (modificationsDetectees.length === 0) {\r\n                onError?.('⚠️ Aucune modification à envoyer')\r\n                setEnvoiEnCours(false)\r\n                return\r\n            }\r\n\r\n            console.log(`📤 ${modificationsDetectees.length} modifications détectées:`, modificationsDetectees)\r\n\r\n            // Créer un enregistrement par jour modifié\r\n            const enregistrementsACreer = modificationsDetectees.map(modif => ({\r\n                formateur_id: formateurId,\r\n                date_debut: modif.date,\r\n                date_fin: modif.date, // Même date pour jour par jour\r\n                type: modif.type,\r\n                statut: 'en_attente',\r\n                motif: null, // Optionnel, peut être ajouté plus tard\r\n                created_at: new Date().toISOString()\r\n            }))\r\n\r\n            // Insérer en BDD\r\n            const { data: resultats, error: erreurInsert } = await supabase\r\n                .from('absences_formateurs')\r\n                .insert(enregistrementsACreer)\r\n                .select()\r\n\r\n            if (erreurInsert) {\r\n                throw erreurInsert\r\n            }\r\n\r\n            console.log(`✅ ${resultats.length} enregistrements créés en BDD`)\r\n\r\n            // Succès !\r\n            onSuccess?.(`✅ Demande envoyée ! ${modificationsDetectees.length} modification(s) pour ${formateurData.prenom} ${formateurData.nom}`)\r\n            \r\n            // Remettre le planning à l'état d'origine après envoi réussi\r\n            setPlanningModifie({...planningOriginal})\r\n            setHistoriqueModi([])\r\n\r\n        } catch (error) {\r\n            console.error('⚠️ Erreur lors de l\\'envoi:', error)\r\n            onError?.(`⚠️ Erreur lors de l'envoi: ${error.message}`)\r\n        } finally {\r\n            setEnvoiEnCours(false)\r\n        }\r\n    }\r\n\r\n    // Génération du calendrier 5 jours ouvrés\r\n    const genererCalendrierComplet = () => {\r\n        const annee = currentDate.getFullYear()\r\n        const mois = currentDate.getMonth()\r\n        \r\n        const nbJoursMois = new Date(annee, mois + 1, 0).getDate()\r\n        const joursOuvres = []\r\n        \r\n        for (let jour = 1; jour <= nbJoursMois; jour++) {\r\n            const date = new Date(annee, mois, jour, 12, 0, 0, 0)\r\n            const jourSemaine = date.getDay()\r\n            \r\n            if (jourSemaine >= 1 && jourSemaine <= 5) {\r\n                joursOuvres.push(date)\r\n            }\r\n        }\r\n        \r\n        const grille = []\r\n        let indexJour = 0\r\n        \r\n        const nbSemaines = Math.ceil(joursOuvres.length / 5)\r\n        \r\n        for (let semaine = 0; semaine < nbSemaines; semaine++) {\r\n            for (let jourSemaine = 0; jourSemaine < 5; jourSemaine++) {\r\n                if (indexJour < joursOuvres.length) {\r\n                    const date = joursOuvres[indexJour]\r\n                    const jourReel = date.getDay()\r\n                    const jourAttendu = jourSemaine + 1\r\n                    \r\n                    if (jourReel === jourAttendu) {\r\n                        grille.push(date)\r\n                        indexJour++\r\n                    } else {\r\n                        grille.push(null)\r\n                    }\r\n                } else {\r\n                    grille.push(null)\r\n                }\r\n            }\r\n        }\r\n        \r\n        return grille\r\n    }\r\n\r\n    // Vérifier s'il y a des modifications\r\n    const aDesModifications = () => {\r\n        return JSON.stringify(planningOriginal) !== JSON.stringify(planningModifie)\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                minHeight: '400px'\r\n            }}>\r\n                <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement du planning des absences...</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!formateurId || !formateurData) {\r\n        return (\r\n            <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                minHeight: '400px',\r\n                backgroundColor: '#f8fafc',\r\n                borderRadius: '12px'\r\n            }}>\r\n                <div style={{ color: '#6b7280', fontSize: '16px' }}>Aucun formateur sélectionné</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const nomMois = currentDate.toLocaleDateString('fr-FR', { month: 'long', year: 'numeric' })\r\n    const casesCalendrier = genererCalendrierComplet()\r\n\r\n    return (\r\n        <div style={{ \r\n            padding: '20px', \r\n            fontFamily: 'system-ui',\r\n            maxWidth: '100%'\r\n        }}>\r\n            {/* Modal pour message facultatif */}\r\n            {showMessageModal && (\r\n                <div style={{\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    backgroundColor: 'rgba(0,0,0,0.5)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    zIndex: 1000\r\n                }}>\r\n                    <div style={{\r\n                        backgroundColor: 'white',\r\n                        borderRadius: '15px',\r\n                        padding: '25px',\r\n                        maxWidth: '500px',\r\n                        width: '90%'\r\n                    }}>\r\n                        <h3 style={{ \r\n                            margin: '0 0 15px 0', \r\n                            fontSize: '18px', \r\n                            color: '#374151',\r\n                            textAlign: 'center'\r\n                        }}>\r\n                            💬 Message facultatif pour {formateurData.prenom}\r\n                        </h3>\r\n                        <p style={{ \r\n                            fontSize: '14px', \r\n                            color: '#6b7280', \r\n                            margin: '0 0 15px 0',\r\n                            textAlign: 'center',\r\n                            lineHeight: '1.4'\r\n                        }}>\r\n                            Souhaitez-vous ajouter un message personnel ?\r\n                            <br />\r\n                            <em>(ex: \"Je serai en formation\", \"Congés prévus\")</em>\r\n                        </p>\r\n                        <textarea\r\n                            value={messageFacultatif}\r\n                            onChange={(e) => setMessageFacultatif(e.target.value)}\r\n                            placeholder=\"Votre message (optionnel)...\"\r\n                            rows={4}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '12px',\r\n                                border: '2px solid #e5e7eb',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                resize: 'vertical',\r\n                                boxSizing: 'border-box',\r\n                                marginBottom: '20px'\r\n                            }}\r\n                        />\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                onClick={() => setShowMessageModal(false)}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    padding: '12px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: 'bold',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                            <button\r\n                                onClick={handleValidationFinale}\r\n                                disabled={envoiEnCours}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    backgroundColor: envoiEnCours ? '#9ca3af' : '#10b981',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    padding: '12px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: 'bold',\r\n                                    cursor: envoiEnCours ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                {envoiEnCours ? 'Envoi...' : 'Valider'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* En-tête */}\r\n            <div style={{ marginBottom: '20px' }}>\r\n                <h2 style={{ \r\n                    margin: '0 0 8px 0', \r\n                    fontSize: '20px', \r\n                    fontWeight: 'bold',\r\n                    color: '#374151'\r\n                }}>\r\n                    🚫 Absences - {formateurData.prenom} {formateurData.nom}\r\n                </h2>\r\n                <p style={{ \r\n                    fontSize: '14px', \r\n                    color: '#6b7280',\r\n                    margin: '0'\r\n                }}>\r\n                    Déclarer les absences et disponibilités exceptionnelles\r\n                </p>\r\n            </div>\r\n\r\n            {/* Layout desktop - 2 colonnes */}\r\n            <div style={{ display: 'grid', gridTemplateColumns: '300px 1fr', gap: '20px' }}>\r\n                \r\n                {/* Colonne gauche - Contrôles */}\r\n                <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>\r\n                    \r\n                    {/* Modes de sélection */}\r\n                    <div style={{\r\n                        backgroundColor: '#f9fafb',\r\n                        padding: '16px',\r\n                        borderRadius: '12px',\r\n                        border: '2px solid #e5e7eb'\r\n                    }}>\r\n                        <h4 style={{ \r\n                            fontSize: '14px', \r\n                            fontWeight: 'bold', \r\n                            marginBottom: '12px', \r\n                            color: '#374151' \r\n                        }}>\r\n                            🎯 Choisir un mode\r\n                        </h4>\r\n                        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\r\n                            <button\r\n                                onClick={() => setModeSelection('absent')}\r\n                                style={{\r\n                                    padding: '12px',\r\n                                    borderRadius: '8px',\r\n                                    border: modeSelection === 'absent' ? '3px solid #fbbf24' : '2px solid #ef4444',\r\n                                    backgroundColor: '#ef4444',\r\n                                    color: 'white',\r\n                                    fontWeight: 'bold',\r\n                                    fontSize: '14px',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                🔴 ABSENT\r\n                            </button>\r\n                            \r\n                            <button\r\n                                onClick={() => setModeSelection('dispo')}\r\n                                style={{\r\n                                    padding: '12px',\r\n                                    borderRadius: '8px',\r\n                                    border: modeSelection === 'dispo' ? '3px solid #fbbf24' : '2px solid #f59e0b',\r\n                                    backgroundColor: '#f59e0b',\r\n                                    color: 'white',\r\n                                    fontWeight: 'bold',\r\n                                    fontSize: '14px',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                🟡 DISPO EXCEPT.\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Actions */}\r\n                    <div style={{\r\n                        backgroundColor: '#f9fafb',\r\n                        padding: '16px',\r\n                        borderRadius: '12px',\r\n                        border: '2px solid #e5e7eb'\r\n                    }}>\r\n                        <h4 style={{ \r\n                            fontSize: '14px', \r\n                            fontWeight: 'bold', \r\n                            marginBottom: '12px', \r\n                            color: '#374151' \r\n                        }}>\r\n                            ⚡ Actions rapides\r\n                        </h4>\r\n                        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\r\n                            <button\r\n                                onClick={annulerDerniereAction}\r\n                                disabled={historiqueModi.length === 0}\r\n                                style={{\r\n                                    padding: '10px',\r\n                                    backgroundColor: historiqueModi.length === 0 ? '#f3f4f6' : '#6b7280',\r\n                                    color: historiqueModi.length === 0 ? '#9ca3af' : 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '6px',\r\n                                    fontWeight: 'bold',\r\n                                    fontSize: '12px',\r\n                                    cursor: historiqueModi.length === 0 ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                ↶ ANNULER\r\n                            </button>\r\n                            \r\n                            <button\r\n                                onClick={effacerTout}\r\n                                disabled={!aDesModifications()}\r\n                                style={{\r\n                                    padding: '10px',\r\n                                    backgroundColor: !aDesModifications() ? '#f3f4f6' : '#dc2626',\r\n                                    color: !aDesModifications() ? '#9ca3af' : 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '6px',\r\n                                    fontWeight: 'bold',\r\n                                    fontSize: '12px',\r\n                                    cursor: !aDesModifications() ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                🗑️ EFFACER TOUT\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Compteur modifications */}\r\n                    {aDesModifications() && (\r\n                        <div style={{\r\n                            backgroundColor: '#fef3c7',\r\n                            padding: '12px',\r\n                            borderRadius: '8px',\r\n                            textAlign: 'center',\r\n                            color: '#92400e',\r\n                            fontWeight: 'bold',\r\n                            fontSize: '14px',\r\n                            border: '2px solid #f59e0b'\r\n                        }}>\r\n                            📊 {Object.keys(planningModifie).filter(date => \r\n                                planningModifie[date] !== planningOriginal[date]\r\n                            ).length} modification(s)\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Bouton validation */}\r\n                    {aDesModifications() && (\r\n                        <button\r\n                            onClick={handleValider}\r\n                            disabled={envoiEnCours}\r\n                            style={{\r\n                                width: '100%',\r\n                                backgroundColor: envoiEnCours ? '#9ca3af' : '#10b981',\r\n                                color: 'white',\r\n                                padding: '14px',\r\n                                borderRadius: '8px',\r\n                                fontWeight: 'bold',\r\n                                fontSize: '14px',\r\n                                border: 'none',\r\n                                cursor: envoiEnCours ? 'not-allowed' : 'pointer'\r\n                            }}\r\n                        >\r\n                            {envoiEnCours ? '📤 Envoi...' : '✅ Valider les modifications'}\r\n                        </button>\r\n                    )}\r\n                </div>\r\n\r\n                {/* Colonne droite - Calendrier */}\r\n                <div style={{\r\n                    backgroundColor: '#ffffff',\r\n                    padding: '20px',\r\n                    borderRadius: '12px',\r\n                    border: '2px solid #e5e7eb'\r\n                }}>\r\n                    \r\n                    {/* Navigation mensuelle */}\r\n                    <div style={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'space-between',\r\n                        marginBottom: '20px'\r\n                    }}>\r\n                        <button \r\n                            onClick={() => changerMois(-1)}\r\n                            style={{\r\n                                width: '40px',\r\n                                height: '40px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                fontSize: '18px',\r\n                                fontWeight: 'bold',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            ←\r\n                        </button>\r\n                        \r\n                        <h3 style={{\r\n                            fontSize: '18px',\r\n                            fontWeight: 'bold',\r\n                            textTransform: 'capitalize',\r\n                            margin: 0,\r\n                            color: '#1e40af'\r\n                        }}>\r\n                            {nomMois}\r\n                        </h3>\r\n                        \r\n                        <button \r\n                            onClick={() => changerMois(1)}\r\n                            style={{\r\n                                width: '40px',\r\n                                height: '40px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                fontSize: '18px',\r\n                                fontWeight: 'bold',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            →\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* En-têtes des jours */}\r\n                    <div style={{\r\n                        display: 'grid',\r\n                        gridTemplateColumns: 'repeat(5, 1fr)',\r\n                        gap: '8px',\r\n                        marginBottom: '12px'\r\n                    }}>\r\n                        {['Lun', 'Mar', 'Mer', 'Jeu', 'Ven'].map(jour => (\r\n                            <div key={jour} style={{\r\n                                textAlign: 'center',\r\n                                fontWeight: 'bold',\r\n                                fontSize: '12px',\r\n                                color: '#6b7280',\r\n                                padding: '8px'\r\n                            }}>\r\n                                {jour}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n\r\n                    {/* Grille du calendrier */}\r\n                    <div style={{\r\n                        display: 'grid',\r\n                        gridTemplateColumns: 'repeat(5, 1fr)',\r\n                        gap: '8px'\r\n                    }}>\r\n                        {casesCalendrier.map((date, index) => {\r\n                            if (!date) {\r\n                                return <div key={`empty-${index}`} style={{ height: '50px' }}></div>\r\n                            }\r\n\r\n                            const dateStr = date.toISOString().split('T')[0]\r\n                            const statut = planningModifie[dateStr] || 'libre'\r\n                            const details = getStatutDetails(statut)\r\n                            const estAujourdhui = date.toDateString() === new Date().toDateString()\r\n                            const estModifie = planningModifie[dateStr] !== planningOriginal[dateStr]\r\n                            const numeroJour = date.getDate()\r\n                            \r\n                            return (\r\n                                <div\r\n                                    key={date.getTime()}\r\n                                    style={{\r\n                                        height: '50px',\r\n                                        borderRadius: '8px',\r\n                                        display: 'flex',\r\n                                        flexDirection: 'column',\r\n                                        alignItems: 'center',\r\n                                        justifyContent: 'center',\r\n                                        fontWeight: 'bold',\r\n                                        fontSize: '14px',\r\n                                        backgroundColor: details.backgroundColor,\r\n                                        color: details.color,\r\n                                        border: estAujourdhui ? '3px solid #fbbf24' : \r\n                                               estModifie ? '2px solid #10b981' : '1px solid rgba(0,0,0,0.1)',\r\n                                        cursor: 'pointer',\r\n                                        position: 'relative',\r\n                                        transition: 'all 0.2s'\r\n                                    }}\r\n                                    onClick={() => {\r\n                                        if (modeSelection === 'annuler_case') {\r\n                                            annulerModificationCase(date)\r\n                                        } else {\r\n                                            gererClicCase(date)\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    <span style={{ fontSize: '16px' }}>{numeroJour}</span>\r\n                                    {details.label && (\r\n                                        <span style={{ fontSize: '8px', marginTop: '1px' }}>{details.label}</span>\r\n                                    )}\r\n                                    {/* Indicateur de modification */}\r\n                                    {estModifie && (\r\n                                        <div style={{\r\n                                            position: 'absolute',\r\n                                            top: '2px',\r\n                                            right: '2px',\r\n                                            width: '6px',\r\n                                            height: '6px',\r\n                                            backgroundColor: '#10b981',\r\n                                            borderRadius: '50%'\r\n                                        }}></div>\r\n                                    )}\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}",
          "taille": 42436,
          "lignes": 975,
          "dateModif": "2025-08-28T19:00:40.074Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { supabase } from '../../lib/supabaseClient'\r\n\r\nexport default function Absence({ \r\n    formateurId,\r\n    formateurData,\r\n    onSuccess,\r\n    onError \r\n}) {\r\n    const [currentDate, setCurrentDate] = useState(new Date())\r\n    const [modeSelection, setModeSelection] = useState('absent')\r\n    const [planningModifie, setPlanningModifie] = useState({})\r\n    const [planningOriginal, setPlanningOriginal] = useState({})\r\n    const [historiqueModi, setHistoriqueModi] = useState([])\r\n    const [lieux, setLieux] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [envoiEnCours, setEnvoiEnCours] = useState(false)\r\n    const [showMessageModal, setShowMessageModal] = useState(false)\r\n    const [messageFacultatif, setMessageFacultatif] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (formateurId) {\r\n            loadPlanningData()\r\n        }\r\n    }, [currentDate, formateurId])\r\n\r\n    const loadPlanningData = async () => {\r\n        if (!formateurId) return\r\n        \r\n        try {\r\n            setIsLoading(true)\r\n            \r\n            // Charger les lieux pour affichage\r\n            const { data: lieuxData, error: lieuxError } = await supabase\r\n                .from('lieux')\r\n                .select('id, nom, couleur, initiale')\r\n                .eq('archive', false)\r\n\r\n            if (lieuxError) throw lieuxError\r\n            setLieux(lieuxData || [])\r\n\r\n            const annee = currentDate.getFullYear()\r\n            const mois = currentDate.getMonth()\r\n            \r\n            // Construire le planning original basé sur le planning type VALIDÉ\r\n            const planning = {}\r\n            \r\n            // Ajouter seulement les jours ouvrés (Lun-Ven) comme \"libre\" par défaut\r\n            for (let jour = 1; jour <= new Date(annee, mois + 1, 0).getDate(); jour++) {\r\n                const date = new Date(annee, mois, jour)\r\n                const jourSemaine = date.getDay()\r\n                \r\n                // Seulement les jours de travail (lundi à vendredi)\r\n                if (jourSemaine >= 1 && jourSemaine <= 5) {\r\n                    const anneeStr = date.getFullYear()\r\n                    const moisStr = String(date.getMonth() + 1).padStart(2, '0')\r\n                    const jourStr = String(date.getDate()).padStart(2, '0')\r\n                    const dateStr = `${anneeStr}-${moisStr}-${jourStr}`\r\n                    planning[dateStr] = 'libre'\r\n                }\r\n            }\r\n\r\n            // Récupérer le planning type VALIDÉ du formateur\r\n            const { data: planningTypeData, error: planningTypeError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .select('jour, creneau, statut, lieu_id, valide')\r\n                .eq('formateur_id', formateurId)\r\n                .eq('valide', true)\r\n\r\n            // Appliquer le planning type VALIDÉ (BASE VERTE)\r\n            if (planningTypeData && !planningTypeError) {\r\n                // Créer un mapping des jours\r\n                const joursMapping = {\r\n                    0: 'Dimanche', 1: 'Lundi', 2: 'Mardi', 3: 'Mercredi', \r\n                    4: 'Jeudi', 5: 'Vendredi', 6: 'Samedi'\r\n                }\r\n\r\n                // Pour chaque jour du mois\r\n                for (let jour = 1; jour <= new Date(annee, mois + 1, 0).getDate(); jour++) {\r\n                    const date = new Date(annee, mois, jour)\r\n                    const jourSemaine = date.getDay()\r\n                    const nomJour = joursMapping[jourSemaine]\r\n                    \r\n                    // Si c'est un jour ouvré\r\n                    if (jourSemaine >= 1 && jourSemaine <= 5) {\r\n                        const anneeStr = date.getFullYear()\r\n                        const moisStr = String(date.getMonth() + 1).padStart(2, '0')\r\n                        const jourStr = String(date.getDate()).padStart(2, '0')\r\n                        const dateStr = `${anneeStr}-${moisStr}-${jourStr}`\r\n                        \r\n                        // Vérifier si le formateur a une disponibilité validée ce jour-là    \r\n                        const disponibiliteJour = planningTypeData.find(pt => \r\n                            pt.jour === nomJour && pt.statut === 'disponible'\r\n                        )\r\n                        \r\n                        const disponibiliteExcept = planningTypeData.find(pt => \r\n                            pt.jour === nomJour && pt.statut === 'dispo_except'\r\n                        )\r\n                        \r\n                        if (disponibiliteJour) {\r\n                            planning[dateStr] = 'planning_type' // JOUR VALIDÉ = VERT\r\n                        } else if (disponibiliteExcept) {\r\n                            planning[dateStr] = 'dispo_except' // DISPO EXCEPTIONNELLE = ORANGE\r\n                        }\r\n                    }\r\n                }\r\n                console.log(`✅ Planning type validé appliqué: ${planningTypeData.length} créneaux`)\r\n            }\r\n\r\n            // Charger ET afficher TOUTES les absences\r\n            const { data: absencesData, error: absencesError } = await supabase\r\n                .from('absences_formateurs')\r\n                .select('date_debut, date_fin, type, statut, id')\r\n                .eq('formateur_id', formateurId)\r\n\r\n            // Appliquer TOUTES les absences (en_attente + validées)\r\n            if (absencesData && !absencesError) {\r\n                console.log(`🔧 CHARGEMENT: ${absencesData.length} absences trouvées:`, absencesData)\r\n                \r\n                absencesData.forEach(absence => {\r\n                    const debut = new Date(absence.date_debut)\r\n                    const fin = new Date(absence.date_fin)\r\n                    \r\n                    console.log(`🔧 Traitement absence: ${absence.date_debut} - ${absence.date_fin}, type: ${absence.type}, statut: ${absence.statut}`)\r\n                    \r\n                    for (let d = new Date(debut); d <= fin; d.setDate(d.getDate() + 1)) {\r\n                        const anneeStr = d.getFullYear()\r\n                        const moisStr = String(d.getMonth() + 1).padStart(2, '0')\r\n                        const jourStr = String(d.getDate()).padStart(2, '0')\r\n                        const dateStr = `${anneeStr}-${moisStr}-${jourStr}`\r\n                        \r\n                        if (planning.hasOwnProperty(dateStr)) {\r\n                            // Afficher TOUTES les absences (en_attente ET validées)\r\n                            if (absence.type === 'personnel' || absence.type === 'absence') {\r\n                                planning[dateStr] = 'absent'\r\n                                console.log(`🔴 ${dateStr} marqué ABSENT (${absence.type}, ${absence.statut})`)\r\n                            } else if (absence.type === 'formation' || absence.type === 'dispo_except') {\r\n                                planning[dateStr] = 'dispo'\r\n                                console.log(`🟡 ${dateStr} marqué DISPO EXCEPT (${absence.type}, ${absence.statut})`)\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n                console.log(`✅ Modifications affichées: ${absencesData.length} (en_attente + validées)`)\r\n            }\r\n\r\n            setPlanningOriginal(planning)\r\n            setPlanningModifie({...planning})\r\n\r\n        } catch (error) {\r\n            console.error('⚠️ Erreur:', error.message)\r\n            onError?.(`⚠️ Erreur: ${error.message}`)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Navigation mensuelle\r\n    const changerMois = (direction) => {\r\n        const nouvelleDate = new Date(currentDate)\r\n        nouvelleDate.setMonth(currentDate.getMonth() + direction)\r\n        setCurrentDate(nouvelleDate)\r\n    }\r\n\r\n    // Fonction pour obtenir les détails d'un statut\r\n    const getStatutDetails = (statut) => {\r\n        switch (statut) {\r\n            case 'absent':\r\n                return { \r\n                    backgroundColor: '#ef4444', \r\n                    color: 'white', \r\n                    label: 'ABS',\r\n                    nom: 'Absent'\r\n                }\r\n            case 'dispo':\r\n                return { \r\n                    backgroundColor: '#f59e0b', \r\n                    color: 'white', \r\n                    label: 'DISPO',\r\n                    nom: 'Dispo exceptionnelle'\r\n                }\r\n            case 'planning_type':\r\n                return { \r\n                    backgroundColor: '#22c55e', \r\n                    color: 'white', \r\n                    label: 'DISPO',\r\n                    nom: 'Planning habituel'\r\n                }\r\n            case 'dispo_except':\r\n                return { \r\n                    backgroundColor: '#f59e0b', \r\n                    color: 'white', \r\n                    label: 'EXCEPT',\r\n                    nom: 'Dispo exceptionnelle'\r\n                }\r\n            case 'libre':\r\n            default:\r\n                return { \r\n                    backgroundColor: '#d1d5db', \r\n                    color: '#374151', \r\n                    label: '',\r\n                    nom: 'Libre'\r\n                }\r\n        }\r\n    }\r\n\r\n    // Fonction pour gérer le clic sur une case\r\n    const gererClicCase = (date) => {\r\n        const annee = date.getFullYear()\r\n        const mois = String(date.getMonth() + 1).padStart(2, '0')\r\n        const jourStr = String(date.getDate()).padStart(2, '0')\r\n        const dateStr = `${annee}-${mois}-${jourStr}`\r\n        \r\n        // Ajouter à l'historique avant de modifier\r\n        setHistoriqueModi(prev => [...prev, { date: dateStr, action: 'modifier', mode: modeSelection }])\r\n\r\n        setPlanningModifie(prev => ({\r\n            ...prev,\r\n            [dateStr]: modeSelection\r\n        }))\r\n\r\n        const details = getStatutDetails(modeSelection)\r\n        console.log(`📅 ${date.getDate()} ${currentDate.toLocaleDateString('fr-FR', {month: 'long'})} → ${details.nom}`)\r\n    }\r\n\r\n    // Fonction ANNULER : annuler la dernière action\r\n    const annulerDerniereAction = () => {\r\n        if (historiqueModi.length === 0) {\r\n            return\r\n        }\r\n\r\n        const derniereAction = historiqueModi[historiqueModi.length - 1]\r\n        \r\n        // Supprimer la dernière action de l'historique\r\n        setHistoriqueModi(prev => prev.slice(0, -1))\r\n        \r\n        if (derniereAction.action === 'modifier') {\r\n            // Annuler une modification = remettre l'état original\r\n            setPlanningModifie(prev => ({\r\n                ...prev,\r\n                [derniereAction.date]: planningOriginal[derniereAction.date]\r\n            }))\r\n        } else if (derniereAction.action === 'annuler_case') {\r\n            // Annuler une annulation = remettre la case\r\n            setPlanningModifie(prev => ({\r\n                ...prev,\r\n                [derniereAction.date]: derniereAction.mode || 'planning_type'\r\n            }))\r\n        }\r\n    }\r\n\r\n    // Fonction ANNULER UNE CASE : supprimer une case spécifique (mode annuler)\r\n    const annulerModificationCase = (date) => {\r\n        const annee = date.getFullYear()\r\n        const mois = String(date.getMonth() + 1).padStart(2, '0')\r\n        const jourStr = String(date.getDate()).padStart(2, '0')\r\n        const dateStr = `${annee}-${mois}-${jourStr}`\r\n        \r\n        // Ajouter à l'historique avant d'annuler\r\n        setHistoriqueModi(prev => [...prev, { \r\n            date: dateStr, \r\n            action: 'annuler_case',\r\n            mode: planningModifie[dateStr]\r\n        }])\r\n        \r\n        // Remettre à l'état original\r\n        setPlanningModifie(prev => ({\r\n            ...prev,\r\n            [dateStr]: planningOriginal[dateStr]\r\n        }))\r\n    }\r\n\r\n    // Fonction EFFACER TOUT : effacer toutes les modifications\r\n    const effacerTout = () => {\r\n        setPlanningModifie({...planningOriginal}) // Remettre à l'état original\r\n        setHistoriqueModi([]) // Vider aussi l'historique\r\n    }\r\n\r\n    // Fonction pour générer la liste des modifications pour le message\r\n    const genererListeModifications = () => {\r\n        const modificationsDetectees = []\r\n        \r\n        Object.keys(planningModifie).forEach(dateStr => {\r\n            const statutOriginal = planningOriginal[dateStr]\r\n            const statutModifie = planningModifie[dateStr]\r\n            \r\n            if (statutOriginal !== statutModifie) {\r\n                const date = new Date(dateStr)\r\n                const dateFormatee = date.toLocaleDateString('fr-FR', { \r\n                    weekday: 'long', \r\n                    day: 'numeric', \r\n                    month: 'long' \r\n                })\r\n                \r\n                let typeModification = ''\r\n                if (statutModifie === 'absent') {\r\n                    typeModification = 'Absence'\r\n                } else if (statutModifie === 'dispo') {\r\n                    typeModification = 'Disponibilité exceptionnelle'\r\n                }\r\n                \r\n                if (typeModification) {\r\n                    modificationsDetectees.push(`${dateFormatee} : ${typeModification}`)\r\n                }\r\n            }\r\n        })\r\n        \r\n        return modificationsDetectees\r\n    }\r\n\r\n    // ✅ NOUVEAU: Fonction d'envoi de message automatique vers formateur\r\n    const envoyerMessageFormateur = async (messageFacultatif = '') => {\r\n        try {\r\n            if (!formateurData) {\r\n                console.error('Données formateur manquantes')\r\n                return\r\n            }\r\n\r\n            const formateurNom = `${formateurData.prenom} ${formateurData.nom}`\r\n            const listeModifications = genererListeModifications()\r\n            \r\n            let contenu = `Bonjour ${formateurData.prenom},\\n\\nLes administrateurs ont modifié vos absences :\\n\\n`\r\n            \r\n            // Ajouter la liste des modifications\r\n            if (listeModifications.length > 0) {\r\n                contenu += `MODIFICATIONS EFFECTUÉES :\\n`\r\n                listeModifications.forEach((modif, index) => {\r\n                    contenu += `${index + 1}. ${modif}\\n`\r\n                })\r\n                contenu += '\\n'\r\n            }\r\n            \r\n            // Ajouter le message facultatif s'il existe\r\n            if (messageFacultatif.trim()) {\r\n                contenu += `Message de l'équipe :\\n\"${messageFacultatif.trim()}\"\\n\\n`\r\n            }\r\n            \r\n            contenu += `Bonne journée !\\nL'équipe de coordination`\r\n            \r\n            const { error } = await supabase\r\n                .from('messages')\r\n                .insert({\r\n                    expediteur_id: null, // null = admin\r\n                    destinataire_id: formateurData.id,\r\n                    expediteur: 'Coordination ACLEF',\r\n                    destinataire: formateurNom,\r\n                    objet: 'Modification de vos absences',\r\n                    contenu: contenu,\r\n                    type: 'notification',\r\n                    lu: false,\r\n                    archive: false,\r\n                    statut_validation: null,\r\n                    date: new Date().toISOString().split('T')[0],\r\n                    heure: new Date().toTimeString().slice(0, 5)\r\n                })\r\n\r\n            if (error) {\r\n                console.error('Erreur envoi message formateur:', error)\r\n            } else {\r\n                console.log('✅ Message automatique envoyé au formateur:', formateurNom)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n        }\r\n    }\r\n\r\n    // Gestion de la validation avec modal message facultatif\r\n    const handleValider = async () => {\r\n        const modificationsDetectees = Object.keys(planningModifie).filter(date => \r\n            planningModifie[date] !== planningOriginal[date]\r\n        )\r\n        \r\n        if (modificationsDetectees.length === 0) {\r\n            onError?.('⚠️ Aucune modification à envoyer')\r\n            return\r\n        }\r\n\r\n        // Afficher modal pour message facultatif\r\n        setShowMessageModal(true)\r\n    }\r\n\r\n    // Fonction de validation finale avec envoi message\r\n    const handleValidationFinale = async () => {\r\n        setShowMessageModal(false)\r\n        \r\n        // Envoyer message vers formateur AVANT la sauvegarde\r\n        await envoyerMessageFormateur(messageFacultatif)\r\n        \r\n        // Puis sauvegarder le planning\r\n        await envoyerDemande()\r\n        \r\n        // Reset du message facultatif\r\n        setMessageFacultatif('')\r\n    }\r\n\r\n    // Fonction ENVOYER LA DEMANDE : sauvegarder en BDD\r\n    const envoyerDemande = async () => {\r\n        try {\r\n            setEnvoiEnCours(true)\r\n\r\n            // Détecter les modifications\r\n            const modificationsDetectees = []\r\n            \r\n            Object.keys(planningModifie).forEach(dateStr => {\r\n                const statutOriginal = planningOriginal[dateStr]\r\n                const statutModifie = planningModifie[dateStr]\r\n                \r\n                // Si la case a été modifiée\r\n                if (statutOriginal !== statutModifie) {\r\n                    let type = null\r\n                    \r\n                    if (statutModifie === 'absent') {\r\n                        type = 'personnel'\r\n                    } else if (statutModifie === 'dispo') {\r\n                        type = 'formation'\r\n                    }\r\n                    \r\n                    // Ajouter seulement si c'est un type reconnu\r\n                    if (type) {\r\n                        modificationsDetectees.push({\r\n                            date: dateStr,\r\n                            type: type,\r\n                            statutOriginal: statutOriginal,\r\n                            statutModifie: statutModifie\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n\r\n            if (modificationsDetectees.length === 0) {\r\n                onError?.('⚠️ Aucune modification à envoyer')\r\n                setEnvoiEnCours(false)\r\n                return\r\n            }\r\n\r\n            console.log(`📤 ${modificationsDetectees.length} modifications détectées:`, modificationsDetectees)\r\n\r\n            // Créer un enregistrement par jour modifié\r\n            const enregistrementsACreer = modificationsDetectees.map(modif => ({\r\n                formateur_id: formateurId,\r\n                date_debut: modif.date,\r\n                date_fin: modif.date, // Même date pour jour par jour\r\n                type: modif.type,\r\n                statut: 'en_attente',\r\n                motif: null, // Optionnel, peut être ajouté plus tard\r\n                created_at: new Date().toISOString()\r\n            }))\r\n\r\n            // Insérer en BDD\r\n            const { data: resultats, error: erreurInsert } = await supabase\r\n                .from('absences_formateurs')\r\n                .insert(enregistrementsACreer)\r\n                .select()\r\n\r\n            if (erreurInsert) {\r\n                throw erreurInsert\r\n            }\r\n\r\n            console.log(`✅ ${resultats.length} enregistrements créés en BDD`)\r\n\r\n            // Succès !\r\n            onSuccess?.(`✅ Demande envoyée ! ${modificationsDetectees.length} modification(s) pour ${formateurData.prenom} ${formateurData.nom}`)\r\n            \r\n            // Remettre le planning à l'état d'origine après envoi réussi\r\n            setPlanningModifie({...planningOriginal})\r\n            setHistoriqueModi([])\r\n\r\n        } catch (error) {\r\n            console.error('⚠️ Erreur lors de l\\'envoi:', error)\r\n            onError?.(`⚠️ Erreur lors de l'envoi: ${error.message}`)\r\n        } finally {\r\n            setEnvoiEnCours(false)\r\n        }\r\n    }\r\n\r\n    // Génération du calendrier 5 jours ouvrés\r\n    const genererCalendrierComplet = () => {\r\n        const annee = currentDate.getFullYear()\r\n        const mois = currentDate.getMonth()\r\n        \r\n        const nbJoursMois = new Date(annee, mois + 1, 0).getDate()\r\n        const joursOuvres = []\r\n        \r\n        for (let jour = 1; jour <= nbJoursMois; jour++) {\r\n            const date = new Date(annee, mois, jour, 12, 0, 0, 0)\r\n            const jourSemaine = date.getDay()\r\n            \r\n            if (jourSemaine >= 1 && jourSemaine <= 5) {\r\n                joursOuvres.push(date)\r\n            }\r\n        }\r\n        \r\n        const grille = []\r\n        let indexJour = 0\r\n        \r\n        const nbSemaines = Math.ceil(joursOuvres.length / 5)\r\n        \r\n        for (let semaine = 0; semaine < nbSemaines; semaine++) {\r\n            for (let jourSemaine = 0; jourSemaine < 5; jourSemaine++) {\r\n                if (indexJour < joursOuvres.length) {\r\n                    const date = joursOuvres[indexJour]\r\n                    const jourReel = date.getDay()\r\n                    const jourAttendu = jourSemaine + 1\r\n                    \r\n                    if (jourReel === jourAttendu) {\r\n                        grille.push(date)\r\n                        indexJour++\r\n                    } else {\r\n                        grille.push(null)\r\n                    }\r\n                } else {\r\n                    grille.push(null)\r\n                }\r\n            }\r\n        }\r\n        \r\n        return grille\r\n    }\r\n\r\n    // Vérifier s'il y a des modifications\r\n    const aDesModifications = () => {\r\n        return JSON.stringify(planningOriginal) !== JSON.stringify(planningModifie)\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                minHeight: '400px'\r\n            }}>\r\n                <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement du planning des absences...</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!formateurId || !formateurData) {\r\n        return (\r\n            <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                minHeight: '400px',\r\n                backgroundColor: '#f8fafc',\r\n                borderRadius: '12px'\r\n            }}>\r\n                <div style={{ color: '#6b7280', fontSize: '16px' }}>Aucun formateur sélectionné</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const nomMois = currentDate.toLocaleDateString('fr-FR', { month: 'long', year: 'numeric' })\r\n    const casesCalendrier = genererCalendrierComplet()\r\n\r\n    return (\r\n        <div style={{ \r\n            padding: '20px', \r\n            fontFamily: 'system-ui',\r\n            maxWidth: '100%'\r\n        }}>\r\n            {/* Modal pour message facultatif */}\r\n            {showMessageModal && (\r\n                <div style={{\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    backgroundColor: 'rgba(0,0,0,0.5)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    zIndex: 1000\r\n                }}>\r\n                    <div style={{\r\n                        backgroundColor: 'white',\r\n                        borderRadius: '15px',\r\n                        padding: '25px',\r\n                        maxWidth: '500px',\r\n                        width: '90%'\r\n                    }}>\r\n                        <h3 style={{ \r\n                            margin: '0 0 15px 0', \r\n                            fontSize: '18px', \r\n                            color: '#374151',\r\n                            textAlign: 'center'\r\n                        }}>\r\n                            💬 Message facultatif pour {formateurData.prenom}\r\n                        </h3>\r\n                        <p style={{ \r\n                            fontSize: '14px', \r\n                            color: '#6b7280', \r\n                            margin: '0 0 15px 0',\r\n                            textAlign: 'center',\r\n                            lineHeight: '1.4'\r\n                        }}>\r\n                            Souhaitez-vous ajouter un message personnel ?\r\n                            <br />\r\n                            <em>(ex: \"Je serai en formation\", \"Congés prévus\")</em>\r\n                        </p>\r\n                        <textarea\r\n                            value={messageFacultatif}\r\n                            onChange={(e) => setMessageFacultatif(e.target.value)}\r\n                            placeholder=\"Votre message (optionnel)...\"\r\n                            rows={4}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '12px',\r\n                                border: '2px solid #e5e7eb',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                resize: 'vertical',\r\n                                boxSizing: 'border-box',\r\n                                marginBottom: '20px'\r\n                            }}\r\n                        />\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                onClick={() => setShowMessageModal(false)}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    padding: '12px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: 'bold',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                            <button\r\n                                onClick={handleValidationFinale}\r\n                                disabled={envoiEnCours}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    backgroundColor: envoiEnCours ? '#9ca3af' : '#10b981',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    padding: '12px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: 'bold',\r\n                                    cursor: envoiEnCours ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                {envoiEnCours ? 'Envoi...' : 'Valider'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* En-tête */}\r\n            <div style={{ marginBottom: '20px' }}>\r\n                <h2 style={{ \r\n                    margin: '0 0 8px 0', \r\n                    fontSize: '20px', \r\n                    fontWeight: 'bold',\r\n                    color: '#374151'\r\n                }}>\r\n                    🚫 Absences - {formateurData.prenom} {formateurData.nom}\r\n                </h2>\r\n                <p style={{ \r\n                    fontSize: '14px', \r\n                    color: '#6b7280',\r\n                    margin: '0'\r\n                }}>\r\n                    Déclarer les absences et disponibilités exceptionnelles\r\n                </p>\r\n            </div>\r\n\r\n            {/* Layout desktop - 2 colonnes */}\r\n            <div style={{ display: 'grid', gridTemplateColumns: '300px 1fr', gap: '20px' }}>\r\n                \r\n                {/* Colonne gauche - Contrôles */}\r\n                <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>\r\n                    \r\n                    {/* Modes de sélection */}\r\n                    <div style={{\r\n                        backgroundColor: '#f9fafb',\r\n                        padding: '16px',\r\n                        borderRadius: '12px',\r\n                        border: '2px solid #e5e7eb'\r\n                    }}>\r\n                        <h4 style={{ \r\n                            fontSize: '14px', \r\n                            fontWeight: 'bold', \r\n                            marginBottom: '12px', \r\n                            color: '#374151' \r\n                        }}>\r\n                            🎯 Choisir un mode\r\n                        </h4>\r\n                        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\r\n                            <button\r\n                                onClick={() => setModeSelection('absent')}\r\n                                style={{\r\n                                    padding: '12px',\r\n                                    borderRadius: '8px',\r\n                                    border: modeSelection === 'absent' ? '3px solid #fbbf24' : '2px solid #ef4444',\r\n                                    backgroundColor: '#ef4444',\r\n                                    color: 'white',\r\n                                    fontWeight: 'bold',\r\n                                    fontSize: '14px',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                🔴 ABSENT\r\n                            </button>\r\n                            \r\n                            <button\r\n                                onClick={() => setModeSelection('dispo')}\r\n                                style={{\r\n                                    padding: '12px',\r\n                                    borderRadius: '8px',\r\n                                    border: modeSelection === 'dispo' ? '3px solid #fbbf24' : '2px solid #f59e0b',\r\n                                    backgroundColor: '#f59e0b',\r\n                                    color: 'white',\r\n                                    fontWeight: 'bold',\r\n                                    fontSize: '14px',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                🟡 DISPO EXCEPT.\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Actions */}\r\n                    <div style={{\r\n                        backgroundColor: '#f9fafb',\r\n                        padding: '16px',\r\n                        borderRadius: '12px',\r\n                        border: '2px solid #e5e7eb'\r\n                    }}>\r\n                        <h4 style={{ \r\n                            fontSize: '14px', \r\n                            fontWeight: 'bold', \r\n                            marginBottom: '12px', \r\n                            color: '#374151' \r\n                        }}>\r\n                            ⚡ Actions rapides\r\n                        </h4>\r\n                        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\r\n                            <button\r\n                                onClick={annulerDerniereAction}\r\n                                disabled={historiqueModi.length === 0}\r\n                                style={{\r\n                                    padding: '10px',\r\n                                    backgroundColor: historiqueModi.length === 0 ? '#f3f4f6' : '#6b7280',\r\n                                    color: historiqueModi.length === 0 ? '#9ca3af' : 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '6px',\r\n                                    fontWeight: 'bold',\r\n                                    fontSize: '12px',\r\n                                    cursor: historiqueModi.length === 0 ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                ↶ ANNULER\r\n                            </button>\r\n                            \r\n                            <button\r\n                                onClick={effacerTout}\r\n                                disabled={!aDesModifications()}\r\n                                style={{\r\n                                    padding: '10px',\r\n                                    backgroundColor: !aDesModifications() ? '#f3f4f6' : '#dc2626',\r\n                                    color: !aDesModifications() ? '#9ca3af' : 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '6px',\r\n                                    fontWeight: 'bold',\r\n                                    fontSize: '12px',\r\n                                    cursor: !aDesModifications() ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                🗑️ EFFACER TOUT\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Compteur modifications */}\r\n                    {aDesModifications() && (\r\n                        <div style={{\r\n                            backgroundColor: '#fef3c7',\r\n                            padding: '12px',\r\n                            borderRadius: '8px',\r\n                            textAlign: 'center',\r\n                            color: '#92400e',\r\n                            fontWeight: 'bold',\r\n                            fontSize: '14px',\r\n                            border: '2px solid #f59e0b'\r\n                        }}>\r\n                            📊 {Object.keys(planningModifie).filter(date => \r\n                                planningModifie[date] !== planningOriginal[date]\r\n                            ).length} modification(s)\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Bouton validation */}\r\n                    {aDesModifications() && (\r\n                        <button\r\n                            onClick={handleValider}\r\n                            disabled={envoiEnCours}\r\n                            style={{\r\n                                width: '100%',\r\n                                backgroundColor: envoiEnCours ? '#9ca3af' : '#10b981',\r\n                                color: 'white',\r\n                                padding: '14px',\r\n                                borderRadius: '8px',\r\n                                fontWeight: 'bold',\r\n                                fontSize: '14px',\r\n                                border: 'none',\r\n                                cursor: envoiEnCours ? 'not-allowed' : 'pointer'\r\n                            }}\r\n                        >\r\n                            {envoiEnCours ? '📤 Envoi...' : '✅ Valider les modifications'}\r\n                        </button>\r\n                    )}\r\n                </div>\r\n\r\n                {/* Colonne droite - Calendrier */}\r\n                <div style={{\r\n                    backgroundColor: '#ffffff',\r\n                    padding: '20px',\r\n                    borderRadius: '12px',\r\n                    border: '2px solid #e5e7eb'\r\n                }}>\r\n                    \r\n                    {/* Navigation mensuelle */}\r\n                    <div style={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'space-between',\r\n                        marginBottom: '20px'\r\n                    }}>\r\n                        <button \r\n                            onClick={() => changerMois(-1)}\r\n                            style={{\r\n                                width: '40px',\r\n                                height: '40px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                fontSize: '18px',\r\n                                fontWeight: 'bold',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            ←\r\n                        </button>\r\n                        \r\n                        <h3 style={{\r\n                            fontSize: '18px',\r\n                            fontWeight: 'bold',\r\n                            textTransform: 'capitalize',\r\n                            margin: 0,\r\n                            color: '#1e40af'\r\n                        }}>\r\n                            {nomMois}\r\n                        </h3>\r\n                        \r\n                        <button \r\n                            onClick={() => changerMois(1)}\r\n                            style={{\r\n                                width: '40px',\r\n                                height: '40px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                fontSize: '18px',\r\n                                fontWeight: 'bold',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            →\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* En-têtes des jours */}\r\n                    <div style={{\r\n                        display: 'grid',\r\n                        gridTemplateColumns: 'repeat(5, 1fr)',\r\n                        gap: '8px',\r\n                        marginBottom: '12px'\r\n                    }}>\r\n                        {['Lun', 'Mar', 'Mer', 'Jeu', 'Ven'].map(jour => (\r\n                            <div key={jour} style={{\r\n                                textAlign: 'center',\r\n                                fontWeight: 'bold',\r\n                                fontSize: '12px',\r\n                                color: '#6b7280',\r\n                                padding: '8px'\r\n                            }}>\r\n                                {jour}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n\r\n                    {/* Grille du calendrier */}\r\n                    <div style={{\r\n                        display: 'grid',\r\n                        gridTemplateColumns: 'repeat(5, 1fr)',\r\n                        gap: '8px'\r\n                    }}>\r\n                        {casesCalendrier.map((date, index) => {\r\n                            if (!date) {\r\n                                return <div key={`empty-${index}`} style={{ height: '50px' }}></div>\r\n                            }\r\n\r\n                            const dateStr = date.toISOString().split('T')[0]\r\n                            const statut = planningModifie[dateStr] || 'libre'\r\n                            const details = getStatutDetails(statut)\r\n                            const estAujourdhui = date.toDateString() === new Date().toDateString()\r\n                            const estModifie = planningModifie[dateStr] !== planningOriginal[dateStr]\r\n                            const numeroJour = date.getDate()\r\n                            \r\n                            return (\r\n                                <div\r\n                                    key={date.getTime()}\r\n                                    style={{\r\n                                        height: '50px',\r\n                                        borderRadius: '8px',\r\n                                        display: 'flex',\r\n                                        flexDirection: 'column',\r\n                                        alignItems: 'center',\r\n                                        justifyContent: 'center',\r\n                                        fontWeight: 'bold',\r\n                                        fontSize: '14px',\r\n                                        backgroundColor: details.backgroundColor,\r\n                                        color: details.color,\r\n                                        border: estAujourdhui ? '3px solid #fbbf24' : \r\n                                               estModifie ? '2px solid #10b981' : '1px solid rgba(0,0,0,0.1)',\r\n                                        cursor: 'pointer',\r\n                                        position: 'relative',\r\n                                        transition: 'all 0.2s'\r\n                                    }}\r\n                                    onClick={() => {\r\n                                        if (modeSelection === 'annuler_case') {\r\n                                            annulerModificationCase(date)\r\n                                        } else {\r\n                                            gererClicCase(date)\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    <span style={{ fontSize: '16px' }}>{numeroJour}</span>\r\n                                    {details.label && (\r\n                                        <span style={{ fontSize: '8px', marginTop: '1px' }}>{details.label}</span>\r\n                                    )}\r\n                                    {/* Indicateur de modification */}\r\n                                    {estModifie && (\r\n                                        <div style={{\r\n                                            position: 'absolute',\r\n                                            top: '2px',\r\n                                            right: '2px',\r\n                                            width: '6px',\r\n                                            height: '6px',\r\n                                            backgroundColor: '#10b981',\r\n                                            borderRadius: '50%'\r\n                                        }}></div>\r\n                                    )}\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}",
          "taille": 42436,
          "lignes": 975,
          "dateModif": "2025-08-17T06:57:52.030Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "components/assistance/MonPlanningHebdo.jsx",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { supabase } from '../../lib/supabaseClient'\r\n\r\nexport default function MonPlanningHebdo({ \r\n    formateurId,\r\n    formateurData,\r\n    onError \r\n}) {\r\n    const [planningType, setPlanningType] = useState([])\r\n    const [absencesValidees, setAbsencesValidees] = useState([])\r\n    const [planningCoordo, setPlanningCoordo] = useState([])\r\n    const [planningFinal, setPlanningFinal] = useState([])\r\n    const [lieux, setLieux] = useState([])\r\n    const [currentWeek, setCurrentWeek] = useState(new Date())\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    const jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi']\r\n    const creneaux = ['Matin', 'AM']\r\n\r\n    useEffect(() => {\r\n        if (formateurId) {\r\n            loadPlanningData()\r\n        }\r\n    }, [formateurId, currentWeek])\r\n\r\n    const loadPlanningData = async () => {\r\n        if (!formateurId) return\r\n        \r\n        try {\r\n            setIsLoading(true)\r\n            console.log('🔍 Chargement planning hebdomadaire pour:', formateurData?.prenom, formateurData?.nom)\r\n\r\n            // Charger les lieux\r\n            const { data: lieuxData, error: lieuxError } = await supabase\r\n                .from('lieux')\r\n                .select('id, nom, couleur, initiale')\r\n                .eq('archive', false)\r\n\r\n            if (lieuxError) throw lieuxError\r\n            setLieux(lieuxData || [])\r\n\r\n            // 1. Charger SEULEMENT le planning type NORMAL validé\r\n            const { data: planningTypeData, error: planningTypeError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .select(`\r\n                    id,\r\n                    jour,\r\n                    creneau,\r\n                    statut,\r\n                    lieu_id,\r\n                    valide,\r\n                    created_at\r\n                `)\r\n                .eq('formateur_id', formateurId)\r\n                .eq('valide', true)\r\n                .eq('statut', 'disponible')  // Filtre SEULEMENT les dispo normales\r\n\r\n            if (planningTypeError) throw planningTypeError\r\n            setPlanningType(planningTypeData || [])\r\n            console.log('📋 Planning type NORMAL chargé:', planningTypeData?.length || 0, 'créneaux')\r\n\r\n            // 2. Charger les absences/modifications validées pour cette semaine\r\n            const weekDates = getWeekDates(currentWeek)\r\n            const startDate = weekDates[0].toISOString().split('T')[0]\r\n            const endDate = weekDates[4].toISOString().split('T')[0]\r\n\r\n            console.log('📅 Recherche absences pour la période:', startDate, 'à', endDate)\r\n\r\n            const { data: absencesData, error: absencesError } = await supabase\r\n                .from('absences_formateurs')\r\n                .select(`\r\n                    id,\r\n                    date_debut,\r\n                    date_fin,\r\n                    type,\r\n                    statut,\r\n                    motif,\r\n                    created_at\r\n                `)\r\n                .eq('formateur_id', formateurId)\r\n                .eq('statut', 'validé')\r\n                .gte('date_debut', startDate)\r\n                .lte('date_fin', endDate)\r\n\r\n            if (absencesError) throw absencesError\r\n            setAbsencesValidees(absencesData || [])\r\n            console.log('🚫 Absences validées chargées:', absencesData?.length || 0)\r\n\r\n            // 3. Charger le planning coordo avec filtrage pour ce formateur\r\n            console.log('🔧 Chargement planning coordo pour formateur:', formateurId)\r\n            \r\n            const { data: planningCoordoData, error: coordoError } = await supabase\r\n                .from('planning_hebdomadaire')\r\n                .select(`\r\n                    id,\r\n                    date,\r\n                    jour,\r\n                    creneau,\r\n                    lieu_id,\r\n                    formateurs_ids,\r\n                    created_at\r\n                `)\r\n                .gte('date', startDate)\r\n                .lte('date', endDate)\r\n                .order('created_at', { ascending: false }) // Plus récent en premier\r\n\r\n            if (coordoError) throw coordoError\r\n            \r\n            // Filtrage côté client pour ce formateur spécifique\r\n            const planningCoordoFormateur = (planningCoordoData || []).filter(pc => {\r\n                const estAffecte = pc.formateurs_ids && pc.formateurs_ids.includes(formateurId)\r\n                console.log('🔧 Planning coordo:', pc.jour, pc.creneau, 'formateurs:', pc.formateurs_ids, 'affecté?', estAffecte)\r\n                return estAffecte\r\n            })\r\n\r\n            setPlanningCoordo(planningCoordoFormateur)\r\n            console.log('👨‍💼 Planning coordo chargé:', planningCoordoFormateur?.length || 0, 'affectations')\r\n\r\n            // 4. ARBITRAGE : Construire le planning final avec priorités\r\n            const planningArbitre = construirePlanningArbitre(\r\n                planningTypeData || [], \r\n                absencesData || [], \r\n                planningCoordoFormateur || [], \r\n                weekDates\r\n            )\r\n            \r\n            setPlanningFinal(planningArbitre)\r\n            console.log('⚖️ Planning final après arbitrage:', planningArbitre.length, 'créneaux')\r\n\r\n        } catch (error) {\r\n            console.error('Erreur chargement planning:', error)\r\n            onError?.(`Erreur chargement: ${error.message}`)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Fonction d'arbitrage - LOGIQUE DE PRIORITÉ PROFESSIONNELLE\r\n    const construirePlanningArbitre = (planningType, absences, planningCoordo, weekDates) => {\r\n        const planningFinal = []\r\n\r\n        console.log('🎯 DÉBUT ARBITRAGE - LOGIQUE DE PRIORITÉ PROFESSIONNELLE')\r\n        console.log('🔧 Données planning coordo disponibles:', planningCoordo)\r\n\r\n        for (const jour of jours) {\r\n            for (const creneau of creneaux) {\r\n                console.log(`\\n🔍 Arbitrage ${jour} ${creneau}:`)\r\n\r\n                // Vérifier d'abord les absences validées pour ce jour\r\n                const dateJour = weekDates[jours.indexOf(jour)]\r\n                const dateString = dateJour.toISOString().split('T')[0]\r\n                \r\n                console.log(`📅 Date recherchée: ${dateString}`)\r\n                \r\n                const absenceJour = absences.find(abs => {\r\n                    const debut = new Date(abs.date_debut)\r\n                    const fin = new Date(abs.date_fin)\r\n                    const current = new Date(dateString)\r\n                    \r\n                    console.log(`🔧 Vérification absence: ${abs.date_debut} - ${abs.date_fin} (type: ${abs.type})`)\r\n                    \r\n                    return current >= debut && current <= fin\r\n                })\r\n\r\n                if (absenceJour) {\r\n                    console.log(`✅ Absence trouvée pour ${jour}:`, absenceJour.type)\r\n                }\r\n\r\n                // PRIORITÉ 1 : Disponibilité exceptionnelle validée (PRIORITÉ ABSOLUE)\r\n                if (absenceJour && absenceJour.type === 'formation') {\r\n                    console.log(`🟡 ÉTAT 1 - DISPONIBILITÉ EXCEPTIONNELLE (VALIDÉE): priorité absolue !`)\r\n                    planningFinal.push({\r\n                        jour,\r\n                        creneau,\r\n                        lieu_id: null,\r\n                        statut: 'dispo_except',\r\n                        source: 'disponibilite_exceptionnelle',\r\n                        priorite: 1,\r\n                        type_absence: absenceJour.type\r\n                    })\r\n                    continue\r\n                }\r\n\r\n                // PRIORITÉ 2 : Absence validée (INDISPONIBLE)\r\n                if (absenceJour && absenceJour.type !== 'formation') {\r\n                    console.log(`🔴 ÉTAT 2 - ABSENT VALIDÉ (INDISPONIBLE):`, absenceJour.type)\r\n                    console.log(`🔧 ABSENCE GAGNE - Même si affecté par coordo, l'absence prime !`)\r\n                    planningFinal.push({\r\n                        jour,\r\n                        creneau,\r\n                        lieu_id: null,\r\n                        statut: 'absent',\r\n                        source: 'absence_validee',\r\n                        priorite: 2,\r\n                        type_absence: absenceJour.type\r\n                    })\r\n                    continue\r\n                }\r\n\r\n                // PRIORITÉ 3 : Planning coordo (SEULEMENT si pas d'absence)\r\n                const affectationCoordo = planningCoordo.find(pc => {\r\n                    const jourMatch = pc.jour === jour\r\n                    const creneauDB = creneau === 'Matin' ? 'matin' : 'AM'\r\n                    const creneauMatch = pc.creneau === creneauDB\r\n                    \r\n                    console.log(`🔧 Vérification planning coordo: ${pc.jour}==${jour}? ${jourMatch}, ${pc.creneau}==${creneauDB}? ${creneauMatch}`)\r\n                    \r\n                    return jourMatch && creneauMatch\r\n                })\r\n\r\n                if (affectationCoordo) {\r\n                    console.log(`🔵 ÉTAT 3 - AFFECTÉ PAR COORDO (TRAVAILLE):`, affectationCoordo.lieu_id)\r\n                    planningFinal.push({\r\n                        jour,\r\n                        creneau,\r\n                        lieu_id: affectationCoordo.lieu_id,\r\n                        statut: 'affecte_coordo',\r\n                        source: 'planning_coordo',\r\n                        priorite: 3\r\n                    })\r\n                    continue\r\n                }\r\n\r\n                // PRIORITÉ 4 : Planning type NORMAL → DISPONIBLE MAIS PAS CHOISI\r\n                const creneauType = planningType.find(pt => \r\n                    pt.jour === jour && pt.creneau === creneau\r\n                )\r\n\r\n                if (creneauType) {\r\n                    console.log(`⬜ ÉTAT 4 - DISPONIBLE MAIS PAS CHOISI (EN ATTENTE):`, creneauType.lieu_id || 'Sans préférence')\r\n                    planningFinal.push({\r\n                        jour,\r\n                        creneau,\r\n                        lieu_id: creneauType.lieu_id,\r\n                        statut: 'disponible_non_choisi',\r\n                        source: 'planning_type',\r\n                        priorite: 4\r\n                    })\r\n                    continue\r\n                }\r\n\r\n                console.log(`⭕ ÉTAT 5 - PAS DISPONIBLE (pas de planning type)`)\r\n                // Ne rien ajouter = case vide normale\r\n            }\r\n        }\r\n\r\n        console.log('🎯 FIN ARBITRAGE - Résultat final:', planningFinal.length, 'créneaux')\r\n        return planningFinal\r\n    }\r\n\r\n    // Fonction pour obtenir les infos d'un créneau\r\n    const getCreneauInfo = (jour, creneau) => {\r\n        return planningFinal.find(pf => pf.jour === jour && pf.creneau === creneau)\r\n    }\r\n\r\n    // Fonction pour obtenir la couleur d'un lieu\r\n    const getLieuCouleur = (lieuId) => {\r\n        if (!lieuId) return '#6b7280' // Gris pour \"Sans préférence\"\r\n        const lieu = lieux.find(l => l.id === lieuId)\r\n        return lieu?.couleur || '#6b7280'\r\n    }\r\n\r\n    // Fonction pour obtenir le nom d'un lieu\r\n    const getLieuNom = (lieuId) => {\r\n        if (!lieuId) return 'Sans préférence'\r\n        const lieu = lieux.find(l => l.id === lieuId)\r\n        return lieu?.nom || 'Lieu inconnu'\r\n    }\r\n\r\n    // FONCTION LABELS SELON LOGIQUE PROFESSIONNELLE\r\n    const getStatutLabel = (creneau) => {\r\n        switch (creneau.statut) {\r\n            case 'dispo_except':\r\n                return 'EXCEPT'\r\n            case 'affecte_coordo':\r\n                return 'TRAVAILLE'\r\n            case 'absent':\r\n                return 'ABSENT'\r\n            case 'disponible_non_choisi':\r\n                return 'DISPONIBLE'\r\n            default:\r\n                return 'NORMAL'\r\n        }\r\n    }\r\n\r\n    // FONCTION COULEURS SELON LOGIQUE PROFESSIONNELLE\r\n    const getStatutColor = (creneau) => {\r\n        switch (creneau.statut) {\r\n            case 'dispo_except':\r\n                return '#fbbf24' // JAUNE pour disponibilité exceptionnelle\r\n            case 'affecte_coordo':\r\n                return '#3b82f6' // BLEU pour affectation coordo\r\n            case 'absent':\r\n                return '#ef4444' // ROUGE pour absence\r\n            case 'disponible_non_choisi':\r\n                return '#ffffff' // BLANC avec bordure bleue\r\n            default:\r\n                return '#f3f4f6'\r\n        }\r\n    }\r\n\r\n    // FONCTION BORDURE SELON LOGIQUE PROFESSIONNELLE\r\n    const getBorderColor = (creneau) => {\r\n        switch (creneau.statut) {\r\n            case 'dispo_except':\r\n                return '#fbbf24' // Jaune pour exceptionnelle\r\n            case 'affecte_coordo':\r\n                return getLieuCouleur(creneau.lieu_id) // Couleur du lieu\r\n            case 'absent':\r\n                return '#ef4444' // Rouge\r\n            case 'disponible_non_choisi':\r\n                return '#3b82f6' // BORDURE BLEUE = Disponible\r\n            default:\r\n                return '#d1d5db'\r\n        }\r\n    }\r\n\r\n    // Fonctions pour navigation semaines\r\n    const getWeekDates = (date) => {\r\n        const startOfWeek = new Date(date)\r\n        const day = startOfWeek.getDay()\r\n        const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1) // Lundi = début de semaine\r\n        startOfWeek.setDate(diff)\r\n\r\n        const dates = []\r\n        for (let i = 0; i < 5; i++) { // Lundi à Vendredi\r\n            const currentDate = new Date(startOfWeek)\r\n            currentDate.setDate(startOfWeek.getDate() + i)\r\n            dates.push(currentDate)\r\n        }\r\n        return dates\r\n    }\r\n\r\n    const getWeekNumber = (date) => {\r\n        const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()))\r\n        const dayNum = d.getUTCDay() || 7\r\n        d.setUTCDate(d.getUTCDate() + 4 - dayNum)\r\n        const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1))\r\n        return Math.ceil((((d - yearStart) / 86400000) + 1) / 7)\r\n    }\r\n\r\n    const previousWeek = () => {\r\n        const newWeek = new Date(currentWeek)\r\n        newWeek.setDate(newWeek.getDate() - 7)\r\n        setCurrentWeek(newWeek)\r\n    }\r\n\r\n    const nextWeek = () => {\r\n        const newWeek = new Date(currentWeek)\r\n        newWeek.setDate(newWeek.getDate() + 7)\r\n        setCurrentWeek(newWeek)\r\n    }\r\n\r\n    const goToCurrentWeek = () => {\r\n        setCurrentWeek(new Date())\r\n    }\r\n\r\n    const weekDates = getWeekDates(currentWeek)\r\n    const weekNumber = getWeekNumber(currentWeek)\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                minHeight: '400px'\r\n            }}>\r\n                <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement du planning hebdomadaire...</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!formateurId || !formateurData) {\r\n        return (\r\n            <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                minHeight: '400px',\r\n                backgroundColor: '#f8fafc',\r\n                borderRadius: '12px'\r\n            }}>\r\n                <div style={{ color: '#6b7280', fontSize: '16px' }}>Aucun formateur sélectionné</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            padding: '20px',\r\n            fontFamily: 'system-ui',\r\n            maxWidth: '100%'\r\n        }}>\r\n            {/* En-tête */}\r\n            <div style={{ marginBottom: '20px' }}>\r\n                <h2 style={{ \r\n                    fontSize: '20px', \r\n                    fontWeight: 'bold', \r\n                    margin: '0 0 6px 0',\r\n                    color: '#1f2937'\r\n                }}>\r\n                    📊 Planning Hebdomadaire - {formateurData.prenom} {formateurData.nom}\r\n                </h2>\r\n                <p style={{ \r\n                    fontSize: '14px', \r\n                    color: '#6b7280',\r\n                    margin: '0'\r\n                }}>\r\n                    Semaine {weekNumber} - {weekDates[0].getFullYear()}\r\n                </p>\r\n            </div>\r\n\r\n            {/* Navigation semaines avec flèches */}\r\n            <div style={{\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                marginBottom: '20px',\r\n                padding: '12px 20px',\r\n                backgroundColor: '#f8fafc',\r\n                borderRadius: '12px'\r\n            }}>\r\n                <button\r\n                    onClick={previousWeek}\r\n                    style={{\r\n                        width: '40px',\r\n                        height: '40px',\r\n                        backgroundColor: '#667eea',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '8px',\r\n                        cursor: 'pointer',\r\n                        fontSize: '16px',\r\n                        fontWeight: 'bold',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center'\r\n                    }}\r\n                >\r\n                    ←\r\n                </button>\r\n                \r\n                <button\r\n                    onClick={goToCurrentWeek}\r\n                    style={{\r\n                        padding: '10px 16px',\r\n                        backgroundColor: '#3b82f6',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '8px',\r\n                        cursor: 'pointer',\r\n                        fontSize: '14px',\r\n                        fontWeight: '600'\r\n                    }}\r\n                >\r\n                    Semaine actuelle\r\n                </button>\r\n                \r\n                <button\r\n                    onClick={nextWeek}\r\n                    style={{\r\n                        width: '40px',\r\n                        height: '40px',\r\n                        backgroundColor: '#667eea',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '8px',\r\n                        cursor: 'pointer',\r\n                        fontSize: '16px',\r\n                        fontWeight: 'bold',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center'\r\n                    }}\r\n                >\r\n                    →\r\n                </button>\r\n            </div>\r\n\r\n            {/* Contenu principal */}\r\n            {planningFinal.length === 0 ? (\r\n                // Aucune affectation ET aucune absence ET aucun planning type\r\n                <div style={{\r\n                    padding: '40px 20px',\r\n                    textAlign: 'center',\r\n                    backgroundColor: '#f0f9ff',\r\n                    borderRadius: '12px',\r\n                    border: '2px solid #3b82f6'\r\n                }}>\r\n                    <div style={{ fontSize: '48px', marginBottom: '16px' }}>📋</div>\r\n                    <h3 style={{ \r\n                        fontSize: '18px', \r\n                        fontWeight: 'bold', \r\n                        color: '#1e40af',\r\n                        margin: '0 0 12px 0'\r\n                    }}>\r\n                        Aucun planning configuré\r\n                    </h3>\r\n                    <p style={{ \r\n                        fontSize: '14px', \r\n                        color: '#1e40af',\r\n                        margin: '0',\r\n                        lineHeight: '1.5'\r\n                    }}>\r\n                        Ce formateur n'a pas encore de planning type déclaré ou validé.\r\n                    </p>\r\n                </div>\r\n            ) : (\r\n                // Planning disponible - Layout desktop\r\n                <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr', gap: '20px' }}>\r\n                    \r\n                    {/* Colonne gauche - Grille planning */}\r\n                    <div style={{\r\n                        backgroundColor: '#f9fafb',\r\n                        borderRadius: '12px',\r\n                        padding: '16px'\r\n                    }}>\r\n                        <table style={{ \r\n                            width: '100%', \r\n                            borderCollapse: 'separate',\r\n                            borderSpacing: '8px'\r\n                        }}>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th style={{ \r\n                                        padding: '8px 4px',\r\n                                        fontSize: '12px',\r\n                                        fontWeight: '600',\r\n                                        color: '#6b7280',\r\n                                        textAlign: 'center',\r\n                                        width: '80px'\r\n                                    }}>\r\n                                        &nbsp;\r\n                                    </th>\r\n                                    {jours.map((jour, index) => (\r\n                                        <th key={jour} style={{ \r\n                                            padding: '4px',\r\n                                            fontSize: '11px',\r\n                                            fontWeight: '600',\r\n                                            color: '#6b7280',\r\n                                            textAlign: 'center',\r\n                                            lineHeight: '1.2'\r\n                                        }}>\r\n                                            <div>{jour.substring(0, 3)}</div>\r\n                                            <div style={{ \r\n                                                fontSize: '10px', \r\n                                                color: '#374151',\r\n                                                marginTop: '2px'\r\n                                            }}>\r\n                                                {weekDates[index].getDate()}/{(weekDates[index].getMonth() + 1).toString().padStart(2, '0')}\r\n                                            </div>\r\n                                        </th>\r\n                                    ))}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {creneaux.map(creneau => (\r\n                                    <tr key={creneau}>\r\n                                        <td style={{ \r\n                                            padding: '8px 4px',\r\n                                            fontSize: '11px',\r\n                                            fontWeight: '600',\r\n                                            color: '#374151',\r\n                                            textAlign: 'center',\r\n                                            backgroundColor: creneau === 'Matin' ? '#fef3c7' : '#dbeafe',\r\n                                            borderRadius: '6px'\r\n                                        }}>\r\n                                            {creneau === 'Matin' ? 'M' : 'AM'}\r\n                                        </td>\r\n                                        {jours.map(jour => {\r\n                                            const creneauInfo = getCreneauInfo(jour, creneau)\r\n                                            \r\n                                            return (\r\n                                                <td key={`${jour}-${creneau}`} style={{ \r\n                                                    padding: '0',\r\n                                                    textAlign: 'center'\r\n                                                }}>\r\n                                                    <div style={{\r\n                                                        minHeight: '50px',\r\n                                                        backgroundColor: creneauInfo ? \r\n                                                            getStatutColor(creneauInfo) : '#f3f4f6',\r\n                                                        color: creneauInfo ? \r\n                                                            (creneauInfo.statut === 'disponible_non_choisi' ? '#374151' : \r\n                                                             creneauInfo.statut === 'dispo_except' ? '#92400e' : 'white') : '#d1d5db',\r\n                                                        borderRadius: '8px',\r\n                                                        display: 'flex',\r\n                                                        alignItems: 'center',\r\n                                                        justifyContent: 'center',\r\n                                                        padding: '4px',\r\n                                                        border: creneauInfo ? \r\n                                                            `3px solid ${getBorderColor(creneauInfo)}` : \r\n                                                            '3px solid #d1d5db',\r\n                                                        position: 'relative'\r\n                                                    }}>\r\n                                                        {creneauInfo ? (\r\n                                                            creneauInfo.statut === 'absent' ? (\r\n                                                                <div style={{ \r\n                                                                    fontSize: '16px',\r\n                                                                    fontWeight: 'bold',\r\n                                                                    textAlign: 'center',\r\n                                                                    color: 'white'\r\n                                                                }}>\r\n                                                                    ✗\r\n                                                                </div>\r\n                                                            ) : creneauInfo.statut === 'dispo_except' ? (\r\n                                                                <div style={{ \r\n                                                                    fontSize: '9px',\r\n                                                                    fontWeight: 'bold',\r\n                                                                    textAlign: 'center',\r\n                                                                    lineHeight: '1.2',\r\n                                                                    color: '#92400e'\r\n                                                                }}>\r\n                                                                    EXCEPT\r\n                                                                </div>\r\n                                                            ) : creneauInfo.statut === 'affecte_coordo' ? (\r\n                                                                <div style={{ \r\n                                                                    fontSize: '10px',\r\n                                                                    fontWeight: 'bold',\r\n                                                                    textAlign: 'center',\r\n                                                                    lineHeight: '1.2',\r\n                                                                    color: 'white'\r\n                                                                }}>\r\n                                                                    {lieux.find(l => l.id === creneauInfo.lieu_id)?.initiale || 'S/P'}\r\n                                                                </div>\r\n                                                            ) : creneauInfo.statut === 'disponible_non_choisi' ? (\r\n                                                                <div style={{ \r\n                                                                    fontSize: '8px',\r\n                                                                    fontWeight: 'bold',\r\n                                                                    textAlign: 'center',\r\n                                                                    lineHeight: '1.2',\r\n                                                                    color: '#3b82f6'\r\n                                                                }}>\r\n                                                                    DISPO\r\n                                                                </div>\r\n                                                            ) : (\r\n                                                                <div style={{ \r\n                                                                    fontSize: '10px',\r\n                                                                    fontWeight: 'bold',\r\n                                                                    textAlign: 'center',\r\n                                                                    lineHeight: '1.2'\r\n                                                                }}>\r\n                                                                    {lieux.find(l => l.id === creneauInfo.lieu_id)?.initiale || 'S/P'}\r\n                                                                </div>\r\n                                                            )\r\n                                                        ) : (\r\n                                                            <div style={{ \r\n                                                                fontSize: '14px',\r\n                                                                color: '#d1d5db'\r\n                                                            }}>\r\n                                                                -\r\n                                                            </div>\r\n                                                        )}\r\n                                                    </div>\r\n                                                </td>\r\n                                            )\r\n                                        })}\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    {/* Colonne droite - Détails des interventions */}\r\n                    <div style={{\r\n                        backgroundColor: '#f8fafc',\r\n                        padding: '16px',\r\n                        borderRadius: '12px'\r\n                    }}>\r\n                        <h4 style={{ \r\n                            fontSize: '14px', \r\n                            fontWeight: '600', \r\n                            color: '#374151',\r\n                            margin: '0 0 12px 0'\r\n                        }}>\r\n                            📅 Planning cette semaine\r\n                        </h4>\r\n                        <div style={{ \r\n                            display: 'flex', \r\n                            flexDirection: 'column', \r\n                            gap: '6px',\r\n                            maxHeight: '400px',\r\n                            overflowY: 'auto'\r\n                        }}>\r\n                            {planningFinal.map((creneau, index) => (\r\n                                <div key={index} style={{\r\n                                    display: 'flex',\r\n                                    justifyContent: 'space-between',\r\n                                    alignItems: 'center',\r\n                                    padding: '12px',\r\n                                    backgroundColor: creneau.statut === 'dispo_except' ? '#fffbeb' :\r\n                                                     creneau.statut === 'affecte_coordo' ? '#eff6ff' : \r\n                                                     creneau.statut === 'absent' ? '#fef2f2' :\r\n                                                     creneau.statut === 'disponible_non_choisi' ? '#f0f9ff' : '#eff6ff',\r\n                                    borderRadius: '8px',\r\n                                    border: `2px solid ${getBorderColor(creneau)}`,\r\n                                    fontSize: '13px'\r\n                                }}>\r\n                                    <div style={{ \r\n                                        fontWeight: '600', \r\n                                        color: creneau.statut === 'dispo_except' ? '#92400e' :\r\n                                               creneau.statut === 'affecte_coordo' ? '#1e40af' :\r\n                                               creneau.statut === 'absent' ? '#991b1b' :\r\n                                               creneau.statut === 'disponible_non_choisi' ? '#3b82f6' : '#1e40af'\r\n                                    }}>\r\n                                        {creneau.jour} {creneau.creneau}\r\n                                    </div>\r\n                                    <div style={{ \r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        gap: '8px'\r\n                                    }}>\r\n                                        <div style={{\r\n                                            width: '14px',\r\n                                            height: '14px',\r\n                                            backgroundColor: getLieuCouleur(creneau.lieu_id),\r\n                                            borderRadius: '3px'\r\n                                        }} />\r\n                                        <span style={{ \r\n                                            color: '#6b7280',\r\n                                            fontSize: '12px'\r\n                                        }}>\r\n                                            {getLieuNom(creneau.lieu_id)}\r\n                                        </span>\r\n                                        <span style={{\r\n                                            fontSize: '10px',\r\n                                            fontWeight: '600',\r\n                                            padding: '2px 6px',\r\n                                            borderRadius: '4px',\r\n                                            backgroundColor: getStatutColor(creneau),\r\n                                            color: creneau.statut === 'disponible_non_choisi' ? '#3b82f6' : \r\n                                                   creneau.statut === 'dispo_except' ? '#92400e' : 'white',\r\n                                            border: creneau.statut === 'disponible_non_choisi' ? '1px solid #3b82f6' : 'none'\r\n                                        }}>\r\n                                            {getStatutLabel(creneau)}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}",
          "taille": 35472,
          "lignes": 746,
          "dateModif": "2025-08-28T19:00:40.090Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { supabase } from '../../lib/supabaseClient'\r\n\r\nexport default function MonPlanningHebdo({ \r\n    formateurId,\r\n    formateurData,\r\n    onError \r\n}) {\r\n    const [planningType, setPlanningType] = useState([])\r\n    const [absencesValidees, setAbsencesValidees] = useState([])\r\n    const [planningCoordo, setPlanningCoordo] = useState([])\r\n    const [planningFinal, setPlanningFinal] = useState([])\r\n    const [lieux, setLieux] = useState([])\r\n    const [currentWeek, setCurrentWeek] = useState(new Date())\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    const jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi']\r\n    const creneaux = ['Matin', 'AM']\r\n\r\n    useEffect(() => {\r\n        if (formateurId) {\r\n            loadPlanningData()\r\n        }\r\n    }, [formateurId, currentWeek])\r\n\r\n    const loadPlanningData = async () => {\r\n        if (!formateurId) return\r\n        \r\n        try {\r\n            setIsLoading(true)\r\n            console.log('🔍 Chargement planning hebdomadaire pour:', formateurData?.prenom, formateurData?.nom)\r\n\r\n            // Charger les lieux\r\n            const { data: lieuxData, error: lieuxError } = await supabase\r\n                .from('lieux')\r\n                .select('id, nom, couleur, initiale')\r\n                .eq('archive', false)\r\n\r\n            if (lieuxError) throw lieuxError\r\n            setLieux(lieuxData || [])\r\n\r\n            // 1. Charger SEULEMENT le planning type NORMAL validé\r\n            const { data: planningTypeData, error: planningTypeError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .select(`\r\n                    id,\r\n                    jour,\r\n                    creneau,\r\n                    statut,\r\n                    lieu_id,\r\n                    valide,\r\n                    created_at\r\n                `)\r\n                .eq('formateur_id', formateurId)\r\n                .eq('valide', true)\r\n                .eq('statut', 'disponible')  // Filtre SEULEMENT les dispo normales\r\n\r\n            if (planningTypeError) throw planningTypeError\r\n            setPlanningType(planningTypeData || [])\r\n            console.log('📋 Planning type NORMAL chargé:', planningTypeData?.length || 0, 'créneaux')\r\n\r\n            // 2. Charger les absences/modifications validées pour cette semaine\r\n            const weekDates = getWeekDates(currentWeek)\r\n            const startDate = weekDates[0].toISOString().split('T')[0]\r\n            const endDate = weekDates[4].toISOString().split('T')[0]\r\n\r\n            console.log('📅 Recherche absences pour la période:', startDate, 'à', endDate)\r\n\r\n            const { data: absencesData, error: absencesError } = await supabase\r\n                .from('absences_formateurs')\r\n                .select(`\r\n                    id,\r\n                    date_debut,\r\n                    date_fin,\r\n                    type,\r\n                    statut,\r\n                    motif,\r\n                    created_at\r\n                `)\r\n                .eq('formateur_id', formateurId)\r\n                .eq('statut', 'validé')\r\n                .gte('date_debut', startDate)\r\n                .lte('date_fin', endDate)\r\n\r\n            if (absencesError) throw absencesError\r\n            setAbsencesValidees(absencesData || [])\r\n            console.log('🚫 Absences validées chargées:', absencesData?.length || 0)\r\n\r\n            // 3. Charger le planning coordo avec filtrage pour ce formateur\r\n            console.log('🔧 Chargement planning coordo pour formateur:', formateurId)\r\n            \r\n            const { data: planningCoordoData, error: coordoError } = await supabase\r\n                .from('planning_hebdomadaire')\r\n                .select(`\r\n                    id,\r\n                    date,\r\n                    jour,\r\n                    creneau,\r\n                    lieu_id,\r\n                    formateurs_ids,\r\n                    created_at\r\n                `)\r\n                .gte('date', startDate)\r\n                .lte('date', endDate)\r\n                .order('created_at', { ascending: false }) // Plus récent en premier\r\n\r\n            if (coordoError) throw coordoError\r\n            \r\n            // Filtrage côté client pour ce formateur spécifique\r\n            const planningCoordoFormateur = (planningCoordoData || []).filter(pc => {\r\n                const estAffecte = pc.formateurs_ids && pc.formateurs_ids.includes(formateurId)\r\n                console.log('🔧 Planning coordo:', pc.jour, pc.creneau, 'formateurs:', pc.formateurs_ids, 'affecté?', estAffecte)\r\n                return estAffecte\r\n            })\r\n\r\n            setPlanningCoordo(planningCoordoFormateur)\r\n            console.log('👨‍💼 Planning coordo chargé:', planningCoordoFormateur?.length || 0, 'affectations')\r\n\r\n            // 4. ARBITRAGE : Construire le planning final avec priorités\r\n            const planningArbitre = construirePlanningArbitre(\r\n                planningTypeData || [], \r\n                absencesData || [], \r\n                planningCoordoFormateur || [], \r\n                weekDates\r\n            )\r\n            \r\n            setPlanningFinal(planningArbitre)\r\n            console.log('⚖️ Planning final après arbitrage:', planningArbitre.length, 'créneaux')\r\n\r\n        } catch (error) {\r\n            console.error('Erreur chargement planning:', error)\r\n            onError?.(`Erreur chargement: ${error.message}`)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Fonction d'arbitrage - LOGIQUE DE PRIORITÉ PROFESSIONNELLE\r\n    const construirePlanningArbitre = (planningType, absences, planningCoordo, weekDates) => {\r\n        const planningFinal = []\r\n\r\n        console.log('🎯 DÉBUT ARBITRAGE - LOGIQUE DE PRIORITÉ PROFESSIONNELLE')\r\n        console.log('🔧 Données planning coordo disponibles:', planningCoordo)\r\n\r\n        for (const jour of jours) {\r\n            for (const creneau of creneaux) {\r\n                console.log(`\\n🔍 Arbitrage ${jour} ${creneau}:`)\r\n\r\n                // Vérifier d'abord les absences validées pour ce jour\r\n                const dateJour = weekDates[jours.indexOf(jour)]\r\n                const dateString = dateJour.toISOString().split('T')[0]\r\n                \r\n                console.log(`📅 Date recherchée: ${dateString}`)\r\n                \r\n                const absenceJour = absences.find(abs => {\r\n                    const debut = new Date(abs.date_debut)\r\n                    const fin = new Date(abs.date_fin)\r\n                    const current = new Date(dateString)\r\n                    \r\n                    console.log(`🔧 Vérification absence: ${abs.date_debut} - ${abs.date_fin} (type: ${abs.type})`)\r\n                    \r\n                    return current >= debut && current <= fin\r\n                })\r\n\r\n                if (absenceJour) {\r\n                    console.log(`✅ Absence trouvée pour ${jour}:`, absenceJour.type)\r\n                }\r\n\r\n                // PRIORITÉ 1 : Disponibilité exceptionnelle validée (PRIORITÉ ABSOLUE)\r\n                if (absenceJour && absenceJour.type === 'formation') {\r\n                    console.log(`🟡 ÉTAT 1 - DISPONIBILITÉ EXCEPTIONNELLE (VALIDÉE): priorité absolue !`)\r\n                    planningFinal.push({\r\n                        jour,\r\n                        creneau,\r\n                        lieu_id: null,\r\n                        statut: 'dispo_except',\r\n                        source: 'disponibilite_exceptionnelle',\r\n                        priorite: 1,\r\n                        type_absence: absenceJour.type\r\n                    })\r\n                    continue\r\n                }\r\n\r\n                // PRIORITÉ 2 : Absence validée (INDISPONIBLE)\r\n                if (absenceJour && absenceJour.type !== 'formation') {\r\n                    console.log(`🔴 ÉTAT 2 - ABSENT VALIDÉ (INDISPONIBLE):`, absenceJour.type)\r\n                    console.log(`🔧 ABSENCE GAGNE - Même si affecté par coordo, l'absence prime !`)\r\n                    planningFinal.push({\r\n                        jour,\r\n                        creneau,\r\n                        lieu_id: null,\r\n                        statut: 'absent',\r\n                        source: 'absence_validee',\r\n                        priorite: 2,\r\n                        type_absence: absenceJour.type\r\n                    })\r\n                    continue\r\n                }\r\n\r\n                // PRIORITÉ 3 : Planning coordo (SEULEMENT si pas d'absence)\r\n                const affectationCoordo = planningCoordo.find(pc => {\r\n                    const jourMatch = pc.jour === jour\r\n                    const creneauDB = creneau === 'Matin' ? 'matin' : 'AM'\r\n                    const creneauMatch = pc.creneau === creneauDB\r\n                    \r\n                    console.log(`🔧 Vérification planning coordo: ${pc.jour}==${jour}? ${jourMatch}, ${pc.creneau}==${creneauDB}? ${creneauMatch}`)\r\n                    \r\n                    return jourMatch && creneauMatch\r\n                })\r\n\r\n                if (affectationCoordo) {\r\n                    console.log(`🔵 ÉTAT 3 - AFFECTÉ PAR COORDO (TRAVAILLE):`, affectationCoordo.lieu_id)\r\n                    planningFinal.push({\r\n                        jour,\r\n                        creneau,\r\n                        lieu_id: affectationCoordo.lieu_id,\r\n                        statut: 'affecte_coordo',\r\n                        source: 'planning_coordo',\r\n                        priorite: 3\r\n                    })\r\n                    continue\r\n                }\r\n\r\n                // PRIORITÉ 4 : Planning type NORMAL → DISPONIBLE MAIS PAS CHOISI\r\n                const creneauType = planningType.find(pt => \r\n                    pt.jour === jour && pt.creneau === creneau\r\n                )\r\n\r\n                if (creneauType) {\r\n                    console.log(`⬜ ÉTAT 4 - DISPONIBLE MAIS PAS CHOISI (EN ATTENTE):`, creneauType.lieu_id || 'Sans préférence')\r\n                    planningFinal.push({\r\n                        jour,\r\n                        creneau,\r\n                        lieu_id: creneauType.lieu_id,\r\n                        statut: 'disponible_non_choisi',\r\n                        source: 'planning_type',\r\n                        priorite: 4\r\n                    })\r\n                    continue\r\n                }\r\n\r\n                console.log(`⭕ ÉTAT 5 - PAS DISPONIBLE (pas de planning type)`)\r\n                // Ne rien ajouter = case vide normale\r\n            }\r\n        }\r\n\r\n        console.log('🎯 FIN ARBITRAGE - Résultat final:', planningFinal.length, 'créneaux')\r\n        return planningFinal\r\n    }\r\n\r\n    // Fonction pour obtenir les infos d'un créneau\r\n    const getCreneauInfo = (jour, creneau) => {\r\n        return planningFinal.find(pf => pf.jour === jour && pf.creneau === creneau)\r\n    }\r\n\r\n    // Fonction pour obtenir la couleur d'un lieu\r\n    const getLieuCouleur = (lieuId) => {\r\n        if (!lieuId) return '#6b7280' // Gris pour \"Sans préférence\"\r\n        const lieu = lieux.find(l => l.id === lieuId)\r\n        return lieu?.couleur || '#6b7280'\r\n    }\r\n\r\n    // Fonction pour obtenir le nom d'un lieu\r\n    const getLieuNom = (lieuId) => {\r\n        if (!lieuId) return 'Sans préférence'\r\n        const lieu = lieux.find(l => l.id === lieuId)\r\n        return lieu?.nom || 'Lieu inconnu'\r\n    }\r\n\r\n    // FONCTION LABELS SELON LOGIQUE PROFESSIONNELLE\r\n    const getStatutLabel = (creneau) => {\r\n        switch (creneau.statut) {\r\n            case 'dispo_except':\r\n                return 'EXCEPT'\r\n            case 'affecte_coordo':\r\n                return 'TRAVAILLE'\r\n            case 'absent':\r\n                return 'ABSENT'\r\n            case 'disponible_non_choisi':\r\n                return 'DISPONIBLE'\r\n            default:\r\n                return 'NORMAL'\r\n        }\r\n    }\r\n\r\n    // FONCTION COULEURS SELON LOGIQUE PROFESSIONNELLE\r\n    const getStatutColor = (creneau) => {\r\n        switch (creneau.statut) {\r\n            case 'dispo_except':\r\n                return '#fbbf24' // JAUNE pour disponibilité exceptionnelle\r\n            case 'affecte_coordo':\r\n                return '#3b82f6' // BLEU pour affectation coordo\r\n            case 'absent':\r\n                return '#ef4444' // ROUGE pour absence\r\n            case 'disponible_non_choisi':\r\n                return '#ffffff' // BLANC avec bordure bleue\r\n            default:\r\n                return '#f3f4f6'\r\n        }\r\n    }\r\n\r\n    // FONCTION BORDURE SELON LOGIQUE PROFESSIONNELLE\r\n    const getBorderColor = (creneau) => {\r\n        switch (creneau.statut) {\r\n            case 'dispo_except':\r\n                return '#fbbf24' // Jaune pour exceptionnelle\r\n            case 'affecte_coordo':\r\n                return getLieuCouleur(creneau.lieu_id) // Couleur du lieu\r\n            case 'absent':\r\n                return '#ef4444' // Rouge\r\n            case 'disponible_non_choisi':\r\n                return '#3b82f6' // BORDURE BLEUE = Disponible\r\n            default:\r\n                return '#d1d5db'\r\n        }\r\n    }\r\n\r\n    // Fonctions pour navigation semaines\r\n    const getWeekDates = (date) => {\r\n        const startOfWeek = new Date(date)\r\n        const day = startOfWeek.getDay()\r\n        const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1) // Lundi = début de semaine\r\n        startOfWeek.setDate(diff)\r\n\r\n        const dates = []\r\n        for (let i = 0; i < 5; i++) { // Lundi à Vendredi\r\n            const currentDate = new Date(startOfWeek)\r\n            currentDate.setDate(startOfWeek.getDate() + i)\r\n            dates.push(currentDate)\r\n        }\r\n        return dates\r\n    }\r\n\r\n    const getWeekNumber = (date) => {\r\n        const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()))\r\n        const dayNum = d.getUTCDay() || 7\r\n        d.setUTCDate(d.getUTCDate() + 4 - dayNum)\r\n        const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1))\r\n        return Math.ceil((((d - yearStart) / 86400000) + 1) / 7)\r\n    }\r\n\r\n    const previousWeek = () => {\r\n        const newWeek = new Date(currentWeek)\r\n        newWeek.setDate(newWeek.getDate() - 7)\r\n        setCurrentWeek(newWeek)\r\n    }\r\n\r\n    const nextWeek = () => {\r\n        const newWeek = new Date(currentWeek)\r\n        newWeek.setDate(newWeek.getDate() + 7)\r\n        setCurrentWeek(newWeek)\r\n    }\r\n\r\n    const goToCurrentWeek = () => {\r\n        setCurrentWeek(new Date())\r\n    }\r\n\r\n    const weekDates = getWeekDates(currentWeek)\r\n    const weekNumber = getWeekNumber(currentWeek)\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                minHeight: '400px'\r\n            }}>\r\n                <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement du planning hebdomadaire...</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!formateurId || !formateurData) {\r\n        return (\r\n            <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                minHeight: '400px',\r\n                backgroundColor: '#f8fafc',\r\n                borderRadius: '12px'\r\n            }}>\r\n                <div style={{ color: '#6b7280', fontSize: '16px' }}>Aucun formateur sélectionné</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            padding: '20px',\r\n            fontFamily: 'system-ui',\r\n            maxWidth: '100%'\r\n        }}>\r\n            {/* En-tête */}\r\n            <div style={{ marginBottom: '20px' }}>\r\n                <h2 style={{ \r\n                    fontSize: '20px', \r\n                    fontWeight: 'bold', \r\n                    margin: '0 0 6px 0',\r\n                    color: '#1f2937'\r\n                }}>\r\n                    📊 Planning Hebdomadaire - {formateurData.prenom} {formateurData.nom}\r\n                </h2>\r\n                <p style={{ \r\n                    fontSize: '14px', \r\n                    color: '#6b7280',\r\n                    margin: '0'\r\n                }}>\r\n                    Semaine {weekNumber} - {weekDates[0].getFullYear()}\r\n                </p>\r\n            </div>\r\n\r\n            {/* Navigation semaines avec flèches */}\r\n            <div style={{\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                marginBottom: '20px',\r\n                padding: '12px 20px',\r\n                backgroundColor: '#f8fafc',\r\n                borderRadius: '12px'\r\n            }}>\r\n                <button\r\n                    onClick={previousWeek}\r\n                    style={{\r\n                        width: '40px',\r\n                        height: '40px',\r\n                        backgroundColor: '#667eea',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '8px',\r\n                        cursor: 'pointer',\r\n                        fontSize: '16px',\r\n                        fontWeight: 'bold',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center'\r\n                    }}\r\n                >\r\n                    ←\r\n                </button>\r\n                \r\n                <button\r\n                    onClick={goToCurrentWeek}\r\n                    style={{\r\n                        padding: '10px 16px',\r\n                        backgroundColor: '#3b82f6',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '8px',\r\n                        cursor: 'pointer',\r\n                        fontSize: '14px',\r\n                        fontWeight: '600'\r\n                    }}\r\n                >\r\n                    Semaine actuelle\r\n                </button>\r\n                \r\n                <button\r\n                    onClick={nextWeek}\r\n                    style={{\r\n                        width: '40px',\r\n                        height: '40px',\r\n                        backgroundColor: '#667eea',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '8px',\r\n                        cursor: 'pointer',\r\n                        fontSize: '16px',\r\n                        fontWeight: 'bold',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center'\r\n                    }}\r\n                >\r\n                    →\r\n                </button>\r\n            </div>\r\n\r\n            {/* Contenu principal */}\r\n            {planningFinal.length === 0 ? (\r\n                // Aucune affectation ET aucune absence ET aucun planning type\r\n                <div style={{\r\n                    padding: '40px 20px',\r\n                    textAlign: 'center',\r\n                    backgroundColor: '#f0f9ff',\r\n                    borderRadius: '12px',\r\n                    border: '2px solid #3b82f6'\r\n                }}>\r\n                    <div style={{ fontSize: '48px', marginBottom: '16px' }}>📋</div>\r\n                    <h3 style={{ \r\n                        fontSize: '18px', \r\n                        fontWeight: 'bold', \r\n                        color: '#1e40af',\r\n                        margin: '0 0 12px 0'\r\n                    }}>\r\n                        Aucun planning configuré\r\n                    </h3>\r\n                    <p style={{ \r\n                        fontSize: '14px', \r\n                        color: '#1e40af',\r\n                        margin: '0',\r\n                        lineHeight: '1.5'\r\n                    }}>\r\n                        Ce formateur n'a pas encore de planning type déclaré ou validé.\r\n                    </p>\r\n                </div>\r\n            ) : (\r\n                // Planning disponible - Layout desktop\r\n                <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr', gap: '20px' }}>\r\n                    \r\n                    {/* Colonne gauche - Grille planning */}\r\n                    <div style={{\r\n                        backgroundColor: '#f9fafb',\r\n                        borderRadius: '12px',\r\n                        padding: '16px'\r\n                    }}>\r\n                        <table style={{ \r\n                            width: '100%', \r\n                            borderCollapse: 'separate',\r\n                            borderSpacing: '8px'\r\n                        }}>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th style={{ \r\n                                        padding: '8px 4px',\r\n                                        fontSize: '12px',\r\n                                        fontWeight: '600',\r\n                                        color: '#6b7280',\r\n                                        textAlign: 'center',\r\n                                        width: '80px'\r\n                                    }}>\r\n                                        &nbsp;\r\n                                    </th>\r\n                                    {jours.map((jour, index) => (\r\n                                        <th key={jour} style={{ \r\n                                            padding: '4px',\r\n                                            fontSize: '11px',\r\n                                            fontWeight: '600',\r\n                                            color: '#6b7280',\r\n                                            textAlign: 'center',\r\n                                            lineHeight: '1.2'\r\n                                        }}>\r\n                                            <div>{jour.substring(0, 3)}</div>\r\n                                            <div style={{ \r\n                                                fontSize: '10px', \r\n                                                color: '#374151',\r\n                                                marginTop: '2px'\r\n                                            }}>\r\n                                                {weekDates[index].getDate()}/{(weekDates[index].getMonth() + 1).toString().padStart(2, '0')}\r\n                                            </div>\r\n                                        </th>\r\n                                    ))}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {creneaux.map(creneau => (\r\n                                    <tr key={creneau}>\r\n                                        <td style={{ \r\n                                            padding: '8px 4px',\r\n                                            fontSize: '11px',\r\n                                            fontWeight: '600',\r\n                                            color: '#374151',\r\n                                            textAlign: 'center',\r\n                                            backgroundColor: creneau === 'Matin' ? '#fef3c7' : '#dbeafe',\r\n                                            borderRadius: '6px'\r\n                                        }}>\r\n                                            {creneau === 'Matin' ? 'M' : 'AM'}\r\n                                        </td>\r\n                                        {jours.map(jour => {\r\n                                            const creneauInfo = getCreneauInfo(jour, creneau)\r\n                                            \r\n                                            return (\r\n                                                <td key={`${jour}-${creneau}`} style={{ \r\n                                                    padding: '0',\r\n                                                    textAlign: 'center'\r\n                                                }}>\r\n                                                    <div style={{\r\n                                                        minHeight: '50px',\r\n                                                        backgroundColor: creneauInfo ? \r\n                                                            getStatutColor(creneauInfo) : '#f3f4f6',\r\n                                                        color: creneauInfo ? \r\n                                                            (creneauInfo.statut === 'disponible_non_choisi' ? '#374151' : \r\n                                                             creneauInfo.statut === 'dispo_except' ? '#92400e' : 'white') : '#d1d5db',\r\n                                                        borderRadius: '8px',\r\n                                                        display: 'flex',\r\n                                                        alignItems: 'center',\r\n                                                        justifyContent: 'center',\r\n                                                        padding: '4px',\r\n                                                        border: creneauInfo ? \r\n                                                            `3px solid ${getBorderColor(creneauInfo)}` : \r\n                                                            '3px solid #d1d5db',\r\n                                                        position: 'relative'\r\n                                                    }}>\r\n                                                        {creneauInfo ? (\r\n                                                            creneauInfo.statut === 'absent' ? (\r\n                                                                <div style={{ \r\n                                                                    fontSize: '16px',\r\n                                                                    fontWeight: 'bold',\r\n                                                                    textAlign: 'center',\r\n                                                                    color: 'white'\r\n                                                                }}>\r\n                                                                    ✗\r\n                                                                </div>\r\n                                                            ) : creneauInfo.statut === 'dispo_except' ? (\r\n                                                                <div style={{ \r\n                                                                    fontSize: '9px',\r\n                                                                    fontWeight: 'bold',\r\n                                                                    textAlign: 'center',\r\n                                                                    lineHeight: '1.2',\r\n                                                                    color: '#92400e'\r\n                                                                }}>\r\n                                                                    EXCEPT\r\n                                                                </div>\r\n                                                            ) : creneauInfo.statut === 'affecte_coordo' ? (\r\n                                                                <div style={{ \r\n                                                                    fontSize: '10px',\r\n                                                                    fontWeight: 'bold',\r\n                                                                    textAlign: 'center',\r\n                                                                    lineHeight: '1.2',\r\n                                                                    color: 'white'\r\n                                                                }}>\r\n                                                                    {lieux.find(l => l.id === creneauInfo.lieu_id)?.initiale || 'S/P'}\r\n                                                                </div>\r\n                                                            ) : creneauInfo.statut === 'disponible_non_choisi' ? (\r\n                                                                <div style={{ \r\n                                                                    fontSize: '8px',\r\n                                                                    fontWeight: 'bold',\r\n                                                                    textAlign: 'center',\r\n                                                                    lineHeight: '1.2',\r\n                                                                    color: '#3b82f6'\r\n                                                                }}>\r\n                                                                    DISPO\r\n                                                                </div>\r\n                                                            ) : (\r\n                                                                <div style={{ \r\n                                                                    fontSize: '10px',\r\n                                                                    fontWeight: 'bold',\r\n                                                                    textAlign: 'center',\r\n                                                                    lineHeight: '1.2'\r\n                                                                }}>\r\n                                                                    {lieux.find(l => l.id === creneauInfo.lieu_id)?.initiale || 'S/P'}\r\n                                                                </div>\r\n                                                            )\r\n                                                        ) : (\r\n                                                            <div style={{ \r\n                                                                fontSize: '14px',\r\n                                                                color: '#d1d5db'\r\n                                                            }}>\r\n                                                                -\r\n                                                            </div>\r\n                                                        )}\r\n                                                    </div>\r\n                                                </td>\r\n                                            )\r\n                                        })}\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    {/* Colonne droite - Détails des interventions */}\r\n                    <div style={{\r\n                        backgroundColor: '#f8fafc',\r\n                        padding: '16px',\r\n                        borderRadius: '12px'\r\n                    }}>\r\n                        <h4 style={{ \r\n                            fontSize: '14px', \r\n                            fontWeight: '600', \r\n                            color: '#374151',\r\n                            margin: '0 0 12px 0'\r\n                        }}>\r\n                            📅 Planning cette semaine\r\n                        </h4>\r\n                        <div style={{ \r\n                            display: 'flex', \r\n                            flexDirection: 'column', \r\n                            gap: '6px',\r\n                            maxHeight: '400px',\r\n                            overflowY: 'auto'\r\n                        }}>\r\n                            {planningFinal.map((creneau, index) => (\r\n                                <div key={index} style={{\r\n                                    display: 'flex',\r\n                                    justifyContent: 'space-between',\r\n                                    alignItems: 'center',\r\n                                    padding: '12px',\r\n                                    backgroundColor: creneau.statut === 'dispo_except' ? '#fffbeb' :\r\n                                                     creneau.statut === 'affecte_coordo' ? '#eff6ff' : \r\n                                                     creneau.statut === 'absent' ? '#fef2f2' :\r\n                                                     creneau.statut === 'disponible_non_choisi' ? '#f0f9ff' : '#eff6ff',\r\n                                    borderRadius: '8px',\r\n                                    border: `2px solid ${getBorderColor(creneau)}`,\r\n                                    fontSize: '13px'\r\n                                }}>\r\n                                    <div style={{ \r\n                                        fontWeight: '600', \r\n                                        color: creneau.statut === 'dispo_except' ? '#92400e' :\r\n                                               creneau.statut === 'affecte_coordo' ? '#1e40af' :\r\n                                               creneau.statut === 'absent' ? '#991b1b' :\r\n                                               creneau.statut === 'disponible_non_choisi' ? '#3b82f6' : '#1e40af'\r\n                                    }}>\r\n                                        {creneau.jour} {creneau.creneau}\r\n                                    </div>\r\n                                    <div style={{ \r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        gap: '8px'\r\n                                    }}>\r\n                                        <div style={{\r\n                                            width: '14px',\r\n                                            height: '14px',\r\n                                            backgroundColor: getLieuCouleur(creneau.lieu_id),\r\n                                            borderRadius: '3px'\r\n                                        }} />\r\n                                        <span style={{ \r\n                                            color: '#6b7280',\r\n                                            fontSize: '12px'\r\n                                        }}>\r\n                                            {getLieuNom(creneau.lieu_id)}\r\n                                        </span>\r\n                                        <span style={{\r\n                                            fontSize: '10px',\r\n                                            fontWeight: '600',\r\n                                            padding: '2px 6px',\r\n                                            borderRadius: '4px',\r\n                                            backgroundColor: getStatutColor(creneau),\r\n                                            color: creneau.statut === 'disponible_non_choisi' ? '#3b82f6' : \r\n                                                   creneau.statut === 'dispo_except' ? '#92400e' : 'white',\r\n                                            border: creneau.statut === 'disponible_non_choisi' ? '1px solid #3b82f6' : 'none'\r\n                                        }}>\r\n                                            {getStatutLabel(creneau)}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}",
          "taille": 35472,
          "lignes": 746,
          "dateModif": "2025-08-17T07:50:37.863Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "components/assistance/MonPlanningType.jsx",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { supabase } from '../../lib/supabaseClient'\r\n\r\nexport default function MonPlanningType({ \r\n    formateurId,\r\n    formateurData,\r\n    onError \r\n}) {\r\n    const [planningType, setPlanningType] = useState([])\r\n    const [lieux, setLieux] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [statsValidation, setStatsValidation] = useState(null)\r\n\r\n    const jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi']\r\n    const creneaux = ['Matin', 'AM']\r\n\r\n    useEffect(() => {\r\n        if (formateurId) {\r\n            loadPlanningType(formateurId)\r\n        }\r\n    }, [formateurId])\r\n\r\n    const loadPlanningType = async (id) => {\r\n        try {\r\n            setIsLoading(true)\r\n            console.log('🔍 Chargement planning type pour:', formateurData?.prenom, formateurData?.nom)\r\n\r\n            // Charger les lieux pour affichage\r\n            const { data: lieuxData, error: lieuxError } = await supabase\r\n                .from('lieux')\r\n                .select('id, nom, couleur, initiale')\r\n                .eq('archive', false)\r\n\r\n            if (lieuxError) throw lieuxError\r\n            setLieux(lieuxData || [])\r\n\r\n            // Charger SEULEMENT les disponibilités NORMALES validées\r\n            const { data: planningData, error: planningError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .select(`\r\n                    id,\r\n                    jour,\r\n                    creneau,\r\n                    statut,\r\n                    lieu_id,\r\n                    valide,\r\n                    valide_par,\r\n                    date_validation,\r\n                    created_at\r\n                `)\r\n                .eq('formateur_id', id)\r\n                .eq('valide', true)\r\n                .eq('statut', 'disponible')  // Filtre SEULEMENT les dispo normales\r\n                .order('created_at')\r\n\r\n            if (planningError) throw planningError\r\n\r\n            console.log('✅ Planning type NORMAL validé chargé:', planningData?.length || 0, 'créneaux')\r\n            setPlanningType(planningData || [])\r\n\r\n            // Calculer les stats de validation\r\n            if (planningData && planningData.length > 0) {\r\n                const premierElement = planningData[0]\r\n                setStatsValidation({\r\n                    dateValidation: premierElement.date_validation,\r\n                    validePar: premierElement.valide_par,\r\n                    totalCreneaux: planningData.length\r\n                })\r\n            } else {\r\n                setStatsValidation(null)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Erreur chargement planning:', error)\r\n            onError?.(`Erreur chargement: ${error.message}`)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Fonction pour obtenir les détails d'un créneau\r\n    const getCreneauInfo = (jour, creneau) => {\r\n        return planningType.find(pt => pt.jour === jour && pt.creneau === creneau)\r\n    }\r\n\r\n    // Fonction pour obtenir la couleur d'un lieu\r\n    const getLieuCouleur = (lieuId) => {\r\n        if (!lieuId) return '#f3f4f6'\r\n        const lieu = lieux.find(l => l.id === lieuId)\r\n        return lieu?.couleur || '#f3f4f6'\r\n    }\r\n\r\n    // Fonction pour obtenir le nom d'un lieu\r\n    const getLieuNom = (lieuId) => {\r\n        if (!lieuId) return 'Sans préférence'\r\n        const lieu = lieux.find(l => l.id === lieuId)\r\n        return lieu?.nom || 'Lieu inconnu'\r\n    }\r\n\r\n    // Fonction pour obtenir les initiales d'un lieu\r\n    const getLieuInitiales = (lieuId) => {\r\n        if (!lieuId) return 'SP'\r\n        const lieu = lieux.find(l => l.id === lieuId)\r\n        return lieu?.initiale || 'S/P'\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                minHeight: '400px'\r\n            }}>\r\n                <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement du planning type...</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!formateurId || !formateurData) {\r\n        return (\r\n            <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                minHeight: '400px',\r\n                backgroundColor: '#f8fafc',\r\n                borderRadius: '12px'\r\n            }}>\r\n                <div style={{ color: '#6b7280', fontSize: '16px' }}>Aucun formateur sélectionné</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div style={{ \r\n            padding: '20px', \r\n            fontFamily: 'system-ui',\r\n            maxWidth: '100%',\r\n            height: '100%',\r\n            overflow: 'hidden'\r\n        }}>\r\n            {/* En-tête simplifié */}\r\n            <div style={{ marginBottom: '20px' }}>\r\n                <h2 style={{ \r\n                    margin: '0 0 8px 0', \r\n                    fontSize: '20px', \r\n                    fontWeight: 'bold',\r\n                    color: '#374151'\r\n                }}>\r\n                    ✅ Planning Type Validé - {formateurData.prenom} {formateurData.nom}\r\n                </h2>\r\n            </div>\r\n\r\n            {/* Contenu principal */}\r\n            {planningType.length === 0 ? (\r\n                // Aucun planning validé\r\n                <div style={{\r\n                    padding: '40px 20px',\r\n                    textAlign: 'center',\r\n                    backgroundColor: '#fef3c7',\r\n                    borderRadius: '12px',\r\n                    border: '2px solid #f59e0b'\r\n                }}>\r\n                    <div style={{ fontSize: '48px', marginBottom: '16px' }}>📅</div>\r\n                    <h3 style={{ \r\n                        fontSize: '18px', \r\n                        fontWeight: 'bold', \r\n                        color: '#92400e',\r\n                        margin: '0 0 12px 0'\r\n                    }}>\r\n                        Planning en attente de validation\r\n                    </h3>\r\n                    <p style={{ \r\n                        fontSize: '14px', \r\n                        color: '#92400e',\r\n                        margin: '0 0 20px 0',\r\n                        lineHeight: '1.5'\r\n                    }}>\r\n                        Les disponibilités habituelles de ce formateur n'ont pas encore été validées.\r\n                    </p>\r\n                    <div style={{\r\n                        backgroundColor: '#fffbeb',\r\n                        padding: '12px',\r\n                        borderRadius: '8px',\r\n                        fontSize: '13px',\r\n                        color: '#92400e'\r\n                    }}>\r\n                        <strong>Action recommandée :</strong><br />\r\n                        Utilisez l'onglet \"Planning Type\" pour déclarer ou modifier les disponibilités.\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                // Planning validé - Layout compact\r\n                <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px', height: 'calc(100% - 80px)' }}>\r\n                    \r\n                    {/* Colonne gauche - Grille planning */}\r\n                    <div style={{\r\n                        backgroundColor: '#f9fafb',\r\n                        borderRadius: '12px',\r\n                        padding: '16px'\r\n                    }}>\r\n                        <table style={{ \r\n                            width: '100%', \r\n                            borderCollapse: 'separate',\r\n                            borderSpacing: '6px'\r\n                        }}>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th style={{ \r\n                                        padding: '8px 4px',\r\n                                        fontSize: '12px',\r\n                                        fontWeight: '600',\r\n                                        color: '#6b7280',\r\n                                        textAlign: 'center',\r\n                                        width: '80px'\r\n                                    }}>\r\n                                        Créneaux\r\n                                    </th>\r\n                                    {jours.map(jour => (\r\n                                        <th key={jour} style={{ \r\n                                            padding: '8px 4px',\r\n                                            fontSize: '11px',\r\n                                            fontWeight: '600',\r\n                                            color: '#6b7280',\r\n                                            textAlign: 'center'\r\n                                        }}>\r\n                                            {jour.substring(0, 3)}\r\n                                        </th>\r\n                                    ))}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {creneaux.map(creneau => (\r\n                                    <tr key={creneau}>\r\n                                        <td style={{ \r\n                                            padding: '8px 4px',\r\n                                            fontSize: '11px',\r\n                                            fontWeight: '600',\r\n                                            color: '#374151',\r\n                                            textAlign: 'center',\r\n                                            backgroundColor: creneau === 'Matin' ? '#fef3c7' : '#dbeafe',\r\n                                            borderRadius: '6px'\r\n                                        }}>\r\n                                            {creneau === 'Matin' ? 'M' : 'AM'}\r\n                                        </td>\r\n                                        {jours.map(jour => {\r\n                                            const creneauInfo = getCreneauInfo(jour, creneau)\r\n                                            \r\n                                            return (\r\n                                                <td key={`${jour}-${creneau}`} style={{ \r\n                                                    padding: '0',\r\n                                                    textAlign: 'center'\r\n                                                }}>\r\n                                                    <div style={{\r\n                                                        minHeight: '45px',\r\n                                                        backgroundColor: creneauInfo ? '#3b82f6' : '#f3f4f6',\r\n                                                        color: creneauInfo ? 'white' : '#d1d5db',\r\n                                                        borderRadius: '6px',\r\n                                                        display: 'flex',\r\n                                                        alignItems: 'center',\r\n                                                        justifyContent: 'center',\r\n                                                        padding: '4px',\r\n                                                        border: creneauInfo ? \r\n                                                            `3px solid ${getLieuCouleur(creneauInfo.lieu_id)}` : \r\n                                                            '1px solid #e5e7eb'\r\n                                                    }}>\r\n                                                        {creneauInfo ? (\r\n                                                            <div style={{ \r\n                                                                fontSize: '12px',\r\n                                                                fontWeight: 'bold',\r\n                                                                textAlign: 'center'\r\n                                                            }}>\r\n                                                                {getLieuInitiales(creneauInfo.lieu_id)}\r\n                                                            </div>\r\n                                                        ) : (\r\n                                                            <div style={{ \r\n                                                                fontSize: '14px',\r\n                                                                color: '#d1d5db'\r\n                                                            }}>\r\n                                                                -\r\n                                                            </div>\r\n                                                        )}\r\n                                                    </div>\r\n                                                </td>\r\n                                            )\r\n                                        })}\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    {/* Colonne droite - Détails des créneaux */}\r\n                    <div style={{\r\n                        backgroundColor: '#f8fafc',\r\n                        padding: '16px',\r\n                        borderRadius: '12px'\r\n                    }}>\r\n                        <h4 style={{ \r\n                            fontSize: '14px', \r\n                            fontWeight: '600', \r\n                            color: '#374151',\r\n                            margin: '0 0 12px 0'\r\n                        }}>\r\n                            📅 Détail des disponibilités validées\r\n                        </h4>\r\n                        <div style={{ \r\n                            display: 'flex', \r\n                            flexDirection: 'column', \r\n                            gap: '6px',\r\n                            maxHeight: '400px',\r\n                            overflowY: 'auto'\r\n                        }}>\r\n                            {planningType.map((creneau, index) => (\r\n                                <div key={index} style={{\r\n                                    display: 'flex',\r\n                                    justifyContent: 'space-between',\r\n                                    alignItems: 'center',\r\n                                    padding: '10px 12px',\r\n                                    backgroundColor: '#eff6ff',\r\n                                    borderRadius: '6px',\r\n                                    border: `2px solid ${getLieuCouleur(creneau.lieu_id)}`,\r\n                                    fontSize: '13px'\r\n                                }}>\r\n                                    <div style={{ \r\n                                        fontWeight: '600', \r\n                                        color: '#1e40af'\r\n                                    }}>\r\n                                        {creneau.jour} {creneau.creneau === 'Matin' ? 'M' : 'AM'}\r\n                                    </div>\r\n                                    <div style={{ \r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        gap: '6px'\r\n                                    }}>\r\n                                        <div style={{\r\n                                            width: '12px',\r\n                                            height: '12px',\r\n                                            backgroundColor: getLieuCouleur(creneau.lieu_id),\r\n                                            borderRadius: '2px'\r\n                                        }} />\r\n                                        <span style={{ \r\n                                            color: '#6b7280',\r\n                                            fontSize: '12px'\r\n                                        }}>\r\n                                            {getLieuNom(creneau.lieu_id)}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n\r\n                        {/* Stats validation compactes */}\r\n                        {statsValidation && (\r\n                            <div style={{\r\n                                marginTop: '16px',\r\n                                backgroundColor: '#ecfdf5',\r\n                                border: '2px solid #10b981',\r\n                                padding: '12px',\r\n                                borderRadius: '8px'\r\n                            }}>\r\n                                <div style={{ color: '#065f46', fontSize: '12px' }}>\r\n                                    <div style={{ fontWeight: 'bold', marginBottom: '4px' }}>\r\n                                        📊 {statsValidation.totalCreneaux} créneaux validés\r\n                                    </div>\r\n                                    {statsValidation.dateValidation && (\r\n                                        <div>Validé le {new Date(statsValidation.dateValidation).toLocaleDateString('fr-FR')}</div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}",
          "taille": 17486,
          "lignes": 378,
          "dateModif": "2025-08-28T19:00:40.105Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { supabase } from '../../lib/supabaseClient'\r\n\r\nexport default function MonPlanningType({ \r\n    formateurId,\r\n    formateurData,\r\n    onError \r\n}) {\r\n    const [planningType, setPlanningType] = useState([])\r\n    const [lieux, setLieux] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [statsValidation, setStatsValidation] = useState(null)\r\n\r\n    const jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi']\r\n    const creneaux = ['Matin', 'AM']\r\n\r\n    useEffect(() => {\r\n        if (formateurId) {\r\n            loadPlanningType(formateurId)\r\n        }\r\n    }, [formateurId])\r\n\r\n    const loadPlanningType = async (id) => {\r\n        try {\r\n            setIsLoading(true)\r\n            console.log('🔍 Chargement planning type pour:', formateurData?.prenom, formateurData?.nom)\r\n\r\n            // Charger les lieux pour affichage\r\n            const { data: lieuxData, error: lieuxError } = await supabase\r\n                .from('lieux')\r\n                .select('id, nom, couleur, initiale')\r\n                .eq('archive', false)\r\n\r\n            if (lieuxError) throw lieuxError\r\n            setLieux(lieuxData || [])\r\n\r\n            // Charger SEULEMENT les disponibilités NORMALES validées\r\n            const { data: planningData, error: planningError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .select(`\r\n                    id,\r\n                    jour,\r\n                    creneau,\r\n                    statut,\r\n                    lieu_id,\r\n                    valide,\r\n                    valide_par,\r\n                    date_validation,\r\n                    created_at\r\n                `)\r\n                .eq('formateur_id', id)\r\n                .eq('valide', true)\r\n                .eq('statut', 'disponible')  // Filtre SEULEMENT les dispo normales\r\n                .order('created_at')\r\n\r\n            if (planningError) throw planningError\r\n\r\n            console.log('✅ Planning type NORMAL validé chargé:', planningData?.length || 0, 'créneaux')\r\n            setPlanningType(planningData || [])\r\n\r\n            // Calculer les stats de validation\r\n            if (planningData && planningData.length > 0) {\r\n                const premierElement = planningData[0]\r\n                setStatsValidation({\r\n                    dateValidation: premierElement.date_validation,\r\n                    validePar: premierElement.valide_par,\r\n                    totalCreneaux: planningData.length\r\n                })\r\n            } else {\r\n                setStatsValidation(null)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Erreur chargement planning:', error)\r\n            onError?.(`Erreur chargement: ${error.message}`)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Fonction pour obtenir les détails d'un créneau\r\n    const getCreneauInfo = (jour, creneau) => {\r\n        return planningType.find(pt => pt.jour === jour && pt.creneau === creneau)\r\n    }\r\n\r\n    // Fonction pour obtenir la couleur d'un lieu\r\n    const getLieuCouleur = (lieuId) => {\r\n        if (!lieuId) return '#f3f4f6'\r\n        const lieu = lieux.find(l => l.id === lieuId)\r\n        return lieu?.couleur || '#f3f4f6'\r\n    }\r\n\r\n    // Fonction pour obtenir le nom d'un lieu\r\n    const getLieuNom = (lieuId) => {\r\n        if (!lieuId) return 'Sans préférence'\r\n        const lieu = lieux.find(l => l.id === lieuId)\r\n        return lieu?.nom || 'Lieu inconnu'\r\n    }\r\n\r\n    // Fonction pour obtenir les initiales d'un lieu\r\n    const getLieuInitiales = (lieuId) => {\r\n        if (!lieuId) return 'SP'\r\n        const lieu = lieux.find(l => l.id === lieuId)\r\n        return lieu?.initiale || 'S/P'\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                minHeight: '400px'\r\n            }}>\r\n                <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement du planning type...</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!formateurId || !formateurData) {\r\n        return (\r\n            <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                minHeight: '400px',\r\n                backgroundColor: '#f8fafc',\r\n                borderRadius: '12px'\r\n            }}>\r\n                <div style={{ color: '#6b7280', fontSize: '16px' }}>Aucun formateur sélectionné</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div style={{ \r\n            padding: '20px', \r\n            fontFamily: 'system-ui',\r\n            maxWidth: '100%',\r\n            height: '100%',\r\n            overflow: 'hidden'\r\n        }}>\r\n            {/* En-tête simplifié */}\r\n            <div style={{ marginBottom: '20px' }}>\r\n                <h2 style={{ \r\n                    margin: '0 0 8px 0', \r\n                    fontSize: '20px', \r\n                    fontWeight: 'bold',\r\n                    color: '#374151'\r\n                }}>\r\n                    ✅ Planning Type Validé - {formateurData.prenom} {formateurData.nom}\r\n                </h2>\r\n            </div>\r\n\r\n            {/* Contenu principal */}\r\n            {planningType.length === 0 ? (\r\n                // Aucun planning validé\r\n                <div style={{\r\n                    padding: '40px 20px',\r\n                    textAlign: 'center',\r\n                    backgroundColor: '#fef3c7',\r\n                    borderRadius: '12px',\r\n                    border: '2px solid #f59e0b'\r\n                }}>\r\n                    <div style={{ fontSize: '48px', marginBottom: '16px' }}>📅</div>\r\n                    <h3 style={{ \r\n                        fontSize: '18px', \r\n                        fontWeight: 'bold', \r\n                        color: '#92400e',\r\n                        margin: '0 0 12px 0'\r\n                    }}>\r\n                        Planning en attente de validation\r\n                    </h3>\r\n                    <p style={{ \r\n                        fontSize: '14px', \r\n                        color: '#92400e',\r\n                        margin: '0 0 20px 0',\r\n                        lineHeight: '1.5'\r\n                    }}>\r\n                        Les disponibilités habituelles de ce formateur n'ont pas encore été validées.\r\n                    </p>\r\n                    <div style={{\r\n                        backgroundColor: '#fffbeb',\r\n                        padding: '12px',\r\n                        borderRadius: '8px',\r\n                        fontSize: '13px',\r\n                        color: '#92400e'\r\n                    }}>\r\n                        <strong>Action recommandée :</strong><br />\r\n                        Utilisez l'onglet \"Planning Type\" pour déclarer ou modifier les disponibilités.\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                // Planning validé - Layout compact\r\n                <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px', height: 'calc(100% - 80px)' }}>\r\n                    \r\n                    {/* Colonne gauche - Grille planning */}\r\n                    <div style={{\r\n                        backgroundColor: '#f9fafb',\r\n                        borderRadius: '12px',\r\n                        padding: '16px'\r\n                    }}>\r\n                        <table style={{ \r\n                            width: '100%', \r\n                            borderCollapse: 'separate',\r\n                            borderSpacing: '6px'\r\n                        }}>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th style={{ \r\n                                        padding: '8px 4px',\r\n                                        fontSize: '12px',\r\n                                        fontWeight: '600',\r\n                                        color: '#6b7280',\r\n                                        textAlign: 'center',\r\n                                        width: '80px'\r\n                                    }}>\r\n                                        Créneaux\r\n                                    </th>\r\n                                    {jours.map(jour => (\r\n                                        <th key={jour} style={{ \r\n                                            padding: '8px 4px',\r\n                                            fontSize: '11px',\r\n                                            fontWeight: '600',\r\n                                            color: '#6b7280',\r\n                                            textAlign: 'center'\r\n                                        }}>\r\n                                            {jour.substring(0, 3)}\r\n                                        </th>\r\n                                    ))}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {creneaux.map(creneau => (\r\n                                    <tr key={creneau}>\r\n                                        <td style={{ \r\n                                            padding: '8px 4px',\r\n                                            fontSize: '11px',\r\n                                            fontWeight: '600',\r\n                                            color: '#374151',\r\n                                            textAlign: 'center',\r\n                                            backgroundColor: creneau === 'Matin' ? '#fef3c7' : '#dbeafe',\r\n                                            borderRadius: '6px'\r\n                                        }}>\r\n                                            {creneau === 'Matin' ? 'M' : 'AM'}\r\n                                        </td>\r\n                                        {jours.map(jour => {\r\n                                            const creneauInfo = getCreneauInfo(jour, creneau)\r\n                                            \r\n                                            return (\r\n                                                <td key={`${jour}-${creneau}`} style={{ \r\n                                                    padding: '0',\r\n                                                    textAlign: 'center'\r\n                                                }}>\r\n                                                    <div style={{\r\n                                                        minHeight: '45px',\r\n                                                        backgroundColor: creneauInfo ? '#3b82f6' : '#f3f4f6',\r\n                                                        color: creneauInfo ? 'white' : '#d1d5db',\r\n                                                        borderRadius: '6px',\r\n                                                        display: 'flex',\r\n                                                        alignItems: 'center',\r\n                                                        justifyContent: 'center',\r\n                                                        padding: '4px',\r\n                                                        border: creneauInfo ? \r\n                                                            `3px solid ${getLieuCouleur(creneauInfo.lieu_id)}` : \r\n                                                            '1px solid #e5e7eb'\r\n                                                    }}>\r\n                                                        {creneauInfo ? (\r\n                                                            <div style={{ \r\n                                                                fontSize: '12px',\r\n                                                                fontWeight: 'bold',\r\n                                                                textAlign: 'center'\r\n                                                            }}>\r\n                                                                {getLieuInitiales(creneauInfo.lieu_id)}\r\n                                                            </div>\r\n                                                        ) : (\r\n                                                            <div style={{ \r\n                                                                fontSize: '14px',\r\n                                                                color: '#d1d5db'\r\n                                                            }}>\r\n                                                                -\r\n                                                            </div>\r\n                                                        )}\r\n                                                    </div>\r\n                                                </td>\r\n                                            )\r\n                                        })}\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    {/* Colonne droite - Détails des créneaux */}\r\n                    <div style={{\r\n                        backgroundColor: '#f8fafc',\r\n                        padding: '16px',\r\n                        borderRadius: '12px'\r\n                    }}>\r\n                        <h4 style={{ \r\n                            fontSize: '14px', \r\n                            fontWeight: '600', \r\n                            color: '#374151',\r\n                            margin: '0 0 12px 0'\r\n                        }}>\r\n                            📅 Détail des disponibilités validées\r\n                        </h4>\r\n                        <div style={{ \r\n                            display: 'flex', \r\n                            flexDirection: 'column', \r\n                            gap: '6px',\r\n                            maxHeight: '400px',\r\n                            overflowY: 'auto'\r\n                        }}>\r\n                            {planningType.map((creneau, index) => (\r\n                                <div key={index} style={{\r\n                                    display: 'flex',\r\n                                    justifyContent: 'space-between',\r\n                                    alignItems: 'center',\r\n                                    padding: '10px 12px',\r\n                                    backgroundColor: '#eff6ff',\r\n                                    borderRadius: '6px',\r\n                                    border: `2px solid ${getLieuCouleur(creneau.lieu_id)}`,\r\n                                    fontSize: '13px'\r\n                                }}>\r\n                                    <div style={{ \r\n                                        fontWeight: '600', \r\n                                        color: '#1e40af'\r\n                                    }}>\r\n                                        {creneau.jour} {creneau.creneau === 'Matin' ? 'M' : 'AM'}\r\n                                    </div>\r\n                                    <div style={{ \r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        gap: '6px'\r\n                                    }}>\r\n                                        <div style={{\r\n                                            width: '12px',\r\n                                            height: '12px',\r\n                                            backgroundColor: getLieuCouleur(creneau.lieu_id),\r\n                                            borderRadius: '2px'\r\n                                        }} />\r\n                                        <span style={{ \r\n                                            color: '#6b7280',\r\n                                            fontSize: '12px'\r\n                                        }}>\r\n                                            {getLieuNom(creneau.lieu_id)}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n\r\n                        {/* Stats validation compactes */}\r\n                        {statsValidation && (\r\n                            <div style={{\r\n                                marginTop: '16px',\r\n                                backgroundColor: '#ecfdf5',\r\n                                border: '2px solid #10b981',\r\n                                padding: '12px',\r\n                                borderRadius: '8px'\r\n                            }}>\r\n                                <div style={{ color: '#065f46', fontSize: '12px' }}>\r\n                                    <div style={{ fontWeight: 'bold', marginBottom: '4px' }}>\r\n                                        📊 {statsValidation.totalCreneaux} créneaux validés\r\n                                    </div>\r\n                                    {statsValidation.dateValidation && (\r\n                                        <div>Validé le {new Date(statsValidation.dateValidation).toLocaleDateString('fr-FR')}</div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}",
          "taille": 17486,
          "lignes": 378,
          "dateModif": "2025-08-17T06:45:42.895Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "components/assistance/PlanningFormateurType.jsx",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { supabase } from '../../lib/supabaseClient'\r\n\r\nexport default function PlanningFormateurType({ \r\n    formateurId,\r\n    formateurData,\r\n    onSuccess,\r\n    onError \r\n}) {\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [lieux, setLieux] = useState([])\r\n    const [planningData, setPlanningData] = useState({})\r\n    const [creneauSelectionne, setCreneauSelectionne] = useState(null)\r\n    const [statutSelectionne, setStatutSelectionne] = useState('')\r\n    const [lieuSelectionne, setLieuSelectionne] = useState(null)\r\n    const [creneauTermine, setCreneauTermine] = useState(false)\r\n    const [showAide, setShowAide] = useState(false)\r\n    const [isSaving, setIsSaving] = useState(false)\r\n    const [showMessageModal, setShowMessageModal] = useState(false)\r\n    const [messageFacultatif, setMessageFacultatif] = useState('')\r\n\r\n    // Configuration des jours et créneaux\r\n    const jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi']\r\n    const creneaux = ['Matin', 'AM']\r\n\r\n    // Configuration des statuts avec couleurs\r\n    const statuts = [\r\n        { \r\n            key: 'disponible', \r\n            label: 'DISPONIBLE', \r\n            couleur: '#3b82f6',\r\n            description: 'disponible'\r\n        },\r\n        { \r\n            key: 'dispo_except', \r\n            label: 'DISPO EXCEPT.', \r\n            couleur: '#fbbf24',\r\n            description: 'dispo exceptionnelle'\r\n        },\r\n        { \r\n            key: 'indisponible', \r\n            label: 'INDISPONIBLE', \r\n            couleur: '#9ca3af',\r\n            description: 'indisponible'\r\n        }\r\n    ]\r\n\r\n    useEffect(() => {\r\n        if (formateurId) {\r\n            chargerDonnees(formateurId)\r\n        }\r\n    }, [formateurId])\r\n\r\n    const chargerDonnees = async (id) => {\r\n        try {\r\n            setIsLoading(true)\r\n            \r\n            // Charger les lieux depuis la BDD\r\n            const { data: lieuxData, error: lieuxError } = await supabase\r\n                .from('lieux')\r\n                .select('id, nom, initiale, couleur')\r\n                .eq('archive', false)\r\n                .order('nom')\r\n\r\n            if (lieuxError) {\r\n                console.error('Erreur lieux:', lieuxError)\r\n                setLieux([])\r\n            } else {\r\n                setLieux(lieuxData || [])\r\n            }\r\n\r\n            // Charger le planning type existant du formateur\r\n            const { data: planningExistant, error: planningError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .select(`\r\n                    id,\r\n                    jour,\r\n                    creneau,\r\n                    statut,\r\n                    lieu_id,\r\n                    lieux:lieu_id (\r\n                        id,\r\n                        nom,\r\n                        initiale,\r\n                        couleur\r\n                    )\r\n                `)\r\n                .eq('formateur_id', id)\r\n\r\n            if (planningError) {\r\n                console.error('Erreur chargement planning:', planningError)\r\n            }\r\n\r\n            // Initialiser le planning avec les données existantes ou valeurs par défaut\r\n            const initialPlanning = {}\r\n            jours.forEach(jour => {\r\n                creneaux.forEach(creneau => {\r\n                    const creneauKey = `${jour}-${creneau}`\r\n                    \r\n                    // Chercher si ce créneau existe déjà      \r\n                    const creneauExistant = planningExistant?.find(\r\n                        p => p.jour === jour && p.creneau === creneau\r\n                    )\r\n                    \r\n                    if (creneauExistant) {\r\n                        const statut = statuts.find(s => s.key === creneauExistant.statut)\r\n                        initialPlanning[creneauKey] = {\r\n                            id: creneauExistant.id,\r\n                            statut: creneauExistant.statut,\r\n                            lieu: creneauExistant.lieux,\r\n                            couleurStatut: statut?.couleur || '#9ca3af',\r\n                            couleurLieu: creneauExistant.lieux?.couleur || null,\r\n                            sansPreference: creneauExistant.lieu_id === null && creneauExistant.statut !== 'indisponible'\r\n                        }\r\n                    } else {\r\n                        // Valeur par défaut : indisponible\r\n                        initialPlanning[creneauKey] = {\r\n                            id: null,\r\n                            statut: 'indisponible',\r\n                            lieu: null,\r\n                            couleurStatut: '#9ca3af',\r\n                            couleurLieu: null,\r\n                            sansPreference: false\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            \r\n            setPlanningData(initialPlanning)\r\n\r\n        } catch (error) {\r\n            console.error('Erreur chargement données:', error)\r\n            onError?.(`Erreur chargement: ${error.message}`)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Obtenir le message d'instruction selon l'état\r\n    const getInstructionMessage = () => {\r\n        if (creneauTermine) {\r\n            return \"✅ Vous souhaitez déclarer un autre créneau ? Choisissez une plage (ex: mardi après-midi). Sinon validez.\"\r\n        }\r\n        \r\n        if (!creneauSelectionne) {\r\n            return \"⬇️ Choisissez une plage du planning où vous souhaitez intervenir\"\r\n        }\r\n        \r\n        if (!statutSelectionne) {\r\n            return \"⬇️ Choisissez un statut\"\r\n        }\r\n        \r\n        if (statutSelectionne && !lieuSelectionne && statutSelectionne !== 'indisponible') {\r\n            return \"⬇️ Choisissez un lieu ou 'Sans Préférence'\"\r\n        }\r\n        \r\n        return \"✅ Vous souhaitez déclarer un autre créneau ? Choisissez une plage (ex: mardi après-midi). Sinon validez.\"\r\n    }\r\n\r\n    // Workflow en 3 étapes : Créneau → Statut → Lieu\r\n    const handleCreneauClick = (jour, creneau) => {\r\n        const creneauKey = `${jour}-${creneau}`\r\n        setCreneauSelectionne(creneauKey)\r\n        setStatutSelectionne('')\r\n        setLieuSelectionne(null)\r\n        setCreneauTermine(false)\r\n    }\r\n\r\n    const handleStatutClick = (statutKey) => {\r\n        if (!creneauSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un créneau (ex: Lundi matin)')\r\n            return\r\n        }\r\n        \r\n        setStatutSelectionne(statutKey)\r\n        \r\n        if (statutKey === 'indisponible') {\r\n            const statut = statuts.find(s => s.key === statutKey)\r\n            setPlanningData(prev => ({\r\n                ...prev,\r\n                [creneauSelectionne]: {\r\n                    ...prev[creneauSelectionne],\r\n                    statut: statutKey,\r\n                    lieu: null,\r\n                    couleurStatut: statut.couleur,\r\n                    couleurLieu: null,\r\n                    sansPreference: false\r\n                }\r\n            }))\r\n            \r\n            setCreneauTermine(true)\r\n            setCreneauSelectionne(null)\r\n            setStatutSelectionne('')\r\n        }\r\n    }\r\n\r\n    const handleLieuClick = (lieu) => {\r\n        if (!creneauSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un créneau')\r\n            return\r\n        }\r\n        \r\n        if (!statutSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un statut')\r\n            return\r\n        }\r\n\r\n        if (statutSelectionne === 'indisponible') {\r\n            alert('Pas besoin de lieu pour \"indisponible\"')\r\n            return\r\n        }\r\n\r\n        const statut = statuts.find(s => s.key === statutSelectionne)\r\n        \r\n        setPlanningData(prev => ({\r\n            ...prev,\r\n            [creneauSelectionne]: {\r\n                ...prev[creneauSelectionne],\r\n                statut: statutSelectionne,\r\n                lieu: lieu,\r\n                couleurStatut: statut.couleur,\r\n                couleurLieu: lieu ? lieu.couleur : null,\r\n                sansPreference: false\r\n            }\r\n        }))\r\n\r\n        setCreneauTermine(true)\r\n        setCreneauSelectionne(null)\r\n        setStatutSelectionne('')\r\n        setLieuSelectionne(null)\r\n    }\r\n\r\n    // Gestion \"Sans Préférence\"\r\n    const handleSansPreference = () => {\r\n        if (!creneauSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un créneau')\r\n            return\r\n        }\r\n        \r\n        if (!statutSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un statut')\r\n            return\r\n        }\r\n\r\n        if (statutSelectionne === 'indisponible') {\r\n            alert('Pas besoin de lieu pour \"indisponible\"')\r\n            return\r\n        }\r\n\r\n        const statut = statuts.find(s => s.key === statutSelectionne)\r\n        \r\n        setPlanningData(prev => ({\r\n            ...prev,\r\n            [creneauSelectionne]: {\r\n                ...prev[creneauSelectionne],\r\n                statut: statutSelectionne,\r\n                lieu: null,\r\n                couleurStatut: statut.couleur,\r\n                couleurLieu: null,\r\n                sansPreference: true\r\n            }\r\n        }))\r\n\r\n        setCreneauTermine(true)\r\n        setCreneauSelectionne(null)\r\n        setStatutSelectionne('')\r\n        setLieuSelectionne(null)\r\n    }\r\n\r\n    // Gestion de la validation avec modal message facultatif\r\n    const handleValider = async () => {\r\n        const creneauxModifies = Object.values(planningData).filter(\r\n            data => data.statut !== 'indisponible'\r\n        ).length\r\n        \r\n        if (creneauxModifies === 0) {\r\n            if (!window.confirm('Le formateur sera indisponible sur tous les créneaux. Voulez-vous vraiment valider ce planning ?')) {\r\n                return\r\n            }\r\n        }\r\n\r\n        // Afficher modal pour message facultatif\r\n        setShowMessageModal(true)\r\n    }\r\n\r\n    // ✅ NOUVEAU: Fonction d'envoi de message automatique vers formateur\r\n    const envoyerMessageFormateur = async (messageFacultatif = '') => {\r\n        try {\r\n            if (!formateurData) {\r\n                console.error('Données formateur manquantes')\r\n                return\r\n            }\r\n\r\n            const formateurNom = `${formateurData.prenom} ${formateurData.nom}`\r\n            \r\n            let contenu = `Bonjour ${formateurData.prenom},\\n\\nLes administrateurs ont modifié votre planning type.`\r\n            \r\n            // Ajouter le message facultatif s'il existe\r\n            if (messageFacultatif.trim()) {\r\n                contenu += `\\n\\nMessage de l'équipe :\\n\"${messageFacultatif.trim()}\"`\r\n            }\r\n            \r\n            contenu += `\\n\\nBonne journée !\\nL'équipe de coordination`\r\n            \r\n            const { error } = await supabase\r\n                .from('messages')\r\n                .insert({\r\n                    expediteur_id: null, // null = admin\r\n                    destinataire_id: formateurData.id,\r\n                    expediteur: 'Coordination ACLEF',\r\n                    destinataire: formateurNom,\r\n                    objet: 'Modification de votre planning type',\r\n                    contenu: contenu,\r\n                    type: 'notification',\r\n                    lu: false,\r\n                    archive: false,\r\n                    statut_validation: null,\r\n                    date: new Date().toISOString().split('T')[0],\r\n                    heure: new Date().toTimeString().slice(0, 5)\r\n                })\r\n\r\n            if (error) {\r\n                console.error('Erreur envoi message formateur:', error)\r\n            } else {\r\n                console.log('✅ Message automatique envoyé au formateur:', formateurNom)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n        }\r\n    }\r\n\r\n    // Fonction de validation finale avec envoi message\r\n    const handleValidationFinale = async () => {\r\n        setShowMessageModal(false)\r\n        \r\n        // Envoyer message vers formateur AVANT la sauvegarde\r\n        await envoyerMessageFormateur(messageFacultatif)\r\n        \r\n        // Puis sauvegarder le planning\r\n        await handleSauvegarde()\r\n        \r\n        // Reset du message facultatif\r\n        setMessageFacultatif('')\r\n    }\r\n\r\n    // Sauvegarde en BDD\r\n    const handleSauvegarde = async () => {\r\n        if (!formateurId) {\r\n            onError?.('Erreur: aucun formateur sélectionné')\r\n            return\r\n        }\r\n        \r\n        setIsSaving(true)\r\n        \r\n        try {\r\n            // Préparer les données à insérer/mettre à jour\r\n            const planningEntries = []\r\n            \r\n            jours.forEach(jour => {\r\n                creneaux.forEach(creneau => {\r\n                    const creneauKey = `${jour}-${creneau}`\r\n                    const data = planningData[creneauKey]\r\n                    \r\n                    planningEntries.push({\r\n                        formateur_id: formateurId,\r\n                        jour: jour,\r\n                        creneau: creneau,\r\n                        statut: data.statut,\r\n                        lieu_id: data.lieu?.id || null\r\n                    })\r\n                })\r\n            })\r\n\r\n            // Supprimer les anciennes déclarations du formateur\r\n            const { error: deleteError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .delete()\r\n                .eq('formateur_id', formateurId)\r\n\r\n            if (deleteError) {\r\n                throw new Error(`Erreur suppression: ${deleteError.message}`)\r\n            }\r\n\r\n            // Insérer les nouvelles déclarations\r\n            const { error: insertError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .insert(planningEntries)\r\n\r\n            if (insertError) {\r\n                throw new Error(`Erreur insertion: ${insertError.message}`)\r\n            }\r\n\r\n            // Notifier le succès\r\n            onSuccess?.(`✅ Planning type de ${formateurData?.prenom} ${formateurData?.nom} sauvegardé avec succès !`)\r\n\r\n        } catch (error) {\r\n            console.error('Erreur sauvegarde:', error)\r\n            onError?.(`Erreur lors de la sauvegarde: ${error.message}`)\r\n        } finally {\r\n            setIsSaving(false)\r\n        }\r\n    }\r\n\r\n    // Rendu d'une case de créneau\r\n    const renderCreneau = (jour, creneau) => {\r\n        const creneauKey = `${jour}-${creneau}`\r\n        const data = planningData[creneauKey]\r\n        const isSelected = creneauSelectionne === creneauKey\r\n        \r\n        const style = {\r\n            width: '100%',\r\n            height: '60px',\r\n            border: '2px solid #d1d5db',\r\n            borderRadius: '8px',\r\n            backgroundColor: data?.couleurStatut || '#f3f4f6',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            cursor: 'pointer',\r\n            fontSize: '12px',\r\n            fontWeight: 'bold',\r\n            color: data?.couleurStatut ? '#fff' : '#6b7280',\r\n            position: 'relative',\r\n            transition: 'all 0.2s',\r\n            borderColor: data?.couleurLieu || '#d1d5db',\r\n            borderWidth: data?.couleurLieu ? '3px' : '2px'\r\n        }\r\n\r\n        return (\r\n            <div\r\n                key={creneauKey}\r\n                style={style}\r\n                onClick={() => handleCreneauClick(jour, creneau)}\r\n            >\r\n                {data?.lieu?.initiale ? (\r\n                    <span style={{ fontSize: '14px', fontWeight: 'bold' }}>\r\n                        {data.lieu.initiale}\r\n                    </span>\r\n                ) : data?.sansPreference ? (\r\n                    <span style={{ fontSize: '12px', fontWeight: 'bold' }}>\r\n                        SP\r\n                    </span>\r\n                ) : null}\r\n                \r\n                {isSelected && (\r\n                    <div style={{\r\n                        position: 'absolute',\r\n                        top: '5px',\r\n                        right: '5px',\r\n                        fontSize: '16px',\r\n                        color: '#fbbf24'\r\n                    }}>\r\n                        ⭐\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // Guide contextuel\r\n    const GuideBox = () => (\r\n        <div style={{\r\n            backgroundColor: '#e5f3ff',\r\n            border: '3px solid #3b82f6',\r\n            borderRadius: '10px',\r\n            padding: '10px',\r\n            marginBottom: '12px',\r\n            fontSize: '14px',\r\n            textAlign: 'center',\r\n            fontWeight: 'bold',\r\n            color: '#1d4ed8',\r\n            transition: 'all 0.5s ease-in-out',\r\n            boxShadow: '0 3px 8px rgba(59, 130, 246, 0.2)'\r\n        }}>\r\n            {getInstructionMessage()}\r\n        </div>\r\n    )\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                minHeight: '400px'\r\n            }}>\r\n                <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement du planning...</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!formateurId || !formateurData) {\r\n        return (\r\n            <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                minHeight: '400px',\r\n                backgroundColor: '#f8fafc',\r\n                borderRadius: '12px'\r\n            }}>\r\n                <div style={{ color: '#6b7280', fontSize: '16px' }}>Aucun formateur sélectionné</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div style={{ \r\n            padding: '20px', \r\n            fontFamily: 'system-ui',\r\n            maxWidth: '100%'\r\n        }}>\r\n            {/* Modal pour message facultatif */}\r\n            {showMessageModal && (\r\n                <div style={{\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    backgroundColor: 'rgba(0,0,0,0.5)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    zIndex: 1000\r\n                }}>\r\n                    <div style={{\r\n                        backgroundColor: 'white',\r\n                        borderRadius: '15px',\r\n                        padding: '25px',\r\n                        maxWidth: '500px',\r\n                        width: '90%'\r\n                    }}>\r\n                        <h3 style={{ \r\n                            margin: '0 0 15px 0', \r\n                            fontSize: '18px', \r\n                            color: '#374151',\r\n                            textAlign: 'center'\r\n                        }}>\r\n                            💬 Message facultatif pour {formateurData.prenom}\r\n                        </h3>\r\n                        <p style={{ \r\n                            fontSize: '14px', \r\n                            color: '#6b7280', \r\n                            margin: '0 0 15px 0',\r\n                            textAlign: 'center',\r\n                            lineHeight: '1.4'\r\n                        }}>\r\n                            Souhaitez-vous ajouter un message personnel ?\r\n                            <br />\r\n                            <em>(ex: \"Je préfère vous affecter sur Châtellerault, CCP ou MPT\")</em>\r\n                        </p>\r\n                        <textarea\r\n                            value={messageFacultatif}\r\n                            onChange={(e) => setMessageFacultatif(e.target.value)}\r\n                            placeholder=\"Votre message (optionnel)...\"\r\n                            rows={4}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '12px',\r\n                                border: '2px solid #e5e7eb',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                resize: 'vertical',\r\n                                boxSizing: 'border-box',\r\n                                marginBottom: '20px'\r\n                            }}\r\n                        />\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                onClick={() => setShowMessageModal(false)}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    padding: '12px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: 'bold',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                            <button\r\n                                onClick={handleValidationFinale}\r\n                                disabled={isSaving}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    backgroundColor: isSaving ? '#9ca3af' : '#10b981',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    padding: '12px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: 'bold',\r\n                                    cursor: isSaving ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                {isSaving ? 'Sauvegarde...' : 'Valider'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* En-tête avec aide */}\r\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>\r\n                <h2 style={{ margin: 0, fontSize: '20px', fontWeight: 'bold', color: '#374151' }}>\r\n                    📅 Planning Type - {formateurData.prenom} {formateurData.nom}\r\n                </h2>\r\n                <button\r\n                    onClick={() => setShowAide(!showAide)}\r\n                    style={{\r\n                        backgroundColor: '#ef4444',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '18px',\r\n                        padding: '6px 14px',\r\n                        fontSize: '13px',\r\n                        fontWeight: 'bold',\r\n                        cursor: 'pointer'\r\n                    }}\r\n                >\r\n                    Aide\r\n                </button>\r\n            </div>\r\n\r\n            {/* Aide contextuelle */}\r\n            {showAide && (\r\n                <div style={{\r\n                    backgroundColor: '#e5f3ff',\r\n                    border: '2px solid #3b82f6',\r\n                    borderRadius: '8px',\r\n                    padding: '15px',\r\n                    marginBottom: '20px',\r\n                    fontSize: '13px'\r\n                }}>\r\n                    <div style={{ marginBottom: '8px' }}>\r\n                        <p style={{ margin: '0 0 3px 0', fontWeight: 'bold', fontSize: '12px' }}>\r\n                            🔘 Disponible : Le formateur peut intervenir sur ce créneau normalement.\r\n                        </p>\r\n                        <p style={{ margin: '0 0 3px 0', fontWeight: 'bold', fontSize: '12px' }}>\r\n                            🟡 Disponible exceptionnellement : Le formateur peut intervenir exceptionnellement (remplacements).\r\n                        </p>\r\n                        <p style={{ margin: '0 0 8px 0', fontWeight: 'bold', fontSize: '12px' }}>\r\n                            🟢 Sans Préférence (SP) : Le lieu d'intervention n'a pas d'importance.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Guide contextuel */}\r\n            <GuideBox />\r\n\r\n            {/* Grille du planning - Adapté desktop */}\r\n            <div style={{ marginBottom: '20px' }}>        \r\n                {/* En-têtes des jours */}\r\n                <div style={{ \r\n                    display: 'grid', \r\n                    gridTemplateColumns: '100px repeat(5, 1fr)', \r\n                    gap: '8px', \r\n                    marginBottom: '8px' \r\n                }}>\r\n                    <div></div>\r\n                    {jours.map(jour => (\r\n                        <div key={jour} style={{ \r\n                            textAlign: 'center', \r\n                            fontWeight: 'bold', \r\n                            fontSize: '14px',\r\n                            color: '#374151'\r\n                        }}>\r\n                            {jour}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* Grille des créneaux */}\r\n                {creneaux.map(creneau => (\r\n                    <div key={creneau} style={{ \r\n                        display: 'grid', \r\n                        gridTemplateColumns: '100px repeat(5, 1fr)', \r\n                        gap: '8px', \r\n                        marginBottom: '8px' \r\n                    }}>\r\n                        <div style={{ \r\n                            display: 'flex', \r\n                            alignItems: 'center', \r\n                            fontSize: '14px', \r\n                            fontWeight: 'bold',\r\n                            color: '#374151'\r\n                        }}>\r\n                            {creneau}\r\n                        </div>\r\n                        {jours.map(jour => renderCreneau(jour, creneau))}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {/* Boutons de statut colorés - Desktop */}\r\n            <div style={{ marginBottom: '20px' }}>        \r\n                <h4 style={{ fontSize: '14px', fontWeight: 'bold', marginBottom: '10px', color: '#374151' }}>\r\n                    Choisir un statut :\r\n                </h4>\r\n                <div style={{ display: 'flex', gap: '10px', marginBottom: '15px' }}>\r\n                    {statuts.map(statut => (\r\n                        <button\r\n                            key={statut.key}\r\n                            onClick={() => handleStatutClick(statut.key)}\r\n                            style={{\r\n                                flex: 1,\r\n                                padding: '12px 8px',\r\n                                backgroundColor: statut.couleur,\r\n                                color: 'white',\r\n                                border: statutSelectionne === statut.key ? '3px solid #000' : '2px solid transparent',\r\n                                borderRadius: '8px',\r\n                                fontSize: '12px',\r\n                                fontWeight: 'bold',\r\n                                cursor: 'pointer',\r\n                                transition: 'all 0.2s',\r\n                                opacity: !creneauSelectionne ? 0.5 : 1\r\n                            }}\r\n                            disabled={!creneauSelectionne}\r\n                        >\r\n                            {statut.label}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Boutons de lieux - Desktop */}\r\n            <div style={{ marginBottom: '20px' }}>        \r\n                <h4 style={{ fontSize: '14px', fontWeight: 'bold', marginBottom: '10px', color: '#374151' }}>\r\n                    Choisir un lieu :\r\n                </h4>\r\n                <div style={{ \r\n                    display: 'grid', \r\n                    gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', \r\n                    gap: '8px',\r\n                    marginBottom: '15px'\r\n                }}>\r\n                    {/* Bouton Sans Préférence */}\r\n                    <button\r\n                        onClick={handleSansPreference}\r\n                        style={{\r\n                            padding: '15px 8px',\r\n                            backgroundColor: 'white',\r\n                            border: '3px solid #6b7280',\r\n                            borderRadius: '8px',\r\n                            fontSize: '11px',\r\n                            fontWeight: 'bold',\r\n                            color: '#6b7280',\r\n                            cursor: 'pointer',\r\n                            transition: 'all 0.2s',\r\n                            opacity: !creneauSelectionne || !statutSelectionne || statutSelectionne === 'indisponible' ? 0.5 : 1\r\n                        }}\r\n                        disabled={!creneauSelectionne || !statutSelectionne || statutSelectionne === 'indisponible'}\r\n                    >\r\n                        <div style={{ fontSize: '14px', marginBottom: '2px' }}>SP</div>\r\n                        <div style={{ fontSize: '10px' }}>Sans Préf.</div>\r\n                    </button>\r\n\r\n                    {/* Vrais lieux */}\r\n                    {lieux.map(lieu => (\r\n                        <button\r\n                            key={lieu.id}\r\n                            onClick={() => handleLieuClick(lieu)}\r\n                            style={{\r\n                                padding: '15px 8px',\r\n                                backgroundColor: 'white',\r\n                                border: `3px solid ${lieu.couleur}`,\r\n                                borderRadius: '8px',\r\n                                fontSize: '11px',\r\n                                fontWeight: 'bold',\r\n                                color: lieu.couleur,\r\n                                cursor: 'pointer',\r\n                                transition: 'all 0.2s',\r\n                                opacity: !creneauSelectionne || !statutSelectionne || statutSelectionne === 'indisponible' ? 0.5 : 1\r\n                            }}\r\n                            disabled={!creneauSelectionne || !statutSelectionne || statutSelectionne === 'indisponible'}\r\n                        >\r\n                            <div style={{ fontSize: '14px', marginBottom: '2px' }}>\r\n                                {lieu.initiale}\r\n                            </div>\r\n                            <div style={{ fontSize: '10px' }}>\r\n                                {lieu.nom}\r\n                            </div>\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Bouton de validation */}\r\n            <div style={{ textAlign: 'center' }}>        \r\n                <button\r\n                    onClick={handleValider}\r\n                    disabled={isSaving}\r\n                    style={{\r\n                        backgroundColor: isSaving ? '#9ca3af' : '#10b981',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '12px',\r\n                        padding: '15px 30px',\r\n                        fontSize: '16px',\r\n                        fontWeight: 'bold',\r\n                        cursor: isSaving ? 'not-allowed' : 'pointer'\r\n                    }}\r\n                >\r\n                    {isSaving ? 'Sauvegarde...' : '✅ Valider le planning type'}\r\n                </button>\r\n            </div>\r\n\r\n            {/* Stats */}\r\n            <div style={{\r\n                marginTop: '20px',\r\n                fontSize: '12px',\r\n                color: '#6b7280',\r\n                textAlign: 'center'\r\n            }}>\r\n                {formateurData.prenom} • {Object.values(planningData).filter(d => d.statut !== 'indisponible').length} créneaux disponibles\r\n            </div>\r\n        </div>\r\n    )\r\n}",
          "taille": 32363,
          "lignes": 826,
          "dateModif": "2025-08-28T19:00:40.120Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { supabase } from '../../lib/supabaseClient'\r\n\r\nexport default function PlanningFormateurType({ \r\n    formateurId,\r\n    formateurData,\r\n    onSuccess,\r\n    onError \r\n}) {\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [lieux, setLieux] = useState([])\r\n    const [planningData, setPlanningData] = useState({})\r\n    const [creneauSelectionne, setCreneauSelectionne] = useState(null)\r\n    const [statutSelectionne, setStatutSelectionne] = useState('')\r\n    const [lieuSelectionne, setLieuSelectionne] = useState(null)\r\n    const [creneauTermine, setCreneauTermine] = useState(false)\r\n    const [showAide, setShowAide] = useState(false)\r\n    const [isSaving, setIsSaving] = useState(false)\r\n    const [showMessageModal, setShowMessageModal] = useState(false)\r\n    const [messageFacultatif, setMessageFacultatif] = useState('')\r\n\r\n    // Configuration des jours et créneaux\r\n    const jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi']\r\n    const creneaux = ['Matin', 'AM']\r\n\r\n    // Configuration des statuts avec couleurs\r\n    const statuts = [\r\n        { \r\n            key: 'disponible', \r\n            label: 'DISPONIBLE', \r\n            couleur: '#3b82f6',\r\n            description: 'disponible'\r\n        },\r\n        { \r\n            key: 'dispo_except', \r\n            label: 'DISPO EXCEPT.', \r\n            couleur: '#fbbf24',\r\n            description: 'dispo exceptionnelle'\r\n        },\r\n        { \r\n            key: 'indisponible', \r\n            label: 'INDISPONIBLE', \r\n            couleur: '#9ca3af',\r\n            description: 'indisponible'\r\n        }\r\n    ]\r\n\r\n    useEffect(() => {\r\n        if (formateurId) {\r\n            chargerDonnees(formateurId)\r\n        }\r\n    }, [formateurId])\r\n\r\n    const chargerDonnees = async (id) => {\r\n        try {\r\n            setIsLoading(true)\r\n            \r\n            // Charger les lieux depuis la BDD\r\n            const { data: lieuxData, error: lieuxError } = await supabase\r\n                .from('lieux')\r\n                .select('id, nom, initiale, couleur')\r\n                .eq('archive', false)\r\n                .order('nom')\r\n\r\n            if (lieuxError) {\r\n                console.error('Erreur lieux:', lieuxError)\r\n                setLieux([])\r\n            } else {\r\n                setLieux(lieuxData || [])\r\n            }\r\n\r\n            // Charger le planning type existant du formateur\r\n            const { data: planningExistant, error: planningError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .select(`\r\n                    id,\r\n                    jour,\r\n                    creneau,\r\n                    statut,\r\n                    lieu_id,\r\n                    lieux:lieu_id (\r\n                        id,\r\n                        nom,\r\n                        initiale,\r\n                        couleur\r\n                    )\r\n                `)\r\n                .eq('formateur_id', id)\r\n\r\n            if (planningError) {\r\n                console.error('Erreur chargement planning:', planningError)\r\n            }\r\n\r\n            // Initialiser le planning avec les données existantes ou valeurs par défaut\r\n            const initialPlanning = {}\r\n            jours.forEach(jour => {\r\n                creneaux.forEach(creneau => {\r\n                    const creneauKey = `${jour}-${creneau}`\r\n                    \r\n                    // Chercher si ce créneau existe déjà      \r\n                    const creneauExistant = planningExistant?.find(\r\n                        p => p.jour === jour && p.creneau === creneau\r\n                    )\r\n                    \r\n                    if (creneauExistant) {\r\n                        const statut = statuts.find(s => s.key === creneauExistant.statut)\r\n                        initialPlanning[creneauKey] = {\r\n                            id: creneauExistant.id,\r\n                            statut: creneauExistant.statut,\r\n                            lieu: creneauExistant.lieux,\r\n                            couleurStatut: statut?.couleur || '#9ca3af',\r\n                            couleurLieu: creneauExistant.lieux?.couleur || null,\r\n                            sansPreference: creneauExistant.lieu_id === null && creneauExistant.statut !== 'indisponible'\r\n                        }\r\n                    } else {\r\n                        // Valeur par défaut : indisponible\r\n                        initialPlanning[creneauKey] = {\r\n                            id: null,\r\n                            statut: 'indisponible',\r\n                            lieu: null,\r\n                            couleurStatut: '#9ca3af',\r\n                            couleurLieu: null,\r\n                            sansPreference: false\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            \r\n            setPlanningData(initialPlanning)\r\n\r\n        } catch (error) {\r\n            console.error('Erreur chargement données:', error)\r\n            onError?.(`Erreur chargement: ${error.message}`)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Obtenir le message d'instruction selon l'état\r\n    const getInstructionMessage = () => {\r\n        if (creneauTermine) {\r\n            return \"✅ Vous souhaitez déclarer un autre créneau ? Choisissez une plage (ex: mardi après-midi). Sinon validez.\"\r\n        }\r\n        \r\n        if (!creneauSelectionne) {\r\n            return \"⬇️ Choisissez une plage du planning où vous souhaitez intervenir\"\r\n        }\r\n        \r\n        if (!statutSelectionne) {\r\n            return \"⬇️ Choisissez un statut\"\r\n        }\r\n        \r\n        if (statutSelectionne && !lieuSelectionne && statutSelectionne !== 'indisponible') {\r\n            return \"⬇️ Choisissez un lieu ou 'Sans Préférence'\"\r\n        }\r\n        \r\n        return \"✅ Vous souhaitez déclarer un autre créneau ? Choisissez une plage (ex: mardi après-midi). Sinon validez.\"\r\n    }\r\n\r\n    // Workflow en 3 étapes : Créneau → Statut → Lieu\r\n    const handleCreneauClick = (jour, creneau) => {\r\n        const creneauKey = `${jour}-${creneau}`\r\n        setCreneauSelectionne(creneauKey)\r\n        setStatutSelectionne('')\r\n        setLieuSelectionne(null)\r\n        setCreneauTermine(false)\r\n    }\r\n\r\n    const handleStatutClick = (statutKey) => {\r\n        if (!creneauSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un créneau (ex: Lundi matin)')\r\n            return\r\n        }\r\n        \r\n        setStatutSelectionne(statutKey)\r\n        \r\n        if (statutKey === 'indisponible') {\r\n            const statut = statuts.find(s => s.key === statutKey)\r\n            setPlanningData(prev => ({\r\n                ...prev,\r\n                [creneauSelectionne]: {\r\n                    ...prev[creneauSelectionne],\r\n                    statut: statutKey,\r\n                    lieu: null,\r\n                    couleurStatut: statut.couleur,\r\n                    couleurLieu: null,\r\n                    sansPreference: false\r\n                }\r\n            }))\r\n            \r\n            setCreneauTermine(true)\r\n            setCreneauSelectionne(null)\r\n            setStatutSelectionne('')\r\n        }\r\n    }\r\n\r\n    const handleLieuClick = (lieu) => {\r\n        if (!creneauSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un créneau')\r\n            return\r\n        }\r\n        \r\n        if (!statutSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un statut')\r\n            return\r\n        }\r\n\r\n        if (statutSelectionne === 'indisponible') {\r\n            alert('Pas besoin de lieu pour \"indisponible\"')\r\n            return\r\n        }\r\n\r\n        const statut = statuts.find(s => s.key === statutSelectionne)\r\n        \r\n        setPlanningData(prev => ({\r\n            ...prev,\r\n            [creneauSelectionne]: {\r\n                ...prev[creneauSelectionne],\r\n                statut: statutSelectionne,\r\n                lieu: lieu,\r\n                couleurStatut: statut.couleur,\r\n                couleurLieu: lieu ? lieu.couleur : null,\r\n                sansPreference: false\r\n            }\r\n        }))\r\n\r\n        setCreneauTermine(true)\r\n        setCreneauSelectionne(null)\r\n        setStatutSelectionne('')\r\n        setLieuSelectionne(null)\r\n    }\r\n\r\n    // Gestion \"Sans Préférence\"\r\n    const handleSansPreference = () => {\r\n        if (!creneauSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un créneau')\r\n            return\r\n        }\r\n        \r\n        if (!statutSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un statut')\r\n            return\r\n        }\r\n\r\n        if (statutSelectionne === 'indisponible') {\r\n            alert('Pas besoin de lieu pour \"indisponible\"')\r\n            return\r\n        }\r\n\r\n        const statut = statuts.find(s => s.key === statutSelectionne)\r\n        \r\n        setPlanningData(prev => ({\r\n            ...prev,\r\n            [creneauSelectionne]: {\r\n                ...prev[creneauSelectionne],\r\n                statut: statutSelectionne,\r\n                lieu: null,\r\n                couleurStatut: statut.couleur,\r\n                couleurLieu: null,\r\n                sansPreference: true\r\n            }\r\n        }))\r\n\r\n        setCreneauTermine(true)\r\n        setCreneauSelectionne(null)\r\n        setStatutSelectionne('')\r\n        setLieuSelectionne(null)\r\n    }\r\n\r\n    // Gestion de la validation avec modal message facultatif\r\n    const handleValider = async () => {\r\n        const creneauxModifies = Object.values(planningData).filter(\r\n            data => data.statut !== 'indisponible'\r\n        ).length\r\n        \r\n        if (creneauxModifies === 0) {\r\n            if (!window.confirm('Le formateur sera indisponible sur tous les créneaux. Voulez-vous vraiment valider ce planning ?')) {\r\n                return\r\n            }\r\n        }\r\n\r\n        // Afficher modal pour message facultatif\r\n        setShowMessageModal(true)\r\n    }\r\n\r\n    // ✅ NOUVEAU: Fonction d'envoi de message automatique vers formateur\r\n    const envoyerMessageFormateur = async (messageFacultatif = '') => {\r\n        try {\r\n            if (!formateurData) {\r\n                console.error('Données formateur manquantes')\r\n                return\r\n            }\r\n\r\n            const formateurNom = `${formateurData.prenom} ${formateurData.nom}`\r\n            \r\n            let contenu = `Bonjour ${formateurData.prenom},\\n\\nLes administrateurs ont modifié votre planning type.`\r\n            \r\n            // Ajouter le message facultatif s'il existe\r\n            if (messageFacultatif.trim()) {\r\n                contenu += `\\n\\nMessage de l'équipe :\\n\"${messageFacultatif.trim()}\"`\r\n            }\r\n            \r\n            contenu += `\\n\\nBonne journée !\\nL'équipe de coordination`\r\n            \r\n            const { error } = await supabase\r\n                .from('messages')\r\n                .insert({\r\n                    expediteur_id: null, // null = admin\r\n                    destinataire_id: formateurData.id,\r\n                    expediteur: 'Coordination ACLEF',\r\n                    destinataire: formateurNom,\r\n                    objet: 'Modification de votre planning type',\r\n                    contenu: contenu,\r\n                    type: 'notification',\r\n                    lu: false,\r\n                    archive: false,\r\n                    statut_validation: null,\r\n                    date: new Date().toISOString().split('T')[0],\r\n                    heure: new Date().toTimeString().slice(0, 5)\r\n                })\r\n\r\n            if (error) {\r\n                console.error('Erreur envoi message formateur:', error)\r\n            } else {\r\n                console.log('✅ Message automatique envoyé au formateur:', formateurNom)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n        }\r\n    }\r\n\r\n    // Fonction de validation finale avec envoi message\r\n    const handleValidationFinale = async () => {\r\n        setShowMessageModal(false)\r\n        \r\n        // Envoyer message vers formateur AVANT la sauvegarde\r\n        await envoyerMessageFormateur(messageFacultatif)\r\n        \r\n        // Puis sauvegarder le planning\r\n        await handleSauvegarde()\r\n        \r\n        // Reset du message facultatif\r\n        setMessageFacultatif('')\r\n    }\r\n\r\n    // Sauvegarde en BDD\r\n    const handleSauvegarde = async () => {\r\n        if (!formateurId) {\r\n            onError?.('Erreur: aucun formateur sélectionné')\r\n            return\r\n        }\r\n        \r\n        setIsSaving(true)\r\n        \r\n        try {\r\n            // Préparer les données à insérer/mettre à jour\r\n            const planningEntries = []\r\n            \r\n            jours.forEach(jour => {\r\n                creneaux.forEach(creneau => {\r\n                    const creneauKey = `${jour}-${creneau}`\r\n                    const data = planningData[creneauKey]\r\n                    \r\n                    planningEntries.push({\r\n                        formateur_id: formateurId,\r\n                        jour: jour,\r\n                        creneau: creneau,\r\n                        statut: data.statut,\r\n                        lieu_id: data.lieu?.id || null\r\n                    })\r\n                })\r\n            })\r\n\r\n            // Supprimer les anciennes déclarations du formateur\r\n            const { error: deleteError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .delete()\r\n                .eq('formateur_id', formateurId)\r\n\r\n            if (deleteError) {\r\n                throw new Error(`Erreur suppression: ${deleteError.message}`)\r\n            }\r\n\r\n            // Insérer les nouvelles déclarations\r\n            const { error: insertError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .insert(planningEntries)\r\n\r\n            if (insertError) {\r\n                throw new Error(`Erreur insertion: ${insertError.message}`)\r\n            }\r\n\r\n            // Notifier le succès\r\n            onSuccess?.(`✅ Planning type de ${formateurData?.prenom} ${formateurData?.nom} sauvegardé avec succès !`)\r\n\r\n        } catch (error) {\r\n            console.error('Erreur sauvegarde:', error)\r\n            onError?.(`Erreur lors de la sauvegarde: ${error.message}`)\r\n        } finally {\r\n            setIsSaving(false)\r\n        }\r\n    }\r\n\r\n    // Rendu d'une case de créneau\r\n    const renderCreneau = (jour, creneau) => {\r\n        const creneauKey = `${jour}-${creneau}`\r\n        const data = planningData[creneauKey]\r\n        const isSelected = creneauSelectionne === creneauKey\r\n        \r\n        const style = {\r\n            width: '100%',\r\n            height: '60px',\r\n            border: '2px solid #d1d5db',\r\n            borderRadius: '8px',\r\n            backgroundColor: data?.couleurStatut || '#f3f4f6',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            cursor: 'pointer',\r\n            fontSize: '12px',\r\n            fontWeight: 'bold',\r\n            color: data?.couleurStatut ? '#fff' : '#6b7280',\r\n            position: 'relative',\r\n            transition: 'all 0.2s',\r\n            borderColor: data?.couleurLieu || '#d1d5db',\r\n            borderWidth: data?.couleurLieu ? '3px' : '2px'\r\n        }\r\n\r\n        return (\r\n            <div\r\n                key={creneauKey}\r\n                style={style}\r\n                onClick={() => handleCreneauClick(jour, creneau)}\r\n            >\r\n                {data?.lieu?.initiale ? (\r\n                    <span style={{ fontSize: '14px', fontWeight: 'bold' }}>\r\n                        {data.lieu.initiale}\r\n                    </span>\r\n                ) : data?.sansPreference ? (\r\n                    <span style={{ fontSize: '12px', fontWeight: 'bold' }}>\r\n                        SP\r\n                    </span>\r\n                ) : null}\r\n                \r\n                {isSelected && (\r\n                    <div style={{\r\n                        position: 'absolute',\r\n                        top: '5px',\r\n                        right: '5px',\r\n                        fontSize: '16px',\r\n                        color: '#fbbf24'\r\n                    }}>\r\n                        ⭐\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // Guide contextuel\r\n    const GuideBox = () => (\r\n        <div style={{\r\n            backgroundColor: '#e5f3ff',\r\n            border: '3px solid #3b82f6',\r\n            borderRadius: '10px',\r\n            padding: '10px',\r\n            marginBottom: '12px',\r\n            fontSize: '14px',\r\n            textAlign: 'center',\r\n            fontWeight: 'bold',\r\n            color: '#1d4ed8',\r\n            transition: 'all 0.5s ease-in-out',\r\n            boxShadow: '0 3px 8px rgba(59, 130, 246, 0.2)'\r\n        }}>\r\n            {getInstructionMessage()}\r\n        </div>\r\n    )\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                minHeight: '400px'\r\n            }}>\r\n                <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement du planning...</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!formateurId || !formateurData) {\r\n        return (\r\n            <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                minHeight: '400px',\r\n                backgroundColor: '#f8fafc',\r\n                borderRadius: '12px'\r\n            }}>\r\n                <div style={{ color: '#6b7280', fontSize: '16px' }}>Aucun formateur sélectionné</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div style={{ \r\n            padding: '20px', \r\n            fontFamily: 'system-ui',\r\n            maxWidth: '100%'\r\n        }}>\r\n            {/* Modal pour message facultatif */}\r\n            {showMessageModal && (\r\n                <div style={{\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    backgroundColor: 'rgba(0,0,0,0.5)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    zIndex: 1000\r\n                }}>\r\n                    <div style={{\r\n                        backgroundColor: 'white',\r\n                        borderRadius: '15px',\r\n                        padding: '25px',\r\n                        maxWidth: '500px',\r\n                        width: '90%'\r\n                    }}>\r\n                        <h3 style={{ \r\n                            margin: '0 0 15px 0', \r\n                            fontSize: '18px', \r\n                            color: '#374151',\r\n                            textAlign: 'center'\r\n                        }}>\r\n                            💬 Message facultatif pour {formateurData.prenom}\r\n                        </h3>\r\n                        <p style={{ \r\n                            fontSize: '14px', \r\n                            color: '#6b7280', \r\n                            margin: '0 0 15px 0',\r\n                            textAlign: 'center',\r\n                            lineHeight: '1.4'\r\n                        }}>\r\n                            Souhaitez-vous ajouter un message personnel ?\r\n                            <br />\r\n                            <em>(ex: \"Je préfère vous affecter sur Châtellerault, CCP ou MPT\")</em>\r\n                        </p>\r\n                        <textarea\r\n                            value={messageFacultatif}\r\n                            onChange={(e) => setMessageFacultatif(e.target.value)}\r\n                            placeholder=\"Votre message (optionnel)...\"\r\n                            rows={4}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '12px',\r\n                                border: '2px solid #e5e7eb',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                resize: 'vertical',\r\n                                boxSizing: 'border-box',\r\n                                marginBottom: '20px'\r\n                            }}\r\n                        />\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                onClick={() => setShowMessageModal(false)}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    padding: '12px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: 'bold',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                            <button\r\n                                onClick={handleValidationFinale}\r\n                                disabled={isSaving}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    backgroundColor: isSaving ? '#9ca3af' : '#10b981',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    padding: '12px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: 'bold',\r\n                                    cursor: isSaving ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                {isSaving ? 'Sauvegarde...' : 'Valider'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* En-tête avec aide */}\r\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>\r\n                <h2 style={{ margin: 0, fontSize: '20px', fontWeight: 'bold', color: '#374151' }}>\r\n                    📅 Planning Type - {formateurData.prenom} {formateurData.nom}\r\n                </h2>\r\n                <button\r\n                    onClick={() => setShowAide(!showAide)}\r\n                    style={{\r\n                        backgroundColor: '#ef4444',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '18px',\r\n                        padding: '6px 14px',\r\n                        fontSize: '13px',\r\n                        fontWeight: 'bold',\r\n                        cursor: 'pointer'\r\n                    }}\r\n                >\r\n                    Aide\r\n                </button>\r\n            </div>\r\n\r\n            {/* Aide contextuelle */}\r\n            {showAide && (\r\n                <div style={{\r\n                    backgroundColor: '#e5f3ff',\r\n                    border: '2px solid #3b82f6',\r\n                    borderRadius: '8px',\r\n                    padding: '15px',\r\n                    marginBottom: '20px',\r\n                    fontSize: '13px'\r\n                }}>\r\n                    <div style={{ marginBottom: '8px' }}>\r\n                        <p style={{ margin: '0 0 3px 0', fontWeight: 'bold', fontSize: '12px' }}>\r\n                            🔘 Disponible : Le formateur peut intervenir sur ce créneau normalement.\r\n                        </p>\r\n                        <p style={{ margin: '0 0 3px 0', fontWeight: 'bold', fontSize: '12px' }}>\r\n                            🟡 Disponible exceptionnellement : Le formateur peut intervenir exceptionnellement (remplacements).\r\n                        </p>\r\n                        <p style={{ margin: '0 0 8px 0', fontWeight: 'bold', fontSize: '12px' }}>\r\n                            🟢 Sans Préférence (SP) : Le lieu d'intervention n'a pas d'importance.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Guide contextuel */}\r\n            <GuideBox />\r\n\r\n            {/* Grille du planning - Adapté desktop */}\r\n            <div style={{ marginBottom: '20px' }}>        \r\n                {/* En-têtes des jours */}\r\n                <div style={{ \r\n                    display: 'grid', \r\n                    gridTemplateColumns: '100px repeat(5, 1fr)', \r\n                    gap: '8px', \r\n                    marginBottom: '8px' \r\n                }}>\r\n                    <div></div>\r\n                    {jours.map(jour => (\r\n                        <div key={jour} style={{ \r\n                            textAlign: 'center', \r\n                            fontWeight: 'bold', \r\n                            fontSize: '14px',\r\n                            color: '#374151'\r\n                        }}>\r\n                            {jour}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* Grille des créneaux */}\r\n                {creneaux.map(creneau => (\r\n                    <div key={creneau} style={{ \r\n                        display: 'grid', \r\n                        gridTemplateColumns: '100px repeat(5, 1fr)', \r\n                        gap: '8px', \r\n                        marginBottom: '8px' \r\n                    }}>\r\n                        <div style={{ \r\n                            display: 'flex', \r\n                            alignItems: 'center', \r\n                            fontSize: '14px', \r\n                            fontWeight: 'bold',\r\n                            color: '#374151'\r\n                        }}>\r\n                            {creneau}\r\n                        </div>\r\n                        {jours.map(jour => renderCreneau(jour, creneau))}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {/* Boutons de statut colorés - Desktop */}\r\n            <div style={{ marginBottom: '20px' }}>        \r\n                <h4 style={{ fontSize: '14px', fontWeight: 'bold', marginBottom: '10px', color: '#374151' }}>\r\n                    Choisir un statut :\r\n                </h4>\r\n                <div style={{ display: 'flex', gap: '10px', marginBottom: '15px' }}>\r\n                    {statuts.map(statut => (\r\n                        <button\r\n                            key={statut.key}\r\n                            onClick={() => handleStatutClick(statut.key)}\r\n                            style={{\r\n                                flex: 1,\r\n                                padding: '12px 8px',\r\n                                backgroundColor: statut.couleur,\r\n                                color: 'white',\r\n                                border: statutSelectionne === statut.key ? '3px solid #000' : '2px solid transparent',\r\n                                borderRadius: '8px',\r\n                                fontSize: '12px',\r\n                                fontWeight: 'bold',\r\n                                cursor: 'pointer',\r\n                                transition: 'all 0.2s',\r\n                                opacity: !creneauSelectionne ? 0.5 : 1\r\n                            }}\r\n                            disabled={!creneauSelectionne}\r\n                        >\r\n                            {statut.label}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Boutons de lieux - Desktop */}\r\n            <div style={{ marginBottom: '20px' }}>        \r\n                <h4 style={{ fontSize: '14px', fontWeight: 'bold', marginBottom: '10px', color: '#374151' }}>\r\n                    Choisir un lieu :\r\n                </h4>\r\n                <div style={{ \r\n                    display: 'grid', \r\n                    gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', \r\n                    gap: '8px',\r\n                    marginBottom: '15px'\r\n                }}>\r\n                    {/* Bouton Sans Préférence */}\r\n                    <button\r\n                        onClick={handleSansPreference}\r\n                        style={{\r\n                            padding: '15px 8px',\r\n                            backgroundColor: 'white',\r\n                            border: '3px solid #6b7280',\r\n                            borderRadius: '8px',\r\n                            fontSize: '11px',\r\n                            fontWeight: 'bold',\r\n                            color: '#6b7280',\r\n                            cursor: 'pointer',\r\n                            transition: 'all 0.2s',\r\n                            opacity: !creneauSelectionne || !statutSelectionne || statutSelectionne === 'indisponible' ? 0.5 : 1\r\n                        }}\r\n                        disabled={!creneauSelectionne || !statutSelectionne || statutSelectionne === 'indisponible'}\r\n                    >\r\n                        <div style={{ fontSize: '14px', marginBottom: '2px' }}>SP</div>\r\n                        <div style={{ fontSize: '10px' }}>Sans Préf.</div>\r\n                    </button>\r\n\r\n                    {/* Vrais lieux */}\r\n                    {lieux.map(lieu => (\r\n                        <button\r\n                            key={lieu.id}\r\n                            onClick={() => handleLieuClick(lieu)}\r\n                            style={{\r\n                                padding: '15px 8px',\r\n                                backgroundColor: 'white',\r\n                                border: `3px solid ${lieu.couleur}`,\r\n                                borderRadius: '8px',\r\n                                fontSize: '11px',\r\n                                fontWeight: 'bold',\r\n                                color: lieu.couleur,\r\n                                cursor: 'pointer',\r\n                                transition: 'all 0.2s',\r\n                                opacity: !creneauSelectionne || !statutSelectionne || statutSelectionne === 'indisponible' ? 0.5 : 1\r\n                            }}\r\n                            disabled={!creneauSelectionne || !statutSelectionne || statutSelectionne === 'indisponible'}\r\n                        >\r\n                            <div style={{ fontSize: '14px', marginBottom: '2px' }}>\r\n                                {lieu.initiale}\r\n                            </div>\r\n                            <div style={{ fontSize: '10px' }}>\r\n                                {lieu.nom}\r\n                            </div>\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Bouton de validation */}\r\n            <div style={{ textAlign: 'center' }}>        \r\n                <button\r\n                    onClick={handleValider}\r\n                    disabled={isSaving}\r\n                    style={{\r\n                        backgroundColor: isSaving ? '#9ca3af' : '#10b981',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '12px',\r\n                        padding: '15px 30px',\r\n                        fontSize: '16px',\r\n                        fontWeight: 'bold',\r\n                        cursor: isSaving ? 'not-allowed' : 'pointer'\r\n                    }}\r\n                >\r\n                    {isSaving ? 'Sauvegarde...' : '✅ Valider le planning type'}\r\n                </button>\r\n            </div>\r\n\r\n            {/* Stats */}\r\n            <div style={{\r\n                marginTop: '20px',\r\n                fontSize: '12px',\r\n                color: '#6b7280',\r\n                textAlign: 'center'\r\n            }}>\r\n                {formateurData.prenom} • {Object.values(planningData).filter(d => d.statut !== 'indisponible').length} créneaux disponibles\r\n            </div>\r\n        </div>\r\n    )\r\n}",
          "taille": 32363,
          "lignes": 826,
          "dateModif": "2025-08-17T06:28:53.430Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "components/withAuthAdmin.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useEffect, useState } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\n\r\n// 🚨 DÉCONNEXION AUTOMATIQUE SUR FERMETURE BRUTALE\r\nconst deconnexionUrgence = (user) => {\r\n  if (!user?.email) return false\r\n\r\n  try {\r\n    const data = JSON.stringify({\r\n      action: 'emergency_logout',\r\n      adminEmail: user.email,\r\n      timestamp: Date.now()\r\n    })\r\n\r\n    // 1. Essayer SendBeacon (priorité)\r\n    if (navigator.sendBeacon) {\r\n      const success = navigator.sendBeacon('/api/admin-auth', data)\r\n      if (success) {\r\n        console.log('🚨 Déconnexion urgence SendBeacon envoyée')\r\n        return true\r\n      }\r\n    }\r\n\r\n    // 2. Fallback XHR synchrone\r\n    const client = new XMLHttpRequest()\r\n    client.open(\"POST\", \"/api/admin-auth\", false)\r\n    client.setRequestHeader(\"Content-Type\", \"application/json\")\r\n    client.send(data)\r\n\r\n    if (client.status === 200) {\r\n      console.log('🚨 Déconnexion urgence XHR envoyée')\r\n      return true\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('❌ Erreur déconnexion urgence:', error)\r\n  }\r\n  \r\n  return false\r\n}\r\n\r\n// 🛡️ HOC UNIVERSEL DE PROTECTION ADMIN\r\n// Reproduit exactement la logique de index.js pour toutes les pages admin\r\nexport function withAuthAdmin(WrappedComponent, pageTitle = \"Page Admin\") {\r\n  return function ProtectedAdminPage(props) {\r\n    const [user, setUser] = useState(null)\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [sessionValid, setSessionValid] = useState(false)\r\n    const [inactivityTime, setInactivityTime] = useState(0) // Temps d'inactivité en secondes\r\n    const [lastHeartbeat, setLastHeartbeat] = useState(null) // Dernier heartbeat\r\n    const router = useRouter()\r\n\r\n    const verifyAdminSession = async (supabaseUser) => {\r\n      try {\r\n        // Vérifier la session dans la Table d'Émeraude\r\n        const { data: adminSession, error } = await supabase\r\n          .from('admin_sessions')\r\n          .select('*')\r\n          .eq('admin_user_id', supabaseUser.id)\r\n          .eq('is_active', true)\r\n          .single()\r\n\r\n        if (error || !adminSession) {\r\n          console.warn('❌ Session admin non trouvée dans la Table d\\'Émeraude')\r\n          return false\r\n        }\r\n\r\n        // Vérifier si la session n'est pas expirée (exemple: 24h)\r\n        const sessionStart = new Date(adminSession.session_start)\r\n        const now = new Date()\r\n        const hoursDiff = (now - sessionStart) / (1000 * 60 * 60)\r\n\r\n        if (hoursDiff > 24) {\r\n          console.warn('❌ Session expirée (plus de 24h)')\r\n          // Désactiver la session expirée\r\n          await supabase\r\n            .from('admin_sessions')\r\n            .update({ is_active: false })\r\n            .eq('id', adminSession.id)\r\n          return false\r\n        }\r\n\r\n        // Mettre à jour le heartbeat\r\n        await supabase\r\n          .from('admin_sessions')\r\n          .update({ heartbeat: new Date().toISOString() })\r\n          .eq('id', adminSession.id)\r\n\r\n        console.log('✅ Session admin valide dans la Table d\\'Émeraude')\r\n        return true\r\n\r\n      } catch (error) {\r\n        console.error('Erreur vérification session admin:', error)\r\n        return false\r\n      }\r\n    }\r\n\r\n    const checkAuthentication = async () => {\r\n      try {\r\n        setIsLoading(true)\r\n\r\n        // Attendre la restauration automatique de session Supabase (important lors du refresh)\r\n        await new Promise(resolve => setTimeout(resolve, 500))\r\n\r\n        // 1. Vérifier l'authentification Supabase\r\n        const { data: { user: supabaseUser }, error } = await supabase.auth.getUser()\r\n\r\n        if (error || !supabaseUser) {\r\n          console.warn('❌ Pas d\\'utilisateur Supabase authentifié après attente')\r\n          router.push('/login')\r\n          return\r\n        }\r\n\r\n        // 2. Vérifier la session admin dans la Table d'Émeraude\r\n        const sessionIsValid = await verifyAdminSession(supabaseUser)\r\n        \r\n        if (!sessionIsValid) {\r\n          console.warn('❌ Session admin invalide, redirection vers login')\r\n          router.push('/login')\r\n          return\r\n        }\r\n\r\n        // 3. Utilisateur valide - configurer l'état\r\n        setUser({\r\n          id: supabaseUser.id,\r\n          email: supabaseUser.email,\r\n          role: 'admin',\r\n          nom: 'Admin',\r\n          prenom: 'ACLEF',\r\n          dateConnexion: new Date().toISOString()\r\n        })\r\n\r\n        setSessionValid(true)\r\n        console.log('✅ Accès autorisé au temple protégé pour:', supabaseUser.email)\r\n\r\n      } catch (error) {\r\n        console.error('Erreur vérification authentification:', error)\r\n        router.push('/login')\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    useEffect(() => {\r\n      checkAuthentication()\r\n\r\n      // 💡 HEARTBEAT INTELLIGENT : Seulement sur activité réelle\r\n      let lastActivity = Date.now()\r\n      \r\n      // Détecter l'activité utilisateur\r\n      const resetActivity = () => {\r\n        lastActivity = Date.now()\r\n        setInactivityTime(0) // Reset du compteur\r\n        console.log('🟢 Activité détectée, gardien éveillé')\r\n      }\r\n      \r\n      // 🚪 DÉCONNEXION FORCÉE À LA FERMETURE (mais pas au refresh)\r\n      let isPageRefresh = false\r\n      \r\n      const handlePageUnload = async (e) => {\r\n        try {\r\n          // Distinguer refresh (F5) vs fermeture réelle de l'onglet\r\n          const isRefresh = e.persisted || (window.performance && window.performance.navigation.type === 1)\r\n          \r\n          if (isRefresh) {\r\n            console.log('🔄 Refresh détecté - Session préservée')\r\n            return // Ne pas désactiver la session sur refresh\r\n          }\r\n          \r\n          console.log('🚪 Fermeture réelle détectée - Déconnexion forcée...')\r\n          \r\n          // 🚨 NOUVELLE SOLUTION : Déconnexion urgence avec SendBeacon/XHR\r\n          if (user && sessionValid) {\r\n            console.log('🚪 Fermeture détectée, déconnexion urgence...')\r\n            deconnexionUrgence(user)\r\n          }\r\n          \r\n          // Garder le code de sauvegarde existant\r\n          const { data: { user: currentUser } } = await supabase.auth.getUser()\r\n          if (currentUser) {\r\n            // Désactiver la session seulement en cas de fermeture réelle\r\n            await supabase\r\n              .from('admin_sessions')\r\n              .update({ is_active: false })\r\n              .eq('admin_user_id', currentUser.id)\r\n              .eq('is_active', true)\r\n            \r\n            console.log('✅ Session désactivée à la fermeture réelle')\r\n          }\r\n        } catch (error) {\r\n          console.error('Erreur déconnexion fermeture:', error)\r\n        }\r\n      }\r\n\r\n      // Écouter la fermeture sur les deux événements pour maximiser les chances\r\n      window.addEventListener('beforeunload', handlePageUnload)\r\n      window.addEventListener('unload', handlePageUnload)\r\n\r\n      // Événements d'activité\r\n      const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click']\r\n      activityEvents.forEach(event => {\r\n        document.addEventListener(event, resetActivity, true)\r\n      })\r\n\r\n      // COMPTEUR D'INACTIVITÉ (toutes les secondes)\r\n      const inactivityCounter = setInterval(() => {\r\n        const inactiveSeconds = Math.floor((Date.now() - lastActivity) / 1000)\r\n        setInactivityTime(inactiveSeconds)\r\n        \r\n        if (inactiveSeconds >= 240) { // 240 secondes = 4 minutes (alerte avant 5min)\r\n          console.log('😴 GARDIEN ENDORMI DÉTECTÉ ! Expulsion imminente...')\r\n        }\r\n      }, 1000)\r\n\r\n      // HEARTBEAT seulement si activité récente\r\n      const heartbeatInterval = setInterval(async () => {\r\n        try {\r\n          const { data: { user: currentUser } } = await supabase.auth.getUser()\r\n          if (currentUser && sessionValid) {\r\n            const inactiveTime = (Date.now() - lastActivity) / 1000 / 60 // minutes\r\n            \r\n            if (inactiveTime < 1) { // Actif dans la dernière minute\r\n              const now = new Date().toISOString()\r\n              await supabase\r\n                .from('admin_sessions')\r\n                .update({ heartbeat: now })\r\n                .eq('admin_user_id', currentUser.id)\r\n                .eq('is_active', true)\r\n              \r\n              setLastHeartbeat(now)\r\n              console.log('💡 Heartbeat gardien actif envoyé')\r\n            } else {\r\n              console.log('😴 Pas de heartbeat - gardien inactif depuis', inactiveTime.toFixed(1), 'minutes')\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Erreur heartbeat:', error)\r\n        }\r\n      }, 30000) // 30 secondes\r\n\r\n      // 😴 EXPULSION DIRECTE : Basée sur l'inactivité locale (toutes les 5 secondes)\r\n      const surveillantInterval = setInterval(async () => {\r\n        try {\r\n          const { data: { user: currentUser } } = await supabase.auth.getUser()\r\n          if (currentUser && sessionValid) {\r\n            // VÉRIFICATION DIRECTE de l'inactivité locale (pas la DB !)\r\n            const inactiveTime = (Date.now() - lastActivity) / 1000 / 60 // minutes\r\n            \r\n            if (inactiveTime > 5) { // 🎯 5 MINUTES\r\n              console.log('😴 INACTIVITÉ LOCALE DÉTECTÉE ! Auto-expulsion en cours...')\r\n              \r\n              // Auto-expulsion\r\n              await supabase\r\n                .from('admin_sessions')\r\n                .update({ is_active: false })\r\n                .eq('admin_user_id', currentUser.id)\r\n              \r\n              // Déconnexion forcée\r\n              await supabase.auth.signOut()\r\n              \r\n              alert('⚔️ EXPULSION : Vous avez été déconnecté pour inactivité (5 minutes) !')\r\n              router.push('/login')\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Erreur surveillant:', error)\r\n        }\r\n      }, 5000) // 5 secondes\r\n\r\n      // Écouter les changements d'état d'authentification\r\n      const { data: { subscription } } = supabase.auth.onAuthStateChange(\r\n        async (event, session) => {\r\n          if (event === 'SIGNED_OUT' || !session) {\r\n            console.log('🚪 Déconnexion détectée')\r\n            clearInterval(heartbeatInterval)\r\n            clearInterval(surveillantInterval)\r\n            router.push('/login')\r\n          }\r\n        }\r\n      )\r\n\r\n      return () => {\r\n        subscription.unsubscribe()\r\n        clearInterval(heartbeatInterval)\r\n        clearInterval(surveillantInterval)\r\n        clearInterval(inactivityCounter)\r\n        \r\n        // Nettoyer les événements d'activité\r\n        activityEvents.forEach(event => {\r\n          document.removeEventListener(event, resetActivity, true)\r\n        })\r\n        \r\n        // Nettoyer les événements de fermeture\r\n        window.removeEventListener('beforeunload', handlePageUnload)\r\n        window.removeEventListener('unload', handlePageUnload)\r\n      }\r\n    }, [router, sessionValid])\r\n\r\n    const logout = async () => {\r\n      try {\r\n        // 1. Désactiver la session admin\r\n        const { data: { user: currentUser } } = await supabase.auth.getUser()\r\n        if (currentUser) {\r\n          await supabase\r\n            .from('admin_sessions')\r\n            .update({ is_active: false })\r\n            .eq('admin_user_id', currentUser.id)\r\n            .eq('is_active', true)\r\n        }\r\n\r\n        // 2. Déconnexion Supabase\r\n        await supabase.auth.signOut()\r\n\r\n        // 3. Nettoyage localStorage (compatibility)\r\n        localStorage.removeItem('admin_connecte')\r\n        localStorage.removeItem('admin_session_token')\r\n\r\n        console.log('✅ Déconnexion complète')\r\n\r\n        // 4. Redirection\r\n        router.push('/login')\r\n\r\n      } catch (error) {\r\n        console.error('Erreur déconnexion:', error)\r\n        // Forcer la redirection même en cas d'erreur\r\n        router.push('/login')\r\n      }\r\n    }\r\n\r\n    // État de chargement\r\n    if (isLoading) {\r\n      return (\r\n        <div style={{\r\n          minHeight: '100vh',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          backgroundColor: '#f3f4f6'\r\n        }}>\r\n          <div style={{\r\n            textAlign: 'center',\r\n            color: '#666'\r\n          }}>\r\n            <div style={{ fontSize: '24px', marginBottom: '10px' }}>🔑</div>\r\n            <div>Vérification des accès...</div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    // Accès non autorisé\r\n    if (!user || !sessionValid) {\r\n      return (\r\n        <div style={{\r\n          minHeight: '100vh',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          backgroundColor: '#f3f4f6'\r\n        }}>\r\n          <div style={{\r\n            textAlign: 'center',\r\n            color: '#666'\r\n          }}>\r\n            <div style={{ fontSize: '24px', marginBottom: '10px' }}>❌</div>\r\n            <div>Accès non autorisé. Redirection...</div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    // 🎯 RENDU SANS PANNEAU DE SURVEILLANCE\r\n    return (\r\n      <WrappedComponent {...props} user={user} logout={logout} inactivityTime={inactivityTime} />\r\n    )\r\n  }\r\n}",
          "taille": 13336,
          "lignes": 378,
          "dateModif": "2025-08-28T19:00:40.134Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useEffect, useState } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\n\r\n// 🚨 DÉCONNEXION AUTOMATIQUE SUR FERMETURE BRUTALE\r\nconst deconnexionUrgence = (user) => {\r\n  if (!user?.email) return false\r\n\r\n  try {\r\n    const data = JSON.stringify({\r\n      action: 'emergency_logout',\r\n      adminEmail: user.email,\r\n      timestamp: Date.now()\r\n    })\r\n\r\n    // 1. Essayer SendBeacon (priorité)\r\n    if (navigator.sendBeacon) {\r\n      const success = navigator.sendBeacon('/api/admin-auth', data)\r\n      if (success) {\r\n        console.log('🚨 Déconnexion urgence SendBeacon envoyée')\r\n        return true\r\n      }\r\n    }\r\n\r\n    // 2. Fallback XHR synchrone\r\n    const client = new XMLHttpRequest()\r\n    client.open(\"POST\", \"/api/admin-auth\", false)\r\n    client.setRequestHeader(\"Content-Type\", \"application/json\")\r\n    client.send(data)\r\n\r\n    if (client.status === 200) {\r\n      console.log('🚨 Déconnexion urgence XHR envoyée')\r\n      return true\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('❌ Erreur déconnexion urgence:', error)\r\n  }\r\n  \r\n  return false\r\n}\r\n\r\n// 🛡️ HOC UNIVERSEL DE PROTECTION ADMIN\r\n// Reproduit exactement la logique de index.js pour toutes les pages admin\r\nexport function withAuthAdmin(WrappedComponent, pageTitle = \"Page Admin\") {\r\n  return function ProtectedAdminPage(props) {\r\n    const [user, setUser] = useState(null)\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [sessionValid, setSessionValid] = useState(false)\r\n    const [inactivityTime, setInactivityTime] = useState(0) // Temps d'inactivité en secondes\r\n    const [lastHeartbeat, setLastHeartbeat] = useState(null) // Dernier heartbeat\r\n    const router = useRouter()\r\n\r\n    const verifyAdminSession = async (supabaseUser) => {\r\n      try {\r\n        // Vérifier la session dans la Table d'Émeraude\r\n        const { data: adminSession, error } = await supabase\r\n          .from('admin_sessions')\r\n          .select('*')\r\n          .eq('admin_user_id', supabaseUser.id)\r\n          .eq('is_active', true)\r\n          .single()\r\n\r\n        if (error || !adminSession) {\r\n          console.warn('❌ Session admin non trouvée dans la Table d\\'Émeraude')\r\n          return false\r\n        }\r\n\r\n        // Vérifier si la session n'est pas expirée (exemple: 24h)\r\n        const sessionStart = new Date(adminSession.session_start)\r\n        const now = new Date()\r\n        const hoursDiff = (now - sessionStart) / (1000 * 60 * 60)\r\n\r\n        if (hoursDiff > 24) {\r\n          console.warn('❌ Session expirée (plus de 24h)')\r\n          // Désactiver la session expirée\r\n          await supabase\r\n            .from('admin_sessions')\r\n            .update({ is_active: false })\r\n            .eq('id', adminSession.id)\r\n          return false\r\n        }\r\n\r\n        // Mettre à jour le heartbeat\r\n        await supabase\r\n          .from('admin_sessions')\r\n          .update({ heartbeat: new Date().toISOString() })\r\n          .eq('id', adminSession.id)\r\n\r\n        console.log('✅ Session admin valide dans la Table d\\'Émeraude')\r\n        return true\r\n\r\n      } catch (error) {\r\n        console.error('Erreur vérification session admin:', error)\r\n        return false\r\n      }\r\n    }\r\n\r\n    const checkAuthentication = async () => {\r\n      try {\r\n        setIsLoading(true)\r\n\r\n        // Attendre la restauration automatique de session Supabase (important lors du refresh)\r\n        await new Promise(resolve => setTimeout(resolve, 500))\r\n\r\n        // 1. Vérifier l'authentification Supabase\r\n        const { data: { user: supabaseUser }, error } = await supabase.auth.getUser()\r\n\r\n        if (error || !supabaseUser) {\r\n          console.warn('❌ Pas d\\'utilisateur Supabase authentifié après attente')\r\n          router.push('/login')\r\n          return\r\n        }\r\n\r\n        // 2. Vérifier la session admin dans la Table d'Émeraude\r\n        const sessionIsValid = await verifyAdminSession(supabaseUser)\r\n        \r\n        if (!sessionIsValid) {\r\n          console.warn('❌ Session admin invalide, redirection vers login')\r\n          router.push('/login')\r\n          return\r\n        }\r\n\r\n        // 3. Utilisateur valide - configurer l'état\r\n        setUser({\r\n          id: supabaseUser.id,\r\n          email: supabaseUser.email,\r\n          role: 'admin',\r\n          nom: 'Admin',\r\n          prenom: 'ACLEF',\r\n          dateConnexion: new Date().toISOString()\r\n        })\r\n\r\n        setSessionValid(true)\r\n        console.log('✅ Accès autorisé au temple protégé pour:', supabaseUser.email)\r\n\r\n      } catch (error) {\r\n        console.error('Erreur vérification authentification:', error)\r\n        router.push('/login')\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    useEffect(() => {\r\n      checkAuthentication()\r\n\r\n      // 💡 HEARTBEAT INTELLIGENT : Seulement sur activité réelle\r\n      let lastActivity = Date.now()\r\n      \r\n      // Détecter l'activité utilisateur\r\n      const resetActivity = () => {\r\n        lastActivity = Date.now()\r\n        setInactivityTime(0) // Reset du compteur\r\n        console.log('🟢 Activité détectée, gardien éveillé')\r\n      }\r\n      \r\n      // 🚪 DÉCONNEXION FORCÉE À LA FERMETURE (mais pas au refresh)\r\n      let isPageRefresh = false\r\n      \r\n      const handlePageUnload = async (e) => {\r\n        try {\r\n          // Distinguer refresh (F5) vs fermeture réelle de l'onglet\r\n          const isRefresh = e.persisted || (window.performance && window.performance.navigation.type === 1)\r\n          \r\n          if (isRefresh) {\r\n            console.log('🔄 Refresh détecté - Session préservée')\r\n            return // Ne pas désactiver la session sur refresh\r\n          }\r\n          \r\n          console.log('🚪 Fermeture réelle détectée - Déconnexion forcée...')\r\n          \r\n          // 🚨 NOUVELLE SOLUTION : Déconnexion urgence avec SendBeacon/XHR\r\n          if (user && sessionValid) {\r\n            console.log('🚪 Fermeture détectée, déconnexion urgence...')\r\n            deconnexionUrgence(user)\r\n          }\r\n          \r\n          // Garder le code de sauvegarde existant\r\n          const { data: { user: currentUser } } = await supabase.auth.getUser()\r\n          if (currentUser) {\r\n            // Désactiver la session seulement en cas de fermeture réelle\r\n            await supabase\r\n              .from('admin_sessions')\r\n              .update({ is_active: false })\r\n              .eq('admin_user_id', currentUser.id)\r\n              .eq('is_active', true)\r\n            \r\n            console.log('✅ Session désactivée à la fermeture réelle')\r\n          }\r\n        } catch (error) {\r\n          console.error('Erreur déconnexion fermeture:', error)\r\n        }\r\n      }\r\n\r\n      // Écouter la fermeture sur les deux événements pour maximiser les chances\r\n      window.addEventListener('beforeunload', handlePageUnload)\r\n      window.addEventListener('unload', handlePageUnload)\r\n\r\n      // Événements d'activité\r\n      const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click']\r\n      activityEvents.forEach(event => {\r\n        document.addEventListener(event, resetActivity, true)\r\n      })\r\n\r\n      // COMPTEUR D'INACTIVITÉ (toutes les secondes)\r\n      const inactivityCounter = setInterval(() => {\r\n        const inactiveSeconds = Math.floor((Date.now() - lastActivity) / 1000)\r\n        setInactivityTime(inactiveSeconds)\r\n        \r\n        if (inactiveSeconds >= 240) { // 240 secondes = 4 minutes (alerte avant 5min)\r\n          console.log('😴 GARDIEN ENDORMI DÉTECTÉ ! Expulsion imminente...')\r\n        }\r\n      }, 1000)\r\n\r\n      // HEARTBEAT seulement si activité récente\r\n      const heartbeatInterval = setInterval(async () => {\r\n        try {\r\n          const { data: { user: currentUser } } = await supabase.auth.getUser()\r\n          if (currentUser && sessionValid) {\r\n            const inactiveTime = (Date.now() - lastActivity) / 1000 / 60 // minutes\r\n            \r\n            if (inactiveTime < 1) { // Actif dans la dernière minute\r\n              const now = new Date().toISOString()\r\n              await supabase\r\n                .from('admin_sessions')\r\n                .update({ heartbeat: now })\r\n                .eq('admin_user_id', currentUser.id)\r\n                .eq('is_active', true)\r\n              \r\n              setLastHeartbeat(now)\r\n              console.log('💡 Heartbeat gardien actif envoyé')\r\n            } else {\r\n              console.log('😴 Pas de heartbeat - gardien inactif depuis', inactiveTime.toFixed(1), 'minutes')\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Erreur heartbeat:', error)\r\n        }\r\n      }, 30000) // 30 secondes\r\n\r\n      // 😴 EXPULSION DIRECTE : Basée sur l'inactivité locale (toutes les 5 secondes)\r\n      const surveillantInterval = setInterval(async () => {\r\n        try {\r\n          const { data: { user: currentUser } } = await supabase.auth.getUser()\r\n          if (currentUser && sessionValid) {\r\n            // VÉRIFICATION DIRECTE de l'inactivité locale (pas la DB !)\r\n            const inactiveTime = (Date.now() - lastActivity) / 1000 / 60 // minutes\r\n            \r\n            if (inactiveTime > 5) { // 🎯 5 MINUTES\r\n              console.log('😴 INACTIVITÉ LOCALE DÉTECTÉE ! Auto-expulsion en cours...')\r\n              \r\n              // Auto-expulsion\r\n              await supabase\r\n                .from('admin_sessions')\r\n                .update({ is_active: false })\r\n                .eq('admin_user_id', currentUser.id)\r\n              \r\n              // Déconnexion forcée\r\n              await supabase.auth.signOut()\r\n              \r\n              alert('⚔️ EXPULSION : Vous avez été déconnecté pour inactivité (5 minutes) !')\r\n              router.push('/login')\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Erreur surveillant:', error)\r\n        }\r\n      }, 5000) // 5 secondes\r\n\r\n      // Écouter les changements d'état d'authentification\r\n      const { data: { subscription } } = supabase.auth.onAuthStateChange(\r\n        async (event, session) => {\r\n          if (event === 'SIGNED_OUT' || !session) {\r\n            console.log('🚪 Déconnexion détectée')\r\n            clearInterval(heartbeatInterval)\r\n            clearInterval(surveillantInterval)\r\n            router.push('/login')\r\n          }\r\n        }\r\n      )\r\n\r\n      return () => {\r\n        subscription.unsubscribe()\r\n        clearInterval(heartbeatInterval)\r\n        clearInterval(surveillantInterval)\r\n        clearInterval(inactivityCounter)\r\n        \r\n        // Nettoyer les événements d'activité\r\n        activityEvents.forEach(event => {\r\n          document.removeEventListener(event, resetActivity, true)\r\n        })\r\n        \r\n        // Nettoyer les événements de fermeture\r\n        window.removeEventListener('beforeunload', handlePageUnload)\r\n        window.removeEventListener('unload', handlePageUnload)\r\n      }\r\n    }, [router, sessionValid])\r\n\r\n    const logout = async () => {\r\n      try {\r\n        // 1. Désactiver la session admin\r\n        const { data: { user: currentUser } } = await supabase.auth.getUser()\r\n        if (currentUser) {\r\n          await supabase\r\n            .from('admin_sessions')\r\n            .update({ is_active: false })\r\n            .eq('admin_user_id', currentUser.id)\r\n            .eq('is_active', true)\r\n        }\r\n\r\n        // 2. Déconnexion Supabase\r\n        await supabase.auth.signOut()\r\n\r\n        // 3. Nettoyage localStorage (compatibility)\r\n        localStorage.removeItem('admin_connecte')\r\n        localStorage.removeItem('admin_session_token')\r\n\r\n        console.log('✅ Déconnexion complète')\r\n\r\n        // 4. Redirection\r\n        router.push('/login')\r\n\r\n      } catch (error) {\r\n        console.error('Erreur déconnexion:', error)\r\n        // Forcer la redirection même en cas d'erreur\r\n        router.push('/login')\r\n      }\r\n    }\r\n\r\n    // État de chargement\r\n    if (isLoading) {\r\n      return (\r\n        <div style={{\r\n          minHeight: '100vh',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          backgroundColor: '#f3f4f6'\r\n        }}>\r\n          <div style={{\r\n            textAlign: 'center',\r\n            color: '#666'\r\n          }}>\r\n            <div style={{ fontSize: '24px', marginBottom: '10px' }}>🔑</div>\r\n            <div>Vérification des accès...</div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    // Accès non autorisé\r\n    if (!user || !sessionValid) {\r\n      return (\r\n        <div style={{\r\n          minHeight: '100vh',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          backgroundColor: '#f3f4f6'\r\n        }}>\r\n          <div style={{\r\n            textAlign: 'center',\r\n            color: '#666'\r\n          }}>\r\n            <div style={{ fontSize: '24px', marginBottom: '10px' }}>❌</div>\r\n            <div>Accès non autorisé. Redirection...</div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    // 🎯 RENDU SANS PANNEAU DE SURVEILLANCE\r\n    return (\r\n      <WrappedComponent {...props} user={user} logout={logout} inactivityTime={inactivityTime} />\r\n    )\r\n  }\r\n}",
          "taille": 13336,
          "lignes": 378,
          "dateModif": "2025-08-22T22:01:35.289Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "components/withAuthFormateur.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { useFormateurAuth } from '../contexts/FormateurAuthContext'\r\n\r\nexport function withAuthFormateur(WrappedComponent, options = {}) {\r\n  return function ProtectedFormateurPage(props) {\r\n    const { user, isLoading, isAuthenticated, logout, mustChangePassword } = useFormateurAuth()\r\n    const router = useRouter()\r\n    const { \r\n      redirectTo = '/formateur/login',\r\n      allowUnauthenticated = false,\r\n      requirePasswordChange = false\r\n    } = options\r\n\r\n    useEffect(() => {\r\n      if (isLoading) return\r\n\r\n      // Si pas authentifié et que l'accès non-auth n'est pas autorisé\r\n      if (!isAuthenticated && !allowUnauthenticated) {\r\n        router.push(redirectTo)\r\n        return\r\n      }\r\n\r\n      // Si utilisateur doit changer son mot de passe\r\n      if (isAuthenticated && mustChangePassword() && !requirePasswordChange) {\r\n        // Rediriger vers la page de changement de mot de passe\r\n        // sauf si on est déjà sur cette page\r\n        if (router.pathname !== '/formateur/change-password') {\r\n          router.push('/formateur/change-password')\r\n        }\r\n        return\r\n      }\r\n\r\n      // Si on est sur la page de changement de mot de passe \r\n      // mais qu'on n'a plus besoin de changer le mot de passe\r\n      if (isAuthenticated && !mustChangePassword() && router.pathname === '/formateur/change-password') {\r\n        router.push('/formateur')\r\n        return\r\n      }\r\n\r\n    }, [isLoading, isAuthenticated, router, mustChangePassword])\r\n\r\n    // État de chargement\r\n    if (isLoading) {\r\n      return (\r\n        <div style={{\r\n          minHeight: '100vh',\r\n          backgroundColor: '#ffffff',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center'\r\n        }}>\r\n          <div style={{\r\n            textAlign: 'center',\r\n            color: '#667eea'\r\n          }}>\r\n            <div style={{ fontSize: '24px', marginBottom: '10px' }}>🔄</div>\r\n            <div>Vérification de l'authentification...</div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    // Accès non autorisé (redirection en cours)\r\n    if (!isAuthenticated && !allowUnauthenticated) {\r\n      return (\r\n        <div style={{\r\n          minHeight: '100vh',\r\n          backgroundColor: '#ffffff',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center'\r\n        }}>\r\n          <div style={{\r\n            textAlign: 'center',\r\n            color: '#666'\r\n          }}>\r\n            <div style={{ fontSize: '24px', marginBottom: '10px' }}>🔐</div>\r\n            <div>Redirection vers la connexion...</div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    // Changement de mot de passe requis (redirection en cours)\r\n    if (isAuthenticated && mustChangePassword() && !requirePasswordChange) {\r\n      return (\r\n        <div style={{\r\n          minHeight: '100vh',\r\n          backgroundColor: '#ffffff',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center'\r\n        }}>\r\n          <div style={{\r\n            textAlign: 'center',\r\n            color: '#f59e0b'\r\n          }}>\r\n            <div style={{ fontSize: '24px', marginBottom: '10px' }}>🔑</div>\r\n            <div>Changement de mot de passe requis...</div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    // Composant protégé avec authentification JWT\r\n    return <WrappedComponent {...props} user={user} logout={logout} />\r\n  }\r\n}",
          "taille": 3531,
          "lignes": 109,
          "dateModif": "2025-08-28T19:00:40.147Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { useFormateurAuth } from '../contexts/FormateurAuthContext'\r\n\r\nexport function withAuthFormateur(WrappedComponent, options = {}) {\r\n  return function ProtectedFormateurPage(props) {\r\n    const { user, isLoading, isAuthenticated, logout, mustChangePassword } = useFormateurAuth()\r\n    const router = useRouter()\r\n    const { \r\n      redirectTo = '/formateur/login',\r\n      allowUnauthenticated = false,\r\n      requirePasswordChange = false\r\n    } = options\r\n\r\n    useEffect(() => {\r\n      if (isLoading) return\r\n\r\n      // Si pas authentifié et que l'accès non-auth n'est pas autorisé\r\n      if (!isAuthenticated && !allowUnauthenticated) {\r\n        router.push(redirectTo)\r\n        return\r\n      }\r\n\r\n      // Si utilisateur doit changer son mot de passe\r\n      if (isAuthenticated && mustChangePassword() && !requirePasswordChange) {\r\n        // Rediriger vers la page de changement de mot de passe\r\n        // sauf si on est déjà sur cette page\r\n        if (router.pathname !== '/formateur/change-password') {\r\n          router.push('/formateur/change-password')\r\n        }\r\n        return\r\n      }\r\n\r\n      // Si on est sur la page de changement de mot de passe \r\n      // mais qu'on n'a plus besoin de changer le mot de passe\r\n      if (isAuthenticated && !mustChangePassword() && router.pathname === '/formateur/change-password') {\r\n        router.push('/formateur')\r\n        return\r\n      }\r\n\r\n    }, [isLoading, isAuthenticated, router, mustChangePassword])\r\n\r\n    // État de chargement\r\n    if (isLoading) {\r\n      return (\r\n        <div style={{\r\n          minHeight: '100vh',\r\n          backgroundColor: '#ffffff',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center'\r\n        }}>\r\n          <div style={{\r\n            textAlign: 'center',\r\n            color: '#667eea'\r\n          }}>\r\n            <div style={{ fontSize: '24px', marginBottom: '10px' }}>🔄</div>\r\n            <div>Vérification de l'authentification...</div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    // Accès non autorisé (redirection en cours)\r\n    if (!isAuthenticated && !allowUnauthenticated) {\r\n      return (\r\n        <div style={{\r\n          minHeight: '100vh',\r\n          backgroundColor: '#ffffff',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center'\r\n        }}>\r\n          <div style={{\r\n            textAlign: 'center',\r\n            color: '#666'\r\n          }}>\r\n            <div style={{ fontSize: '24px', marginBottom: '10px' }}>🔐</div>\r\n            <div>Redirection vers la connexion...</div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    // Changement de mot de passe requis (redirection en cours)\r\n    if (isAuthenticated && mustChangePassword() && !requirePasswordChange) {\r\n      return (\r\n        <div style={{\r\n          minHeight: '100vh',\r\n          backgroundColor: '#ffffff',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center'\r\n        }}>\r\n          <div style={{\r\n            textAlign: 'center',\r\n            color: '#f59e0b'\r\n          }}>\r\n            <div style={{ fontSize: '24px', marginBottom: '10px' }}>🔑</div>\r\n            <div>Changement de mot de passe requis...</div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    // Composant protégé avec authentification JWT\r\n    return <WrappedComponent {...props} user={user} logout={logout} />\r\n  }\r\n}",
          "taille": 3531,
          "lignes": 109,
          "dateModif": "2025-08-20T21:59:53.363Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "contexts/FormateurAuthContext - vercel.js",
      "resultat": {
        "statut": "LOCAL_SEULEMENT",
        "local": {
          "existe": true,
          "contenu": "import { createContext, useContext, useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\n\r\n// Contexte d'authentification pour les formateurs\r\nconst FormateurAuthContext = createContext({})\r\n\r\nexport function useFormateurAuth() {\r\n    return useContext(FormateurAuthContext)\r\n}\r\n\r\nexport function FormateurAuthProvider({ children }) {\r\n    const [user, setUser] = useState(null)\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false)\r\n    const router = useRouter()\r\n\r\n    // Rafraîchir le token automatiquement\r\n    const refreshToken = async () => {\r\n        try {\r\n            const refresh = localStorage.getItem('formateur_refresh')\r\n            if (!refresh) return false\r\n\r\n            const response = await fetch('/api/auth/formateur/refresh', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ refreshToken: refresh })\r\n            })\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Échec du rafraîchissement')\r\n            }\r\n\r\n            const data = await response.json()\r\n\r\n            // Mettre à jour les tokens\r\n            localStorage.setItem('formateur_token', data.tokens.accessToken)\r\n            localStorage.setItem('formateur_refresh', data.tokens.refreshToken)\r\n            localStorage.setItem('formateur_user', JSON.stringify(data.user))\r\n\r\n            setUser(data.user)\r\n            setIsAuthenticated(true)\r\n\r\n            return true\r\n        } catch (error) {\r\n            console.error('Erreur rafraîchissement token:', error)\r\n            return false\r\n        }\r\n    }\r\n\r\n    // Vérifier le token\r\n    const verifyToken = async () => {\r\n        try {\r\n            const token = localStorage.getItem('formateur_token')\r\n            if (!token) return false\r\n\r\n            const response = await fetch('/api/auth/formateur/verify', {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`\r\n                }\r\n            })\r\n\r\n            if (!response.ok) {\r\n                // Tenter un rafraîchissement\r\n                return await refreshToken()\r\n            }\r\n\r\n            const data = await response.json()\r\n            \r\n            if (data.valid) {\r\n                setUser(data.user)\r\n                setIsAuthenticated(true)\r\n                \r\n                // Vérifier si le token expire bientôt (moins de 5 minutes)\r\n                if (data.token.expiresIn < 300) {\r\n                    await refreshToken()\r\n                }\r\n                \r\n                return true\r\n            }\r\n\r\n            return false\r\n        } catch (error) {\r\n            console.error('Erreur vérification token:', error)\r\n            return false\r\n        }\r\n    }\r\n\r\n    // Connexion\r\n    const login = async (username, password) => {\r\n        try {\r\n            const response = await fetch('/api/auth/formateur/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ username, password })\r\n            })\r\n\r\n            let data\r\n            try {\r\n                data = await response.json()\r\n            } catch (parseError) {\r\n                console.error('❌ Erreur parsing JSON:', parseError)\r\n                return { success: false, error: 'Réponse serveur invalide' }\r\n            }\r\n\r\n            if (!response.ok) {\r\n                console.error('❌ Erreur API login:', data.error)\r\n                return { success: false, error: data.error || 'Identifiants incorrects' }\r\n            }\r\n\r\n            // Stocker les tokens et infos\r\n            localStorage.setItem('formateur_token', data.tokens.accessToken)\r\n            localStorage.setItem('formateur_refresh', data.tokens.refreshToken)\r\n            localStorage.setItem('formateur_user', JSON.stringify(data.user))\r\n            localStorage.setItem('formateur_session', data.sessionId)\r\n\r\n            setUser(data.user)\r\n            setIsAuthenticated(true)\r\n\r\n            // Afficher encouragement si connexion avec nom\r\n            if (data.showEncouragement) {\r\n                setTimeout(() => {\r\n                    alert('💡 Conseil sécurité : Vous pouvez définir un mot de passe personnalisé dans votre profil pour plus de sécurité !')\r\n                }, 500)\r\n            }\r\n\r\n            // Redirection\r\n            router.push('/formateur')\r\n\r\n            return { success: true, user: data.user }\r\n\r\n        } catch (error) {\r\n            console.error('💥 Erreur réseau login:', error)\r\n            // Gérer les différents types d'erreurs\r\n            if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n                return { success: false, error: 'Impossible de contacter le serveur. Vérifiez votre connexion.' }\r\n            }\r\n            return { success: false, error: error.message || 'Erreur inattendue lors de la connexion' }\r\n        }\r\n    }\r\n\r\n    // Déconnexion\r\n    const logout = async () => {\r\n        try {\r\n            const token = localStorage.getItem('formateur_token')\r\n            \r\n            // Appeler l'API de déconnexion\r\n            if (token) {\r\n                await fetch('/api/auth/formateur/logout', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`\r\n                    }\r\n                })\r\n            }\r\n        } catch (error) {\r\n            console.error('Erreur logout API:', error)\r\n        } finally {\r\n            // Nettoyer le localStorage dans tous les cas\r\n            localStorage.removeItem('formateur_token')\r\n            localStorage.removeItem('formateur_refresh')\r\n            localStorage.removeItem('formateur_user')\r\n            localStorage.removeItem('formateur_session')\r\n            localStorage.removeItem('formateur_connecte') // Compatibilité ancien système\r\n\r\n            setUser(null)\r\n            setIsAuthenticated(false)\r\n\r\n            // Redirection vers login\r\n            router.push('/formateur/login')\r\n        }\r\n    }\r\n\r\n    // Changement de mot de passe\r\n    const changePassword = async (currentPassword, newPassword) => {\r\n        try {\r\n            console.log('🔐 [CHANGE-PASSWORD] Début changement mot de passe')\r\n            const token = localStorage.getItem('formateur_token')\r\n            console.log('🔐 [CHANGE-PASSWORD] Token récupéré:', token ? 'EXISTE' : 'MANQUANT')\r\n            \r\n            console.log('🔐 [CHANGE-PASSWORD] Appel API /api/auth/formateur/change-password')\r\n            const response = await fetch('/api/auth/formateur/change-password', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify({ currentPassword, newPassword })\r\n            })\r\n\r\n            console.log('🔐 [CHANGE-PASSWORD] Réponse API status:', response.status, response.statusText)\r\n            const data = await response.json()\r\n            console.log('🔐 [CHANGE-PASSWORD] Données API:', data)\r\n\r\n            if (!response.ok) {\r\n                console.error('🔐 [CHANGE-PASSWORD] Erreur API:', data.error)\r\n                throw new Error(data.error || 'Erreur lors du changement')\r\n            }\r\n\r\n            // Mettre à jour les tokens si fournis\r\n            if (data.tokens) {\r\n                localStorage.setItem('formateur_token', data.tokens.accessToken)\r\n                localStorage.setItem('formateur_refresh', data.tokens.refreshToken)\r\n            }\r\n\r\n            // Mettre à jour l'utilisateur\r\n            const updatedUser = { ...user, mustChangePassword: false }\r\n            localStorage.setItem('formateur_user', JSON.stringify(updatedUser))\r\n            setUser(updatedUser)\r\n\r\n            return { success: true }\r\n\r\n        } catch (error) {\r\n            console.error('Erreur changement mot de passe:', error)\r\n            return { success: false, error: error.message }\r\n        }\r\n    }\r\n\r\n    // Récupérer les infos utilisateur depuis le token\r\n    const getUserFromToken = () => {\r\n        try {\r\n            const userData = localStorage.getItem('formateur_user')\r\n            if (userData) {\r\n                return JSON.parse(userData)\r\n            }\r\n            return null\r\n        } catch (error) {\r\n            console.error('Erreur parsing user data:', error)\r\n            return null\r\n        }\r\n    }\r\n\r\n    // Vérifier si l'utilisateur doit changer son mot de passe\r\n    const mustChangePassword = () => {\r\n        return user && user.mustChangePassword === true\r\n    }\r\n\r\n    // Vérifier si la session est toujours valide (pas expirée côté serveur)\r\n    const checkSessionValidity = async () => {\r\n        try {\r\n            const token = localStorage.getItem('formateur_token')\r\n            const sessionId = localStorage.getItem('formateur_session')\r\n            \r\n            if (!token || !sessionId) return false\r\n\r\n            const response = await fetch('/api/auth/formateur/session-check', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify({ sessionId })\r\n            })\r\n\r\n            if (!response.ok) {\r\n                return false\r\n            }\r\n\r\n            const data = await response.json()\r\n            return data.valid || false\r\n\r\n        } catch (error) {\r\n            console.error('Erreur vérification session:', error)\r\n            return false\r\n        }\r\n    }\r\n\r\n    // Forcer la déconnexion (en cas d'erreur critique)\r\n    const forceLogout = () => {\r\n        localStorage.removeItem('formateur_token')\r\n        localStorage.removeItem('formateur_refresh')\r\n        localStorage.removeItem('formateur_user')\r\n        localStorage.removeItem('formateur_session')\r\n        localStorage.removeItem('formateur_connecte')\r\n\r\n        setUser(null)\r\n        setIsAuthenticated(false)\r\n        setIsLoading(false)\r\n\r\n        // Redirection immédiate sans appel API\r\n        router.push('/formateur/login')\r\n    }\r\n\r\n    // Initialisation au montage\r\n    useEffect(() => {\r\n        const initAuth = async () => {\r\n            setIsLoading(true)\r\n\r\n            // Vérifier d'abord le localStorage\r\n            const userData = getUserFromToken()\r\n            if (userData) {\r\n                setUser(userData)\r\n                \r\n                // Vérifier la validité du token\r\n                const isValid = await verifyToken()\r\n                if (!isValid) {\r\n                    // Token invalide, nettoyer et rediriger\r\n                    await logout()\r\n                }\r\n            }\r\n\r\n            setIsLoading(false)\r\n        }\r\n\r\n        initAuth()\r\n    }, [])\r\n\r\n    // Auto-rafraîchissement du token (toutes les 10 minutes)\r\n    useEffect(() => {\r\n        if (!isAuthenticated) return\r\n\r\n        const interval = setInterval(async () => {\r\n            const success = await refreshToken()\r\n            if (!success) {\r\n                console.warn('Échec du rafraîchissement automatique')\r\n            }\r\n        }, 10 * 60 * 1000) // 10 minutes\r\n\r\n        return () => clearInterval(interval)\r\n    }, [isAuthenticated])\r\n\r\n    // Intercepteur pour les erreurs 401\r\n    useEffect(() => {\r\n        const handleUnauthorized = async (event) => {\r\n            if (event.detail?.status === 401) {\r\n                // Tenter un rafraîchissement\r\n                const success = await refreshToken()\r\n                if (!success) {\r\n                    await logout()\r\n                }\r\n            }\r\n        }\r\n\r\n        window.addEventListener('unauthorized', handleUnauthorized)\r\n        return () => window.removeEventListener('unauthorized', handleUnauthorized)\r\n    }, [])\r\n\r\n    const value = {\r\n        user,\r\n        isLoading,\r\n        isAuthenticated,\r\n        login,\r\n        logout,\r\n        changePassword,\r\n        refreshToken,\r\n        verifyToken,\r\n        mustChangePassword,\r\n        checkSessionValidity,\r\n        forceLogout,\r\n        getUserFromToken\r\n    }\r\n\r\n    return (\r\n        <FormateurAuthContext.Provider value={value}>\r\n            {children}\r\n        </FormateurAuthContext.Provider>\r\n    )\r\n}",
          "taille": 12581,
          "lignes": 362,
          "dateModif": "2025-08-30T06:28:39.190Z",
          "erreur": null
        },
        "vercel": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🟡 Fichier existe seulement en local"
      }
    },
    {
      "fichier": "contexts/FormateurAuthContext.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { createContext, useContext, useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\n\r\n// Contexte d'authentification pour les formateurs\r\nconst FormateurAuthContext = createContext({})\r\n\r\nexport function useFormateurAuth() {\r\n    return useContext(FormateurAuthContext)\r\n}\r\n\r\nexport function FormateurAuthProvider({ children }) {\r\n    const [user, setUser] = useState(null)\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false)\r\n    const router = useRouter()\r\n\r\n    // Rafraîchir le token automatiquement\r\n    const refreshToken = async () => {\r\n        try {\r\n            const refresh = localStorage.getItem('formateur_refresh')\r\n            if (!refresh) return false\r\n\r\n            const response = await fetch('/api/auth/formateur/refresh', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ refreshToken: refresh })\r\n            })\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Échec du rafraîchissement')\r\n            }\r\n\r\n            const data = await response.json()\r\n\r\n            // Mettre à jour les tokens\r\n            localStorage.setItem('formateur_token', data.tokens.accessToken)\r\n            localStorage.setItem('formateur_refresh', data.tokens.refreshToken)\r\n            localStorage.setItem('formateur_user', JSON.stringify(data.user))\r\n\r\n            setUser(data.user)\r\n            setIsAuthenticated(true)\r\n\r\n            return true\r\n        } catch (error) {\r\n            console.error('Erreur rafraîchissement token:', error)\r\n            return false\r\n        }\r\n    }\r\n\r\n    // Vérifier le token\r\n    const verifyToken = async () => {\r\n        try {\r\n            const token = localStorage.getItem('formateur_token')\r\n            if (!token) return false\r\n\r\n            const response = await fetch('/api/auth/formateur/verify', {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`\r\n                }\r\n            })\r\n\r\n            if (!response.ok) {\r\n                // Tenter un rafraîchissement\r\n                return await refreshToken()\r\n            }\r\n\r\n            const data = await response.json()\r\n            \r\n            if (data.valid) {\r\n                setUser(data.user)\r\n                setIsAuthenticated(true)\r\n                \r\n                // Vérifier si le token expire bientôt (moins de 5 minutes)\r\n                if (data.token.expiresIn < 300) {\r\n                    await refreshToken()\r\n                }\r\n                \r\n                return true\r\n            }\r\n\r\n            return false\r\n        } catch (error) {\r\n            console.error('Erreur vérification token:', error)\r\n            return false\r\n        }\r\n    }\r\n\r\n    // Connexion\r\n    const login = async (username, password) => {\r\n        try {\r\n            const response = await fetch('/api/auth/formateur/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ username, password })\r\n            })\r\n\r\n            let data\r\n            try {\r\n                data = await response.json()\r\n            } catch (parseError) {\r\n                console.error('❌ Erreur parsing JSON:', parseError)\r\n                return { success: false, error: 'Réponse serveur invalide' }\r\n            }\r\n\r\n            if (!response.ok) {\r\n                console.error('❌ Erreur API login:', data.error)\r\n                return { success: false, error: data.error || 'Identifiants incorrects' }\r\n            }\r\n\r\n            // Stocker les tokens et infos\r\n            localStorage.setItem('formateur_token', data.tokens.accessToken)\r\n            localStorage.setItem('formateur_refresh', data.tokens.refreshToken)\r\n            localStorage.setItem('formateur_user', JSON.stringify(data.user))\r\n            localStorage.setItem('formateur_session', data.sessionId)\r\n\r\n            setUser(data.user)\r\n            setIsAuthenticated(true)\r\n\r\n            // Afficher encouragement si connexion avec nom\r\n            if (data.showEncouragement) {\r\n                setTimeout(() => {\r\n                    alert('💡 Conseil sécurité : Vous pouvez définir un mot de passe personnalisé dans votre profil pour plus de sécurité !')\r\n                }, 500)\r\n            }\r\n\r\n            // Redirection\r\n            router.push('/formateur')\r\n\r\n            return { success: true, user: data.user }\r\n\r\n        } catch (error) {\r\n            console.error('💥 Erreur réseau login:', error)\r\n            // Gérer les différents types d'erreurs\r\n            if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n                return { success: false, error: 'Impossible de contacter le serveur. Vérifiez votre connexion.' }\r\n            }\r\n            return { success: false, error: error.message || 'Erreur inattendue lors de la connexion' }\r\n        }\r\n    }\r\n\r\n    // Déconnexion\r\n    const logout = async () => {\r\n        try {\r\n            const token = localStorage.getItem('formateur_token')\r\n            \r\n            // Appeler l'API de déconnexion\r\n            if (token) {\r\n                await fetch('/api/auth/formateur/logout', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`\r\n                    }\r\n                })\r\n            }\r\n        } catch (error) {\r\n            console.error('Erreur logout API:', error)\r\n        } finally {\r\n            // Nettoyer le localStorage dans tous les cas\r\n            localStorage.removeItem('formateur_token')\r\n            localStorage.removeItem('formateur_refresh')\r\n            localStorage.removeItem('formateur_user')\r\n            localStorage.removeItem('formateur_session')\r\n            localStorage.removeItem('formateur_connecte') // Compatibilité ancien système\r\n\r\n            setUser(null)\r\n            setIsAuthenticated(false)\r\n\r\n            // Redirection vers login\r\n            router.push('/formateur/login')\r\n        }\r\n    }\r\n\r\n    // Changement de mot de passe\r\n    const changePassword = async (currentPassword, newPassword) => {\r\n        try {\r\n            const token = localStorage.getItem('formateur_token')\r\n            \r\n            const response = await fetch('/api/auth/formateur/change-password', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify({ currentPassword, newPassword })\r\n            })\r\n\r\n            const data = await response.json()\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Erreur lors du changement')\r\n            }\r\n\r\n            // Mettre à jour les tokens si fournis\r\n            if (data.tokens) {\r\n                localStorage.setItem('formateur_token', data.tokens.accessToken)\r\n                localStorage.setItem('formateur_refresh', data.tokens.refreshToken)\r\n            }\r\n\r\n            // Mettre à jour l'utilisateur\r\n            const updatedUser = { ...user, mustChangePassword: false }\r\n            localStorage.setItem('formateur_user', JSON.stringify(updatedUser))\r\n            setUser(updatedUser)\r\n\r\n            return { success: true }\r\n\r\n        } catch (error) {\r\n            console.error('Erreur changement mot de passe:', error)\r\n            return { success: false, error: error.message }\r\n        }\r\n    }\r\n\r\n    // Récupérer les infos utilisateur depuis le token\r\n    const getUserFromToken = () => {\r\n        try {\r\n            const userData = localStorage.getItem('formateur_user')\r\n            if (userData) {\r\n                return JSON.parse(userData)\r\n            }\r\n            return null\r\n        } catch (error) {\r\n            console.error('Erreur parsing user data:', error)\r\n            return null\r\n        }\r\n    }\r\n\r\n    // Vérifier si l'utilisateur doit changer son mot de passe\r\n    const mustChangePassword = () => {\r\n        return user && user.mustChangePassword === true\r\n    }\r\n\r\n    // Vérifier si la session est toujours valide (pas expirée côté serveur)\r\n    const checkSessionValidity = async () => {\r\n        try {\r\n            const token = localStorage.getItem('formateur_token')\r\n            const sessionId = localStorage.getItem('formateur_session')\r\n            \r\n            if (!token || !sessionId) return false\r\n\r\n            const response = await fetch('/api/auth/formateur/session-check', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify({ sessionId })\r\n            })\r\n\r\n            if (!response.ok) {\r\n                return false\r\n            }\r\n\r\n            const data = await response.json()\r\n            return data.valid || false\r\n\r\n        } catch (error) {\r\n            console.error('Erreur vérification session:', error)\r\n            return false\r\n        }\r\n    }\r\n\r\n    // Forcer la déconnexion (en cas d'erreur critique)\r\n    const forceLogout = () => {\r\n        localStorage.removeItem('formateur_token')\r\n        localStorage.removeItem('formateur_refresh')\r\n        localStorage.removeItem('formateur_user')\r\n        localStorage.removeItem('formateur_session')\r\n        localStorage.removeItem('formateur_connecte')\r\n\r\n        setUser(null)\r\n        setIsAuthenticated(false)\r\n        setIsLoading(false)\r\n\r\n        // Redirection immédiate sans appel API\r\n        router.push('/formateur/login')\r\n    }\r\n\r\n    // Initialisation au montage\r\n    useEffect(() => {\r\n        const initAuth = async () => {\r\n            setIsLoading(true)\r\n\r\n            // Vérifier d'abord le localStorage\r\n            const userData = getUserFromToken()\r\n            if (userData) {\r\n                setUser(userData)\r\n                \r\n                // Vérifier la validité du token\r\n                const isValid = await verifyToken()\r\n                if (!isValid) {\r\n                    // Token invalide, nettoyer et rediriger\r\n                    await logout()\r\n                }\r\n            }\r\n\r\n            setIsLoading(false)\r\n        }\r\n\r\n        initAuth()\r\n    }, [])\r\n\r\n    // Auto-rafraîchissement du token (toutes les 10 minutes)\r\n    useEffect(() => {\r\n        if (!isAuthenticated) return\r\n\r\n        const interval = setInterval(async () => {\r\n            const success = await refreshToken()\r\n            if (!success) {\r\n                console.warn('Échec du rafraîchissement automatique')\r\n            }\r\n        }, 10 * 60 * 1000) // 10 minutes\r\n\r\n        return () => clearInterval(interval)\r\n    }, [isAuthenticated])\r\n\r\n    // Intercepteur pour les erreurs 401\r\n    useEffect(() => {\r\n        const handleUnauthorized = async (event) => {\r\n            if (event.detail?.status === 401) {\r\n                // Tenter un rafraîchissement\r\n                const success = await refreshToken()\r\n                if (!success) {\r\n                    await logout()\r\n                }\r\n            }\r\n        }\r\n\r\n        window.addEventListener('unauthorized', handleUnauthorized)\r\n        return () => window.removeEventListener('unauthorized', handleUnauthorized)\r\n    }, [])\r\n\r\n    const value = {\r\n        user,\r\n        isLoading,\r\n        isAuthenticated,\r\n        login,\r\n        logout,\r\n        changePassword,\r\n        refreshToken,\r\n        verifyToken,\r\n        mustChangePassword,\r\n        checkSessionValidity,\r\n        forceLogout,\r\n        getUserFromToken\r\n    }\r\n\r\n    return (\r\n        <FormateurAuthContext.Provider value={value}>\r\n            {children}\r\n        </FormateurAuthContext.Provider>\r\n    )\r\n}",
          "taille": 12039,
          "lignes": 356,
          "dateModif": "2025-08-28T19:00:40.148Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { createContext, useContext, useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\n\r\n// Contexte d'authentification pour les formateurs\r\nconst FormateurAuthContext = createContext({})\r\n\r\nexport function useFormateurAuth() {\r\n    return useContext(FormateurAuthContext)\r\n}\r\n\r\nexport function FormateurAuthProvider({ children }) {\r\n    const [user, setUser] = useState(null)\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false)\r\n    const router = useRouter()\r\n\r\n    // Rafraîchir le token automatiquement\r\n    const refreshToken = async () => {\r\n        try {\r\n            const refresh = localStorage.getItem('formateur_refresh')\r\n            if (!refresh) return false\r\n\r\n            const response = await fetch('/api/auth/formateur/refresh', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ refreshToken: refresh })\r\n            })\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Échec du rafraîchissement')\r\n            }\r\n\r\n            const data = await response.json()\r\n\r\n            // Mettre à jour les tokens\r\n            localStorage.setItem('formateur_token', data.tokens.accessToken)\r\n            localStorage.setItem('formateur_refresh', data.tokens.refreshToken)\r\n            localStorage.setItem('formateur_user', JSON.stringify(data.user))\r\n\r\n            setUser(data.user)\r\n            setIsAuthenticated(true)\r\n\r\n            return true\r\n        } catch (error) {\r\n            console.error('Erreur rafraîchissement token:', error)\r\n            return false\r\n        }\r\n    }\r\n\r\n    // Vérifier le token\r\n    const verifyToken = async () => {\r\n        try {\r\n            const token = localStorage.getItem('formateur_token')\r\n            if (!token) return false\r\n\r\n            const response = await fetch('/api/auth/formateur/verify', {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`\r\n                }\r\n            })\r\n\r\n            if (!response.ok) {\r\n                // Tenter un rafraîchissement\r\n                return await refreshToken()\r\n            }\r\n\r\n            const data = await response.json()\r\n            \r\n            if (data.valid) {\r\n                setUser(data.user)\r\n                setIsAuthenticated(true)\r\n                \r\n                // Vérifier si le token expire bientôt (moins de 5 minutes)\r\n                if (data.token.expiresIn < 300) {\r\n                    await refreshToken()\r\n                }\r\n                \r\n                return true\r\n            }\r\n\r\n            return false\r\n        } catch (error) {\r\n            console.error('Erreur vérification token:', error)\r\n            return false\r\n        }\r\n    }\r\n\r\n    // Connexion\r\n    const login = async (username, password) => {\r\n        try {\r\n            const response = await fetch('/api/auth/formateur/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ username, password })\r\n            })\r\n\r\n            let data\r\n            try {\r\n                data = await response.json()\r\n            } catch (parseError) {\r\n                console.error('❌ Erreur parsing JSON:', parseError)\r\n                return { success: false, error: 'Réponse serveur invalide' }\r\n            }\r\n\r\n            if (!response.ok) {\r\n                console.error('❌ Erreur API login:', data.error)\r\n                return { success: false, error: data.error || 'Identifiants incorrects' }\r\n            }\r\n\r\n            // Stocker les tokens et infos\r\n            localStorage.setItem('formateur_token', data.tokens.accessToken)\r\n            localStorage.setItem('formateur_refresh', data.tokens.refreshToken)\r\n            localStorage.setItem('formateur_user', JSON.stringify(data.user))\r\n            localStorage.setItem('formateur_session', data.sessionId)\r\n\r\n            setUser(data.user)\r\n            setIsAuthenticated(true)\r\n\r\n            // Afficher encouragement si connexion avec nom\r\n            if (data.showEncouragement) {\r\n                setTimeout(() => {\r\n                    alert('💡 Conseil sécurité : Vous pouvez définir un mot de passe personnalisé dans votre profil pour plus de sécurité !')\r\n                }, 500)\r\n            }\r\n\r\n            // Redirection\r\n            router.push('/formateur')\r\n\r\n            return { success: true, user: data.user }\r\n\r\n        } catch (error) {\r\n            console.error('💥 Erreur réseau login:', error)\r\n            // Gérer les différents types d'erreurs\r\n            if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n                return { success: false, error: 'Impossible de contacter le serveur. Vérifiez votre connexion.' }\r\n            }\r\n            return { success: false, error: error.message || 'Erreur inattendue lors de la connexion' }\r\n        }\r\n    }\r\n\r\n    // Déconnexion\r\n    const logout = async () => {\r\n        try {\r\n            const token = localStorage.getItem('formateur_token')\r\n            \r\n            // Appeler l'API de déconnexion\r\n            if (token) {\r\n                await fetch('/api/auth/formateur/logout', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`\r\n                    }\r\n                })\r\n            }\r\n        } catch (error) {\r\n            console.error('Erreur logout API:', error)\r\n        } finally {\r\n            // Nettoyer le localStorage dans tous les cas\r\n            localStorage.removeItem('formateur_token')\r\n            localStorage.removeItem('formateur_refresh')\r\n            localStorage.removeItem('formateur_user')\r\n            localStorage.removeItem('formateur_session')\r\n            localStorage.removeItem('formateur_connecte') // Compatibilité ancien système\r\n\r\n            setUser(null)\r\n            setIsAuthenticated(false)\r\n\r\n            // Redirection vers login\r\n            router.push('/formateur/login')\r\n        }\r\n    }\r\n\r\n    // Changement de mot de passe\r\n    const changePassword = async (currentPassword, newPassword) => {\r\n        try {\r\n            const token = localStorage.getItem('formateur_token')\r\n            \r\n            const response = await fetch('/api/auth/formateur/change-password', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify({ currentPassword, newPassword })\r\n            })\r\n\r\n            const data = await response.json()\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Erreur lors du changement')\r\n            }\r\n\r\n            // Mettre à jour les tokens si fournis\r\n            if (data.tokens) {\r\n                localStorage.setItem('formateur_token', data.tokens.accessToken)\r\n                localStorage.setItem('formateur_refresh', data.tokens.refreshToken)\r\n            }\r\n\r\n            // Mettre à jour l'utilisateur\r\n            const updatedUser = { ...user, mustChangePassword: false }\r\n            localStorage.setItem('formateur_user', JSON.stringify(updatedUser))\r\n            setUser(updatedUser)\r\n\r\n            return { success: true }\r\n\r\n        } catch (error) {\r\n            console.error('Erreur changement mot de passe:', error)\r\n            return { success: false, error: error.message }\r\n        }\r\n    }\r\n\r\n    // Récupérer les infos utilisateur depuis le token\r\n    const getUserFromToken = () => {\r\n        try {\r\n            const userData = localStorage.getItem('formateur_user')\r\n            if (userData) {\r\n                return JSON.parse(userData)\r\n            }\r\n            return null\r\n        } catch (error) {\r\n            console.error('Erreur parsing user data:', error)\r\n            return null\r\n        }\r\n    }\r\n\r\n    // Vérifier si l'utilisateur doit changer son mot de passe\r\n    const mustChangePassword = () => {\r\n        return user && user.mustChangePassword === true\r\n    }\r\n\r\n    // Vérifier si la session est toujours valide (pas expirée côté serveur)\r\n    const checkSessionValidity = async () => {\r\n        try {\r\n            const token = localStorage.getItem('formateur_token')\r\n            const sessionId = localStorage.getItem('formateur_session')\r\n            \r\n            if (!token || !sessionId) return false\r\n\r\n            const response = await fetch('/api/auth/formateur/session-check', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify({ sessionId })\r\n            })\r\n\r\n            if (!response.ok) {\r\n                return false\r\n            }\r\n\r\n            const data = await response.json()\r\n            return data.valid || false\r\n\r\n        } catch (error) {\r\n            console.error('Erreur vérification session:', error)\r\n            return false\r\n        }\r\n    }\r\n\r\n    // Forcer la déconnexion (en cas d'erreur critique)\r\n    const forceLogout = () => {\r\n        localStorage.removeItem('formateur_token')\r\n        localStorage.removeItem('formateur_refresh')\r\n        localStorage.removeItem('formateur_user')\r\n        localStorage.removeItem('formateur_session')\r\n        localStorage.removeItem('formateur_connecte')\r\n\r\n        setUser(null)\r\n        setIsAuthenticated(false)\r\n        setIsLoading(false)\r\n\r\n        // Redirection immédiate sans appel API\r\n        router.push('/formateur/login')\r\n    }\r\n\r\n    // Initialisation au montage\r\n    useEffect(() => {\r\n        const initAuth = async () => {\r\n            setIsLoading(true)\r\n\r\n            // Vérifier d'abord le localStorage\r\n            const userData = getUserFromToken()\r\n            if (userData) {\r\n                setUser(userData)\r\n                \r\n                // Vérifier la validité du token\r\n                const isValid = await verifyToken()\r\n                if (!isValid) {\r\n                    // Token invalide, nettoyer et rediriger\r\n                    await logout()\r\n                }\r\n            }\r\n\r\n            setIsLoading(false)\r\n        }\r\n\r\n        initAuth()\r\n    }, [])\r\n\r\n    // Auto-rafraîchissement du token (toutes les 10 minutes)\r\n    useEffect(() => {\r\n        if (!isAuthenticated) return\r\n\r\n        const interval = setInterval(async () => {\r\n            const success = await refreshToken()\r\n            if (!success) {\r\n                console.warn('Échec du rafraîchissement automatique')\r\n            }\r\n        }, 10 * 60 * 1000) // 10 minutes\r\n\r\n        return () => clearInterval(interval)\r\n    }, [isAuthenticated])\r\n\r\n    // Intercepteur pour les erreurs 401\r\n    useEffect(() => {\r\n        const handleUnauthorized = async (event) => {\r\n            if (event.detail?.status === 401) {\r\n                // Tenter un rafraîchissement\r\n                const success = await refreshToken()\r\n                if (!success) {\r\n                    await logout()\r\n                }\r\n            }\r\n        }\r\n\r\n        window.addEventListener('unauthorized', handleUnauthorized)\r\n        return () => window.removeEventListener('unauthorized', handleUnauthorized)\r\n    }, [])\r\n\r\n    const value = {\r\n        user,\r\n        isLoading,\r\n        isAuthenticated,\r\n        login,\r\n        logout,\r\n        changePassword,\r\n        refreshToken,\r\n        verifyToken,\r\n        mustChangePassword,\r\n        checkSessionValidity,\r\n        forceLogout,\r\n        getUserFromToken\r\n    }\r\n\r\n    return (\r\n        <FormateurAuthContext.Provider value={value}>\r\n            {children}\r\n        </FormateurAuthContext.Provider>\r\n    )\r\n}",
          "taille": 12039,
          "lignes": 356,
          "dateModif": "2025-08-28T18:19:16.603Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "generate-admin-token.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "import jwt from 'jsonwebtoken'\r\n\r\n// Utiliser le même secret que dans l'API\r\nconst JWT_SECRET = process.env.JWT_SECRET || 'aclef-formateur-secret-2024-change-me-in-production'\r\n\r\n// Générer un token admin de test\r\nconst adminPayload = {\r\n    id: 'admin-test-id',\r\n    role: 'admin',\r\n    email: 'admin@test.com',\r\n    username: 'admin-test',\r\n    type: 'access',\r\n    iat: Math.floor(Date.now() / 1000),\r\n    exp: Math.floor(Date.now() / 1000) + (60 * 60) // Expire dans 1 heure\r\n}\r\n\r\nconst adminToken = jwt.sign(adminPayload, JWT_SECRET)\r\n\r\nconsole.log('🔑 Token admin généré pour les tests:')\r\nconsole.log('---')\r\nconsole.log(adminToken)\r\nconsole.log('---')\r\nconsole.log('📋 Payload décodé:', adminPayload)\r\nconsole.log('\\n💡 Utilisation:')\r\nconsole.log('Authorization: Bearer', adminToken)",
          "taille": 806,
          "lignes": 25,
          "dateModif": "2025-08-26T20:49:00.319Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "jsconfig.json",
      "resultat": {
        "statut": "SIMILAIRE",
        "local": {
          "existe": true,
          "contenu": "{\r\n  \"compilerOptions\": {\r\n    \"paths\": {\r\n      \"@/*\": [\"./*\"]\r\n    }\r\n  }\r\n}\r\n",
          "taille": 80,
          "lignes": 8,
          "dateModif": "2025-08-28T19:00:40.158Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  }\n}\n",
          "taille": 73,
          "lignes": 8,
          "dateModif": "2025-08-11T17:15:57.142Z",
          "erreur": null
        },
        "identique": false,
        "diffTaille": 7,
        "diffLignes": 0,
        "pourcentageSimilarite": 91,
        "message": "🟡 SIMILAIRE - Similarité: 91% (±7 bytes, ±0 lignes)"
      }
    },
    {
      "fichier": "lib/AuthContext.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { createContext, useContext, useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\n\r\nconst AuthContext = createContext({})\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null)\r\n  const [loading, setLoading] = useState(true)\r\n  const router = useRouter()\r\n\r\n  useEffect(() => {\r\n    checkUser()\r\n  }, [])\r\n\r\n  const checkUser = () => {\r\n    try {\r\n      const savedUser = localStorage.getItem('aclef_admin')\r\n      if (savedUser) {\r\n        setUser(JSON.parse(savedUser))\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur vérification utilisateur:', error)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  const loginAdmin = async (email, password) => {\r\n    try {\r\n      // Vérification admin hardcodée\r\n      if (email === 'aclef@aclef.fr' && password === '12C@millePage') {\r\n        const adminUser = {\r\n          id: 'admin-1',\r\n          email: 'aclef@aclef.fr',\r\n          role: 'admin',\r\n          nom: 'Admin',\r\n          prenom: 'ACLEF'\r\n        }\r\n        localStorage.setItem('aclef_admin', JSON.stringify(adminUser))\r\n        setUser(adminUser)\r\n        return { success: true }\r\n      } else {\r\n        return { success: false, error: 'Identifiants incorrects' }\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur login:', error)\r\n      return { success: false, error: error.message }\r\n    }\r\n  }\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('aclef_admin')\r\n    setUser(null)\r\n    router.push('/login')\r\n  }\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    loginAdmin,\r\n    logout,\r\n    checkUser\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext)\r\n}\r\n\r\n// HOC pour protéger les pages admin\r\nexport function withAuth(Component, allowedRoles = ['admin']) {\r\n  return function ProtectedComponent(props) {\r\n    const { user, loading } = useAuth()\r\n    const router = useRouter()\r\n\r\n    useEffect(() => {\r\n      if (!loading && !user) {\r\n        router.push('/login')\r\n      } else if (!loading && user && !allowedRoles.includes(user.role)) {\r\n        router.push('/unauthorized')\r\n      }\r\n    }, [loading, user, router])\r\n\r\n    if (loading) {\r\n      return (\r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'center', \r\n          alignItems: 'center', \r\n          height: '100vh',\r\n          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'\r\n        }}>\r\n          <div style={{\r\n            backgroundColor: 'white',\r\n            padding: '30px',\r\n            borderRadius: '12px',\r\n            boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n          }}>\r\n            <div style={{\r\n              width: '40px',\r\n              height: '40px',\r\n              border: '4px solid #f3f3f3',\r\n              borderTop: '4px solid #667eea',\r\n              borderRadius: '50%',\r\n              animation: 'spin 1s linear infinite',\r\n              margin: '0 auto 15px'\r\n            }}></div>\r\n            <p style={{ color: '#667eea', fontSize: '16px', margin: 0 }}>Chargement...</p>\r\n          </div>\r\n          <style jsx>{`\r\n            @keyframes spin {\r\n              0% { transform: rotate(0deg); }\r\n              100% { transform: rotate(360deg); }\r\n            }\r\n          `}</style>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (!user || !allowedRoles.includes(user.role)) {\r\n      return null\r\n    }\r\n\r\n    return <Component {...props} />\r\n  }\r\n}",
          "taille": 3544,
          "lignes": 132,
          "dateModif": "2025-08-28T19:00:40.169Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { createContext, useContext, useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\n\r\nconst AuthContext = createContext({})\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null)\r\n  const [loading, setLoading] = useState(true)\r\n  const router = useRouter()\r\n\r\n  useEffect(() => {\r\n    checkUser()\r\n  }, [])\r\n\r\n  const checkUser = () => {\r\n    try {\r\n      const savedUser = localStorage.getItem('aclef_admin')\r\n      if (savedUser) {\r\n        setUser(JSON.parse(savedUser))\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur vérification utilisateur:', error)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  const loginAdmin = async (email, password) => {\r\n    try {\r\n      // Vérification admin hardcodée\r\n      if (email === 'aclef@aclef.fr' && password === '12C@millePage') {\r\n        const adminUser = {\r\n          id: 'admin-1',\r\n          email: 'aclef@aclef.fr',\r\n          role: 'admin',\r\n          nom: 'Admin',\r\n          prenom: 'ACLEF'\r\n        }\r\n        localStorage.setItem('aclef_admin', JSON.stringify(adminUser))\r\n        setUser(adminUser)\r\n        return { success: true }\r\n      } else {\r\n        return { success: false, error: 'Identifiants incorrects' }\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur login:', error)\r\n      return { success: false, error: error.message }\r\n    }\r\n  }\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('aclef_admin')\r\n    setUser(null)\r\n    router.push('/login')\r\n  }\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    loginAdmin,\r\n    logout,\r\n    checkUser\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext)\r\n}\r\n\r\n// HOC pour protéger les pages admin\r\nexport function withAuth(Component, allowedRoles = ['admin']) {\r\n  return function ProtectedComponent(props) {\r\n    const { user, loading } = useAuth()\r\n    const router = useRouter()\r\n\r\n    useEffect(() => {\r\n      if (!loading && !user) {\r\n        router.push('/login')\r\n      } else if (!loading && user && !allowedRoles.includes(user.role)) {\r\n        router.push('/unauthorized')\r\n      }\r\n    }, [loading, user, router])\r\n\r\n    if (loading) {\r\n      return (\r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'center', \r\n          alignItems: 'center', \r\n          height: '100vh',\r\n          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'\r\n        }}>\r\n          <div style={{\r\n            backgroundColor: 'white',\r\n            padding: '30px',\r\n            borderRadius: '12px',\r\n            boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n          }}>\r\n            <div style={{\r\n              width: '40px',\r\n              height: '40px',\r\n              border: '4px solid #f3f3f3',\r\n              borderTop: '4px solid #667eea',\r\n              borderRadius: '50%',\r\n              animation: 'spin 1s linear infinite',\r\n              margin: '0 auto 15px'\r\n            }}></div>\r\n            <p style={{ color: '#667eea', fontSize: '16px', margin: 0 }}>Chargement...</p>\r\n          </div>\r\n          <style jsx>{`\r\n            @keyframes spin {\r\n              0% { transform: rotate(0deg); }\r\n              100% { transform: rotate(360deg); }\r\n            }\r\n          `}</style>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (!user || !allowedRoles.includes(user.role)) {\r\n      return null\r\n    }\r\n\r\n    return <Component {...props} />\r\n  }\r\n}",
          "taille": 3544,
          "lignes": 132,
          "dateModif": "2025-08-11T17:32:07.917Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "lib/auditLogger.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { supabase } from './supabaseClient'\r\n\r\n// 🎛️ CONFIGURATION LOGS AUDIT\r\nconst AUDIT_ENABLED = true // ← Facile à désactiver si besoin\r\nconst MAX_LOGS_RETENTION_DAYS = 90 // Nettoyage auto après 3 mois\r\n\r\n// 📊 TYPES D'ACTIONS AUDITÉES\r\nexport const AUDIT_ACTIONS = {\r\n  // Planning\r\n  PLANNING_VALIDE: 'planning_valide',\r\n  PLANNING_MODIFIE: 'planning_modifie',\r\n  PLANNING_SUPPRIME: 'planning_supprime',\r\n  \r\n  // Gestion utilisateurs\r\n  USER_CREE: 'user_cree',\r\n  USER_MODIFIE: 'user_modifie',\r\n  USER_ARCHIVE: 'user_archive',\r\n  USER_SUPPRIME: 'user_supprime',\r\n  \r\n  // Validation changements\r\n  ABSENCE_VALIDEE: 'absence_validee',\r\n  ABSENCE_REJETEE: 'absence_rejetee',\r\n  CHANGEMENT_VALIDE: 'changement_valide',\r\n  \r\n  // Messagerie\r\n  MESSAGE_ENVOYE_GLOBAL: 'message_envoye_global',\r\n  MESSAGE_IMPORTANT: 'message_important',\r\n  \r\n  // Sécurité\r\n  LOGIN_ADMIN: 'login_admin',\r\n  LOGOUT_ADMIN: 'logout_admin',\r\n  ACCES_REFUSE: 'acces_refuse'\r\n}\r\n\r\n// 🎯 FONCTION PRINCIPALE - LOG AUDIT\r\nexport const logAudit = async (action, details = {}) => {\r\n  if (!AUDIT_ENABLED) {\r\n    console.log('🔇 Audit désactivé, action ignorée:', action)\r\n    return null\r\n  }\r\n\r\n  try {\r\n    // Récupérer l'utilisateur actuel\r\n    const { data: { user }, error: userError } = await supabase.auth.getUser()\r\n    \r\n    if (userError || !user) {\r\n      console.warn('⚠️ Impossible de logger - utilisateur non identifié')\r\n      return null\r\n    }\r\n\r\n    // Préparer l'entrée de log\r\n    const logEntry = {\r\n      admin_user_id: user.id,\r\n      admin_email: user.email,\r\n      action: action,\r\n      details: details,\r\n      ip_address: await getClientIP(), // Optionnel\r\n      user_agent: navigator.userAgent,\r\n      timestamp: new Date().toISOString(),\r\n      session_id: await getCurrentSessionId()\r\n    }\r\n\r\n    // Enregistrer dans la table audit_logs\r\n    const { data, error } = await supabase\r\n      .from('audit_logs')\r\n      .insert([logEntry])\r\n      .select()\r\n      .single()\r\n\r\n    if (error) {\r\n      console.error('❌ Erreur enregistrement audit log:', error)\r\n      return null\r\n    }\r\n\r\n    console.log('✅ Action auditée:', action, details)\r\n    return data\r\n\r\n  } catch (error) {\r\n    console.error('❌ Erreur système audit:', error)\r\n    return null\r\n  }\r\n}\r\n\r\n// 🌐 UTILITAIRES COMPLÉMENTAIRES\r\nconst getClientIP = async () => {\r\n  try {\r\n    // Simple récupération IP publique (optionnel)\r\n    const response = await fetch('https://api.ipify.org?format=json')\r\n    const data = await response.json()\r\n    return data.ip || 'unknown'\r\n  } catch {\r\n    return 'unknown'\r\n  }\r\n}\r\n\r\nconst getCurrentSessionId = async () => {\r\n  try {\r\n    const { data: sessions } = await supabase\r\n      .from('admin_sessions')\r\n      .select('session_token')\r\n      .eq('is_active', true)\r\n      .limit(1)\r\n      .single()\r\n    \r\n    return sessions?.session_token || 'unknown'\r\n  } catch {\r\n    return 'unknown'\r\n  }\r\n}\r\n\r\n// 🎯 FONCTIONS PRÊTES À UTILISER DANS LES PAGES\r\n\r\nexport const auditPlanningAction = async (action, planningData) => {\r\n  return await logAudit(action, {\r\n    semaine: planningData.semaine,\r\n    nb_creneaux: planningData.creneaux,\r\n    nb_formateurs: planningData.formateurs,\r\n    statut: planningData.statut\r\n  })\r\n}\r\n\r\nexport const auditUserAction = async (action, userData) => {\r\n  return await logAudit(action, {\r\n    user_id: userData.id,\r\n    prenom: userData.prenom,\r\n    nom: userData.nom,\r\n    role: userData.role,\r\n    avant: userData.avant || null, // Pour modifications\r\n    apres: userData.apres || null\r\n  })\r\n}\r\n\r\nexport const auditValidationAction = async (action, validationData) => {\r\n  return await logAudit(action, {\r\n    formateur_id: validationData.formateur_id,\r\n    date_debut: validationData.date_debut,\r\n    date_fin: validationData.date_fin,\r\n    type: validationData.type,\r\n    motif: validationData.motif\r\n  })\r\n}\r\n\r\nexport const auditMessageAction = async (action, messageData) => {\r\n  return await logAudit(action, {\r\n    destinataires: messageData.destinataires || 'tous',\r\n    objet: messageData.objet,\r\n    type: messageData.type\r\n  })\r\n}\r\n\r\nexport const auditSecurityAction = async (action, securityData = {}) => {\r\n  return await logAudit(action, {\r\n    ip: securityData.ip,\r\n    tentative: securityData.tentative,\r\n    raison: securityData.raison\r\n  })\r\n}\r\n\r\n// 🧹 NETTOYAGE AUTOMATIQUE (à appeler périodiquement)\r\nexport const cleanOldAuditLogs = async () => {\r\n  try {\r\n    const dateLimit = new Date()\r\n    dateLimit.setDate(dateLimit.getDate() - MAX_LOGS_RETENTION_DAYS)\r\n    \r\n    const { error } = await supabase\r\n      .from('audit_logs')\r\n      .delete()\r\n      .lt('timestamp', dateLimit.toISOString())\r\n\r\n    if (error) {\r\n      console.error('❌ Erreur nettoyage logs:', error)\r\n      return false\r\n    }\r\n\r\n    console.log('✅ Nettoyage logs audit terminé')\r\n    return true\r\n\r\n  } catch (error) {\r\n    console.error('❌ Erreur nettoyage système:', error)\r\n    return false\r\n  }\r\n}\r\n\r\n// 📊 STATISTIQUES LOGS (pour interface)\r\nexport const getAuditStats = async () => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('audit_logs')\r\n      .select('action, admin_email, timestamp')\r\n      .order('timestamp', { ascending: false })\r\n      .limit(1000)\r\n\r\n    if (error) throw error\r\n\r\n    // Calculer stats\r\n    const stats = {\r\n      total_logs: data.length,\r\n      actions_today: data.filter(log => \r\n        new Date(log.timestamp).toDateString() === new Date().toDateString()\r\n      ).length,\r\n      admins_actifs: [...new Set(data.map(log => log.admin_email))].length,\r\n      derniere_action: data[0]?.timestamp || null\r\n    }\r\n\r\n    return stats\r\n\r\n  } catch (error) {\r\n    console.error('❌ Erreur stats audit:', error)\r\n    return null\r\n  }\r\n}",
          "taille": 5791,
          "lignes": 211,
          "dateModif": "2025-08-28T19:00:40.181Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { supabase } from './supabaseClient'\r\n\r\n// 🎛️ CONFIGURATION LOGS AUDIT\r\nconst AUDIT_ENABLED = true // ← Facile à désactiver si besoin\r\nconst MAX_LOGS_RETENTION_DAYS = 90 // Nettoyage auto après 3 mois\r\n\r\n// 📊 TYPES D'ACTIONS AUDITÉES\r\nexport const AUDIT_ACTIONS = {\r\n  // Planning\r\n  PLANNING_VALIDE: 'planning_valide',\r\n  PLANNING_MODIFIE: 'planning_modifie',\r\n  PLANNING_SUPPRIME: 'planning_supprime',\r\n  \r\n  // Gestion utilisateurs\r\n  USER_CREE: 'user_cree',\r\n  USER_MODIFIE: 'user_modifie',\r\n  USER_ARCHIVE: 'user_archive',\r\n  USER_SUPPRIME: 'user_supprime',\r\n  \r\n  // Validation changements\r\n  ABSENCE_VALIDEE: 'absence_validee',\r\n  ABSENCE_REJETEE: 'absence_rejetee',\r\n  CHANGEMENT_VALIDE: 'changement_valide',\r\n  \r\n  // Messagerie\r\n  MESSAGE_ENVOYE_GLOBAL: 'message_envoye_global',\r\n  MESSAGE_IMPORTANT: 'message_important',\r\n  \r\n  // Sécurité\r\n  LOGIN_ADMIN: 'login_admin',\r\n  LOGOUT_ADMIN: 'logout_admin',\r\n  ACCES_REFUSE: 'acces_refuse'\r\n}\r\n\r\n// 🎯 FONCTION PRINCIPALE - LOG AUDIT\r\nexport const logAudit = async (action, details = {}) => {\r\n  if (!AUDIT_ENABLED) {\r\n    console.log('🔇 Audit désactivé, action ignorée:', action)\r\n    return null\r\n  }\r\n\r\n  try {\r\n    // Récupérer l'utilisateur actuel\r\n    const { data: { user }, error: userError } = await supabase.auth.getUser()\r\n    \r\n    if (userError || !user) {\r\n      console.warn('⚠️ Impossible de logger - utilisateur non identifié')\r\n      return null\r\n    }\r\n\r\n    // Préparer l'entrée de log\r\n    const logEntry = {\r\n      admin_user_id: user.id,\r\n      admin_email: user.email,\r\n      action: action,\r\n      details: details,\r\n      ip_address: await getClientIP(), // Optionnel\r\n      user_agent: navigator.userAgent,\r\n      timestamp: new Date().toISOString(),\r\n      session_id: await getCurrentSessionId()\r\n    }\r\n\r\n    // Enregistrer dans la table audit_logs\r\n    const { data, error } = await supabase\r\n      .from('audit_logs')\r\n      .insert([logEntry])\r\n      .select()\r\n      .single()\r\n\r\n    if (error) {\r\n      console.error('❌ Erreur enregistrement audit log:', error)\r\n      return null\r\n    }\r\n\r\n    console.log('✅ Action auditée:', action, details)\r\n    return data\r\n\r\n  } catch (error) {\r\n    console.error('❌ Erreur système audit:', error)\r\n    return null\r\n  }\r\n}\r\n\r\n// 🌐 UTILITAIRES COMPLÉMENTAIRES\r\nconst getClientIP = async () => {\r\n  try {\r\n    // Simple récupération IP publique (optionnel)\r\n    const response = await fetch('https://api.ipify.org?format=json')\r\n    const data = await response.json()\r\n    return data.ip || 'unknown'\r\n  } catch {\r\n    return 'unknown'\r\n  }\r\n}\r\n\r\nconst getCurrentSessionId = async () => {\r\n  try {\r\n    const { data: sessions } = await supabase\r\n      .from('admin_sessions')\r\n      .select('session_token')\r\n      .eq('is_active', true)\r\n      .limit(1)\r\n      .single()\r\n    \r\n    return sessions?.session_token || 'unknown'\r\n  } catch {\r\n    return 'unknown'\r\n  }\r\n}\r\n\r\n// 🎯 FONCTIONS PRÊTES À UTILISER DANS LES PAGES\r\n\r\nexport const auditPlanningAction = async (action, planningData) => {\r\n  return await logAudit(action, {\r\n    semaine: planningData.semaine,\r\n    nb_creneaux: planningData.creneaux,\r\n    nb_formateurs: planningData.formateurs,\r\n    statut: planningData.statut\r\n  })\r\n}\r\n\r\nexport const auditUserAction = async (action, userData) => {\r\n  return await logAudit(action, {\r\n    user_id: userData.id,\r\n    prenom: userData.prenom,\r\n    nom: userData.nom,\r\n    role: userData.role,\r\n    avant: userData.avant || null, // Pour modifications\r\n    apres: userData.apres || null\r\n  })\r\n}\r\n\r\nexport const auditValidationAction = async (action, validationData) => {\r\n  return await logAudit(action, {\r\n    formateur_id: validationData.formateur_id,\r\n    date_debut: validationData.date_debut,\r\n    date_fin: validationData.date_fin,\r\n    type: validationData.type,\r\n    motif: validationData.motif\r\n  })\r\n}\r\n\r\nexport const auditMessageAction = async (action, messageData) => {\r\n  return await logAudit(action, {\r\n    destinataires: messageData.destinataires || 'tous',\r\n    objet: messageData.objet,\r\n    type: messageData.type\r\n  })\r\n}\r\n\r\nexport const auditSecurityAction = async (action, securityData = {}) => {\r\n  return await logAudit(action, {\r\n    ip: securityData.ip,\r\n    tentative: securityData.tentative,\r\n    raison: securityData.raison\r\n  })\r\n}\r\n\r\n// 🧹 NETTOYAGE AUTOMATIQUE (à appeler périodiquement)\r\nexport const cleanOldAuditLogs = async () => {\r\n  try {\r\n    const dateLimit = new Date()\r\n    dateLimit.setDate(dateLimit.getDate() - MAX_LOGS_RETENTION_DAYS)\r\n    \r\n    const { error } = await supabase\r\n      .from('audit_logs')\r\n      .delete()\r\n      .lt('timestamp', dateLimit.toISOString())\r\n\r\n    if (error) {\r\n      console.error('❌ Erreur nettoyage logs:', error)\r\n      return false\r\n    }\r\n\r\n    console.log('✅ Nettoyage logs audit terminé')\r\n    return true\r\n\r\n  } catch (error) {\r\n    console.error('❌ Erreur nettoyage système:', error)\r\n    return false\r\n  }\r\n}\r\n\r\n// 📊 STATISTIQUES LOGS (pour interface)\r\nexport const getAuditStats = async () => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('audit_logs')\r\n      .select('action, admin_email, timestamp')\r\n      .order('timestamp', { ascending: false })\r\n      .limit(1000)\r\n\r\n    if (error) throw error\r\n\r\n    // Calculer stats\r\n    const stats = {\r\n      total_logs: data.length,\r\n      actions_today: data.filter(log => \r\n        new Date(log.timestamp).toDateString() === new Date().toDateString()\r\n      ).length,\r\n      admins_actifs: [...new Set(data.map(log => log.admin_email))].length,\r\n      derniere_action: data[0]?.timestamp || null\r\n    }\r\n\r\n    return stats\r\n\r\n  } catch (error) {\r\n    console.error('❌ Erreur stats audit:', error)\r\n    return null\r\n  }\r\n}",
          "taille": 5791,
          "lignes": 211,
          "dateModif": "2025-08-19T06:41:25.283Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "lib/jwt - vercel.js",
      "resultat": {
        "statut": "LOCAL_SEULEMENT",
        "local": {
          "existe": true,
          "contenu": "import jwt from 'jsonwebtoken'\r\n\r\n// Clés secrètes pour JWT (à mettre dans les variables d'environnement)\r\nconst JWT_SECRET = process.env.JWT_SECRET || 'aclef-formateur-secret-2024-change-me-in-production'\r\nconst REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || 'aclef-refresh-secret-2024-change-me-in-production'\r\n\r\n// Durées de vie des tokens\r\nconst ACCESS_TOKEN_EXPIRE = '15m' // Token d'accès : 15 minutes\r\nconst REFRESH_TOKEN_EXPIRE = '7d' // Token de rafraîchissement : 7 jours\r\n\r\n/**\r\n * Génère un token d'accès JWT\r\n */\r\nexport function generateAccessToken(payload) {\r\n    return jwt.sign(\r\n        {\r\n            ...payload,\r\n            type: 'access'\r\n        },\r\n        JWT_SECRET,\r\n        {\r\n            expiresIn: ACCESS_TOKEN_EXPIRE,\r\n            issuer: 'aclef-planning',\r\n            audience: 'formateur'\r\n        }\r\n    )\r\n}\r\n\r\n/**\r\n * Génère un token de rafraîchissement JWT\r\n */\r\nexport function generateRefreshToken(payload) {\r\n    return jwt.sign(\r\n        {\r\n            ...payload,\r\n            type: 'refresh'\r\n        },\r\n        REFRESH_SECRET,\r\n        {\r\n            expiresIn: REFRESH_TOKEN_EXPIRE,\r\n            issuer: 'aclef-planning',\r\n            audience: 'formateur'\r\n        }\r\n    )\r\n}\r\n\r\n/**\r\n * Vérifie et décode un token d'accès\r\n */\r\nexport function verifyAccessToken(token) {\r\n    try {\r\n        const decoded = jwt.verify(token, JWT_SECRET, {\r\n            issuer: 'aclef-planning',\r\n            audience: 'formateur'\r\n        })\r\n        \r\n        if (decoded.type !== 'access') {\r\n            throw new Error('Invalid token type')\r\n        }\r\n        \r\n        return { valid: true, decoded }\r\n    } catch (error) {\r\n        return { valid: false, error: error.message }\r\n    }\r\n}\r\n\r\n/**\r\n * Vérifie et décode un token de rafraîchissement\r\n */\r\nexport function verifyRefreshToken(token) {\r\n    try {\r\n        const decoded = jwt.verify(token, REFRESH_SECRET, {\r\n            issuer: 'aclef-planning',\r\n            audience: 'formateur'\r\n        })\r\n        \r\n        if (decoded.type !== 'refresh') {\r\n            throw new Error('Invalid token type')\r\n        }\r\n        \r\n        return { valid: true, decoded }\r\n    } catch (error) {\r\n        return { valid: false, error: error.message }\r\n    }\r\n}\r\n\r\n/**\r\n * Extrait le token du header Authorization\r\n */\r\nexport function extractTokenFromHeader(authHeader) {\r\n    if (!authHeader) return null\r\n    \r\n    // Format: \"Bearer TOKEN\"\r\n    const parts = authHeader.split(' ')\r\n    if (parts.length !== 2 || parts[0] !== 'Bearer') {\r\n        return null\r\n    }\r\n    \r\n    return parts[1]\r\n}\r\n\r\n/**\r\n * Génère une paire de tokens (access + refresh)\r\n */\r\nexport function generateTokenPair(user) {\r\n    const payload = {\r\n        id: user.id,\r\n        formateur_id: user.formateur_id,\r\n        username: user.username,\r\n        nom: user.nom,\r\n        prenom: user.prenom,\r\n        email: user.email,\r\n        role: 'formateur'\r\n    }\r\n    \r\n    return {\r\n        accessToken: generateAccessToken(payload),\r\n        refreshToken: generateRefreshToken(payload),\r\n        expiresIn: 900, // 15 minutes en secondes\r\n        tokenType: 'Bearer'\r\n    }\r\n}\r\n\r\n/**\r\n * Vérifie un token (alias pour verifyAccessToken)\r\n */\r\nexport function verifyToken(token) {\r\n    const result = verifyAccessToken(token)\r\n    return result.valid ? result.decoded : null\r\n}",
          "taille": 3365,
          "lignes": 130,
          "dateModif": "2025-08-30T06:19:05.770Z",
          "erreur": null
        },
        "vercel": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🟡 Fichier existe seulement en local"
      }
    },
    {
      "fichier": "lib/jwt.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import jwt from 'jsonwebtoken'\r\n\r\n// Clés secrètes pour JWT (à mettre dans les variables d'environnement)\r\nconst JWT_SECRET = process.env.JWT_SECRET || 'aclef-formateur-secret-2024-change-me-in-production'\r\nconst REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || 'aclef-refresh-secret-2024-change-me-in-production'\r\n\r\n// Durées de vie des tokens\r\nconst ACCESS_TOKEN_EXPIRE = '15m' // Token d'accès : 15 minutes\r\nconst REFRESH_TOKEN_EXPIRE = '7d' // Token de rafraîchissement : 7 jours\r\n\r\n/**\r\n * Génère un token d'accès JWT\r\n */\r\nexport function generateAccessToken(payload) {\r\n    return jwt.sign(\r\n        {\r\n            ...payload,\r\n            type: 'access'\r\n        },\r\n        JWT_SECRET,\r\n        {\r\n            expiresIn: ACCESS_TOKEN_EXPIRE,\r\n            issuer: 'aclef-planning',\r\n            audience: 'formateur'\r\n        }\r\n    )\r\n}\r\n\r\n/**\r\n * Génère un token de rafraîchissement JWT\r\n */\r\nexport function generateRefreshToken(payload) {\r\n    return jwt.sign(\r\n        {\r\n            ...payload,\r\n            type: 'refresh'\r\n        },\r\n        REFRESH_SECRET,\r\n        {\r\n            expiresIn: REFRESH_TOKEN_EXPIRE,\r\n            issuer: 'aclef-planning',\r\n            audience: 'formateur'\r\n        }\r\n    )\r\n}\r\n\r\n/**\r\n * Vérifie et décode un token d'accès\r\n */\r\nexport function verifyAccessToken(token) {\r\n    try {\r\n        const decoded = jwt.verify(token, JWT_SECRET, {\r\n            issuer: 'aclef-planning',\r\n            audience: 'formateur'\r\n        })\r\n        \r\n        if (decoded.type !== 'access') {\r\n            throw new Error('Invalid token type')\r\n        }\r\n        \r\n        return { valid: true, decoded }\r\n    } catch (error) {\r\n        return { valid: false, error: error.message }\r\n    }\r\n}\r\n\r\n/**\r\n * Vérifie et décode un token de rafraîchissement\r\n */\r\nexport function verifyRefreshToken(token) {\r\n    try {\r\n        const decoded = jwt.verify(token, REFRESH_SECRET, {\r\n            issuer: 'aclef-planning',\r\n            audience: 'formateur'\r\n        })\r\n        \r\n        if (decoded.type !== 'refresh') {\r\n            throw new Error('Invalid token type')\r\n        }\r\n        \r\n        return { valid: true, decoded }\r\n    } catch (error) {\r\n        return { valid: false, error: error.message }\r\n    }\r\n}\r\n\r\n/**\r\n * Extrait le token du header Authorization\r\n */\r\nexport function extractTokenFromHeader(authHeader) {\r\n    if (!authHeader) return null\r\n    \r\n    // Format: \"Bearer TOKEN\"\r\n    const parts = authHeader.split(' ')\r\n    if (parts.length !== 2 || parts[0] !== 'Bearer') {\r\n        return null\r\n    }\r\n    \r\n    return parts[1]\r\n}\r\n\r\n/**\r\n * Génère une paire de tokens (access + refresh)\r\n */\r\nexport function generateTokenPair(user) {\r\n    const payload = {\r\n        id: user.id,\r\n        formateur_id: user.formateur_id,\r\n        username: user.username,\r\n        nom: user.nom,\r\n        prenom: user.prenom,\r\n        email: user.email,\r\n        role: 'formateur'\r\n    }\r\n    \r\n    return {\r\n        accessToken: generateAccessToken(payload),\r\n        refreshToken: generateRefreshToken(payload),\r\n        expiresIn: 900, // 15 minutes en secondes\r\n        tokenType: 'Bearer'\r\n    }\r\n}\r\n\r\n/**\r\n * Vérifie un token (alias pour verifyAccessToken)\r\n */\r\nexport function verifyToken(token) {\r\n    const result = verifyAccessToken(token)\r\n    return result.valid ? result.decoded : null\r\n}",
          "taille": 3365,
          "lignes": 130,
          "dateModif": "2025-08-28T19:00:40.194Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import jwt from 'jsonwebtoken'\r\n\r\n// Clés secrètes pour JWT (à mettre dans les variables d'environnement)\r\nconst JWT_SECRET = process.env.JWT_SECRET || 'aclef-formateur-secret-2024-change-me-in-production'\r\nconst REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || 'aclef-refresh-secret-2024-change-me-in-production'\r\n\r\n// Durées de vie des tokens\r\nconst ACCESS_TOKEN_EXPIRE = '15m' // Token d'accès : 15 minutes\r\nconst REFRESH_TOKEN_EXPIRE = '7d' // Token de rafraîchissement : 7 jours\r\n\r\n/**\r\n * Génère un token d'accès JWT\r\n */\r\nexport function generateAccessToken(payload) {\r\n    return jwt.sign(\r\n        {\r\n            ...payload,\r\n            type: 'access'\r\n        },\r\n        JWT_SECRET,\r\n        {\r\n            expiresIn: ACCESS_TOKEN_EXPIRE,\r\n            issuer: 'aclef-planning',\r\n            audience: 'formateur'\r\n        }\r\n    )\r\n}\r\n\r\n/**\r\n * Génère un token de rafraîchissement JWT\r\n */\r\nexport function generateRefreshToken(payload) {\r\n    return jwt.sign(\r\n        {\r\n            ...payload,\r\n            type: 'refresh'\r\n        },\r\n        REFRESH_SECRET,\r\n        {\r\n            expiresIn: REFRESH_TOKEN_EXPIRE,\r\n            issuer: 'aclef-planning',\r\n            audience: 'formateur'\r\n        }\r\n    )\r\n}\r\n\r\n/**\r\n * Vérifie et décode un token d'accès\r\n */\r\nexport function verifyAccessToken(token) {\r\n    try {\r\n        const decoded = jwt.verify(token, JWT_SECRET, {\r\n            issuer: 'aclef-planning',\r\n            audience: 'formateur'\r\n        })\r\n        \r\n        if (decoded.type !== 'access') {\r\n            throw new Error('Invalid token type')\r\n        }\r\n        \r\n        return { valid: true, decoded }\r\n    } catch (error) {\r\n        return { valid: false, error: error.message }\r\n    }\r\n}\r\n\r\n/**\r\n * Vérifie et décode un token de rafraîchissement\r\n */\r\nexport function verifyRefreshToken(token) {\r\n    try {\r\n        const decoded = jwt.verify(token, REFRESH_SECRET, {\r\n            issuer: 'aclef-planning',\r\n            audience: 'formateur'\r\n        })\r\n        \r\n        if (decoded.type !== 'refresh') {\r\n            throw new Error('Invalid token type')\r\n        }\r\n        \r\n        return { valid: true, decoded }\r\n    } catch (error) {\r\n        return { valid: false, error: error.message }\r\n    }\r\n}\r\n\r\n/**\r\n * Extrait le token du header Authorization\r\n */\r\nexport function extractTokenFromHeader(authHeader) {\r\n    if (!authHeader) return null\r\n    \r\n    // Format: \"Bearer TOKEN\"\r\n    const parts = authHeader.split(' ')\r\n    if (parts.length !== 2 || parts[0] !== 'Bearer') {\r\n        return null\r\n    }\r\n    \r\n    return parts[1]\r\n}\r\n\r\n/**\r\n * Génère une paire de tokens (access + refresh)\r\n */\r\nexport function generateTokenPair(user) {\r\n    const payload = {\r\n        id: user.id,\r\n        formateur_id: user.formateur_id,\r\n        username: user.username,\r\n        nom: user.nom,\r\n        prenom: user.prenom,\r\n        email: user.email,\r\n        role: 'formateur'\r\n    }\r\n    \r\n    return {\r\n        accessToken: generateAccessToken(payload),\r\n        refreshToken: generateRefreshToken(payload),\r\n        expiresIn: 900, // 15 minutes en secondes\r\n        tokenType: 'Bearer'\r\n    }\r\n}\r\n\r\n/**\r\n * Vérifie un token (alias pour verifyAccessToken)\r\n */\r\nexport function verifyToken(token) {\r\n    const result = verifyAccessToken(token)\r\n    return result.valid ? result.decoded : null\r\n}",
          "taille": 3365,
          "lignes": 130,
          "dateModif": "2025-08-21T05:45:18.797Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "lib/supabaseAdmin - vercel.js",
      "resultat": {
        "statut": "LOCAL_SEULEMENT",
        "local": {
          "existe": true,
          "contenu": "import { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\r\nconst supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\r\n\r\nif (!supabaseUrl || !supabaseServiceRoleKey) {\r\n    throw new Error('Missing Supabase admin environment variables')\r\n}\r\n\r\n// Client Supabase avec service_role_key pour opérations administratives\r\n// Permet de bypasser RLS pour les opérations système légitimes\r\nexport const supabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {\r\n    auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: false\r\n    }\r\n})",
          "taille": 620,
          "lignes": 17,
          "dateModif": "2025-08-30T06:33:02.102Z",
          "erreur": null
        },
        "vercel": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🟡 Fichier existe seulement en local"
      }
    },
    {
      "fichier": "lib/supabaseAdmin.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\r\nconst supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\r\n\r\nif (!supabaseUrl || !supabaseServiceRoleKey) {\r\n    throw new Error('Missing Supabase admin environment variables')\r\n}\r\n\r\n// Client Supabase avec service_role_key pour opérations administratives\r\n// Permet de bypasser RLS pour les opérations système légitimes\r\nexport const supabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {\r\n    auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: false\r\n    }\r\n})",
          "taille": 620,
          "lignes": 17,
          "dateModif": "2025-08-28T19:01:40.438Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\r\nconst supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\r\n\r\nif (!supabaseUrl || !supabaseServiceRoleKey) {\r\n    throw new Error('Missing Supabase admin environment variables')\r\n}\r\n\r\n// Client Supabase avec service_role_key pour opérations administratives\r\n// Permet de bypasser RLS pour les opérations système légitimes\r\nexport const supabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {\r\n    auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: false\r\n    }\r\n})",
          "taille": 620,
          "lignes": 17,
          "dateModif": "2025-08-26T20:37:16.632Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "lib/supabaseClient.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  throw new Error('Missing Supabase environment variables')\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)",
          "taille": 356,
          "lignes": 10,
          "dateModif": "2025-08-28T19:00:40.207Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  throw new Error('Missing Supabase environment variables')\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)",
          "taille": 356,
          "lignes": 10,
          "dateModif": "2025-08-13T20:36:00.475Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "middleware.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { NextResponse } from 'next/server'\r\n\r\n// Map pour stocker les tentatives par IP\r\nconst requestCounts = new Map()\r\n\r\nfunction rateLimitExceeded(ip) {\r\n  const now = Date.now()\r\n  const windowStart = now - 3600000 // 1 heure (plus généreux)\r\n  \r\n  if (!requestCounts.has(ip)) {\r\n    requestCounts.set(ip, [])\r\n  }\r\n  \r\n  const requests = requestCounts.get(ip)\r\n  \r\n  // Nettoyer les anciennes requêtes\r\n  const recentRequests = requests.filter(time => time > windowStart)\r\n  requestCounts.set(ip, recentRequests)\r\n  \r\n  // Ajouter la requête actuelle\r\n  recentRequests.push(now)\r\n  \r\n  // Limiter à 1000 requêtes par heure (très généreux pour usage normal)\r\n  return recentRequests.length > 1000\r\n}\r\n\r\nexport function middleware(request) {\r\n  const ip = request.ip || request.headers.get('x-forwarded-for') || 'unknown'\r\n  \r\n  if (rateLimitExceeded(ip)) {\r\n    return new Response('Too Many Requests - Limite de 1000 requêtes par heure dépassée', { \r\n      status: 429,\r\n      headers: {\r\n        'Retry-After': '3600'\r\n      }\r\n    })\r\n  }\r\n  \r\n  return NextResponse.next()\r\n}\r\n\r\nexport const config = {\r\n  matcher: '/api/:path*'\r\n}",
          "taille": 1151,
          "lignes": 44,
          "dateModif": "2025-08-28T19:02:20.779Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { NextResponse } from 'next/server'\r\n\r\n// Map pour stocker les tentatives par IP\r\nconst requestCounts = new Map()\r\n\r\nfunction rateLimitExceeded(ip) {\r\n  const now = Date.now()\r\n  const windowStart = now - 3600000 // 1 heure (plus généreux)\r\n  \r\n  if (!requestCounts.has(ip)) {\r\n    requestCounts.set(ip, [])\r\n  }\r\n  \r\n  const requests = requestCounts.get(ip)\r\n  \r\n  // Nettoyer les anciennes requêtes\r\n  const recentRequests = requests.filter(time => time > windowStart)\r\n  requestCounts.set(ip, recentRequests)\r\n  \r\n  // Ajouter la requête actuelle\r\n  recentRequests.push(now)\r\n  \r\n  // Limiter à 1000 requêtes par heure (très généreux pour usage normal)\r\n  return recentRequests.length > 1000\r\n}\r\n\r\nexport function middleware(request) {\r\n  const ip = request.ip || request.headers.get('x-forwarded-for') || 'unknown'\r\n  \r\n  if (rateLimitExceeded(ip)) {\r\n    return new Response('Too Many Requests - Limite de 1000 requêtes par heure dépassée', { \r\n      status: 429,\r\n      headers: {\r\n        'Retry-After': '3600'\r\n      }\r\n    })\r\n  }\r\n  \r\n  return NextResponse.next()\r\n}\r\n\r\nexport const config = {\r\n  matcher: '/api/:path*'\r\n}",
          "taille": 1151,
          "lignes": 44,
          "dateModif": "2025-08-26T18:36:30.382Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "package-lock.json",
      "resultat": {
        "statut": "QUASI_IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "{\r\n  \"name\": \"projet-aclef-planning-v6\",\r\n  \"version\": \"0.1.0\",\r\n  \"lockfileVersion\": 3,\r\n  \"requires\": true,\r\n  \"packages\": {\r\n    \"\": {\r\n      \"name\": \"projet-aclef-planning-v6\",\r\n      \"version\": \"0.1.0\",\r\n      \"dependencies\": {\r\n        \"@supabase/supabase-js\": \"^2.54.0\",\r\n        \"bcryptjs\": \"^3.0.2\",\r\n        \"jsonwebtoken\": \"^9.0.2\",\r\n        \"next\": \"15.4.6\",\r\n        \"react\": \"19.1.0\",\r\n        \"react-dom\": \"19.1.0\"\r\n      }\r\n    },\r\n    \"node_modules/@emnapi/runtime\": {\r\n      \"version\": \"1.4.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.4.5.tgz\",\r\n      \"integrity\": \"sha512-++LApOtY0pEEz1zrd9vy1/zXVaVJJ/EbAF3u0fXIzPJEDtnITsBGbbK0EkM72amhl/R5b+5xx0Y/QhcVOpuulg==\",\r\n      \"license\": \"MIT\",\r\n      \"optional\": true,\r\n      \"dependencies\": {\r\n        \"tslib\": \"^2.4.0\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-darwin-arm64\": {\r\n      \"version\": \"0.34.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-darwin-arm64/-/sharp-darwin-arm64-0.34.3.tgz\",\r\n      \"integrity\": \"sha512-ryFMfvxxpQRsgZJqBd4wsttYQbCxsJksrv9Lw/v798JcQ8+w84mBWuXwl+TT0WJ/WrYOLaYpwQXi3sA9nTIaIg==\",\r\n      \"cpu\": [\r\n        \"arm64\"\r\n      ],\r\n      \"license\": \"Apache-2.0\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"darwin\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"@img/sharp-libvips-darwin-arm64\": \"1.2.0\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-darwin-x64\": {\r\n      \"version\": \"0.34.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-darwin-x64/-/sharp-darwin-x64-0.34.3.tgz\",\r\n      \"integrity\": \"sha512-yHpJYynROAj12TA6qil58hmPmAwxKKC7reUqtGLzsOHfP7/rniNGTL8tjWX6L3CTV4+5P4ypcS7Pp+7OB+8ihA==\",\r\n      \"cpu\": [\r\n        \"x64\"\r\n      ],\r\n      \"license\": \"Apache-2.0\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"darwin\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"@img/sharp-libvips-darwin-x64\": \"1.2.0\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-libvips-darwin-arm64\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-darwin-arm64/-/sharp-libvips-darwin-arm64-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-sBZmpwmxqwlqG9ueWFXtockhsxefaV6O84BMOrhtg/YqbTaRdqDE7hxraVE3y6gVM4eExmfzW4a8el9ArLeEiQ==\",\r\n      \"cpu\": [\r\n        \"arm64\"\r\n      ],\r\n      \"license\": \"LGPL-3.0-or-later\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"darwin\"\r\n      ],\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-libvips-darwin-x64\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-darwin-x64/-/sharp-libvips-darwin-x64-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-M64XVuL94OgiNHa5/m2YvEQI5q2cl9d/wk0qFTDVXcYzi43lxuiFTftMR1tOnFQovVXNZJ5TURSDK2pNe9Yzqg==\",\r\n      \"cpu\": [\r\n        \"x64\"\r\n      ],\r\n      \"license\": \"LGPL-3.0-or-later\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"darwin\"\r\n      ],\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-libvips-linux-arm\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-linux-arm/-/sharp-libvips-linux-arm-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-mWd2uWvDtL/nvIzThLq3fr2nnGfyr/XMXlq8ZJ9WMR6PXijHlC3ksp0IpuhK6bougvQrchUAfzRLnbsen0Cqvw==\",\r\n      \"cpu\": [\r\n        \"arm\"\r\n      ],\r\n      \"license\": \"LGPL-3.0-or-later\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"linux\"\r\n      ],\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-libvips-linux-arm64\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-linux-arm64/-/sharp-libvips-linux-arm64-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-RXwd0CgG+uPRX5YYrkzKyalt2OJYRiJQ8ED/fi1tq9WQW2jsQIn0tqrlR5l5dr/rjqq6AHAxURhj2DVjyQWSOA==\",\r\n      \"cpu\": [\r\n        \"arm64\"\r\n      ],\r\n      \"license\": \"LGPL-3.0-or-later\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"linux\"\r\n      ],\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-libvips-linux-ppc64\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-linux-ppc64/-/sharp-libvips-linux-ppc64-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-Xod/7KaDDHkYu2phxxfeEPXfVXFKx70EAFZ0qyUdOjCcxbjqyJOEUpDe6RIyaunGxT34Anf9ue/wuWOqBW2WcQ==\",\r\n      \"cpu\": [\r\n        \"ppc64\"\r\n      ],\r\n      \"license\": \"LGPL-3.0-or-later\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"linux\"\r\n      ],\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-libvips-linux-s390x\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-linux-s390x/-/sharp-libvips-linux-s390x-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-eMKfzDxLGT8mnmPJTNMcjfO33fLiTDsrMlUVcp6b96ETbnJmd4uvZxVJSKPQfS+odwfVaGifhsB07J1LynFehw==\",\r\n      \"cpu\": [\r\n        \"s390x\"\r\n      ],\r\n      \"license\": \"LGPL-3.0-or-later\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"linux\"\r\n      ],\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-libvips-linux-x64\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-linux-x64/-/sharp-libvips-linux-x64-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-ZW3FPWIc7K1sH9E3nxIGB3y3dZkpJlMnkk7z5tu1nSkBoCgw2nSRTFHI5pB/3CQaJM0pdzMF3paf9ckKMSE9Tg==\",\r\n      \"cpu\": [\r\n        \"x64\"\r\n      ],\r\n      \"license\": \"LGPL-3.0-or-later\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"linux\"\r\n      ],\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-libvips-linuxmusl-arm64\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-arm64/-/sharp-libvips-linuxmusl-arm64-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-UG+LqQJbf5VJ8NWJ5Z3tdIe/HXjuIdo4JeVNADXBFuG7z9zjoegpzzGIyV5zQKi4zaJjnAd2+g2nna8TZvuW9Q==\",\r\n      \"cpu\": [\r\n        \"arm64\"\r\n      ],\r\n      \"license\": \"LGPL-3.0-or-later\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"linux\"\r\n      ],\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-libvips-linuxmusl-x64\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-x64/-/sharp-libvips-linuxmusl-x64-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-SRYOLR7CXPgNze8akZwjoGBoN1ThNZoqpOgfnOxmWsklTGVfJiGJoC/Lod7aNMGA1jSsKWM1+HRX43OP6p9+6Q==\",\r\n      \"cpu\": [\r\n        \"x64\"\r\n      ],\r\n      \"license\": \"LGPL-3.0-or-later\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"linux\"\r\n      ],\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-linux-arm\": {\r\n      \"version\": \"0.34.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-linux-arm/-/sharp-linux-arm-0.34.3.tgz\",\r\n      \"integrity\": \"sha512-oBK9l+h6KBN0i3dC8rYntLiVfW8D8wH+NPNT3O/WBHeW0OQWCjfWksLUaPidsrDKpJgXp3G3/hkmhptAW0I3+A==\",\r\n      \"cpu\": [\r\n        \"arm\"\r\n      ],\r\n      \"license\": \"Apache-2.0\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"linux\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"@img/sharp-libvips-linux-arm\": \"1.2.0\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-linux-arm64\": {\r\n      \"version\": \"0.34.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-linux-arm64/-/sharp-linux-arm64-0.34.3.tgz\",\r\n      \"integrity\": \"sha512-QdrKe3EvQrqwkDrtuTIjI0bu6YEJHTgEeqdzI3uWJOH6G1O8Nl1iEeVYRGdj1h5I21CqxSvQp1Yv7xeU3ZewbA==\",\r\n      \"cpu\": [\r\n        \"arm64\"\r\n      ],\r\n      \"license\": \"Apache-2.0\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"linux\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"@img/sharp-libvips-linux-arm64\": \"1.2.0\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-linux-ppc64\": {\r\n      \"version\": \"0.34.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-linux-ppc64/-/sharp-linux-ppc64-0.34.3.tgz\",\r\n      \"integrity\": \"sha512-GLtbLQMCNC5nxuImPR2+RgrviwKwVql28FWZIW1zWruy6zLgA5/x2ZXk3mxj58X/tszVF69KK0Is83V8YgWhLA==\",\r\n      \"cpu\": [\r\n        \"ppc64\"\r\n      ],\r\n      \"license\": \"Apache-2.0\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"linux\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"@img/sharp-libvips-linux-ppc64\": \"1.2.0\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-linux-s390x\": {\r\n      \"version\": \"0.34.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-linux-s390x/-/sharp-linux-s390x-0.34.3.tgz\",\r\n      \"integrity\": \"sha512-3gahT+A6c4cdc2edhsLHmIOXMb17ltffJlxR0aC2VPZfwKoTGZec6u5GrFgdR7ciJSsHT27BD3TIuGcuRT0KmQ==\",\r\n      \"cpu\": [\r\n        \"s390x\"\r\n      ],\r\n      \"license\": \"Apache-2.0\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"linux\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"@img/sharp-libvips-linux-s390x\": \"1.2.0\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-linux-x64\": {\r\n      \"version\": \"0.34.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-linux-x64/-/sharp-linux-x64-0.34.3.tgz\",\r\n      \"integrity\": \"sha512-8kYso8d806ypnSq3/Ly0QEw90V5ZoHh10yH0HnrzOCr6DKAPI6QVHvwleqMkVQ0m+fc7EH8ah0BB0QPuWY6zJQ==\",\r\n      \"cpu\": [\r\n        \"x64\"\r\n      ],\r\n      \"license\": \"Apache-2.0\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"linux\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"@img/sharp-libvips-linux-x64\": \"1.2.0\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-linuxmusl-arm64\": {\r\n      \"version\": \"0.34.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-linuxmusl-arm64/-/sharp-linuxmusl-arm64-0.34.3.tgz\",\r\n      \"integrity\": \"sha512-vAjbHDlr4izEiXM1OTggpCcPg9tn4YriK5vAjowJsHwdBIdx0fYRsURkxLG2RLm9gyBq66gwtWI8Gx0/ov+JKQ==\",\r\n      \"cpu\": [\r\n        \"arm64\"\r\n      ],\r\n      \"license\": \"Apache-2.0\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"linux\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"@img/sharp-libvips-linuxmusl-arm64\": \"1.2.0\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-linuxmusl-x64\": {\r\n      \"version\": \"0.34.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-linuxmusl-x64/-/sharp-linuxmusl-x64-0.34.3.tgz\",\r\n      \"integrity\": \"sha512-gCWUn9547K5bwvOn9l5XGAEjVTTRji4aPTqLzGXHvIr6bIDZKNTA34seMPgM0WmSf+RYBH411VavCejp3PkOeQ==\",\r\n      \"cpu\": [\r\n        \"x64\"\r\n      ],\r\n      \"license\": \"Apache-2.0\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"linux\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"@img/sharp-libvips-linuxmusl-x64\": \"1.2.0\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-wasm32\": {\r\n      \"version\": \"0.34.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-wasm32/-/sharp-wasm32-0.34.3.tgz\",\r\n      \"integrity\": \"sha512-+CyRcpagHMGteySaWos8IbnXcHgfDn7pO2fiC2slJxvNq9gDipYBN42/RagzctVRKgxATmfqOSulgZv5e1RdMg==\",\r\n      \"cpu\": [\r\n        \"wasm32\"\r\n      ],\r\n      \"license\": \"Apache-2.0 AND LGPL-3.0-or-later AND MIT\",\r\n      \"optional\": true,\r\n      \"dependencies\": {\r\n        \"@emnapi/runtime\": \"^1.4.4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-win32-arm64\": {\r\n      \"version\": \"0.34.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-win32-arm64/-/sharp-win32-arm64-0.34.3.tgz\",\r\n      \"integrity\": \"sha512-MjnHPnbqMXNC2UgeLJtX4XqoVHHlZNd+nPt1kRPmj63wURegwBhZlApELdtxM2OIZDRv/DFtLcNhVbd1z8GYXQ==\",\r\n      \"cpu\": [\r\n        \"arm64\"\r\n      ],\r\n      \"license\": \"Apache-2.0 AND LGPL-3.0-or-later\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"win32\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-win32-ia32\": {\r\n      \"version\": \"0.34.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-win32-ia32/-/sharp-win32-ia32-0.34.3.tgz\",\r\n      \"integrity\": \"sha512-xuCdhH44WxuXgOM714hn4amodJMZl3OEvf0GVTm0BEyMeA2to+8HEdRPShH0SLYptJY1uBw+SCFP9WVQi1Q/cw==\",\r\n      \"cpu\": [\r\n        \"ia32\"\r\n      ],\r\n      \"license\": \"Apache-2.0 AND LGPL-3.0-or-later\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"win32\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      }\r\n    },\r\n    \"node_modules/@img/sharp-win32-x64\": {\r\n      \"version\": \"0.34.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-win32-x64/-/sharp-win32-x64-0.34.3.tgz\",\r\n      \"integrity\": \"sha512-OWwz05d++TxzLEv4VnsTz5CmZ6mI6S05sfQGEMrNrQcOEERbX46332IvE7pO/EUiw7jUrrS40z/M7kPyjfl04g==\",\r\n      \"cpu\": [\r\n        \"x64\"\r\n      ],\r\n      \"license\": \"Apache-2.0 AND LGPL-3.0-or-later\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"win32\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      }\r\n    },\r\n    \"node_modules/@next/env\": {\r\n      \"version\": \"15.4.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@next/env/-/env-15.4.6.tgz\",\r\n      \"integrity\": \"sha512-yHDKVTcHrZy/8TWhj0B23ylKv5ypocuCwey9ZqPyv4rPdUdRzpGCkSi03t04KBPyU96kxVtUqx6O3nE1kpxASQ==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/@next/swc-darwin-arm64\": {\r\n      \"version\": \"15.4.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@next/swc-darwin-arm64/-/swc-darwin-arm64-15.4.6.tgz\",\r\n      \"integrity\": \"sha512-667R0RTP4DwxzmrqTs4Lr5dcEda9OxuZsVFsjVtxVMVhzSpo6nLclXejJVfQo2/g7/Z9qF3ETDmN3h65mTjpTQ==\",\r\n      \"cpu\": [\r\n        \"arm64\"\r\n      ],\r\n      \"license\": \"MIT\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"darwin\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \">= 10\"\r\n      }\r\n    },\r\n    \"node_modules/@next/swc-darwin-x64\": {\r\n      \"version\": \"15.4.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@next/swc-darwin-x64/-/swc-darwin-x64-15.4.6.tgz\",\r\n      \"integrity\": \"sha512-KMSFoistFkaiQYVQQnaU9MPWtp/3m0kn2Xed1Ces5ll+ag1+rlac20sxG+MqhH2qYWX1O2GFOATQXEyxKiIscg==\",\r\n      \"cpu\": [\r\n        \"x64\"\r\n      ],\r\n      \"license\": \"MIT\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"darwin\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \">= 10\"\r\n      }\r\n    },\r\n    \"node_modules/@next/swc-linux-arm64-gnu\": {\r\n      \"version\": \"15.4.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@next/swc-linux-arm64-gnu/-/swc-linux-arm64-gnu-15.4.6.tgz\",\r\n      \"integrity\": \"sha512-PnOx1YdO0W7m/HWFeYd2A6JtBO8O8Eb9h6nfJia2Dw1sRHoHpNf6lN1U4GKFRzRDBi9Nq2GrHk9PF3Vmwf7XVw==\",\r\n      \"cpu\": [\r\n        \"arm64\"\r\n      ],\r\n      \"license\": \"MIT\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"linux\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \">= 10\"\r\n      }\r\n    },\r\n    \"node_modules/@next/swc-linux-arm64-musl\": {\r\n      \"version\": \"15.4.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@next/swc-linux-arm64-musl/-/swc-linux-arm64-musl-15.4.6.tgz\",\r\n      \"integrity\": \"sha512-XBbuQddtY1p5FGPc2naMO0kqs4YYtLYK/8aPausI5lyOjr4J77KTG9mtlU4P3NwkLI1+OjsPzKVvSJdMs3cFaw==\",\r\n      \"cpu\": [\r\n        \"arm64\"\r\n      ],\r\n      \"license\": \"MIT\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"linux\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \">= 10\"\r\n      }\r\n    },\r\n    \"node_modules/@next/swc-linux-x64-gnu\": {\r\n      \"version\": \"15.4.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@next/swc-linux-x64-gnu/-/swc-linux-x64-gnu-15.4.6.tgz\",\r\n      \"integrity\": \"sha512-+WTeK7Qdw82ez3U9JgD+igBAP75gqZ1vbK6R8PlEEuY0OIe5FuYXA4aTjL811kWPf7hNeslD4hHK2WoM9W0IgA==\",\r\n      \"cpu\": [\r\n        \"x64\"\r\n      ],\r\n      \"license\": \"MIT\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"linux\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \">= 10\"\r\n      }\r\n    },\r\n    \"node_modules/@next/swc-linux-x64-musl\": {\r\n      \"version\": \"15.4.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@next/swc-linux-x64-musl/-/swc-linux-x64-musl-15.4.6.tgz\",\r\n      \"integrity\": \"sha512-XP824mCbgQsK20jlXKrUpZoh/iO3vUWhMpxCz8oYeagoiZ4V0TQiKy0ASji1KK6IAe3DYGfj5RfKP6+L2020OQ==\",\r\n      \"cpu\": [\r\n        \"x64\"\r\n      ],\r\n      \"license\": \"MIT\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"linux\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \">= 10\"\r\n      }\r\n    },\r\n    \"node_modules/@next/swc-win32-arm64-msvc\": {\r\n      \"version\": \"15.4.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@next/swc-win32-arm64-msvc/-/swc-win32-arm64-msvc-15.4.6.tgz\",\r\n      \"integrity\": \"sha512-FxrsenhUz0LbgRkNWx6FRRJIPe/MI1JRA4W4EPd5leXO00AZ6YU8v5vfx4MDXTvN77lM/EqsE3+6d2CIeF5NYg==\",\r\n      \"cpu\": [\r\n        \"arm64\"\r\n      ],\r\n      \"license\": \"MIT\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"win32\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \">= 10\"\r\n      }\r\n    },\r\n    \"node_modules/@next/swc-win32-x64-msvc\": {\r\n      \"version\": \"15.4.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@next/swc-win32-x64-msvc/-/swc-win32-x64-msvc-15.4.6.tgz\",\r\n      \"integrity\": \"sha512-T4ufqnZ4u88ZheczkBTtOF+eKaM14V8kbjud/XrAakoM5DKQWjW09vD6B9fsdsWS2T7D5EY31hRHdta7QKWOng==\",\r\n      \"cpu\": [\r\n        \"x64\"\r\n      ],\r\n      \"license\": \"MIT\",\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"win32\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \">= 10\"\r\n      }\r\n    },\r\n    \"node_modules/@supabase/auth-js\": {\r\n      \"version\": \"2.71.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@supabase/auth-js/-/auth-js-2.71.1.tgz\",\r\n      \"integrity\": \"sha512-mMIQHBRc+SKpZFRB2qtupuzulaUhFYupNyxqDj5Jp/LyPvcWvjaJzZzObv6URtL/O6lPxkanASnotGtNpS3H2Q==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"@supabase/node-fetch\": \"^2.6.14\"\r\n      }\r\n    },\r\n    \"node_modules/@supabase/functions-js\": {\r\n      \"version\": \"2.4.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/@supabase/functions-js/-/functions-js-2.4.5.tgz\",\r\n      \"integrity\": \"sha512-v5GSqb9zbosquTo6gBwIiq7W9eQ7rE5QazsK/ezNiQXdCbY+bH8D9qEaBIkhVvX4ZRW5rP03gEfw5yw9tiq4EQ==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"@supabase/node-fetch\": \"^2.6.14\"\r\n      }\r\n    },\r\n    \"node_modules/@supabase/node-fetch\": {\r\n      \"version\": \"2.6.15\",\r\n      \"resolved\": \"https://registry.npmjs.org/@supabase/node-fetch/-/node-fetch-2.6.15.tgz\",\r\n      \"integrity\": \"sha512-1ibVeYUacxWYi9i0cf5efil6adJ9WRyZBLivgjs+AUpewx1F3xPi7gLgaASI2SmIQxPoCEjAsLAzKPgMJVgOUQ==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"whatwg-url\": \"^5.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"4.x || >=6.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@supabase/postgrest-js\": {\r\n      \"version\": \"1.19.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/@supabase/postgrest-js/-/postgrest-js-1.19.4.tgz\",\r\n      \"integrity\": \"sha512-O4soKqKtZIW3olqmbXXbKugUtByD2jPa8kL2m2c1oozAO11uCcGrRhkZL0kVxjBLrXHE0mdSkFsMj7jDSfyNpw==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"@supabase/node-fetch\": \"^2.6.14\"\r\n      }\r\n    },\r\n    \"node_modules/@supabase/realtime-js\": {\r\n      \"version\": \"2.15.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@supabase/realtime-js/-/realtime-js-2.15.0.tgz\",\r\n      \"integrity\": \"sha512-SEIWApsxyoAe68WU2/5PCCuBwa11LL4Bb8K3r2FHCt3ROpaTthmDiWEhnLMGayP05N4QeYrMk0kyTZOwid/Hjw==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"@supabase/node-fetch\": \"^2.6.13\",\r\n        \"@types/phoenix\": \"^1.6.6\",\r\n        \"@types/ws\": \"^8.18.1\",\r\n        \"ws\": \"^8.18.2\"\r\n      }\r\n    },\r\n    \"node_modules/@supabase/storage-js\": {\r\n      \"version\": \"2.10.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/@supabase/storage-js/-/storage-js-2.10.4.tgz\",\r\n      \"integrity\": \"sha512-cvL02GarJVFcNoWe36VBybQqTVRq6wQSOCvTS64C+eyuxOruFIm1utZAY0xi2qKtHJO3EjKaj8iWJKySusDmAQ==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"@supabase/node-fetch\": \"^2.6.14\"\r\n      }\r\n    },\r\n    \"node_modules/@supabase/supabase-js\": {\r\n      \"version\": \"2.54.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@supabase/supabase-js/-/supabase-js-2.54.0.tgz\",\r\n      \"integrity\": \"sha512-DLw83YwBfAaFiL3oWV26+sHRdeCGtxmIKccjh/Pndze3BWM4fZghzYKhk3ElOQU8Bluq4AkkCJ5bM5Szl/sfRg==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"@supabase/auth-js\": \"2.71.1\",\r\n        \"@supabase/functions-js\": \"2.4.5\",\r\n        \"@supabase/node-fetch\": \"2.6.15\",\r\n        \"@supabase/postgrest-js\": \"1.19.4\",\r\n        \"@supabase/realtime-js\": \"2.15.0\",\r\n        \"@supabase/storage-js\": \"^2.10.4\"\r\n      }\r\n    },\r\n    \"node_modules/@swc/helpers\": {\r\n      \"version\": \"0.5.15\",\r\n      \"resolved\": \"https://registry.npmjs.org/@swc/helpers/-/helpers-0.5.15.tgz\",\r\n      \"integrity\": \"sha512-JQ5TuMi45Owi4/BIMAJBoSQoOJu12oOk/gADqlcUL9JEdHB8vyjUSsxqeNXnmXHjYKMi2WcYtezGEEhqUI/E2g==\",\r\n      \"license\": \"Apache-2.0\",\r\n      \"dependencies\": {\r\n        \"tslib\": \"^2.8.0\"\r\n      }\r\n    },\r\n    \"node_modules/@types/node\": {\r\n      \"version\": \"24.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/node/-/node-24.2.1.tgz\",\r\n      \"integrity\": \"sha512-DRh5K+ka5eJic8CjH7td8QpYEV6Zo10gfRkjHCO3weqZHWDtAaSTFtl4+VMqOJ4N5jcuhZ9/l+yy8rVgw7BQeQ==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"undici-types\": \"~7.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/@types/phoenix\": {\r\n      \"version\": \"1.6.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/phoenix/-/phoenix-1.6.6.tgz\",\r\n      \"integrity\": \"sha512-PIzZZlEppgrpoT2QgbnDU+MMzuR6BbCjllj0bM70lWoejMeNJAxCchxnv7J3XFkI8MpygtRpzXrIlmWUBclP5A==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/@types/ws\": {\r\n      \"version\": \"8.18.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/ws/-/ws-8.18.1.tgz\",\r\n      \"integrity\": \"sha512-ThVF6DCVhA8kUGy+aazFQ4kXQ7E1Ty7A3ypFOe0IcJV8O/M511G99AW24irKrW56Wt44yG9+ij8FaqoBGkuBXg==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"@types/node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/bcryptjs\": {\r\n      \"version\": \"3.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/bcryptjs/-/bcryptjs-3.0.2.tgz\",\r\n      \"integrity\": \"sha512-k38b3XOZKv60C4E2hVsXTolJWfkGRMbILBIe2IBITXciy5bOsTKot5kDrf3ZfufQtQOUN5mXceUEpU1rTl9Uog==\",\r\n      \"license\": \"BSD-3-Clause\",\r\n      \"bin\": {\r\n        \"bcrypt\": \"bin/bcrypt\"\r\n      }\r\n    },\r\n    \"node_modules/buffer-equal-constant-time\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz\",\r\n      \"integrity\": \"sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==\",\r\n      \"license\": \"BSD-3-Clause\"\r\n    },\r\n    \"node_modules/caniuse-lite\": {\r\n      \"version\": \"1.0.30001734\",\r\n      \"resolved\": \"https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001734.tgz\",\r\n      \"integrity\": \"sha512-uhE1Ye5vgqju6OI71HTQqcBCZrvHugk0MjLak7Q+HfoBgoq5Bi+5YnwjP4fjDgrtYr/l8MVRBvzz9dPD4KyK0A==\",\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"opencollective\",\r\n          \"url\": \"https://opencollective.com/browserslist\"\r\n        },\r\n        {\r\n          \"type\": \"tidelift\",\r\n          \"url\": \"https://tidelift.com/funding/github/npm/caniuse-lite\"\r\n        },\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/ai\"\r\n        }\r\n      ],\r\n      \"license\": \"CC-BY-4.0\"\r\n    },\r\n    \"node_modules/client-only\": {\r\n      \"version\": \"0.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/client-only/-/client-only-0.0.1.tgz\",\r\n      \"integrity\": \"sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/color\": {\r\n      \"version\": \"4.2.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/color/-/color-4.2.3.tgz\",\r\n      \"integrity\": \"sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==\",\r\n      \"license\": \"MIT\",\r\n      \"optional\": true,\r\n      \"dependencies\": {\r\n        \"color-convert\": \"^2.0.1\",\r\n        \"color-string\": \"^1.9.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=12.5.0\"\r\n      }\r\n    },\r\n    \"node_modules/color-convert\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz\",\r\n      \"integrity\": \"sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==\",\r\n      \"license\": \"MIT\",\r\n      \"optional\": true,\r\n      \"dependencies\": {\r\n        \"color-name\": \"~1.1.4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=7.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/color-name\": {\r\n      \"version\": \"1.1.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz\",\r\n      \"integrity\": \"sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==\",\r\n      \"license\": \"MIT\",\r\n      \"optional\": true\r\n    },\r\n    \"node_modules/color-string\": {\r\n      \"version\": \"1.9.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz\",\r\n      \"integrity\": \"sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==\",\r\n      \"license\": \"MIT\",\r\n      \"optional\": true,\r\n      \"dependencies\": {\r\n        \"color-name\": \"^1.0.0\",\r\n        \"simple-swizzle\": \"^0.2.2\"\r\n      }\r\n    },\r\n    \"node_modules/detect-libc\": {\r\n      \"version\": \"2.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz\",\r\n      \"integrity\": \"sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==\",\r\n      \"license\": \"Apache-2.0\",\r\n      \"optional\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/ecdsa-sig-formatter\": {\r\n      \"version\": \"1.0.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz\",\r\n      \"integrity\": \"sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==\",\r\n      \"license\": \"Apache-2.0\",\r\n      \"dependencies\": {\r\n        \"safe-buffer\": \"^5.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/is-arrayish\": {\r\n      \"version\": \"0.3.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz\",\r\n      \"integrity\": \"sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==\",\r\n      \"license\": \"MIT\",\r\n      \"optional\": true\r\n    },\r\n    \"node_modules/jsonwebtoken\": {\r\n      \"version\": \"9.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz\",\r\n      \"integrity\": \"sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"jws\": \"^3.2.2\",\r\n        \"lodash.includes\": \"^4.3.0\",\r\n        \"lodash.isboolean\": \"^3.0.3\",\r\n        \"lodash.isinteger\": \"^4.0.4\",\r\n        \"lodash.isnumber\": \"^3.0.3\",\r\n        \"lodash.isplainobject\": \"^4.0.6\",\r\n        \"lodash.isstring\": \"^4.0.1\",\r\n        \"lodash.once\": \"^4.0.0\",\r\n        \"ms\": \"^2.1.1\",\r\n        \"semver\": \"^7.5.4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=12\",\r\n        \"npm\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/jwa\": {\r\n      \"version\": \"1.4.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/jwa/-/jwa-1.4.2.tgz\",\r\n      \"integrity\": \"sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"buffer-equal-constant-time\": \"^1.0.1\",\r\n        \"ecdsa-sig-formatter\": \"1.0.11\",\r\n        \"safe-buffer\": \"^5.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/jws\": {\r\n      \"version\": \"3.2.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/jws/-/jws-3.2.2.tgz\",\r\n      \"integrity\": \"sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"jwa\": \"^1.4.1\",\r\n        \"safe-buffer\": \"^5.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/lodash.includes\": {\r\n      \"version\": \"4.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz\",\r\n      \"integrity\": \"sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/lodash.isboolean\": {\r\n      \"version\": \"3.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz\",\r\n      \"integrity\": \"sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/lodash.isinteger\": {\r\n      \"version\": \"4.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz\",\r\n      \"integrity\": \"sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/lodash.isnumber\": {\r\n      \"version\": \"3.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz\",\r\n      \"integrity\": \"sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/lodash.isplainobject\": {\r\n      \"version\": \"4.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz\",\r\n      \"integrity\": \"sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/lodash.isstring\": {\r\n      \"version\": \"4.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz\",\r\n      \"integrity\": \"sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/lodash.once\": {\r\n      \"version\": \"4.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz\",\r\n      \"integrity\": \"sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/ms\": {\r\n      \"version\": \"2.1.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.3.tgz\",\r\n      \"integrity\": \"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/nanoid\": {\r\n      \"version\": \"3.3.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz\",\r\n      \"integrity\": \"sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==\",\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/ai\"\r\n        }\r\n      ],\r\n      \"license\": \"MIT\",\r\n      \"bin\": {\r\n        \"nanoid\": \"bin/nanoid.cjs\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^10 || ^12 || ^13.7 || ^14 || >=15.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/next\": {\r\n      \"version\": \"15.4.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/next/-/next-15.4.6.tgz\",\r\n      \"integrity\": \"sha512-us++E/Q80/8+UekzB3SAGs71AlLDsadpFMXVNM/uQ0BMwsh9m3mr0UNQIfjKed8vpWXsASe+Qifrnu1oLIcKEQ==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"@next/env\": \"15.4.6\",\r\n        \"@swc/helpers\": \"0.5.15\",\r\n        \"caniuse-lite\": \"^1.0.30001579\",\r\n        \"postcss\": \"8.4.31\",\r\n        \"styled-jsx\": \"5.1.6\"\r\n      },\r\n      \"bin\": {\r\n        \"next\": \"dist/bin/next\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^18.18.0 || ^19.8.0 || >= 20.0.0\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"@next/swc-darwin-arm64\": \"15.4.6\",\r\n        \"@next/swc-darwin-x64\": \"15.4.6\",\r\n        \"@next/swc-linux-arm64-gnu\": \"15.4.6\",\r\n        \"@next/swc-linux-arm64-musl\": \"15.4.6\",\r\n        \"@next/swc-linux-x64-gnu\": \"15.4.6\",\r\n        \"@next/swc-linux-x64-musl\": \"15.4.6\",\r\n        \"@next/swc-win32-arm64-msvc\": \"15.4.6\",\r\n        \"@next/swc-win32-x64-msvc\": \"15.4.6\",\r\n        \"sharp\": \"^0.34.3\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@opentelemetry/api\": \"^1.1.0\",\r\n        \"@playwright/test\": \"^1.51.1\",\r\n        \"babel-plugin-react-compiler\": \"*\",\r\n        \"react\": \"^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0\",\r\n        \"react-dom\": \"^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0\",\r\n        \"sass\": \"^1.3.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"@opentelemetry/api\": {\r\n          \"optional\": true\r\n        },\r\n        \"@playwright/test\": {\r\n          \"optional\": true\r\n        },\r\n        \"babel-plugin-react-compiler\": {\r\n          \"optional\": true\r\n        },\r\n        \"sass\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/picocolors\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz\",\r\n      \"integrity\": \"sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==\",\r\n      \"license\": \"ISC\"\r\n    },\r\n    \"node_modules/postcss\": {\r\n      \"version\": \"8.4.31\",\r\n      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.31.tgz\",\r\n      \"integrity\": \"sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==\",\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"opencollective\",\r\n          \"url\": \"https://opencollective.com/postcss/\"\r\n        },\r\n        {\r\n          \"type\": \"tidelift\",\r\n          \"url\": \"https://tidelift.com/funding/github/npm/postcss\"\r\n        },\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/ai\"\r\n        }\r\n      ],\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"nanoid\": \"^3.3.6\",\r\n        \"picocolors\": \"^1.0.0\",\r\n        \"source-map-js\": \"^1.0.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^10 || ^12 || >=14\"\r\n      }\r\n    },\r\n    \"node_modules/react\": {\r\n      \"version\": \"19.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/react/-/react-19.1.0.tgz\",\r\n      \"integrity\": \"sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/react-dom\": {\r\n      \"version\": \"19.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/react-dom/-/react-dom-19.1.0.tgz\",\r\n      \"integrity\": \"sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"scheduler\": \"^0.26.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"react\": \"^19.1.0\"\r\n      }\r\n    },\r\n    \"node_modules/safe-buffer\": {\r\n      \"version\": \"5.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz\",\r\n      \"integrity\": \"sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==\",\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/feross\"\r\n        },\r\n        {\r\n          \"type\": \"patreon\",\r\n          \"url\": \"https://www.patreon.com/feross\"\r\n        },\r\n        {\r\n          \"type\": \"consulting\",\r\n          \"url\": \"https://feross.org/support\"\r\n        }\r\n      ],\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/scheduler\": {\r\n      \"version\": \"0.26.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz\",\r\n      \"integrity\": \"sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/semver\": {\r\n      \"version\": \"7.7.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-7.7.2.tgz\",\r\n      \"integrity\": \"sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==\",\r\n      \"license\": \"ISC\",\r\n      \"bin\": {\r\n        \"semver\": \"bin/semver.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/sharp\": {\r\n      \"version\": \"0.34.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/sharp/-/sharp-0.34.3.tgz\",\r\n      \"integrity\": \"sha512-eX2IQ6nFohW4DbvHIOLRB3MHFpYqaqvXd3Tp5e/T/dSH83fxaNJQRvDMhASmkNTsNTVF2/OOopzRCt7xokgPfg==\",\r\n      \"hasInstallScript\": true,\r\n      \"license\": \"Apache-2.0\",\r\n      \"optional\": true,\r\n      \"dependencies\": {\r\n        \"color\": \"^4.2.3\",\r\n        \"detect-libc\": \"^2.0.4\",\r\n        \"semver\": \"^7.7.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/libvips\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"@img/sharp-darwin-arm64\": \"0.34.3\",\r\n        \"@img/sharp-darwin-x64\": \"0.34.3\",\r\n        \"@img/sharp-libvips-darwin-arm64\": \"1.2.0\",\r\n        \"@img/sharp-libvips-darwin-x64\": \"1.2.0\",\r\n        \"@img/sharp-libvips-linux-arm\": \"1.2.0\",\r\n        \"@img/sharp-libvips-linux-arm64\": \"1.2.0\",\r\n        \"@img/sharp-libvips-linux-ppc64\": \"1.2.0\",\r\n        \"@img/sharp-libvips-linux-s390x\": \"1.2.0\",\r\n        \"@img/sharp-libvips-linux-x64\": \"1.2.0\",\r\n        \"@img/sharp-libvips-linuxmusl-arm64\": \"1.2.0\",\r\n        \"@img/sharp-libvips-linuxmusl-x64\": \"1.2.0\",\r\n        \"@img/sharp-linux-arm\": \"0.34.3\",\r\n        \"@img/sharp-linux-arm64\": \"0.34.3\",\r\n        \"@img/sharp-linux-ppc64\": \"0.34.3\",\r\n        \"@img/sharp-linux-s390x\": \"0.34.3\",\r\n        \"@img/sharp-linux-x64\": \"0.34.3\",\r\n        \"@img/sharp-linuxmusl-arm64\": \"0.34.3\",\r\n        \"@img/sharp-linuxmusl-x64\": \"0.34.3\",\r\n        \"@img/sharp-wasm32\": \"0.34.3\",\r\n        \"@img/sharp-win32-arm64\": \"0.34.3\",\r\n        \"@img/sharp-win32-ia32\": \"0.34.3\",\r\n        \"@img/sharp-win32-x64\": \"0.34.3\"\r\n      }\r\n    },\r\n    \"node_modules/simple-swizzle\": {\r\n      \"version\": \"0.2.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz\",\r\n      \"integrity\": \"sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==\",\r\n      \"license\": \"MIT\",\r\n      \"optional\": true,\r\n      \"dependencies\": {\r\n        \"is-arrayish\": \"^0.3.1\"\r\n      }\r\n    },\r\n    \"node_modules/source-map-js\": {\r\n      \"version\": \"1.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz\",\r\n      \"integrity\": \"sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==\",\r\n      \"license\": \"BSD-3-Clause\",\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/styled-jsx\": {\r\n      \"version\": \"5.1.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/styled-jsx/-/styled-jsx-5.1.6.tgz\",\r\n      \"integrity\": \"sha512-qSVyDTeMotdvQYoHWLNGwRFJHC+i+ZvdBRYosOFgC+Wg1vx4frN2/RG/NA7SYqqvKNLf39P2LSRA2pu6n0XYZA==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"client-only\": \"0.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 12.0.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"react\": \">= 16.8.0 || 17.x.x || ^18.0.0-0 || ^19.0.0-0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"@babel/core\": {\r\n          \"optional\": true\r\n        },\r\n        \"babel-plugin-macros\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/tr46\": {\r\n      \"version\": \"0.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz\",\r\n      \"integrity\": \"sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/tslib\": {\r\n      \"version\": \"2.8.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz\",\r\n      \"integrity\": \"sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==\",\r\n      \"license\": \"0BSD\"\r\n    },\r\n    \"node_modules/undici-types\": {\r\n      \"version\": \"7.10.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/undici-types/-/undici-types-7.10.0.tgz\",\r\n      \"integrity\": \"sha512-t5Fy/nfn+14LuOc2KNYg75vZqClpAiqscVvMygNnlsHBFpSXdJaYtXMcdNLpl/Qvc3P2cB3s6lOV51nqsFq4ag==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/webidl-conversions\": {\r\n      \"version\": \"3.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz\",\r\n      \"integrity\": \"sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==\",\r\n      \"license\": \"BSD-2-Clause\"\r\n    },\r\n    \"node_modules/whatwg-url\": {\r\n      \"version\": \"5.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz\",\r\n      \"integrity\": \"sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"tr46\": \"~0.0.3\",\r\n        \"webidl-conversions\": \"^3.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/ws\": {\r\n      \"version\": \"8.18.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/ws/-/ws-8.18.3.tgz\",\r\n      \"integrity\": \"sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=10.0.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"bufferutil\": \"^4.0.1\",\r\n        \"utf-8-validate\": \">=5.0.2\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"bufferutil\": {\r\n          \"optional\": true\r\n        },\r\n        \"utf-8-validate\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
          "taille": 42956,
          "lignes": 1196,
          "dateModif": "2025-08-28T19:06:00.635Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "{\n  \"name\": \"projet-aclef-planning-v6\",\n  \"version\": \"0.1.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"projet-aclef-planning-v6\",\n      \"version\": \"0.1.0\",\n      \"dependencies\": {\n        \"@supabase/supabase-js\": \"^2.54.0\",\n        \"bcryptjs\": \"^3.0.2\",\n        \"jsonwebtoken\": \"^9.0.2\",\n        \"next\": \"15.4.6\",\n        \"react\": \"19.1.0\",\n        \"react-dom\": \"19.1.0\"\n      }\n    },\n    \"node_modules/@emnapi/runtime\": {\n      \"version\": \"1.4.5\",\n      \"resolved\": \"https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.4.5.tgz\",\n      \"integrity\": \"sha512-++LApOtY0pEEz1zrd9vy1/zXVaVJJ/EbAF3u0fXIzPJEDtnITsBGbbK0EkM72amhl/R5b+5xx0Y/QhcVOpuulg==\",\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"dependencies\": {\n        \"tslib\": \"^2.4.0\"\n      }\n    },\n    \"node_modules/@img/sharp-darwin-arm64\": {\n      \"version\": \"0.34.3\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-darwin-arm64/-/sharp-darwin-arm64-0.34.3.tgz\",\n      \"integrity\": \"sha512-ryFMfvxxpQRsgZJqBd4wsttYQbCxsJksrv9Lw/v798JcQ8+w84mBWuXwl+TT0WJ/WrYOLaYpwQXi3sA9nTIaIg==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"license\": \"Apache-2.0\",\n      \"optional\": true,\n      \"os\": [\n        \"darwin\"\n      ],\n      \"engines\": {\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      },\n      \"optionalDependencies\": {\n        \"@img/sharp-libvips-darwin-arm64\": \"1.2.0\"\n      }\n    },\n    \"node_modules/@img/sharp-darwin-x64\": {\n      \"version\": \"0.34.3\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-darwin-x64/-/sharp-darwin-x64-0.34.3.tgz\",\n      \"integrity\": \"sha512-yHpJYynROAj12TA6qil58hmPmAwxKKC7reUqtGLzsOHfP7/rniNGTL8tjWX6L3CTV4+5P4ypcS7Pp+7OB+8ihA==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"license\": \"Apache-2.0\",\n      \"optional\": true,\n      \"os\": [\n        \"darwin\"\n      ],\n      \"engines\": {\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      },\n      \"optionalDependencies\": {\n        \"@img/sharp-libvips-darwin-x64\": \"1.2.0\"\n      }\n    },\n    \"node_modules/@img/sharp-libvips-darwin-arm64\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-darwin-arm64/-/sharp-libvips-darwin-arm64-1.2.0.tgz\",\n      \"integrity\": \"sha512-sBZmpwmxqwlqG9ueWFXtockhsxefaV6O84BMOrhtg/YqbTaRdqDE7hxraVE3y6gVM4eExmfzW4a8el9ArLeEiQ==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"license\": \"LGPL-3.0-or-later\",\n      \"optional\": true,\n      \"os\": [\n        \"darwin\"\n      ],\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      }\n    },\n    \"node_modules/@img/sharp-libvips-darwin-x64\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-darwin-x64/-/sharp-libvips-darwin-x64-1.2.0.tgz\",\n      \"integrity\": \"sha512-M64XVuL94OgiNHa5/m2YvEQI5q2cl9d/wk0qFTDVXcYzi43lxuiFTftMR1tOnFQovVXNZJ5TURSDK2pNe9Yzqg==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"license\": \"LGPL-3.0-or-later\",\n      \"optional\": true,\n      \"os\": [\n        \"darwin\"\n      ],\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      }\n    },\n    \"node_modules/@img/sharp-libvips-linux-arm\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-linux-arm/-/sharp-libvips-linux-arm-1.2.0.tgz\",\n      \"integrity\": \"sha512-mWd2uWvDtL/nvIzThLq3fr2nnGfyr/XMXlq8ZJ9WMR6PXijHlC3ksp0IpuhK6bougvQrchUAfzRLnbsen0Cqvw==\",\n      \"cpu\": [\n        \"arm\"\n      ],\n      \"license\": \"LGPL-3.0-or-later\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      }\n    },\n    \"node_modules/@img/sharp-libvips-linux-arm64\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-linux-arm64/-/sharp-libvips-linux-arm64-1.2.0.tgz\",\n      \"integrity\": \"sha512-RXwd0CgG+uPRX5YYrkzKyalt2OJYRiJQ8ED/fi1tq9WQW2jsQIn0tqrlR5l5dr/rjqq6AHAxURhj2DVjyQWSOA==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"license\": \"LGPL-3.0-or-later\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      }\n    },\n    \"node_modules/@img/sharp-libvips-linux-ppc64\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-linux-ppc64/-/sharp-libvips-linux-ppc64-1.2.0.tgz\",\n      \"integrity\": \"sha512-Xod/7KaDDHkYu2phxxfeEPXfVXFKx70EAFZ0qyUdOjCcxbjqyJOEUpDe6RIyaunGxT34Anf9ue/wuWOqBW2WcQ==\",\n      \"cpu\": [\n        \"ppc64\"\n      ],\n      \"license\": \"LGPL-3.0-or-later\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      }\n    },\n    \"node_modules/@img/sharp-libvips-linux-s390x\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-linux-s390x/-/sharp-libvips-linux-s390x-1.2.0.tgz\",\n      \"integrity\": \"sha512-eMKfzDxLGT8mnmPJTNMcjfO33fLiTDsrMlUVcp6b96ETbnJmd4uvZxVJSKPQfS+odwfVaGifhsB07J1LynFehw==\",\n      \"cpu\": [\n        \"s390x\"\n      ],\n      \"license\": \"LGPL-3.0-or-later\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      }\n    },\n    \"node_modules/@img/sharp-libvips-linux-x64\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-linux-x64/-/sharp-libvips-linux-x64-1.2.0.tgz\",\n      \"integrity\": \"sha512-ZW3FPWIc7K1sH9E3nxIGB3y3dZkpJlMnkk7z5tu1nSkBoCgw2nSRTFHI5pB/3CQaJM0pdzMF3paf9ckKMSE9Tg==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"license\": \"LGPL-3.0-or-later\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      }\n    },\n    \"node_modules/@img/sharp-libvips-linuxmusl-arm64\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-arm64/-/sharp-libvips-linuxmusl-arm64-1.2.0.tgz\",\n      \"integrity\": \"sha512-UG+LqQJbf5VJ8NWJ5Z3tdIe/HXjuIdo4JeVNADXBFuG7z9zjoegpzzGIyV5zQKi4zaJjnAd2+g2nna8TZvuW9Q==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"license\": \"LGPL-3.0-or-later\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      }\n    },\n    \"node_modules/@img/sharp-libvips-linuxmusl-x64\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-x64/-/sharp-libvips-linuxmusl-x64-1.2.0.tgz\",\n      \"integrity\": \"sha512-SRYOLR7CXPgNze8akZwjoGBoN1ThNZoqpOgfnOxmWsklTGVfJiGJoC/Lod7aNMGA1jSsKWM1+HRX43OP6p9+6Q==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"license\": \"LGPL-3.0-or-later\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      }\n    },\n    \"node_modules/@img/sharp-linux-arm\": {\n      \"version\": \"0.34.3\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-linux-arm/-/sharp-linux-arm-0.34.3.tgz\",\n      \"integrity\": \"sha512-oBK9l+h6KBN0i3dC8rYntLiVfW8D8wH+NPNT3O/WBHeW0OQWCjfWksLUaPidsrDKpJgXp3G3/hkmhptAW0I3+A==\",\n      \"cpu\": [\n        \"arm\"\n      ],\n      \"license\": \"Apache-2.0\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      },\n      \"optionalDependencies\": {\n        \"@img/sharp-libvips-linux-arm\": \"1.2.0\"\n      }\n    },\n    \"node_modules/@img/sharp-linux-arm64\": {\n      \"version\": \"0.34.3\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-linux-arm64/-/sharp-linux-arm64-0.34.3.tgz\",\n      \"integrity\": \"sha512-QdrKe3EvQrqwkDrtuTIjI0bu6YEJHTgEeqdzI3uWJOH6G1O8Nl1iEeVYRGdj1h5I21CqxSvQp1Yv7xeU3ZewbA==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"license\": \"Apache-2.0\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      },\n      \"optionalDependencies\": {\n        \"@img/sharp-libvips-linux-arm64\": \"1.2.0\"\n      }\n    },\n    \"node_modules/@img/sharp-linux-ppc64\": {\n      \"version\": \"0.34.3\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-linux-ppc64/-/sharp-linux-ppc64-0.34.3.tgz\",\n      \"integrity\": \"sha512-GLtbLQMCNC5nxuImPR2+RgrviwKwVql28FWZIW1zWruy6zLgA5/x2ZXk3mxj58X/tszVF69KK0Is83V8YgWhLA==\",\n      \"cpu\": [\n        \"ppc64\"\n      ],\n      \"license\": \"Apache-2.0\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      },\n      \"optionalDependencies\": {\n        \"@img/sharp-libvips-linux-ppc64\": \"1.2.0\"\n      }\n    },\n    \"node_modules/@img/sharp-linux-s390x\": {\n      \"version\": \"0.34.3\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-linux-s390x/-/sharp-linux-s390x-0.34.3.tgz\",\n      \"integrity\": \"sha512-3gahT+A6c4cdc2edhsLHmIOXMb17ltffJlxR0aC2VPZfwKoTGZec6u5GrFgdR7ciJSsHT27BD3TIuGcuRT0KmQ==\",\n      \"cpu\": [\n        \"s390x\"\n      ],\n      \"license\": \"Apache-2.0\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      },\n      \"optionalDependencies\": {\n        \"@img/sharp-libvips-linux-s390x\": \"1.2.0\"\n      }\n    },\n    \"node_modules/@img/sharp-linux-x64\": {\n      \"version\": \"0.34.3\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-linux-x64/-/sharp-linux-x64-0.34.3.tgz\",\n      \"integrity\": \"sha512-8kYso8d806ypnSq3/Ly0QEw90V5ZoHh10yH0HnrzOCr6DKAPI6QVHvwleqMkVQ0m+fc7EH8ah0BB0QPuWY6zJQ==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"license\": \"Apache-2.0\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      },\n      \"optionalDependencies\": {\n        \"@img/sharp-libvips-linux-x64\": \"1.2.0\"\n      }\n    },\n    \"node_modules/@img/sharp-linuxmusl-arm64\": {\n      \"version\": \"0.34.3\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-linuxmusl-arm64/-/sharp-linuxmusl-arm64-0.34.3.tgz\",\n      \"integrity\": \"sha512-vAjbHDlr4izEiXM1OTggpCcPg9tn4YriK5vAjowJsHwdBIdx0fYRsURkxLG2RLm9gyBq66gwtWI8Gx0/ov+JKQ==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"license\": \"Apache-2.0\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      },\n      \"optionalDependencies\": {\n        \"@img/sharp-libvips-linuxmusl-arm64\": \"1.2.0\"\n      }\n    },\n    \"node_modules/@img/sharp-linuxmusl-x64\": {\n      \"version\": \"0.34.3\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-linuxmusl-x64/-/sharp-linuxmusl-x64-0.34.3.tgz\",\n      \"integrity\": \"sha512-gCWUn9547K5bwvOn9l5XGAEjVTTRji4aPTqLzGXHvIr6bIDZKNTA34seMPgM0WmSf+RYBH411VavCejp3PkOeQ==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"license\": \"Apache-2.0\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      },\n      \"optionalDependencies\": {\n        \"@img/sharp-libvips-linuxmusl-x64\": \"1.2.0\"\n      }\n    },\n    \"node_modules/@img/sharp-wasm32\": {\n      \"version\": \"0.34.3\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-wasm32/-/sharp-wasm32-0.34.3.tgz\",\n      \"integrity\": \"sha512-+CyRcpagHMGteySaWos8IbnXcHgfDn7pO2fiC2slJxvNq9gDipYBN42/RagzctVRKgxATmfqOSulgZv5e1RdMg==\",\n      \"cpu\": [\n        \"wasm32\"\n      ],\n      \"license\": \"Apache-2.0 AND LGPL-3.0-or-later AND MIT\",\n      \"optional\": true,\n      \"dependencies\": {\n        \"@emnapi/runtime\": \"^1.4.4\"\n      },\n      \"engines\": {\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      }\n    },\n    \"node_modules/@img/sharp-win32-arm64\": {\n      \"version\": \"0.34.3\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-win32-arm64/-/sharp-win32-arm64-0.34.3.tgz\",\n      \"integrity\": \"sha512-MjnHPnbqMXNC2UgeLJtX4XqoVHHlZNd+nPt1kRPmj63wURegwBhZlApELdtxM2OIZDRv/DFtLcNhVbd1z8GYXQ==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"license\": \"Apache-2.0 AND LGPL-3.0-or-later\",\n      \"optional\": true,\n      \"os\": [\n        \"win32\"\n      ],\n      \"engines\": {\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      }\n    },\n    \"node_modules/@img/sharp-win32-ia32\": {\n      \"version\": \"0.34.3\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-win32-ia32/-/sharp-win32-ia32-0.34.3.tgz\",\n      \"integrity\": \"sha512-xuCdhH44WxuXgOM714hn4amodJMZl3OEvf0GVTm0BEyMeA2to+8HEdRPShH0SLYptJY1uBw+SCFP9WVQi1Q/cw==\",\n      \"cpu\": [\n        \"ia32\"\n      ],\n      \"license\": \"Apache-2.0 AND LGPL-3.0-or-later\",\n      \"optional\": true,\n      \"os\": [\n        \"win32\"\n      ],\n      \"engines\": {\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      }\n    },\n    \"node_modules/@img/sharp-win32-x64\": {\n      \"version\": \"0.34.3\",\n      \"resolved\": \"https://registry.npmjs.org/@img/sharp-win32-x64/-/sharp-win32-x64-0.34.3.tgz\",\n      \"integrity\": \"sha512-OWwz05d++TxzLEv4VnsTz5CmZ6mI6S05sfQGEMrNrQcOEERbX46332IvE7pO/EUiw7jUrrS40z/M7kPyjfl04g==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"license\": \"Apache-2.0 AND LGPL-3.0-or-later\",\n      \"optional\": true,\n      \"os\": [\n        \"win32\"\n      ],\n      \"engines\": {\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      }\n    },\n    \"node_modules/@next/env\": {\n      \"version\": \"15.4.6\",\n      \"resolved\": \"https://registry.npmjs.org/@next/env/-/env-15.4.6.tgz\",\n      \"integrity\": \"sha512-yHDKVTcHrZy/8TWhj0B23ylKv5ypocuCwey9ZqPyv4rPdUdRzpGCkSi03t04KBPyU96kxVtUqx6O3nE1kpxASQ==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/@next/swc-darwin-arm64\": {\n      \"version\": \"15.4.6\",\n      \"resolved\": \"https://registry.npmjs.org/@next/swc-darwin-arm64/-/swc-darwin-arm64-15.4.6.tgz\",\n      \"integrity\": \"sha512-667R0RTP4DwxzmrqTs4Lr5dcEda9OxuZsVFsjVtxVMVhzSpo6nLclXejJVfQo2/g7/Z9qF3ETDmN3h65mTjpTQ==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"darwin\"\n      ],\n      \"engines\": {\n        \"node\": \">= 10\"\n      }\n    },\n    \"node_modules/@next/swc-darwin-x64\": {\n      \"version\": \"15.4.6\",\n      \"resolved\": \"https://registry.npmjs.org/@next/swc-darwin-x64/-/swc-darwin-x64-15.4.6.tgz\",\n      \"integrity\": \"sha512-KMSFoistFkaiQYVQQnaU9MPWtp/3m0kn2Xed1Ces5ll+ag1+rlac20sxG+MqhH2qYWX1O2GFOATQXEyxKiIscg==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"darwin\"\n      ],\n      \"engines\": {\n        \"node\": \">= 10\"\n      }\n    },\n    \"node_modules/@next/swc-linux-arm64-gnu\": {\n      \"version\": \"15.4.6\",\n      \"resolved\": \"https://registry.npmjs.org/@next/swc-linux-arm64-gnu/-/swc-linux-arm64-gnu-15.4.6.tgz\",\n      \"integrity\": \"sha512-PnOx1YdO0W7m/HWFeYd2A6JtBO8O8Eb9h6nfJia2Dw1sRHoHpNf6lN1U4GKFRzRDBi9Nq2GrHk9PF3Vmwf7XVw==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">= 10\"\n      }\n    },\n    \"node_modules/@next/swc-linux-arm64-musl\": {\n      \"version\": \"15.4.6\",\n      \"resolved\": \"https://registry.npmjs.org/@next/swc-linux-arm64-musl/-/swc-linux-arm64-musl-15.4.6.tgz\",\n      \"integrity\": \"sha512-XBbuQddtY1p5FGPc2naMO0kqs4YYtLYK/8aPausI5lyOjr4J77KTG9mtlU4P3NwkLI1+OjsPzKVvSJdMs3cFaw==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">= 10\"\n      }\n    },\n    \"node_modules/@next/swc-linux-x64-gnu\": {\n      \"version\": \"15.4.6\",\n      \"resolved\": \"https://registry.npmjs.org/@next/swc-linux-x64-gnu/-/swc-linux-x64-gnu-15.4.6.tgz\",\n      \"integrity\": \"sha512-+WTeK7Qdw82ez3U9JgD+igBAP75gqZ1vbK6R8PlEEuY0OIe5FuYXA4aTjL811kWPf7hNeslD4hHK2WoM9W0IgA==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">= 10\"\n      }\n    },\n    \"node_modules/@next/swc-linux-x64-musl\": {\n      \"version\": \"15.4.6\",\n      \"resolved\": \"https://registry.npmjs.org/@next/swc-linux-x64-musl/-/swc-linux-x64-musl-15.4.6.tgz\",\n      \"integrity\": \"sha512-XP824mCbgQsK20jlXKrUpZoh/iO3vUWhMpxCz8oYeagoiZ4V0TQiKy0ASji1KK6IAe3DYGfj5RfKP6+L2020OQ==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">= 10\"\n      }\n    },\n    \"node_modules/@next/swc-win32-arm64-msvc\": {\n      \"version\": \"15.4.6\",\n      \"resolved\": \"https://registry.npmjs.org/@next/swc-win32-arm64-msvc/-/swc-win32-arm64-msvc-15.4.6.tgz\",\n      \"integrity\": \"sha512-FxrsenhUz0LbgRkNWx6FRRJIPe/MI1JRA4W4EPd5leXO00AZ6YU8v5vfx4MDXTvN77lM/EqsE3+6d2CIeF5NYg==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"win32\"\n      ],\n      \"engines\": {\n        \"node\": \">= 10\"\n      }\n    },\n    \"node_modules/@next/swc-win32-x64-msvc\": {\n      \"version\": \"15.4.6\",\n      \"resolved\": \"https://registry.npmjs.org/@next/swc-win32-x64-msvc/-/swc-win32-x64-msvc-15.4.6.tgz\",\n      \"integrity\": \"sha512-T4ufqnZ4u88ZheczkBTtOF+eKaM14V8kbjud/XrAakoM5DKQWjW09vD6B9fsdsWS2T7D5EY31hRHdta7QKWOng==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"os\": [\n        \"win32\"\n      ],\n      \"engines\": {\n        \"node\": \">= 10\"\n      }\n    },\n    \"node_modules/@supabase/auth-js\": {\n      \"version\": \"2.71.1\",\n      \"resolved\": \"https://registry.npmjs.org/@supabase/auth-js/-/auth-js-2.71.1.tgz\",\n      \"integrity\": \"sha512-mMIQHBRc+SKpZFRB2qtupuzulaUhFYupNyxqDj5Jp/LyPvcWvjaJzZzObv6URtL/O6lPxkanASnotGtNpS3H2Q==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@supabase/node-fetch\": \"^2.6.14\"\n      }\n    },\n    \"node_modules/@supabase/functions-js\": {\n      \"version\": \"2.4.5\",\n      \"resolved\": \"https://registry.npmjs.org/@supabase/functions-js/-/functions-js-2.4.5.tgz\",\n      \"integrity\": \"sha512-v5GSqb9zbosquTo6gBwIiq7W9eQ7rE5QazsK/ezNiQXdCbY+bH8D9qEaBIkhVvX4ZRW5rP03gEfw5yw9tiq4EQ==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@supabase/node-fetch\": \"^2.6.14\"\n      }\n    },\n    \"node_modules/@supabase/node-fetch\": {\n      \"version\": \"2.6.15\",\n      \"resolved\": \"https://registry.npmjs.org/@supabase/node-fetch/-/node-fetch-2.6.15.tgz\",\n      \"integrity\": \"sha512-1ibVeYUacxWYi9i0cf5efil6adJ9WRyZBLivgjs+AUpewx1F3xPi7gLgaASI2SmIQxPoCEjAsLAzKPgMJVgOUQ==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"whatwg-url\": \"^5.0.0\"\n      },\n      \"engines\": {\n        \"node\": \"4.x || >=6.0.0\"\n      }\n    },\n    \"node_modules/@supabase/postgrest-js\": {\n      \"version\": \"1.19.4\",\n      \"resolved\": \"https://registry.npmjs.org/@supabase/postgrest-js/-/postgrest-js-1.19.4.tgz\",\n      \"integrity\": \"sha512-O4soKqKtZIW3olqmbXXbKugUtByD2jPa8kL2m2c1oozAO11uCcGrRhkZL0kVxjBLrXHE0mdSkFsMj7jDSfyNpw==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@supabase/node-fetch\": \"^2.6.14\"\n      }\n    },\n    \"node_modules/@supabase/realtime-js\": {\n      \"version\": \"2.15.0\",\n      \"resolved\": \"https://registry.npmjs.org/@supabase/realtime-js/-/realtime-js-2.15.0.tgz\",\n      \"integrity\": \"sha512-SEIWApsxyoAe68WU2/5PCCuBwa11LL4Bb8K3r2FHCt3ROpaTthmDiWEhnLMGayP05N4QeYrMk0kyTZOwid/Hjw==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@supabase/node-fetch\": \"^2.6.13\",\n        \"@types/phoenix\": \"^1.6.6\",\n        \"@types/ws\": \"^8.18.1\",\n        \"ws\": \"^8.18.2\"\n      }\n    },\n    \"node_modules/@supabase/storage-js\": {\n      \"version\": \"2.10.4\",\n      \"resolved\": \"https://registry.npmjs.org/@supabase/storage-js/-/storage-js-2.10.4.tgz\",\n      \"integrity\": \"sha512-cvL02GarJVFcNoWe36VBybQqTVRq6wQSOCvTS64C+eyuxOruFIm1utZAY0xi2qKtHJO3EjKaj8iWJKySusDmAQ==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@supabase/node-fetch\": \"^2.6.14\"\n      }\n    },\n    \"node_modules/@supabase/supabase-js\": {\n      \"version\": \"2.54.0\",\n      \"resolved\": \"https://registry.npmjs.org/@supabase/supabase-js/-/supabase-js-2.54.0.tgz\",\n      \"integrity\": \"sha512-DLw83YwBfAaFiL3oWV26+sHRdeCGtxmIKccjh/Pndze3BWM4fZghzYKhk3ElOQU8Bluq4AkkCJ5bM5Szl/sfRg==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@supabase/auth-js\": \"2.71.1\",\n        \"@supabase/functions-js\": \"2.4.5\",\n        \"@supabase/node-fetch\": \"2.6.15\",\n        \"@supabase/postgrest-js\": \"1.19.4\",\n        \"@supabase/realtime-js\": \"2.15.0\",\n        \"@supabase/storage-js\": \"^2.10.4\"\n      }\n    },\n    \"node_modules/@swc/helpers\": {\n      \"version\": \"0.5.15\",\n      \"resolved\": \"https://registry.npmjs.org/@swc/helpers/-/helpers-0.5.15.tgz\",\n      \"integrity\": \"sha512-JQ5TuMi45Owi4/BIMAJBoSQoOJu12oOk/gADqlcUL9JEdHB8vyjUSsxqeNXnmXHjYKMi2WcYtezGEEhqUI/E2g==\",\n      \"license\": \"Apache-2.0\",\n      \"dependencies\": {\n        \"tslib\": \"^2.8.0\"\n      }\n    },\n    \"node_modules/@types/node\": {\n      \"version\": \"24.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/@types/node/-/node-24.2.1.tgz\",\n      \"integrity\": \"sha512-DRh5K+ka5eJic8CjH7td8QpYEV6Zo10gfRkjHCO3weqZHWDtAaSTFtl4+VMqOJ4N5jcuhZ9/l+yy8rVgw7BQeQ==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"undici-types\": \"~7.10.0\"\n      }\n    },\n    \"node_modules/@types/phoenix\": {\n      \"version\": \"1.6.6\",\n      \"resolved\": \"https://registry.npmjs.org/@types/phoenix/-/phoenix-1.6.6.tgz\",\n      \"integrity\": \"sha512-PIzZZlEppgrpoT2QgbnDU+MMzuR6BbCjllj0bM70lWoejMeNJAxCchxnv7J3XFkI8MpygtRpzXrIlmWUBclP5A==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/@types/ws\": {\n      \"version\": \"8.18.1\",\n      \"resolved\": \"https://registry.npmjs.org/@types/ws/-/ws-8.18.1.tgz\",\n      \"integrity\": \"sha512-ThVF6DCVhA8kUGy+aazFQ4kXQ7E1Ty7A3ypFOe0IcJV8O/M511G99AW24irKrW56Wt44yG9+ij8FaqoBGkuBXg==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@types/node\": \"*\"\n      }\n    },\n    \"node_modules/bcryptjs\": {\n      \"version\": \"3.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/bcryptjs/-/bcryptjs-3.0.2.tgz\",\n      \"integrity\": \"sha512-k38b3XOZKv60C4E2hVsXTolJWfkGRMbILBIe2IBITXciy5bOsTKot5kDrf3ZfufQtQOUN5mXceUEpU1rTl9Uog==\",\n      \"license\": \"BSD-3-Clause\",\n      \"bin\": {\n        \"bcrypt\": \"bin/bcrypt\"\n      }\n    },\n    \"node_modules/buffer-equal-constant-time\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz\",\n      \"integrity\": \"sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==\",\n      \"license\": \"BSD-3-Clause\"\n    },\n    \"node_modules/caniuse-lite\": {\n      \"version\": \"1.0.30001734\",\n      \"resolved\": \"https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001734.tgz\",\n      \"integrity\": \"sha512-uhE1Ye5vgqju6OI71HTQqcBCZrvHugk0MjLak7Q+HfoBgoq5Bi+5YnwjP4fjDgrtYr/l8MVRBvzz9dPD4KyK0A==\",\n      \"funding\": [\n        {\n          \"type\": \"opencollective\",\n          \"url\": \"https://opencollective.com/browserslist\"\n        },\n        {\n          \"type\": \"tidelift\",\n          \"url\": \"https://tidelift.com/funding/github/npm/caniuse-lite\"\n        },\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/ai\"\n        }\n      ],\n      \"license\": \"CC-BY-4.0\"\n    },\n    \"node_modules/client-only\": {\n      \"version\": \"0.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/client-only/-/client-only-0.0.1.tgz\",\n      \"integrity\": \"sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/color\": {\n      \"version\": \"4.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/color/-/color-4.2.3.tgz\",\n      \"integrity\": \"sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==\",\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"dependencies\": {\n        \"color-convert\": \"^2.0.1\",\n        \"color-string\": \"^1.9.0\"\n      },\n      \"engines\": {\n        \"node\": \">=12.5.0\"\n      }\n    },\n    \"node_modules/color-convert\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz\",\n      \"integrity\": \"sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==\",\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"dependencies\": {\n        \"color-name\": \"~1.1.4\"\n      },\n      \"engines\": {\n        \"node\": \">=7.0.0\"\n      }\n    },\n    \"node_modules/color-name\": {\n      \"version\": \"1.1.4\",\n      \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz\",\n      \"integrity\": \"sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==\",\n      \"license\": \"MIT\",\n      \"optional\": true\n    },\n    \"node_modules/color-string\": {\n      \"version\": \"1.9.1\",\n      \"resolved\": \"https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz\",\n      \"integrity\": \"sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==\",\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"dependencies\": {\n        \"color-name\": \"^1.0.0\",\n        \"simple-swizzle\": \"^0.2.2\"\n      }\n    },\n    \"node_modules/detect-libc\": {\n      \"version\": \"2.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz\",\n      \"integrity\": \"sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==\",\n      \"license\": \"Apache-2.0\",\n      \"optional\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/ecdsa-sig-formatter\": {\n      \"version\": \"1.0.11\",\n      \"resolved\": \"https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz\",\n      \"integrity\": \"sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==\",\n      \"license\": \"Apache-2.0\",\n      \"dependencies\": {\n        \"safe-buffer\": \"^5.0.1\"\n      }\n    },\n    \"node_modules/is-arrayish\": {\n      \"version\": \"0.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz\",\n      \"integrity\": \"sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==\",\n      \"license\": \"MIT\",\n      \"optional\": true\n    },\n    \"node_modules/jsonwebtoken\": {\n      \"version\": \"9.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz\",\n      \"integrity\": \"sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"jws\": \"^3.2.2\",\n        \"lodash.includes\": \"^4.3.0\",\n        \"lodash.isboolean\": \"^3.0.3\",\n        \"lodash.isinteger\": \"^4.0.4\",\n        \"lodash.isnumber\": \"^3.0.3\",\n        \"lodash.isplainobject\": \"^4.0.6\",\n        \"lodash.isstring\": \"^4.0.1\",\n        \"lodash.once\": \"^4.0.0\",\n        \"ms\": \"^2.1.1\",\n        \"semver\": \"^7.5.4\"\n      },\n      \"engines\": {\n        \"node\": \">=12\",\n        \"npm\": \">=6\"\n      }\n    },\n    \"node_modules/jwa\": {\n      \"version\": \"1.4.2\",\n      \"resolved\": \"https://registry.npmjs.org/jwa/-/jwa-1.4.2.tgz\",\n      \"integrity\": \"sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"buffer-equal-constant-time\": \"^1.0.1\",\n        \"ecdsa-sig-formatter\": \"1.0.11\",\n        \"safe-buffer\": \"^5.0.1\"\n      }\n    },\n    \"node_modules/jws\": {\n      \"version\": \"3.2.2\",\n      \"resolved\": \"https://registry.npmjs.org/jws/-/jws-3.2.2.tgz\",\n      \"integrity\": \"sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"jwa\": \"^1.4.1\",\n        \"safe-buffer\": \"^5.0.1\"\n      }\n    },\n    \"node_modules/lodash.includes\": {\n      \"version\": \"4.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz\",\n      \"integrity\": \"sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/lodash.isboolean\": {\n      \"version\": \"3.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz\",\n      \"integrity\": \"sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/lodash.isinteger\": {\n      \"version\": \"4.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz\",\n      \"integrity\": \"sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/lodash.isnumber\": {\n      \"version\": \"3.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz\",\n      \"integrity\": \"sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/lodash.isplainobject\": {\n      \"version\": \"4.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz\",\n      \"integrity\": \"sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/lodash.isstring\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz\",\n      \"integrity\": \"sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/lodash.once\": {\n      \"version\": \"4.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz\",\n      \"integrity\": \"sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/ms\": {\n      \"version\": \"2.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.3.tgz\",\n      \"integrity\": \"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/nanoid\": {\n      \"version\": \"3.3.11\",\n      \"resolved\": \"https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz\",\n      \"integrity\": \"sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==\",\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/ai\"\n        }\n      ],\n      \"license\": \"MIT\",\n      \"bin\": {\n        \"nanoid\": \"bin/nanoid.cjs\"\n      },\n      \"engines\": {\n        \"node\": \"^10 || ^12 || ^13.7 || ^14 || >=15.0.1\"\n      }\n    },\n    \"node_modules/next\": {\n      \"version\": \"15.4.6\",\n      \"resolved\": \"https://registry.npmjs.org/next/-/next-15.4.6.tgz\",\n      \"integrity\": \"sha512-us++E/Q80/8+UekzB3SAGs71AlLDsadpFMXVNM/uQ0BMwsh9m3mr0UNQIfjKed8vpWXsASe+Qifrnu1oLIcKEQ==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"@next/env\": \"15.4.6\",\n        \"@swc/helpers\": \"0.5.15\",\n        \"caniuse-lite\": \"^1.0.30001579\",\n        \"postcss\": \"8.4.31\",\n        \"styled-jsx\": \"5.1.6\"\n      },\n      \"bin\": {\n        \"next\": \"dist/bin/next\"\n      },\n      \"engines\": {\n        \"node\": \"^18.18.0 || ^19.8.0 || >= 20.0.0\"\n      },\n      \"optionalDependencies\": {\n        \"@next/swc-darwin-arm64\": \"15.4.6\",\n        \"@next/swc-darwin-x64\": \"15.4.6\",\n        \"@next/swc-linux-arm64-gnu\": \"15.4.6\",\n        \"@next/swc-linux-arm64-musl\": \"15.4.6\",\n        \"@next/swc-linux-x64-gnu\": \"15.4.6\",\n        \"@next/swc-linux-x64-musl\": \"15.4.6\",\n        \"@next/swc-win32-arm64-msvc\": \"15.4.6\",\n        \"@next/swc-win32-x64-msvc\": \"15.4.6\",\n        \"sharp\": \"^0.34.3\"\n      },\n      \"peerDependencies\": {\n        \"@opentelemetry/api\": \"^1.1.0\",\n        \"@playwright/test\": \"^1.51.1\",\n        \"babel-plugin-react-compiler\": \"*\",\n        \"react\": \"^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0\",\n        \"react-dom\": \"^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0\",\n        \"sass\": \"^1.3.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"@opentelemetry/api\": {\n          \"optional\": true\n        },\n        \"@playwright/test\": {\n          \"optional\": true\n        },\n        \"babel-plugin-react-compiler\": {\n          \"optional\": true\n        },\n        \"sass\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/picocolors\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz\",\n      \"integrity\": \"sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==\",\n      \"license\": \"ISC\"\n    },\n    \"node_modules/postcss\": {\n      \"version\": \"8.4.31\",\n      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.31.tgz\",\n      \"integrity\": \"sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==\",\n      \"funding\": [\n        {\n          \"type\": \"opencollective\",\n          \"url\": \"https://opencollective.com/postcss/\"\n        },\n        {\n          \"type\": \"tidelift\",\n          \"url\": \"https://tidelift.com/funding/github/npm/postcss\"\n        },\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/ai\"\n        }\n      ],\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"nanoid\": \"^3.3.6\",\n        \"picocolors\": \"^1.0.0\",\n        \"source-map-js\": \"^1.0.2\"\n      },\n      \"engines\": {\n        \"node\": \"^10 || ^12 || >=14\"\n      }\n    },\n    \"node_modules/react\": {\n      \"version\": \"19.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/react/-/react-19.1.0.tgz\",\n      \"integrity\": \"sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/react-dom\": {\n      \"version\": \"19.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/react-dom/-/react-dom-19.1.0.tgz\",\n      \"integrity\": \"sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"scheduler\": \"^0.26.0\"\n      },\n      \"peerDependencies\": {\n        \"react\": \"^19.1.0\"\n      }\n    },\n    \"node_modules/safe-buffer\": {\n      \"version\": \"5.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz\",\n      \"integrity\": \"sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==\",\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/feross\"\n        },\n        {\n          \"type\": \"patreon\",\n          \"url\": \"https://www.patreon.com/feross\"\n        },\n        {\n          \"type\": \"consulting\",\n          \"url\": \"https://feross.org/support\"\n        }\n      ],\n      \"license\": \"MIT\"\n    },\n    \"node_modules/scheduler\": {\n      \"version\": \"0.26.0\",\n      \"resolved\": \"https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz\",\n      \"integrity\": \"sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/semver\": {\n      \"version\": \"7.7.2\",\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-7.7.2.tgz\",\n      \"integrity\": \"sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==\",\n      \"license\": \"ISC\",\n      \"bin\": {\n        \"semver\": \"bin/semver.js\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      }\n    },\n    \"node_modules/sharp\": {\n      \"version\": \"0.34.3\",\n      \"resolved\": \"https://registry.npmjs.org/sharp/-/sharp-0.34.3.tgz\",\n      \"integrity\": \"sha512-eX2IQ6nFohW4DbvHIOLRB3MHFpYqaqvXd3Tp5e/T/dSH83fxaNJQRvDMhASmkNTsNTVF2/OOopzRCt7xokgPfg==\",\n      \"hasInstallScript\": true,\n      \"license\": \"Apache-2.0\",\n      \"optional\": true,\n      \"dependencies\": {\n        \"color\": \"^4.2.3\",\n        \"detect-libc\": \"^2.0.4\",\n        \"semver\": \"^7.7.2\"\n      },\n      \"engines\": {\n        \"node\": \"^18.17.0 || ^20.3.0 || >=21.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://opencollective.com/libvips\"\n      },\n      \"optionalDependencies\": {\n        \"@img/sharp-darwin-arm64\": \"0.34.3\",\n        \"@img/sharp-darwin-x64\": \"0.34.3\",\n        \"@img/sharp-libvips-darwin-arm64\": \"1.2.0\",\n        \"@img/sharp-libvips-darwin-x64\": \"1.2.0\",\n        \"@img/sharp-libvips-linux-arm\": \"1.2.0\",\n        \"@img/sharp-libvips-linux-arm64\": \"1.2.0\",\n        \"@img/sharp-libvips-linux-ppc64\": \"1.2.0\",\n        \"@img/sharp-libvips-linux-s390x\": \"1.2.0\",\n        \"@img/sharp-libvips-linux-x64\": \"1.2.0\",\n        \"@img/sharp-libvips-linuxmusl-arm64\": \"1.2.0\",\n        \"@img/sharp-libvips-linuxmusl-x64\": \"1.2.0\",\n        \"@img/sharp-linux-arm\": \"0.34.3\",\n        \"@img/sharp-linux-arm64\": \"0.34.3\",\n        \"@img/sharp-linux-ppc64\": \"0.34.3\",\n        \"@img/sharp-linux-s390x\": \"0.34.3\",\n        \"@img/sharp-linux-x64\": \"0.34.3\",\n        \"@img/sharp-linuxmusl-arm64\": \"0.34.3\",\n        \"@img/sharp-linuxmusl-x64\": \"0.34.3\",\n        \"@img/sharp-wasm32\": \"0.34.3\",\n        \"@img/sharp-win32-arm64\": \"0.34.3\",\n        \"@img/sharp-win32-ia32\": \"0.34.3\",\n        \"@img/sharp-win32-x64\": \"0.34.3\"\n      }\n    },\n    \"node_modules/simple-swizzle\": {\n      \"version\": \"0.2.2\",\n      \"resolved\": \"https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz\",\n      \"integrity\": \"sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==\",\n      \"license\": \"MIT\",\n      \"optional\": true,\n      \"dependencies\": {\n        \"is-arrayish\": \"^0.3.1\"\n      }\n    },\n    \"node_modules/source-map-js\": {\n      \"version\": \"1.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz\",\n      \"integrity\": \"sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==\",\n      \"license\": \"BSD-3-Clause\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/styled-jsx\": {\n      \"version\": \"5.1.6\",\n      \"resolved\": \"https://registry.npmjs.org/styled-jsx/-/styled-jsx-5.1.6.tgz\",\n      \"integrity\": \"sha512-qSVyDTeMotdvQYoHWLNGwRFJHC+i+ZvdBRYosOFgC+Wg1vx4frN2/RG/NA7SYqqvKNLf39P2LSRA2pu6n0XYZA==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"client-only\": \"0.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 12.0.0\"\n      },\n      \"peerDependencies\": {\n        \"react\": \">= 16.8.0 || 17.x.x || ^18.0.0-0 || ^19.0.0-0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"@babel/core\": {\n          \"optional\": true\n        },\n        \"babel-plugin-macros\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/tr46\": {\n      \"version\": \"0.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz\",\n      \"integrity\": \"sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/tslib\": {\n      \"version\": \"2.8.1\",\n      \"resolved\": \"https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz\",\n      \"integrity\": \"sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==\",\n      \"license\": \"0BSD\"\n    },\n    \"node_modules/undici-types\": {\n      \"version\": \"7.10.0\",\n      \"resolved\": \"https://registry.npmjs.org/undici-types/-/undici-types-7.10.0.tgz\",\n      \"integrity\": \"sha512-t5Fy/nfn+14LuOc2KNYg75vZqClpAiqscVvMygNnlsHBFpSXdJaYtXMcdNLpl/Qvc3P2cB3s6lOV51nqsFq4ag==\",\n      \"license\": \"MIT\"\n    },\n    \"node_modules/webidl-conversions\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz\",\n      \"integrity\": \"sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==\",\n      \"license\": \"BSD-2-Clause\"\n    },\n    \"node_modules/whatwg-url\": {\n      \"version\": \"5.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz\",\n      \"integrity\": \"sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"tr46\": \"~0.0.3\",\n        \"webidl-conversions\": \"^3.0.0\"\n      }\n    },\n    \"node_modules/ws\": {\n      \"version\": \"8.18.3\",\n      \"resolved\": \"https://registry.npmjs.org/ws/-/ws-8.18.3.tgz\",\n      \"integrity\": \"sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=10.0.0\"\n      },\n      \"peerDependencies\": {\n        \"bufferutil\": \"^4.0.1\",\n        \"utf-8-validate\": \">=5.0.2\"\n      },\n      \"peerDependenciesMeta\": {\n        \"bufferutil\": {\n          \"optional\": true\n        },\n        \"utf-8-validate\": {\n          \"optional\": true\n        }\n      }\n    }\n  }\n}\n",
          "taille": 41761,
          "lignes": 1196,
          "dateModif": "2025-08-21T05:46:23.752Z",
          "erreur": null
        },
        "identique": false,
        "diffTaille": 1195,
        "diffLignes": 0,
        "pourcentageSimilarite": 97,
        "message": "🟢 QUASI_IDENTIQUE - Similarité: 97% (±1195 bytes, ±0 lignes)"
      }
    },
    {
      "fichier": "package.json",
      "resultat": {
        "statut": "QUASI_IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "{\r\n  \"name\": \"projet-aclef-planning-v6\",\r\n  \"version\": \"0.1.0\",\r\n  \"private\": true,\r\n  \"scripts\": {\r\n    \"dev\": \"next dev --turbopack\",\r\n    \"build\": \"next build\",\r\n    \"start\": \"next start\",\r\n    \"lint\": \"next lint\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@supabase/supabase-js\": \"^2.54.0\",\r\n    \"bcryptjs\": \"^3.0.2\",\r\n    \"jsonwebtoken\": \"^9.0.2\",\r\n    \"next\": \"15.4.6\",\r\n    \"react\": \"19.1.0\",\r\n    \"react-dom\": \"19.1.0\"\r\n  }\r\n}\r\n",
          "taille": 426,
          "lignes": 20,
          "dateModif": "2025-08-28T19:00:40.232Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "{\n  \"name\": \"projet-aclef-planning-v6\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev --turbopack\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"@supabase/supabase-js\": \"^2.54.0\",\n    \"bcryptjs\": \"^3.0.2\",\n    \"jsonwebtoken\": \"^9.0.2\",\n    \"next\": \"15.4.6\",\n    \"react\": \"19.1.0\",\n    \"react-dom\": \"19.1.0\"\n  }\n}\n",
          "taille": 407,
          "lignes": 20,
          "dateModif": "2025-08-20T20:52:38.567Z",
          "erreur": null
        },
        "identique": false,
        "diffTaille": 19,
        "diffLignes": 0,
        "pourcentageSimilarite": 96,
        "message": "🟢 QUASI_IDENTIQUE - Similarité: 96% (±19 bytes, ±0 lignes)"
      }
    },
    {
      "fichier": "pages/_app.js",
      "resultat": {
        "statut": "QUASI_IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import '@/styles/globals.css'\r\nimport { AuthProvider } from '@/lib/AuthContext'\r\nimport { FormateurAuthProvider } from '@/contexts/FormateurAuthContext'\r\n\r\nexport default function App({ Component, pageProps }) {\r\n  return (\r\n    <AuthProvider>\r\n      <FormateurAuthProvider>\r\n        <Component {...pageProps} />\r\n      </FormateurAuthProvider>\r\n    </AuthProvider>\r\n  )\r\n}",
          "taille": 373,
          "lignes": 13,
          "dateModif": "2025-08-28T19:00:40.247Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import '@/styles/globals.css'\nimport { AuthProvider } from '@/lib/AuthContext'\nimport { FormateurAuthProvider } from '@/contexts/FormateurAuthContext'\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <AuthProvider>\n      <FormateurAuthProvider>\n        <Component {...pageProps} />\n      </FormateurAuthProvider>\n    </AuthProvider>\n  )\n}",
          "taille": 361,
          "lignes": 13,
          "dateModif": "2025-08-20T22:00:50.636Z",
          "erreur": null
        },
        "identique": false,
        "diffTaille": 12,
        "diffLignes": 0,
        "pourcentageSimilarite": 97,
        "message": "🟢 QUASI_IDENTIQUE - Similarité: 97% (±12 bytes, ±0 lignes)"
      }
    },
    {
      "fichier": "pages/api/admin-auth.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { supabase } from '../../lib/supabaseClient'\r\n\r\nexport default async function handler(req, res) {\r\n  const timestamp = new Date().toISOString()\r\n  \r\n  // Gérer les deux formats (SendBeacon vs XHR)\r\n  let body = req.body\r\n  if (typeof req.body === 'string') {\r\n    try {\r\n      body = JSON.parse(req.body)\r\n    } catch (e) {\r\n      body = req.body\r\n    }\r\n  }\r\n  \r\n  if (req.method === 'POST') {\r\n    const { action, adminEmail } = body\r\n    \r\n    try {\r\n      if (action === 'emergency_logout') {\r\n        console.log(`🚨 DÉCONNEXION D'URGENCE REÇUE pour ${adminEmail}`)\r\n        \r\n        // Désactiver toutes les sessions actives pour cet admin\r\n        const { error } = await supabase\r\n          .from('admin_sessions')\r\n          .update({ is_active: false })\r\n          .eq('email_admin', adminEmail)\r\n          .eq('is_active', true)\r\n        \r\n        if (error) {\r\n          console.error('❌ Erreur désactivation session urgence:', error)\r\n          return res.status(500).json({\r\n            success: false,\r\n            message: 'Erreur désactivation session',\r\n            error: error.message\r\n          })\r\n        }\r\n        \r\n        console.log(`✅ Session d'urgence désactivée pour ${adminEmail}`)\r\n        \r\n        return res.status(200).json({\r\n          success: true,\r\n          message: 'Déconnexion urgence réussie',\r\n          adminEmail,\r\n          timestamp\r\n        })\r\n      }\r\n      \r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Action non supportée'\r\n      })\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Erreur API admin-auth:', error)\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: 'Erreur serveur',\r\n        error: error.message\r\n      })\r\n    }\r\n  }\r\n  \r\n  return res.status(405).json({\r\n    success: false,\r\n    message: 'Méthode non autorisée'\r\n  })\r\n}",
          "taille": 1896,
          "lignes": 68,
          "dateModif": "2025-08-28T19:00:40.259Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { supabase } from '../../lib/supabaseClient'\r\n\r\nexport default async function handler(req, res) {\r\n  const timestamp = new Date().toISOString()\r\n  \r\n  // Gérer les deux formats (SendBeacon vs XHR)\r\n  let body = req.body\r\n  if (typeof req.body === 'string') {\r\n    try {\r\n      body = JSON.parse(req.body)\r\n    } catch (e) {\r\n      body = req.body\r\n    }\r\n  }\r\n  \r\n  if (req.method === 'POST') {\r\n    const { action, adminEmail } = body\r\n    \r\n    try {\r\n      if (action === 'emergency_logout') {\r\n        console.log(`🚨 DÉCONNEXION D'URGENCE REÇUE pour ${adminEmail}`)\r\n        \r\n        // Désactiver toutes les sessions actives pour cet admin\r\n        const { error } = await supabase\r\n          .from('admin_sessions')\r\n          .update({ is_active: false })\r\n          .eq('email_admin', adminEmail)\r\n          .eq('is_active', true)\r\n        \r\n        if (error) {\r\n          console.error('❌ Erreur désactivation session urgence:', error)\r\n          return res.status(500).json({\r\n            success: false,\r\n            message: 'Erreur désactivation session',\r\n            error: error.message\r\n          })\r\n        }\r\n        \r\n        console.log(`✅ Session d'urgence désactivée pour ${adminEmail}`)\r\n        \r\n        return res.status(200).json({\r\n          success: true,\r\n          message: 'Déconnexion urgence réussie',\r\n          adminEmail,\r\n          timestamp\r\n        })\r\n      }\r\n      \r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Action non supportée'\r\n      })\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Erreur API admin-auth:', error)\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: 'Erreur serveur',\r\n        error: error.message\r\n      })\r\n    }\r\n  }\r\n  \r\n  return res.status(405).json({\r\n    success: false,\r\n    message: 'Méthode non autorisée'\r\n  })\r\n}",
          "taille": 1896,
          "lignes": 68,
          "dateModif": "2025-08-22T22:02:46.697Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/api/admin/reset-formateur-password.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { supabase } from '../../../lib/supabaseClient'\r\nimport { supabaseAdmin } from '../../../lib/supabaseAdmin'\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Méthode non autorisée' })\r\n    }\r\n\r\n    try {\r\n        // 1. Vérifier authentification admin via Supabase\r\n        const authHeader = req.headers.authorization\r\n        if (!authHeader?.startsWith('Bearer ')) {\r\n            return res.status(401).json({ error: 'Token manquant' })\r\n        }\r\n\r\n        const token = authHeader.substring(7)\r\n        const { data: { user }, error: authError } = await supabase.auth.getUser(token)\r\n\r\n        if (authError || !user) {\r\n            console.error('[ADMIN-RESET] Auth Error:', authError?.message)\r\n            return res.status(401).json({ error: 'Token invalide' })\r\n        }\r\n\r\n        // 2. Vérifier que c'est un admin (email dans la liste des admins)\r\n        const adminEmails = [\r\n            'albena@aclef.fr', \r\n            'fanny@aclef.fr', \r\n            'mathieu@aclef.fr', \r\n            'sarah@aclef.fr', \r\n            'test@aclef.fr',\r\n            'admin@test.com' // Pour les tests\r\n        ]\r\n\r\n        if (!adminEmails.includes(user.email)) {\r\n            console.error(`[ADMIN-RESET] Accès refusé pour email: ${user.email}`)\r\n            return res.status(403).json({ error: 'Accès admin requis' })\r\n        }\r\n\r\n        // 2. Récupérer les paramètres\r\n        const { formateurId, formateurNom } = req.body\r\n        if (!formateurId || !formateurNom) {\r\n            return res.status(400).json({ error: 'Paramètres manquants (formateurId, formateurNom)' })\r\n        }\r\n\r\n        console.log(`[ADMIN-RESET] Tentative reset pour formateur ID: ${formateurId}, nom: ${formateurNom}`)\r\n\r\n        // 3. Vérifier que le formateur existe avant reset\r\n        const { data: formateurCheck, error: checkError } = await supabaseAdmin\r\n            .from('users')\r\n            .select('id, prenom, nom, role, archive')\r\n            .eq('id', formateurId)\r\n            .eq('role', 'formateur')\r\n            .single()\r\n\r\n        if (checkError || !formateurCheck) {\r\n            console.error('[ADMIN-RESET] Formateur non trouvé:', checkError?.message)\r\n            return res.status(404).json({ error: 'Formateur non trouvé' })\r\n        }\r\n\r\n        if (formateurCheck.archive) {\r\n            return res.status(400).json({ error: 'Impossible de réinitialiser un formateur archivé' })\r\n        }\r\n\r\n        // 4. Réinitialiser le mot de passe (supprimer password_hash)\r\n        console.log(`[ADMIN-RESET] Reset pour: ${formateurCheck.prenom} ${formateurCheck.nom}`)\r\n        \r\n        const { data, error, count } = await supabaseAdmin\r\n            .from('users')\r\n            .update({ \r\n                password_hash: null,              // Supprime le hash personnalisé\r\n                must_change_password: false,      // Retire l'obligation\r\n                password_changed_at: null         // Remet à null\r\n            })\r\n            .eq('id', formateurId)\r\n            .eq('role', 'formateur')\r\n            .select('prenom, nom')\r\n\r\n        if (error) {\r\n            console.error('[ADMIN-RESET] Erreur UPDATE:', error)\r\n            return res.status(500).json({ error: 'Erreur lors de la réinitialisation' })\r\n        }\r\n\r\n        if (!data || data.length === 0) {\r\n            console.error('[ADMIN-RESET] Aucune ligne affectée par UPDATE')\r\n            return res.status(500).json({ error: 'Réinitialisation échouée - Aucune modification' })\r\n        }\r\n\r\n        // 5. Logger l'action admin pour audit\r\n        console.log(`[ADMIN-RESET] ✅ Mot de passe réinitialisé: ${data[0].prenom} ${data[0].nom} par admin ${user.email}`)\r\n\r\n        // 6. Vérification post-reset\r\n        const { data: verifyReset, error: verifyError } = await supabaseAdmin\r\n            .from('users')\r\n            .select('password_hash, must_change_password, password_changed_at')\r\n            .eq('id', formateurId)\r\n            .single()\r\n\r\n        if (!verifyError && verifyReset) {\r\n            console.log(`[ADMIN-RESET] Vérification: password_hash=${verifyReset.password_hash ? 'EXISTE' : 'NULL'}, must_change=${verifyReset.must_change_password}`)\r\n        }\r\n\r\n        return res.status(200).json({\r\n            success: true,\r\n            message: `Mot de passe réinitialisé pour ${data[0].prenom} ${data[0].nom}`,\r\n            fallbackPassword: formateurNom,\r\n            formateur: {\r\n                prenom: data[0].prenom,\r\n                nom: data[0].nom\r\n            }\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('[ADMIN-RESET] Erreur globale:', error)\r\n        return res.status(500).json({ error: 'Erreur serveur interne' })\r\n    }\r\n}",
          "taille": 4784,
          "lignes": 116,
          "dateModif": "2025-08-28T19:05:29.424Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { supabase } from '../../../lib/supabaseClient'\r\nimport { supabaseAdmin } from '../../../lib/supabaseAdmin'\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Méthode non autorisée' })\r\n    }\r\n\r\n    try {\r\n        // 1. Vérifier authentification admin via Supabase\r\n        const authHeader = req.headers.authorization\r\n        if (!authHeader?.startsWith('Bearer ')) {\r\n            return res.status(401).json({ error: 'Token manquant' })\r\n        }\r\n\r\n        const token = authHeader.substring(7)\r\n        const { data: { user }, error: authError } = await supabase.auth.getUser(token)\r\n\r\n        if (authError || !user) {\r\n            console.error('[ADMIN-RESET] Auth Error:', authError?.message)\r\n            return res.status(401).json({ error: 'Token invalide' })\r\n        }\r\n\r\n        // 2. Vérifier que c'est un admin (email dans la liste des admins)\r\n        const adminEmails = [\r\n            'albena@aclef.fr', \r\n            'fanny@aclef.fr', \r\n            'mathieu@aclef.fr', \r\n            'sarah@aclef.fr', \r\n            'test@aclef.fr',\r\n            'admin@test.com' // Pour les tests\r\n        ]\r\n\r\n        if (!adminEmails.includes(user.email)) {\r\n            console.error(`[ADMIN-RESET] Accès refusé pour email: ${user.email}`)\r\n            return res.status(403).json({ error: 'Accès admin requis' })\r\n        }\r\n\r\n        // 2. Récupérer les paramètres\r\n        const { formateurId, formateurNom } = req.body\r\n        if (!formateurId || !formateurNom) {\r\n            return res.status(400).json({ error: 'Paramètres manquants (formateurId, formateurNom)' })\r\n        }\r\n\r\n        console.log(`[ADMIN-RESET] Tentative reset pour formateur ID: ${formateurId}, nom: ${formateurNom}`)\r\n\r\n        // 3. Vérifier que le formateur existe avant reset\r\n        const { data: formateurCheck, error: checkError } = await supabaseAdmin\r\n            .from('users')\r\n            .select('id, prenom, nom, role, archive')\r\n            .eq('id', formateurId)\r\n            .eq('role', 'formateur')\r\n            .single()\r\n\r\n        if (checkError || !formateurCheck) {\r\n            console.error('[ADMIN-RESET] Formateur non trouvé:', checkError?.message)\r\n            return res.status(404).json({ error: 'Formateur non trouvé' })\r\n        }\r\n\r\n        if (formateurCheck.archive) {\r\n            return res.status(400).json({ error: 'Impossible de réinitialiser un formateur archivé' })\r\n        }\r\n\r\n        // 4. Réinitialiser le mot de passe (supprimer password_hash)\r\n        console.log(`[ADMIN-RESET] Reset pour: ${formateurCheck.prenom} ${formateurCheck.nom}`)\r\n        \r\n        const { data, error, count } = await supabaseAdmin\r\n            .from('users')\r\n            .update({ \r\n                password_hash: null,              // Supprime le hash personnalisé\r\n                must_change_password: false,      // Retire l'obligation\r\n                password_changed_at: null         // Remet à null\r\n            })\r\n            .eq('id', formateurId)\r\n            .eq('role', 'formateur')\r\n            .select('prenom, nom')\r\n\r\n        if (error) {\r\n            console.error('[ADMIN-RESET] Erreur UPDATE:', error)\r\n            return res.status(500).json({ error: 'Erreur lors de la réinitialisation' })\r\n        }\r\n\r\n        if (!data || data.length === 0) {\r\n            console.error('[ADMIN-RESET] Aucune ligne affectée par UPDATE')\r\n            return res.status(500).json({ error: 'Réinitialisation échouée - Aucune modification' })\r\n        }\r\n\r\n        // 5. Logger l'action admin pour audit\r\n        console.log(`[ADMIN-RESET] ✅ Mot de passe réinitialisé: ${data[0].prenom} ${data[0].nom} par admin ${user.email}`)\r\n\r\n        // 6. Vérification post-reset\r\n        const { data: verifyReset, error: verifyError } = await supabaseAdmin\r\n            .from('users')\r\n            .select('password_hash, must_change_password, password_changed_at')\r\n            .eq('id', formateurId)\r\n            .single()\r\n\r\n        if (!verifyError && verifyReset) {\r\n            console.log(`[ADMIN-RESET] Vérification: password_hash=${verifyReset.password_hash ? 'EXISTE' : 'NULL'}, must_change=${verifyReset.must_change_password}`)\r\n        }\r\n\r\n        return res.status(200).json({\r\n            success: true,\r\n            message: `Mot de passe réinitialisé pour ${data[0].prenom} ${data[0].nom}`,\r\n            fallbackPassword: formateurNom,\r\n            formateur: {\r\n                prenom: data[0].prenom,\r\n                nom: data[0].nom\r\n            }\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('[ADMIN-RESET] Erreur globale:', error)\r\n        return res.status(500).json({ error: 'Erreur serveur interne' })\r\n    }\r\n}",
          "taille": 4784,
          "lignes": 116,
          "dateModif": "2025-08-26T20:58:34.839Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/api/auth/formateur/change-password - local cassé.js",
      "resultat": {
        "statut": "LOCAL_SEULEMENT",
        "local": {
          "existe": true,
          "contenu": "import bcrypt from 'bcryptjs'\r\nimport { supabase } from '../../../../lib/supabaseClient'\r\nimport { verifyToken, generateTokenPair } from '../../../../lib/jwt'\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    const { currentPassword, newPassword } = req.body\r\n\r\n    // Validation des entrées\r\n    if (!currentPassword || !newPassword) {\r\n        return res.status(400).json({ \r\n            error: 'Mot de passe actuel et nouveau mot de passe requis' \r\n        })\r\n    }\r\n\r\n    if (newPassword.trim().length < 6) {\r\n        return res.status(400).json({ \r\n            error: 'Le nouveau mot de passe doit contenir au moins 6 caractères' \r\n        })\r\n    }\r\n\r\n    // Vérifier le token JWT\r\n    const authHeader = req.headers.authorization\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n        return res.status(401).json({ error: 'Token manquant ou invalide' })\r\n    }\r\n\r\n    const token = authHeader.split(' ')[1]\r\n    const decodedToken = verifyToken(token)\r\n    \r\n    if (!decodedToken) {\r\n        return res.status(401).json({ error: 'Token invalide ou expiré' })\r\n    }\r\n\r\n    try {\r\n        // 1. Récupérer l'utilisateur depuis la table users\r\n        const { data: user, error: userError } = await supabase\r\n            .from('users')\r\n            .select('*')\r\n            .eq('id', decodedToken.id)\r\n            .single()\r\n\r\n        if (userError || !user) {\r\n            return res.status(404).json({ error: 'Utilisateur non trouvé' })\r\n        }\r\n\r\n        // 2. Vérifier le mot de passe actuel\r\n        let currentPasswordValid = false\r\n\r\n        if (user.password_hash && (user.password_hash.startsWith('$2b$') || user.password_hash.startsWith('$2a$') || user.password_hash.startsWith('$2y$'))) {\r\n            // Mot de passe déjà hashé avec bcrypt\r\n            currentPasswordValid = await bcrypt.compare(currentPassword, user.password_hash)\r\n        } else {\r\n            // Première connexion : mot de passe = nom du formateur\r\n            currentPasswordValid = (currentPassword === user.nom)\r\n        }\r\n\r\n        if (!currentPasswordValid) {\r\n            return res.status(400).json({ error: 'Mot de passe actuel incorrect' })\r\n        }\r\n\r\n        // 3. Hasher le nouveau mot de passe\r\n        const saltRounds = 10\r\n        const newPasswordHash = await bcrypt.hash(newPassword, saltRounds)\r\n\r\n        // 4. Mettre à jour le mot de passe dans la table users\r\n        const { error: updateError } = await supabase\r\n            .from('users')\r\n            .update({\r\n                password_hash: newPasswordHash,\r\n                must_change_password: false,\r\n                password_changed_at: new Date().toISOString()\r\n            })\r\n            .eq('id', user.id)\r\n\r\n        if (updateError) {\r\n            console.error('Erreur mise à jour mot de passe:', updateError)\r\n            return res.status(500).json({ error: 'Erreur lors de la mise à jour' })\r\n        }\r\n\r\n        // 5. Générer de nouveaux tokens avec mustChangePassword = false\r\n        const userData = {\r\n            id: user.id,\r\n            formateur_id: user.id,\r\n            username: user.prenom,\r\n            nom: user.nom,\r\n            prenom: user.prenom,\r\n            email: user.email,\r\n            mustChangePassword: false\r\n        }\r\n\r\n        const newTokens = generateTokenPair(userData)\r\n\r\n        // 6. Log de sécurité\r\n        console.log(`[AUTH] Mot de passe changé pour formateur ${user.prenom} ${user.nom} (ID: ${user.id})`)\r\n\r\n        // 7. Retourner la réponse\r\n        res.status(200).json({\r\n            success: true,\r\n            message: 'Mot de passe changé avec succès',\r\n            user: {\r\n                id: user.id,\r\n                username: user.prenom,\r\n                nom: user.nom,\r\n                prenom: user.prenom,\r\n                email: user.email,\r\n                role: 'formateur',\r\n                mustChangePassword: false\r\n            },\r\n            tokens: {\r\n                accessToken: newTokens.accessToken,\r\n                refreshToken: newTokens.refreshToken,\r\n                expiresIn: newTokens.expiresIn,\r\n                tokenType: newTokens.tokenType\r\n            }\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur changement mot de passe:', error)\r\n        res.status(500).json({ \r\n            error: 'Erreur interne du serveur' \r\n        })\r\n    }\r\n}",
          "taille": 4493,
          "lignes": 127,
          "dateModif": "2025-08-28T19:00:40.261Z",
          "erreur": null
        },
        "vercel": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🟡 Fichier existe seulement en local"
      }
    },
    {
      "fichier": "pages/api/auth/formateur/change-password.js",
      "resultat": {
        "statut": "DIFFERENT",
        "local": {
          "existe": true,
          "contenu": "import bcrypt from 'bcryptjs'\r\nimport { supabase } from '../../../../lib/supabaseClient'\r\nimport { supabaseAdmin } from '../../../../lib/supabaseAdmin'\r\nimport { verifyToken, generateTokenPair } from '../../../../lib/jwt'\r\n\r\n/**\r\n * Normalise un prénom/nom pour créer un email valide\r\n * Supprime accents, cédilles et caractères spéciaux\r\n * José → jose, Martínez → martinez, Bénard → benard\r\n * IDENTIQUE À login.js pour cohérence\r\n */\r\nconst normalizeForEmail = (text) => {\r\n    return text\r\n        .toLowerCase()\r\n        .trim()\r\n        .normalize('NFD')                    // Décompose les caractères accentués\r\n        .replace(/[\\u0300-\\u036f]/g, '')    // Supprime les marques diacritiques\r\n        .replace(/[^a-z0-9]/g, '')          // Garde seulement lettres et chiffres\r\n}\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    const { currentPassword, newPassword } = req.body\r\n\r\n    // Validation des entrées\r\n    if (!currentPassword || !newPassword) {\r\n        return res.status(400).json({ \r\n            error: 'Mot de passe actuel et nouveau mot de passe requis' \r\n        })\r\n    }\r\n\r\n    if (newPassword.trim().length < 6) {\r\n        return res.status(400).json({ \r\n            error: 'Le nouveau mot de passe doit contenir au moins 6 caractères' \r\n        })\r\n    }\r\n\r\n    // Vérifier le token JWT\r\n    const authHeader = req.headers.authorization\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n        return res.status(401).json({ error: 'Token manquant ou invalide' })\r\n    }\r\n\r\n    const token = authHeader.split(' ')[1]\r\n    const decodedToken = verifyToken(token)\r\n    \r\n    if (!decodedToken) {\r\n        return res.status(401).json({ error: 'Token invalide ou expiré' })\r\n    }\r\n\r\n    try {\r\n        // 1. Récupérer l'utilisateur depuis la table users\r\n        console.log(`[DEBUG] Récupération user pour token ID: ${decodedToken.id}`)\r\n        const { data: user, error: userError } = await supabase\r\n            .from('users')\r\n            .select('*')\r\n            .eq('id', decodedToken.id)\r\n            .single()\r\n\r\n        if (userError || !user) {\r\n            console.error(`[DEBUG] User non trouvé - error:`, userError)\r\n            return res.status(404).json({ error: 'Utilisateur non trouvé' })\r\n        }\r\n\r\n        console.log(`[DEBUG] User récupéré:`, {\r\n            id: user.id,\r\n            prenom: user.prenom,\r\n            nom: user.nom,\r\n            email: user.email,\r\n            password_hash: user.password_hash ? 'EXISTE' : 'NULL',\r\n            custom_password: user.custom_password || 'NULL'\r\n        })\r\n\r\n        // 2. Vérifier le mot de passe actuel (LOGIQUE IDENTIQUE À login.js)\r\n        let currentPasswordValid = false\r\n\r\n        console.log(`[DEBUG] Vérification mot de passe actuel pour ${user.prenom} ${user.nom}`)\r\n        console.log(`[DEBUG] password_hash exists: ${user.password_hash ? 'EXISTE' : 'NULL'}`)\r\n\r\n        if (user.password_hash) {\r\n            console.log(`[DEBUG] Utilisation bcrypt pour vérification`)\r\n            // Si password_hash existe, utiliser uniquement bcrypt\r\n            currentPasswordValid = await bcrypt.compare(currentPassword, user.password_hash)\r\n            if (!currentPasswordValid) {\r\n                return res.status(400).json({ error: 'Mot de passe actuel incorrect' })\r\n            }\r\n        } else {\r\n            console.log(`[DEBUG] Utilisation fallback nom normalisé`)\r\n            // Fallback : première connexion avec nom normalisé (Bénard → benard)\r\n            const nomNormalized = normalizeForEmail(user.nom)\r\n            const currentPasswordNormalized = normalizeForEmail(currentPassword)\r\n            \r\n            console.log(`[DEBUG] Comparaison normalisée:`)\r\n            console.log(`[DEBUG]   nom \"${user.nom}\" → \"${nomNormalized}\"`)\r\n            console.log(`[DEBUG]   currentPassword \"${currentPassword}\" → \"${currentPasswordNormalized}\"`)\r\n            console.log(`[DEBUG]   match: ${currentPasswordNormalized === nomNormalized}`)\r\n            \r\n            if (currentPasswordNormalized !== nomNormalized) {\r\n                return res.status(400).json({ error: 'Mot de passe actuel incorrect' })\r\n            }\r\n            currentPasswordValid = true\r\n        }\r\n\r\n        // 3. Hasher le nouveau mot de passe\r\n        const saltRounds = 10\r\n        console.log(`[DEBUG] Génération hash pour user ID ${user.id}, saltRounds: ${saltRounds}`)\r\n        const newPasswordHash = await bcrypt.hash(newPassword, saltRounds)\r\n        console.log(`[DEBUG] Hash généré (longueur: ${newPasswordHash.length}): ${newPasswordHash.substring(0, 20)}...`)\r\n\r\n        // 4. Mettre à jour le mot de passe dans la table users avec client ADMIN\r\n        console.log(`[DEBUG] Tentative UPDATE ADMIN pour user ID ${user.id}`)\r\n        console.log(`[DEBUG] Données à mettre à jour:`, {\r\n            password_hash: newPasswordHash.substring(0, 20) + '...',\r\n            custom_password: null,\r\n            must_change_password: false,\r\n            password_changed_at: new Date().toISOString()\r\n        })\r\n\r\n        const { data: updateData, error: updateError, count } = await supabaseAdmin\r\n            .from('users')\r\n            .update({\r\n                password_hash: newPasswordHash,\r\n                custom_password: null,  // Supprimer l'ancien système\r\n                must_change_password: false,\r\n                password_changed_at: new Date().toISOString()\r\n            })\r\n            .eq('id', user.id)\r\n            .select() // CRITIQUE: Forcer le retour des données mises à jour\r\n\r\n        console.log(`[DEBUG] Résultat UPDATE - error:`, updateError)\r\n        console.log(`[DEBUG] Résultat UPDATE - data:`, updateData)\r\n        console.log(`[DEBUG] Résultat UPDATE - count:`, count)\r\n\r\n        if (updateError) {\r\n            console.error('Erreur mise à jour mot de passe:', updateError)\r\n            return res.status(500).json({ error: 'Erreur lors de la mise à jour' })\r\n        }\r\n\r\n        // 4.5. Vérification post-update - relire l'utilisateur pour confirmer\r\n        console.log(`[DEBUG] Vérification post-update pour user ID ${user.id}`)\r\n        const { data: verifyUser, error: verifyError } = await supabaseAdmin\r\n            .from('users')\r\n            .select('id, prenom, nom, password_hash, password_changed_at')\r\n            .eq('id', user.id)\r\n            .single()\r\n\r\n        if (verifyError) {\r\n            console.error('Erreur vérification post-update:', verifyError)\r\n        } else {\r\n            console.log(`[DEBUG] User après UPDATE:`, {\r\n                id: verifyUser.id,\r\n                prenom: verifyUser.prenom,\r\n                nom: verifyUser.nom,\r\n                password_hash: verifyUser.password_hash ? verifyUser.password_hash.substring(0, 20) + '...' : 'NULL',\r\n                password_changed_at: verifyUser.password_changed_at\r\n            })\r\n        }\r\n\r\n        // 5. Générer de nouveaux tokens avec mustChangePassword = false\r\n        const userData = {\r\n            id: user.id,\r\n            formateur_id: user.id,\r\n            username: user.prenom,\r\n            nom: user.nom,\r\n            prenom: user.prenom,\r\n            email: user.email,\r\n            mustChangePassword: false\r\n        }\r\n\r\n        const newTokens = generateTokenPair(userData)\r\n\r\n        // 6. Log de sécurité\r\n        console.log(`[AUTH] Mot de passe changé pour formateur ${user.prenom} ${user.nom} (ID: ${user.id})`)\r\n\r\n        // 7. Retourner la réponse\r\n        res.status(200).json({\r\n            success: true,\r\n            message: 'Mot de passe changé avec succès',\r\n            user: {\r\n                id: user.id,\r\n                username: user.prenom,\r\n                nom: user.nom,\r\n                prenom: user.prenom,\r\n                email: user.email,\r\n                role: 'formateur',\r\n                mustChangePassword: false\r\n            },\r\n            tokens: {\r\n                accessToken: newTokens.accessToken,\r\n                refreshToken: newTokens.refreshToken,\r\n                expiresIn: newTokens.expiresIn,\r\n                tokenType: newTokens.tokenType\r\n            }\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur changement mot de passe:', error)\r\n        res.status(500).json({ \r\n            error: 'Erreur interne du serveur' \r\n        })\r\n    }\r\n}",
          "taille": 8476,
          "lignes": 205,
          "dateModif": "2025-08-30T06:31:09.137Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import bcrypt from 'bcryptjs'\r\nimport { supabase } from '../../../../lib/supabaseClient'\r\nimport { verifyToken, generateTokenPair } from '../../../../lib/jwt'\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    const { currentPassword, newPassword } = req.body\r\n\r\n    // Validation des entrées\r\n    if (!currentPassword || !newPassword) {\r\n        return res.status(400).json({ \r\n            error: 'Mot de passe actuel et nouveau mot de passe requis' \r\n        })\r\n    }\r\n\r\n    if (newPassword.trim().length < 6) {\r\n        return res.status(400).json({ \r\n            error: 'Le nouveau mot de passe doit contenir au moins 6 caractères' \r\n        })\r\n    }\r\n\r\n    // Vérifier le token JWT\r\n    const authHeader = req.headers.authorization\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n        return res.status(401).json({ error: 'Token manquant ou invalide' })\r\n    }\r\n\r\n    const token = authHeader.split(' ')[1]\r\n    const decodedToken = verifyToken(token)\r\n    \r\n    if (!decodedToken) {\r\n        return res.status(401).json({ error: 'Token invalide ou expiré' })\r\n    }\r\n\r\n    try {\r\n        // 1. Récupérer l'utilisateur depuis la table users\r\n        const { data: user, error: userError } = await supabase\r\n            .from('users')\r\n            .select('*')\r\n            .eq('id', decodedToken.id)\r\n            .single()\r\n\r\n        if (userError || !user) {\r\n            return res.status(404).json({ error: 'Utilisateur non trouvé' })\r\n        }\r\n\r\n        // 2. Vérifier le mot de passe actuel\r\n        let currentPasswordValid = false\r\n\r\n        if (user.password_hash && (user.password_hash.startsWith('$2b$') || user.password_hash.startsWith('$2a$') || user.password_hash.startsWith('$2y$'))) {\r\n            // Mot de passe déjà hashé avec bcrypt\r\n            currentPasswordValid = await bcrypt.compare(currentPassword, user.password_hash)\r\n        } else {\r\n            // Première connexion : mot de passe = nom du formateur\r\n            currentPasswordValid = (currentPassword === user.nom)\r\n        }\r\n\r\n        if (!currentPasswordValid) {\r\n            return res.status(400).json({ error: 'Mot de passe actuel incorrect' })\r\n        }\r\n\r\n        // 3. Hasher le nouveau mot de passe\r\n        const saltRounds = 10\r\n        const newPasswordHash = await bcrypt.hash(newPassword, saltRounds)\r\n\r\n        // 4. Mettre à jour le mot de passe dans la table users\r\n        const { error: updateError } = await supabase\r\n            .from('users')\r\n            .update({\r\n                password_hash: newPasswordHash,\r\n                must_change_password: false,\r\n                password_changed_at: new Date().toISOString()\r\n            })\r\n            .eq('id', user.id)\r\n\r\n        if (updateError) {\r\n            console.error('Erreur mise à jour mot de passe:', updateError)\r\n            return res.status(500).json({ error: 'Erreur lors de la mise à jour' })\r\n        }\r\n\r\n        // 5. Générer de nouveaux tokens avec mustChangePassword = false\r\n        const userData = {\r\n            id: user.id,\r\n            formateur_id: user.id,\r\n            username: user.prenom,\r\n            nom: user.nom,\r\n            prenom: user.prenom,\r\n            email: user.email,\r\n            mustChangePassword: false\r\n        }\r\n\r\n        const newTokens = generateTokenPair(userData)\r\n\r\n        // 6. Log de sécurité\r\n        console.log(`[AUTH] Mot de passe changé pour formateur ${user.prenom} ${user.nom} (ID: ${user.id})`)\r\n\r\n        // 7. Retourner la réponse\r\n        res.status(200).json({\r\n            success: true,\r\n            message: 'Mot de passe changé avec succès',\r\n            user: {\r\n                id: user.id,\r\n                username: user.prenom,\r\n                nom: user.nom,\r\n                prenom: user.prenom,\r\n                email: user.email,\r\n                role: 'formateur',\r\n                mustChangePassword: false\r\n            },\r\n            tokens: {\r\n                accessToken: newTokens.accessToken,\r\n                refreshToken: newTokens.refreshToken,\r\n                expiresIn: newTokens.expiresIn,\r\n                tokenType: newTokens.tokenType\r\n            }\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur changement mot de passe:', error)\r\n        res.status(500).json({ \r\n            error: 'Erreur interne du serveur' \r\n        })\r\n    }\r\n}",
          "taille": 4493,
          "lignes": 127,
          "dateModif": "2025-08-28T18:19:16.611Z",
          "erreur": null
        },
        "identique": false,
        "diffTaille": 3983,
        "diffLignes": 78,
        "pourcentageSimilarite": 53,
        "message": "🟠 DIFFERENT - Similarité: 53% (±3983 bytes, ±78 lignes)"
      }
    },
    {
      "fichier": "pages/api/auth/formateur/login local cassé.js",
      "resultat": {
        "statut": "LOCAL_SEULEMENT",
        "local": {
          "existe": true,
          "contenu": "import { supabase } from '../../../../lib/supabaseClient'\r\nimport { generateTokenPair } from '../../../../lib/jwt'\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    const { username, password } = req.body\r\n\r\n    if (!username || !password) {\r\n        return res.status(400).json({ \r\n            error: 'Identifiant et mot de passe requis' \r\n        })\r\n    }\r\n\r\n    try {\r\n        // Chercher le formateur par prénom\r\n        const { data: formateur, error: formateurError } = await supabase\r\n            .from('users')\r\n            .select('*')\r\n            .ilike('prenom', username)\r\n            .eq('role', 'formateur')\r\n            .eq('archive', false)\r\n            .single()\r\n\r\n        if (formateurError || !formateur) {\r\n            return res.status(401).json({ \r\n                error: 'Identifiants incorrects' \r\n            })\r\n        }\r\n\r\n        // Vérifier le mot de passe\r\n        let passwordValid = false\r\n        let showEncouragement = false\r\n\r\n        if (formateur.custom_password) {\r\n            // Utiliser custom_password si défini\r\n            passwordValid = (password === formateur.custom_password)\r\n        } else {\r\n            // Sinon utiliser nom ET afficher encouragement\r\n            passwordValid = (password.toLowerCase() === formateur.nom.toLowerCase())\r\n            showEncouragement = passwordValid // Encouragement si connexion réussie avec nom\r\n        }\r\n\r\n        if (!passwordValid) {\r\n            return res.status(401).json({ \r\n                error: 'Identifiants incorrects' \r\n            })\r\n        }\r\n\r\n        // Générer le token\r\n        const tokens = generateTokenPair({\r\n            id: formateur.id,\r\n            formateur_id: formateur.id,\r\n            username: formateur.prenom,\r\n            nom: formateur.nom,\r\n            prenom: formateur.prenom,\r\n            email: formateur.email\r\n        })\r\n\r\n        const sessionId = `sess_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\r\n\r\n        return res.status(200).json({\r\n            success: true,\r\n            user: {\r\n                id: formateur.id,\r\n                username: formateur.prenom,\r\n                nom: formateur.nom,\r\n                prenom: formateur.prenom,\r\n                email: formateur.email,\r\n                role: 'formateur',\r\n                mustChangePassword: false\r\n            },\r\n            tokens: {\r\n                accessToken: tokens.accessToken,\r\n                refreshToken: tokens.refreshToken,\r\n                expiresIn: tokens.expiresIn,\r\n                tokenType: tokens.tokenType\r\n            },\r\n            sessionId: sessionId,\r\n            showEncouragement: showEncouragement\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur login formateur:', error)\r\n        return res.status(500).json({ \r\n            error: 'Erreur serveur' \r\n        })\r\n    }\r\n}",
          "taille": 2978,
          "lignes": 91,
          "dateModif": "2025-08-28T19:00:40.262Z",
          "erreur": null
        },
        "vercel": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🟡 Fichier existe seulement en local"
      }
    },
    {
      "fichier": "pages/api/auth/formateur/login.js",
      "resultat": {
        "statut": "DIFFERENT",
        "local": {
          "existe": true,
          "contenu": "import { supabase } from '../../../../lib/supabaseClient'\r\nimport { generateTokenPair } from '../../../../lib/jwt'\r\nimport bcrypt from 'bcryptjs'\r\n\r\n/**\r\n * Normalise un prénom/nom pour créer un email valide\r\n * Supprime accents, cédilles et caractères spéciaux\r\n * José → jose, Martínez → martinez\r\n */\r\nconst normalizeForEmail = (text) => {\r\n    return text\r\n        .toLowerCase()\r\n        .trim()\r\n        .normalize('NFD')                    // Décompose les caractères accentués\r\n        .replace(/[\\u0300-\\u036f]/g, '')    // Supprime les marques diacritiques\r\n        .replace(/[^a-z0-9]/g, '')          // Garde seulement lettres et chiffres\r\n}\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    const { username, password } = req.body\r\n\r\n    if (!username || !password) {\r\n        return res.status(400).json({ \r\n            error: 'Identifiant et mot de passe requis' \r\n        })\r\n    }\r\n\r\n    try {\r\n        console.log(`🔐 [LOGIN-DEBUG] Tentative login username=\"${username}\", password=\"${password}\"`)\r\n        \r\n        // Chercher le formateur par prénom (recherche flexible avec ilike)\r\n        // José tapé par l'utilisateur trouvera José en base\r\n        const { data: formateurs, error: formateurError } = await supabase\r\n            .from('users')\r\n            .select('*')\r\n            .ilike('prenom', `%${username}%`)\r\n            .eq('role', 'formateur')\r\n            .eq('archive', false)\r\n            \r\n        console.log(`🔐 [LOGIN-DEBUG] Requête Supabase - formateurs trouvés: ${formateurs?.length || 0}`)\r\n        formateurs?.forEach((f, i) => {\r\n            console.log(`🔐 [LOGIN-DEBUG] Formateur ${i}: ${f.prenom} ${f.nom}, email: ${f.email}, password_hash: ${f.password_hash ? 'EXISTE' : 'NULL'}`)\r\n        })\r\n\r\n        if (formateurError) {\r\n            return res.status(401).json({ \r\n                error: 'Identifiants incorrects' \r\n            })\r\n        }\r\n\r\n        // Trouver le bon formateur en comparant les prénoms normalisés\r\n        const usernameNormalized = normalizeForEmail(username)\r\n        const formateur = formateurs.find(f => \r\n            normalizeForEmail(f.prenom) === usernameNormalized\r\n        )\r\n\r\n        if (formateurError || !formateur) {\r\n            return res.status(401).json({ \r\n                error: 'Identifiants incorrects' \r\n            })\r\n        }\r\n\r\n        // Vérifier le mot de passe\r\n        let passwordValid = false\r\n        let showEncouragement = false\r\n\r\n        console.log(`🔐 [LOGIN-DEBUG] Vérification mot de passe pour ${formateur.prenom} ${formateur.nom}`)\r\n        console.log(`🔐 [LOGIN-DEBUG] password_hash exists: ${formateur.password_hash ? 'EXISTE' : 'NULL'}`)\r\n\r\n        // Nouvelle logique de vérification\r\n        if (formateur.password_hash) {\r\n            console.log(`🔐 [LOGIN-DEBUG] Utilisation bcrypt`)\r\n            // Si password_hash existe, utiliser uniquement bcrypt\r\n            passwordValid = await bcrypt.compare(password, formateur.password_hash)\r\n            if (!passwordValid) {\r\n                return res.status(401).json({ \r\n                    error: 'Mot de passe incorrect' \r\n                })\r\n            }\r\n        } else {\r\n            console.log(`🔐 [LOGIN-DEBUG] Utilisation fallback nom normalisé`)\r\n            // Fallback : première connexion avec nom (Martínez → martinez)\r\n            const nomNormalized = normalizeForEmail(formateur.nom)\r\n            const passwordNormalized = normalizeForEmail(password)\r\n            \r\n            console.log(`🔐 [LOGIN-DEBUG] Comparaison normalisée:`)\r\n            console.log(`🔐 [LOGIN-DEBUG]   nom \"${formateur.nom}\" → \"${nomNormalized}\"`)\r\n            console.log(`🔐 [LOGIN-DEBUG]   password \"${password}\" → \"${passwordNormalized}\"`)\r\n            console.log(`🔐 [LOGIN-DEBUG]   match: ${passwordNormalized === nomNormalized}`)\r\n            \r\n            if (passwordNormalized !== nomNormalized) {\r\n                return res.status(401).json({ \r\n                    error: 'Mot de passe incorrect' \r\n                })\r\n            }\r\n            passwordValid = true\r\n            showEncouragement = true // Encourager à changer le mot de passe\r\n        }\r\n\r\n        // Générer le token\r\n        const tokens = generateTokenPair({\r\n            id: formateur.id,\r\n            formateur_id: formateur.id,\r\n            username: formateur.prenom,\r\n            nom: formateur.nom,\r\n            prenom: formateur.prenom,\r\n            email: formateur.email\r\n        })\r\n\r\n        const sessionId = `sess_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\r\n\r\n        return res.status(200).json({\r\n            success: true,\r\n            user: {\r\n                id: formateur.id,\r\n                username: formateur.prenom,\r\n                nom: formateur.nom,\r\n                prenom: formateur.prenom,\r\n                email: formateur.email,\r\n                role: 'formateur',\r\n                mustChangePassword: false\r\n            },\r\n            tokens: {\r\n                accessToken: tokens.accessToken,\r\n                refreshToken: tokens.refreshToken,\r\n                expiresIn: tokens.expiresIn,\r\n                tokenType: tokens.tokenType\r\n            },\r\n            sessionId: sessionId,\r\n            showEncouragement: showEncouragement\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur login formateur:', error)\r\n        return res.status(500).json({ \r\n            error: 'Erreur serveur' \r\n        })\r\n    }\r\n}",
          "taille": 5625,
          "lignes": 143,
          "dateModif": "2025-08-30T07:29:35.355Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { supabase } from '../../../../lib/supabaseClient'\r\nimport { generateTokenPair } from '../../../../lib/jwt'\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    const { username, password } = req.body\r\n\r\n    if (!username || !password) {\r\n        return res.status(400).json({ \r\n            error: 'Identifiant et mot de passe requis' \r\n        })\r\n    }\r\n\r\n    try {\r\n        // Chercher le formateur par prénom\r\n        const { data: formateur, error: formateurError } = await supabase\r\n            .from('users')\r\n            .select('*')\r\n            .ilike('prenom', username)\r\n            .eq('role', 'formateur')\r\n            .eq('archive', false)\r\n            .single()\r\n\r\n        if (formateurError || !formateur) {\r\n            return res.status(401).json({ \r\n                error: 'Identifiants incorrects' \r\n            })\r\n        }\r\n\r\n        // Vérifier le mot de passe\r\n        let passwordValid = false\r\n        let showEncouragement = false\r\n\r\n        if (formateur.custom_password) {\r\n            // Utiliser custom_password si défini\r\n            passwordValid = (password === formateur.custom_password)\r\n        } else {\r\n            // Sinon utiliser nom ET afficher encouragement\r\n            passwordValid = (password.toLowerCase() === formateur.nom.toLowerCase())\r\n            showEncouragement = passwordValid // Encouragement si connexion réussie avec nom\r\n        }\r\n\r\n        if (!passwordValid) {\r\n            return res.status(401).json({ \r\n                error: 'Identifiants incorrects' \r\n            })\r\n        }\r\n\r\n        // Générer le token\r\n        const tokens = generateTokenPair({\r\n            id: formateur.id,\r\n            formateur_id: formateur.id,\r\n            username: formateur.prenom,\r\n            nom: formateur.nom,\r\n            prenom: formateur.prenom,\r\n            email: formateur.email\r\n        })\r\n\r\n        const sessionId = `sess_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\r\n\r\n        return res.status(200).json({\r\n            success: true,\r\n            user: {\r\n                id: formateur.id,\r\n                username: formateur.prenom,\r\n                nom: formateur.nom,\r\n                prenom: formateur.prenom,\r\n                email: formateur.email,\r\n                role: 'formateur',\r\n                mustChangePassword: false\r\n            },\r\n            tokens: {\r\n                accessToken: tokens.accessToken,\r\n                refreshToken: tokens.refreshToken,\r\n                expiresIn: tokens.expiresIn,\r\n                tokenType: tokens.tokenType\r\n            },\r\n            sessionId: sessionId,\r\n            showEncouragement: showEncouragement\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur login formateur:', error)\r\n        return res.status(500).json({ \r\n            error: 'Erreur serveur' \r\n        })\r\n    }\r\n}",
          "taille": 2978,
          "lignes": 91,
          "dateModif": "2025-08-28T18:19:16.612Z",
          "erreur": null
        },
        "identique": false,
        "diffTaille": 2647,
        "diffLignes": 52,
        "pourcentageSimilarite": 53,
        "message": "🟠 DIFFERENT - Similarité: 53% (±2647 bytes, ±52 lignes)"
      }
    },
    {
      "fichier": "pages/api/auth/formateur/logout.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { extractTokenFromHeader, verifyAccessToken } from '../../../../lib/jwt'\r\nimport { supabase } from '../../../../lib/supabaseClient'\r\n\r\nexport default async function handler(req, res) {\r\n    // Seulement POST\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    try {\r\n        // Extraire le token pour identifier l'utilisateur\r\n        const token = extractTokenFromHeader(req.headers.authorization)\r\n        \r\n        if (token) {\r\n            const { valid, decoded } = verifyAccessToken(token)\r\n            \r\n            if (valid && decoded.id) {\r\n                // Optionnel : enregistrer la déconnexion\r\n                console.log(`[AUTH] Déconnexion formateur ${decoded.prenom} ${decoded.nom} (ID: ${decoded.id})`)\r\n            }\r\n        }\r\n\r\n        // Toujours retourner succès même si pas de token\r\n        // (pour permettre la déconnexion côté client)\r\n        return res.status(200).json({\r\n            success: true,\r\n            message: 'Déconnexion réussie'\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur logout:', error)\r\n        // Retourner succès quand même pour ne pas bloquer le client\r\n        return res.status(200).json({\r\n            success: true,\r\n            message: 'Déconnexion réussie'\r\n        })\r\n    }\r\n}",
          "taille": 1350,
          "lignes": 38,
          "dateModif": "2025-08-28T19:00:40.271Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { extractTokenFromHeader, verifyAccessToken } from '../../../../lib/jwt'\r\nimport { supabase } from '../../../../lib/supabaseClient'\r\n\r\nexport default async function handler(req, res) {\r\n    // Seulement POST\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    try {\r\n        // Extraire le token pour identifier l'utilisateur\r\n        const token = extractTokenFromHeader(req.headers.authorization)\r\n        \r\n        if (token) {\r\n            const { valid, decoded } = verifyAccessToken(token)\r\n            \r\n            if (valid && decoded.id) {\r\n                // Optionnel : enregistrer la déconnexion\r\n                console.log(`[AUTH] Déconnexion formateur ${decoded.prenom} ${decoded.nom} (ID: ${decoded.id})`)\r\n            }\r\n        }\r\n\r\n        // Toujours retourner succès même si pas de token\r\n        // (pour permettre la déconnexion côté client)\r\n        return res.status(200).json({\r\n            success: true,\r\n            message: 'Déconnexion réussie'\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur logout:', error)\r\n        // Retourner succès quand même pour ne pas bloquer le client\r\n        return res.status(200).json({\r\n            success: true,\r\n            message: 'Déconnexion réussie'\r\n        })\r\n    }\r\n}",
          "taille": 1350,
          "lignes": 38,
          "dateModif": "2025-08-21T05:51:38.152Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/api/auth/formateur/refresh.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { verifyRefreshToken, generateTokenPair } from '../../../../lib/jwt'\r\nimport { supabase } from '../../../../lib/supabaseClient'\r\n\r\nexport default async function handler(req, res) {\r\n    // Seulement POST\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    const { refreshToken } = req.body\r\n\r\n    if (!refreshToken) {\r\n        return res.status(400).json({ \r\n            error: 'Refresh token requis' \r\n        })\r\n    }\r\n\r\n    try {\r\n        // 1. Vérifier le refresh token\r\n        const { valid, decoded, error } = verifyRefreshToken(refreshToken)\r\n        \r\n        if (!valid) {\r\n            return res.status(401).json({ \r\n                error: error || 'Refresh token invalide' \r\n            })\r\n        }\r\n\r\n        // 2. Vérifier que l'utilisateur existe toujours et est actif\r\n        const { data: user, error: userError } = await supabase\r\n            .from('users')\r\n            .select('*')\r\n            .eq('id', decoded.id)\r\n            .eq('role', 'formateur')\r\n            .eq('archive', false)\r\n            .single()\r\n\r\n        if (userError || !user) {\r\n            return res.status(401).json({ \r\n                error: 'Utilisateur non trouvé ou inactif' \r\n            })\r\n        }\r\n\r\n        // 3. Générer une nouvelle paire de tokens\r\n        const newTokens = generateTokenPair({\r\n            id: user.id,\r\n            formateur_id: user.id,\r\n            username: user.prenom,\r\n            nom: user.nom,\r\n            prenom: user.prenom,\r\n            email: user.email\r\n        })\r\n\r\n        // 4. Retourner les nouveaux tokens\r\n        return res.status(200).json({\r\n            success: true,\r\n            tokens: {\r\n                accessToken: newTokens.accessToken,\r\n                refreshToken: newTokens.refreshToken,\r\n                expiresIn: newTokens.expiresIn,\r\n                tokenType: newTokens.tokenType\r\n            },\r\n            user: {\r\n                id: user.id,\r\n                username: user.prenom,\r\n                nom: user.nom,\r\n                prenom: user.prenom,\r\n                email: user.email,\r\n                role: 'formateur',\r\n                mustChangePassword: user.must_change_password === true || !(user.password_hash?.startsWith('$2b$') || user.password_hash?.startsWith('$2a$') || user.password_hash?.startsWith('$2y$'))\r\n            }\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur refresh token:', error)\r\n        return res.status(500).json({ \r\n            error: 'Erreur serveur lors du rafraîchissement' \r\n        })\r\n    }\r\n}",
          "taille": 2612,
          "lignes": 79,
          "dateModif": "2025-08-28T19:00:40.284Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { verifyRefreshToken, generateTokenPair } from '../../../../lib/jwt'\r\nimport { supabase } from '../../../../lib/supabaseClient'\r\n\r\nexport default async function handler(req, res) {\r\n    // Seulement POST\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    const { refreshToken } = req.body\r\n\r\n    if (!refreshToken) {\r\n        return res.status(400).json({ \r\n            error: 'Refresh token requis' \r\n        })\r\n    }\r\n\r\n    try {\r\n        // 1. Vérifier le refresh token\r\n        const { valid, decoded, error } = verifyRefreshToken(refreshToken)\r\n        \r\n        if (!valid) {\r\n            return res.status(401).json({ \r\n                error: error || 'Refresh token invalide' \r\n            })\r\n        }\r\n\r\n        // 2. Vérifier que l'utilisateur existe toujours et est actif\r\n        const { data: user, error: userError } = await supabase\r\n            .from('users')\r\n            .select('*')\r\n            .eq('id', decoded.id)\r\n            .eq('role', 'formateur')\r\n            .eq('archive', false)\r\n            .single()\r\n\r\n        if (userError || !user) {\r\n            return res.status(401).json({ \r\n                error: 'Utilisateur non trouvé ou inactif' \r\n            })\r\n        }\r\n\r\n        // 3. Générer une nouvelle paire de tokens\r\n        const newTokens = generateTokenPair({\r\n            id: user.id,\r\n            formateur_id: user.id,\r\n            username: user.prenom,\r\n            nom: user.nom,\r\n            prenom: user.prenom,\r\n            email: user.email\r\n        })\r\n\r\n        // 4. Retourner les nouveaux tokens\r\n        return res.status(200).json({\r\n            success: true,\r\n            tokens: {\r\n                accessToken: newTokens.accessToken,\r\n                refreshToken: newTokens.refreshToken,\r\n                expiresIn: newTokens.expiresIn,\r\n                tokenType: newTokens.tokenType\r\n            },\r\n            user: {\r\n                id: user.id,\r\n                username: user.prenom,\r\n                nom: user.nom,\r\n                prenom: user.prenom,\r\n                email: user.email,\r\n                role: 'formateur',\r\n                mustChangePassword: user.must_change_password === true || !(user.password_hash?.startsWith('$2b$') || user.password_hash?.startsWith('$2a$') || user.password_hash?.startsWith('$2y$'))\r\n            }\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur refresh token:', error)\r\n        return res.status(500).json({ \r\n            error: 'Erreur serveur lors du rafraîchissement' \r\n        })\r\n    }\r\n}",
          "taille": 2612,
          "lignes": 79,
          "dateModif": "2025-08-28T18:19:16.618Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/api/auth/formateur/verify.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { verifyAccessToken, extractTokenFromHeader } from '../../../../lib/jwt'\r\nimport { supabase } from '../../../../lib/supabaseClient'\r\n\r\nexport default async function handler(req, res) {\r\n    // Seulement GET ou POST\r\n    if (req.method !== 'GET' && req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    try {\r\n        // Extraire le token du header Authorization\r\n        const token = extractTokenFromHeader(req.headers.authorization)\r\n        \r\n        if (!token) {\r\n            return res.status(401).json({ \r\n                error: 'Token manquant',\r\n                valid: false \r\n            })\r\n        }\r\n\r\n        // Vérifier le token\r\n        const { valid, decoded, error } = verifyAccessToken(token)\r\n        \r\n        if (!valid) {\r\n            return res.status(401).json({ \r\n                error: error || 'Token invalide',\r\n                valid: false \r\n            })\r\n        }\r\n\r\n        // Vérifier que le formateur existe toujours et est actif\r\n        const { data: formateur, error: dbError } = await supabase\r\n            .from('users')\r\n            .select('id, nom, prenom, email, role, archive, must_change_password, password_hash')\r\n            .eq('id', decoded.id)\r\n            .eq('role', 'formateur')\r\n            .eq('archive', false)\r\n            .single()\r\n\r\n        if (dbError || !formateur) {\r\n            return res.status(401).json({ \r\n                error: 'Formateur non trouvé ou inactif',\r\n                valid: false \r\n            })\r\n        }\r\n\r\n        // Token valide et formateur actif\r\n        return res.status(200).json({\r\n            valid: true,\r\n            user: {\r\n                id: formateur.id,\r\n                username: decoded.username,\r\n                nom: formateur.nom,\r\n                prenom: formateur.prenom,\r\n                email: formateur.email,\r\n                role: 'formateur',\r\n                mustChangePassword: formateur.must_change_password === true || !(formateur.password_hash?.startsWith('$2b$') || formateur.password_hash?.startsWith('$2a$') || formateur.password_hash?.startsWith('$2y$'))\r\n            },\r\n            token: {\r\n                exp: decoded.exp,\r\n                iat: decoded.iat,\r\n                expiresIn: decoded.exp - Math.floor(Date.now() / 1000) // Secondes restantes\r\n            }\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur vérification token:', error)\r\n        return res.status(500).json({ \r\n            error: 'Erreur serveur lors de la vérification',\r\n            valid: false \r\n        })\r\n    }\r\n}",
          "taille": 2615,
          "lignes": 73,
          "dateModif": "2025-08-28T19:00:40.296Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { verifyAccessToken, extractTokenFromHeader } from '../../../../lib/jwt'\r\nimport { supabase } from '../../../../lib/supabaseClient'\r\n\r\nexport default async function handler(req, res) {\r\n    // Seulement GET ou POST\r\n    if (req.method !== 'GET' && req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    try {\r\n        // Extraire le token du header Authorization\r\n        const token = extractTokenFromHeader(req.headers.authorization)\r\n        \r\n        if (!token) {\r\n            return res.status(401).json({ \r\n                error: 'Token manquant',\r\n                valid: false \r\n            })\r\n        }\r\n\r\n        // Vérifier le token\r\n        const { valid, decoded, error } = verifyAccessToken(token)\r\n        \r\n        if (!valid) {\r\n            return res.status(401).json({ \r\n                error: error || 'Token invalide',\r\n                valid: false \r\n            })\r\n        }\r\n\r\n        // Vérifier que le formateur existe toujours et est actif\r\n        const { data: formateur, error: dbError } = await supabase\r\n            .from('users')\r\n            .select('id, nom, prenom, email, role, archive, must_change_password, password_hash')\r\n            .eq('id', decoded.id)\r\n            .eq('role', 'formateur')\r\n            .eq('archive', false)\r\n            .single()\r\n\r\n        if (dbError || !formateur) {\r\n            return res.status(401).json({ \r\n                error: 'Formateur non trouvé ou inactif',\r\n                valid: false \r\n            })\r\n        }\r\n\r\n        // Token valide et formateur actif\r\n        return res.status(200).json({\r\n            valid: true,\r\n            user: {\r\n                id: formateur.id,\r\n                username: decoded.username,\r\n                nom: formateur.nom,\r\n                prenom: formateur.prenom,\r\n                email: formateur.email,\r\n                role: 'formateur',\r\n                mustChangePassword: formateur.must_change_password === true || !(formateur.password_hash?.startsWith('$2b$') || formateur.password_hash?.startsWith('$2a$') || formateur.password_hash?.startsWith('$2y$'))\r\n            },\r\n            token: {\r\n                exp: decoded.exp,\r\n                iat: decoded.iat,\r\n                expiresIn: decoded.exp - Math.floor(Date.now() / 1000) // Secondes restantes\r\n            }\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur vérification token:', error)\r\n        return res.status(500).json({ \r\n            error: 'Erreur serveur lors de la vérification',\r\n            valid: false \r\n        })\r\n    }\r\n}",
          "taille": 2615,
          "lignes": 73,
          "dateModif": "2025-08-28T18:19:16.622Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/api/auth/init-passwords.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { supabase } from '../../../lib/supabaseClient'\r\n\r\n// ATTENTION : Cette API est temporaire et doit être sécurisée ou supprimée après utilisation\r\nexport default async function handler(req, res) {\r\n    // Sécurité : vérifier une clé secrète\r\n    const { secret } = req.query\r\n    \r\n    if (secret !== 'init-aclef-2024') {\r\n        return res.status(401).json({ error: 'Non autorisé' })\r\n    }\r\n\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    try {\r\n        // Récupérer tous les formateurs sans mot de passe hashé\r\n        const { data: formateurs, error: fetchError } = await supabase\r\n            .from('users')\r\n            .select('id, nom, prenom')\r\n            .eq('role', 'formateur')\r\n            .eq('archive', false)\r\n            .or('password_hash.is.null,must_change_password.is.null')\r\n\r\n        if (fetchError) {\r\n            console.error('Erreur récupération formateurs:', fetchError)\r\n            return res.status(500).json({ error: 'Erreur lors de la récupération des formateurs' })\r\n        }\r\n\r\n        const results = []\r\n        \r\n        for (const formateur of formateurs) {\r\n            // Initialiser avec le nom comme mot de passe temporaire (non hashé)\r\n            // Le hash sera fait lors de la première connexion réussie\r\n            const { error: updateError } = await supabase\r\n                .from('users')\r\n                .update({\r\n                    password_hash: formateur.nom, // Temporaire, sera comparé en clair puis hashé\r\n                    must_change_password: true\r\n                })\r\n                .eq('id', formateur.id)\r\n\r\n            if (updateError) {\r\n                results.push({\r\n                    formateur: `${formateur.prenom} ${formateur.nom}`,\r\n                    status: 'erreur',\r\n                    error: updateError.message\r\n                })\r\n            } else {\r\n                results.push({\r\n                    formateur: `${formateur.prenom} ${formateur.nom}`,\r\n                    status: 'succès',\r\n                    login: formateur.prenom,\r\n                    password: formateur.nom\r\n                })\r\n            }\r\n        }\r\n\r\n        return res.status(200).json({\r\n            message: 'Initialisation terminée',\r\n            formateurs_traités: results.length,\r\n            résultats: results\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur initialisation:', error)\r\n        return res.status(500).json({ error: 'Erreur serveur' })\r\n    }\r\n}",
          "taille": 2570,
          "lignes": 69,
          "dateModif": "2025-08-28T19:00:40.308Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { supabase } from '../../../lib/supabaseClient'\r\n\r\n// ATTENTION : Cette API est temporaire et doit être sécurisée ou supprimée après utilisation\r\nexport default async function handler(req, res) {\r\n    // Sécurité : vérifier une clé secrète\r\n    const { secret } = req.query\r\n    \r\n    if (secret !== 'init-aclef-2024') {\r\n        return res.status(401).json({ error: 'Non autorisé' })\r\n    }\r\n\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    try {\r\n        // Récupérer tous les formateurs sans mot de passe hashé\r\n        const { data: formateurs, error: fetchError } = await supabase\r\n            .from('users')\r\n            .select('id, nom, prenom')\r\n            .eq('role', 'formateur')\r\n            .eq('archive', false)\r\n            .or('password_hash.is.null,must_change_password.is.null')\r\n\r\n        if (fetchError) {\r\n            console.error('Erreur récupération formateurs:', fetchError)\r\n            return res.status(500).json({ error: 'Erreur lors de la récupération des formateurs' })\r\n        }\r\n\r\n        const results = []\r\n        \r\n        for (const formateur of formateurs) {\r\n            // Initialiser avec le nom comme mot de passe temporaire (non hashé)\r\n            // Le hash sera fait lors de la première connexion réussie\r\n            const { error: updateError } = await supabase\r\n                .from('users')\r\n                .update({\r\n                    password_hash: formateur.nom, // Temporaire, sera comparé en clair puis hashé\r\n                    must_change_password: true\r\n                })\r\n                .eq('id', formateur.id)\r\n\r\n            if (updateError) {\r\n                results.push({\r\n                    formateur: `${formateur.prenom} ${formateur.nom}`,\r\n                    status: 'erreur',\r\n                    error: updateError.message\r\n                })\r\n            } else {\r\n                results.push({\r\n                    formateur: `${formateur.prenom} ${formateur.nom}`,\r\n                    status: 'succès',\r\n                    login: formateur.prenom,\r\n                    password: formateur.nom\r\n                })\r\n            }\r\n        }\r\n\r\n        return res.status(200).json({\r\n            message: 'Initialisation terminée',\r\n            formateurs_traités: results.length,\r\n            résultats: results\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur initialisation:', error)\r\n        return res.status(500).json({ error: 'Erreur serveur' })\r\n    }\r\n}",
          "taille": 2570,
          "lignes": 69,
          "dateModif": "2025-08-21T05:48:09.880Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/api/auto-cleanup.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { supabase } from '../../lib/supabaseClient'\r\n\r\nexport default async function handler(req, res) {\r\n  if (req.method !== 'POST') {\r\n    return res.status(405).json({ error: 'Method not allowed' })\r\n  }\r\n\r\n  try {\r\n    console.log('🧹 Nettoyage automatique sessions...')\r\n\r\n    // 🎯 SEUIL RÉDUIT À 2 MINUTES (au lieu de 5)\r\n    const seuilInactivite = new Date(Date.now() - 2 * 60 * 1000) // 2 minutes\r\n    \r\n    const { data: cleanedSessions, error } = await supabase\r\n      .from('admin_sessions')\r\n      .update({ \r\n        is_active: false,\r\n        heartbeat: new Date().toISOString()\r\n      })\r\n      .eq('is_active', true)\r\n      .lt('heartbeat', seuilInactivite.toISOString())\r\n      .select()\r\n\r\n    if (error) {\r\n      console.error('❌ Erreur cleanup:', error)\r\n      return res.status(500).json({ error: 'Database error' })\r\n    }\r\n\r\n    const nombreNettoye = cleanedSessions?.length || 0\r\n    console.log('🧹 Sessions nettoyées:', nombreNettoye)\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      cleaned: nombreNettoye,\r\n      seuil_minutes: 2,\r\n      timestamp: new Date().toISOString()\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('Erreur auto-cleanup:', error)\r\n    res.status(500).json({ error: 'Internal server error' })\r\n  }\r\n}",
          "taille": 1276,
          "lignes": 43,
          "dateModif": "2025-08-28T19:00:40.320Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { supabase } from '../../lib/supabaseClient'\r\n\r\nexport default async function handler(req, res) {\r\n  if (req.method !== 'POST') {\r\n    return res.status(405).json({ error: 'Method not allowed' })\r\n  }\r\n\r\n  try {\r\n    console.log('🧹 Nettoyage automatique sessions...')\r\n\r\n    // 🎯 SEUIL RÉDUIT À 2 MINUTES (au lieu de 5)\r\n    const seuilInactivite = new Date(Date.now() - 2 * 60 * 1000) // 2 minutes\r\n    \r\n    const { data: cleanedSessions, error } = await supabase\r\n      .from('admin_sessions')\r\n      .update({ \r\n        is_active: false,\r\n        heartbeat: new Date().toISOString()\r\n      })\r\n      .eq('is_active', true)\r\n      .lt('heartbeat', seuilInactivite.toISOString())\r\n      .select()\r\n\r\n    if (error) {\r\n      console.error('❌ Erreur cleanup:', error)\r\n      return res.status(500).json({ error: 'Database error' })\r\n    }\r\n\r\n    const nombreNettoye = cleanedSessions?.length || 0\r\n    console.log('🧹 Sessions nettoyées:', nombreNettoye)\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      cleaned: nombreNettoye,\r\n      seuil_minutes: 2,\r\n      timestamp: new Date().toISOString()\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('Erreur auto-cleanup:', error)\r\n    res.status(500).json({ error: 'Internal server error' })\r\n  }\r\n}",
          "taille": 1276,
          "lignes": 43,
          "dateModif": "2025-08-18T19:13:35.215Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/api/formateur/update-password - vercel.js",
      "resultat": {
        "statut": "LOCAL_SEULEMENT",
        "local": {
          "existe": true,
          "contenu": "import { supabase } from '../../../lib/supabaseClient'\r\nimport { verifyToken } from '../../../lib/jwt'\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    const { newPassword } = req.body\r\n\r\n    if (!newPassword || newPassword.trim().length === 0) {\r\n        return res.status(400).json({ error: 'Nouveau mot de passe requis' })\r\n    }\r\n\r\n    // Vérifier le token\r\n    const authHeader = req.headers.authorization\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n        return res.status(401).json({ error: 'Token manquant' })\r\n    }\r\n\r\n    const token = authHeader.split(' ')[1]\r\n    const decodedToken = verifyToken(token)\r\n    \r\n    if (!decodedToken) {\r\n        return res.status(401).json({ error: 'Token invalide' })\r\n    }\r\n\r\n    try {\r\n        // Mettre à jour custom_password\r\n        const { error } = await supabase\r\n            .from('users')\r\n            .update({ custom_password: newPassword })\r\n            .eq('id', decodedToken.id)\r\n\r\n        if (error) {\r\n            console.error('Erreur update password:', error)\r\n            return res.status(500).json({ error: 'Erreur lors de la mise à jour' })\r\n        }\r\n\r\n        return res.status(200).json({\r\n            success: true,\r\n            message: 'Mot de passe personnalisé sauvegardé'\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur update password:', error)\r\n        return res.status(500).json({ error: 'Erreur serveur' })\r\n    }\r\n}",
          "taille": 1568,
          "lignes": 49,
          "dateModif": "2025-08-30T06:17:04.277Z",
          "erreur": null
        },
        "vercel": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🟡 Fichier existe seulement en local"
      }
    },
    {
      "fichier": "pages/api/formateur/update-password.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { supabase } from '../../../lib/supabaseClient'\r\nimport { verifyToken } from '../../../lib/jwt'\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    const { newPassword } = req.body\r\n\r\n    if (!newPassword || newPassword.trim().length === 0) {\r\n        return res.status(400).json({ error: 'Nouveau mot de passe requis' })\r\n    }\r\n\r\n    // Vérifier le token\r\n    const authHeader = req.headers.authorization\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n        return res.status(401).json({ error: 'Token manquant' })\r\n    }\r\n\r\n    const token = authHeader.split(' ')[1]\r\n    const decodedToken = verifyToken(token)\r\n    \r\n    if (!decodedToken) {\r\n        return res.status(401).json({ error: 'Token invalide' })\r\n    }\r\n\r\n    try {\r\n        // Mettre à jour custom_password\r\n        const { error } = await supabase\r\n            .from('users')\r\n            .update({ custom_password: newPassword })\r\n            .eq('id', decodedToken.id)\r\n\r\n        if (error) {\r\n            console.error('Erreur update password:', error)\r\n            return res.status(500).json({ error: 'Erreur lors de la mise à jour' })\r\n        }\r\n\r\n        return res.status(200).json({\r\n            success: true,\r\n            message: 'Mot de passe personnalisé sauvegardé'\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur update password:', error)\r\n        return res.status(500).json({ error: 'Erreur serveur' })\r\n    }\r\n}",
          "taille": 1568,
          "lignes": 49,
          "dateModif": "2025-08-28T19:00:40.333Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { supabase } from '../../../lib/supabaseClient'\r\nimport { verifyToken } from '../../../lib/jwt'\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method !== 'POST') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    const { newPassword } = req.body\r\n\r\n    if (!newPassword || newPassword.trim().length === 0) {\r\n        return res.status(400).json({ error: 'Nouveau mot de passe requis' })\r\n    }\r\n\r\n    // Vérifier le token\r\n    const authHeader = req.headers.authorization\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n        return res.status(401).json({ error: 'Token manquant' })\r\n    }\r\n\r\n    const token = authHeader.split(' ')[1]\r\n    const decodedToken = verifyToken(token)\r\n    \r\n    if (!decodedToken) {\r\n        return res.status(401).json({ error: 'Token invalide' })\r\n    }\r\n\r\n    try {\r\n        // Mettre à jour custom_password\r\n        const { error } = await supabase\r\n            .from('users')\r\n            .update({ custom_password: newPassword })\r\n            .eq('id', decodedToken.id)\r\n\r\n        if (error) {\r\n            console.error('Erreur update password:', error)\r\n            return res.status(500).json({ error: 'Erreur lors de la mise à jour' })\r\n        }\r\n\r\n        return res.status(200).json({\r\n            success: true,\r\n            message: 'Mot de passe personnalisé sauvegardé'\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Erreur update password:', error)\r\n        return res.status(500).json({ error: 'Erreur serveur' })\r\n    }\r\n}",
          "taille": 1568,
          "lignes": 49,
          "dateModif": "2025-08-21T07:03:41.831Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/api/test-deconnexion.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "export default function handler(req, res) {\r\n  const timestamp = new Date().toISOString()\r\n  \r\n  if (req.method === 'POST') {\r\n    try {\r\n      let data\r\n      \r\n      // 🔧 CORRECTION : Gérer les deux formats (SendBeacon vs XHR)\r\n      const contentType = req.headers['content-type'] || ''\r\n      \r\n      if (contentType.includes('application/json')) {\r\n        // XHR avec JSON\r\n        data = req.body\r\n        console.log('📡 API TEST - Format XHR JSON détecté')\r\n      } else {\r\n        // SendBeacon avec text/plain - besoin de parser\r\n        if (typeof req.body === 'string') {\r\n          data = JSON.parse(req.body)\r\n          console.log('📡 API TEST - Format SendBeacon text/plain détecté')\r\n        } else {\r\n          data = req.body\r\n          console.log('📡 API TEST - Format autre détecté')\r\n        }\r\n      }\r\n      \r\n      // Logger la tentative de déconnexion\r\n      console.log('📡 API TEST DÉCONNEXION REÇUE:', {\r\n        timestamp,\r\n        method: req.method,\r\n        contentType,\r\n        data: data,\r\n        headers: {\r\n          'content-type': req.headers['content-type'],\r\n          'user-agent': req.headers['user-agent']\r\n        }\r\n      })\r\n\r\n      // Simuler traitement déconnexion\r\n      if (data && data.userId && data.action === 'deconnexion') {\r\n        console.log(`✅ Déconnexion simulée pour ${data.userId} via ${data.method}`)\r\n        \r\n        res.status(200).json({ \r\n          success: true, \r\n          message: 'Déconnexion test réussie',\r\n          method: data.method,\r\n          timestamp,\r\n          userId: data.userId,\r\n          contentType\r\n        })\r\n      } else {\r\n        console.log('❌ Données invalides pour déconnexion test:', data)\r\n        res.status(400).json({ \r\n          success: false, \r\n          message: 'Données invalides',\r\n          receivedData: data,\r\n          contentType\r\n        })\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Erreur API test déconnexion:', error)\r\n      res.status(500).json({ \r\n        success: false, \r\n        message: 'Erreur serveur',\r\n        error: error.message \r\n      })\r\n    }\r\n  } else {\r\n    // Méthode non autorisée\r\n    console.log('❌ Méthode non autorisée:', req.method)\r\n    res.status(405).json({ \r\n      success: false, \r\n      message: 'Méthode non autorisée' \r\n    })\r\n  }\r\n}",
          "taille": 2361,
          "lignes": 76,
          "dateModif": "2025-08-22T17:56:00.122Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "pages/api/test-verrou-admin.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "// Simulation du système admin_sessions en mémoire\r\nlet adminSessions = {\r\n  // Structure: { userId: { sessionId, isActive, sessionStart, lastHeartbeat, adminEmail } }\r\n}\r\n\r\nexport default function handler(req, res) {\r\n  const timestamp = new Date().toISOString()\r\n  \r\n  // 🔧 CORRECTION : Gérer les deux formats (SendBeacon vs XHR)\r\n  let body = req.body\r\n  if (typeof req.body === 'string') {\r\n    try {\r\n      body = JSON.parse(req.body)\r\n    } catch (e) {\r\n      body = req.body\r\n    }\r\n  }\r\n  \r\n  if (req.method === 'POST') {\r\n    const { action, userId, adminEmail, sessionId } = body\r\n    \r\n    try {\r\n      switch(action) {\r\n        case 'login':\r\n          // Vérifier si un admin est déjà connecté\r\n          const activeSession = Object.values(adminSessions).find(session => session.isActive)\r\n          \r\n          if (activeSession) {\r\n            console.log(`❌ LOGIN REFUSÉ: ${adminEmail} - ${activeSession.adminEmail} déjà connecté`)\r\n            return res.status(423).json({\r\n              success: false,\r\n              message: 'Un administrateur est déjà connecté',\r\n              activeAdmin: activeSession.adminEmail,\r\n              timestamp\r\n            })\r\n          }\r\n          \r\n          // Créer nouvelle session\r\n          adminSessions[userId] = {\r\n            sessionId,\r\n            isActive: true,\r\n            sessionStart: timestamp,\r\n            lastHeartbeat: timestamp,\r\n            adminEmail\r\n          }\r\n          \r\n          console.log(`✅ LOGIN RÉUSSI: ${adminEmail} (${userId})`)\r\n          return res.status(200).json({\r\n            success: true,\r\n            message: 'Connexion réussie',\r\n            sessionId,\r\n            timestamp\r\n          })\r\n          \r\n        case 'logout':\r\n          // Déconnexion normale\r\n          if (adminSessions[userId]) {\r\n            adminSessions[userId].isActive = false\r\n            console.log(`✅ LOGOUT NORMAL: ${adminSessions[userId].adminEmail}`)\r\n          }\r\n          \r\n          return res.status(200).json({\r\n            success: true,\r\n            message: 'Déconnexion réussie'\r\n          })\r\n          \r\n        case 'logout_emergency':\r\n          // Déconnexion d'urgence (fermeture onglet)\r\n          if (adminSessions[userId]) {\r\n            const adminEmail = adminSessions[userId].adminEmail\r\n            adminSessions[userId].isActive = false\r\n            console.log(`🚨 LOGOUT D'URGENCE: ${adminEmail} - Verrou libéré automatiquement`)\r\n          }\r\n          \r\n          return res.status(200).json({\r\n            success: true,\r\n            message: 'Déconnexion urgence réussie'\r\n          })\r\n          \r\n        case 'heartbeat':\r\n          // Maintenir la session active\r\n          if (adminSessions[userId] && adminSessions[userId].isActive) {\r\n            adminSessions[userId].lastHeartbeat = timestamp\r\n            return res.status(200).json({ success: true })\r\n          }\r\n          \r\n          return res.status(401).json({ success: false, message: 'Session invalide' })\r\n          \r\n        case 'check_status':\r\n          // Vérifier l'état du verrou\r\n          const currentActive = Object.entries(adminSessions).find(([id, session]) => session.isActive)\r\n          \r\n          return res.status(200).json({\r\n            success: true,\r\n            hasActiveSession: !!currentActive,\r\n            activeAdmin: currentActive ? currentActive[1].adminEmail : null,\r\n            allSessions: adminSessions,\r\n            timestamp\r\n          })\r\n          \r\n        case 'reset':\r\n          // Reset complet pour les tests\r\n          adminSessions = {}\r\n          console.log('🔄 RESET COMPLET: Toutes les sessions supprimées')\r\n          \r\n          return res.status(200).json({\r\n            success: true,\r\n            message: 'Reset complet effectué'\r\n          })\r\n          \r\n        default:\r\n          return res.status(400).json({\r\n            success: false,\r\n            message: 'Action inconnue'\r\n          })\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Erreur API verrou:', error)\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: 'Erreur serveur',\r\n        error: error.message\r\n      })\r\n    }\r\n  }\r\n  \r\n  if (req.method === 'GET') {\r\n    // GET pour vérifier l'état\r\n    const activeSession = Object.values(adminSessions).find(session => session.isActive)\r\n    \r\n    return res.status(200).json({\r\n      hasActiveSession: !!activeSession,\r\n      activeAdmin: activeSession ? activeSession.adminEmail : null,\r\n      allSessions: adminSessions\r\n    })\r\n  }\r\n  \r\n  return res.status(405).json({ message: 'Méthode non autorisée' })\r\n}",
          "taille": 4670,
          "lignes": 140,
          "dateModif": "2025-08-22T21:33:17.271Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "pages/debug.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\nimport { withAuthAdmin } from '../components/withAuthAdmin'\r\nimport { logAudit, auditUserAction, getAuditStats, AUDIT_ACTIONS } from '../lib/auditLogger'\r\n\r\nfunction Debug({ user, logout }) {\r\n    const router = useRouter()\r\n    \r\n    // États existants\r\n    const [isConnected, setIsConnected] = useState(false)\r\n    const [connectionMessage, setConnectionMessage] = useState('')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [message, setMessage] = useState('')\r\n    \r\n    // 📊 NOUVEAUX ÉTATS POUR LOGS AUDIT\r\n    const [auditStats, setAuditStats] = useState(null)\r\n    const [recentLogs, setRecentLogs] = useState([])\r\n    const [testResult, setTestResult] = useState('')\r\n\r\n    useEffect(() => {\r\n        testConnection()\r\n        loadAuditData() // Charger données audit\r\n    }, [])\r\n\r\n    // Fonction existante de test connexion\r\n    const testConnection = async () => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('users')\r\n                .select('count(*)')\r\n                .limit(1)\r\n\r\n            if (error) {\r\n                setConnectionMessage('❌ Erreur de connexion à Supabase')\r\n                setIsConnected(false)\r\n            } else {\r\n                setConnectionMessage('✅ Connexion Supabase opérationnelle')\r\n                setIsConnected(true)\r\n            }\r\n        } catch (error) {\r\n            setConnectionMessage('❌ Erreur critique de connexion')\r\n            setIsConnected(false)\r\n        }\r\n    }\r\n\r\n    // 📊 NOUVELLES FONCTIONS AUDIT\r\n    const loadAuditData = async () => {\r\n        try {\r\n            // Charger les stats\r\n            const stats = await getAuditStats()\r\n            setAuditStats(stats)\r\n\r\n            // Charger les 10 derniers logs\r\n            const { data: logs } = await supabase\r\n                .from('audit_logs')\r\n                .select('*')\r\n                .order('timestamp', { ascending: false })\r\n                .limit(10)\r\n\r\n            setRecentLogs(logs || [])\r\n        } catch (error) {\r\n            console.error('Erreur chargement audit:', error)\r\n        }\r\n    }\r\n\r\n    // Test du système audit\r\n    const testAuditSystem = async () => {\r\n        setIsLoading(true)\r\n        setTestResult('🧪 Test en cours...')\r\n        \r\n        try {\r\n            // Test 1 : Log simple\r\n            await logAudit(AUDIT_ACTIONS.LOGIN_ADMIN, {\r\n                test: true,\r\n                description: 'Test système audit depuis debug.js'\r\n            })\r\n\r\n            // Test 2 : Log action utilisateur\r\n            await auditUserAction(AUDIT_ACTIONS.USER_MODIFIE, {\r\n                id: 'test-id',\r\n                prenom: 'Test',\r\n                nom: 'Audit',\r\n                role: 'test',\r\n                avant: { status: 'ancien' },\r\n                apres: { status: 'nouveau' }\r\n            })\r\n\r\n            // Recharger les données\r\n            await loadAuditData()\r\n\r\n            setTestResult('✅ Test audit réussi ! Vérifiez les logs ci-dessous.')\r\n\r\n        } catch (error) {\r\n            setTestResult(`❌ Erreur test audit: ${error.message}`)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Purger un formateur (fonction existante)\r\n    const purgeFormateur = async () => {\r\n        if (!window.confirm('Voulez-vous vraiment purger le planning d\\'un formateur ?')) return\r\n        \r\n        const formateurId = prompt('ID du formateur à purger :')\r\n        if (!formateurId) return\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            // Supprimer de planning_type_formateurs\r\n            await supabase.from('planning_type_formateurs').delete().eq('formateur_id', formateurId)\r\n            \r\n            // Supprimer de absences_formateurs\r\n            await supabase.from('absences_formateurs').delete().eq('formateur_id', formateurId)\r\n            \r\n            // Supprimer de planning_formateurs_hebdo\r\n            await supabase.from('planning_formateurs_hebdo').delete().eq('formateur_id', formateurId)\r\n\r\n            // 📊 LOG AUDIT - PURGE FORMATEUR\r\n            await auditUserAction(AUDIT_ACTIONS.USER_SUPPRIME, {\r\n                id: formateurId,\r\n                action: 'purge_planning',\r\n                description: 'Purge complète planning formateur'\r\n            })\r\n\r\n            setMessage('✅ Planning formateur purgé avec succès')\r\n            setTimeout(() => setMessage(''), 5000)\r\n\r\n        } catch (error) {\r\n            setMessage(`❌ Erreur purge: ${error.message}`)\r\n            setTimeout(() => setMessage(''), 5000)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Formatage pour affichage logs\r\n    const formatLogAction = (action) => {\r\n        const actions = {\r\n            'login_admin': 'Connexion Admin',\r\n            'user_modifie': 'Utilisateur Modifié',\r\n            'user_cree': 'Utilisateur Créé',\r\n            'user_supprime': 'Utilisateur Supprimé',\r\n            'planning_valide': 'Planning Validé'\r\n        }\r\n        return actions[action] || action\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            padding: '40px 60px'\r\n        }}>\r\n            {/* Header avec navigation */}\r\n            <div style={{\r\n                backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                borderRadius: '12px',\r\n                padding: '8px 20px',\r\n                marginBottom: '20px',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                backdropFilter: 'blur(10px)'\r\n            }}>\r\n                <nav style={{ fontSize: '14px' }}>\r\n                    <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                    <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                    <span style={{ color: '#ef4444', fontWeight: '500' }}>🔧 Debug & Tests</span>\r\n                </nav>\r\n                <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n                    <span style={{\r\n                        fontSize: '12px',\r\n                        color: '#10b981',\r\n                        backgroundColor: '#d1fae5',\r\n                        padding: '4px 8px',\r\n                        borderRadius: '4px',\r\n                        fontWeight: '500'\r\n                    }}>\r\n                        🛡️ Temple Protégé\r\n                    </span>\r\n                    <span style={{\r\n                        fontSize: '12px',\r\n                        color: '#3b82f6',\r\n                        backgroundColor: '#dbeafe',\r\n                        padding: '4px 8px',\r\n                        borderRadius: '4px',\r\n                        fontWeight: '500'\r\n                    }}>\r\n                        👤 {user?.email}\r\n                    </span>\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        Accueil\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Titre principal */}\r\n            <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n                <h1 style={{\r\n                    fontSize: '36px',\r\n                    fontWeight: 'bold',\r\n                    color: 'white',\r\n                    marginBottom: '10px'\r\n                }}>\r\n                    🔧 Debug & Tests Système\r\n                </h1>\r\n                <p style={{ color: 'rgba(255,255,255,0.8)', fontSize: '16px' }}>\r\n                    Outils de diagnostic et tests pour développeurs\r\n                </p>\r\n            </div>\r\n\r\n            {/* Message de notification */}\r\n            {message && (\r\n                <div style={{\r\n                    backgroundColor: message.includes('✅') ? '#d1fae5' : '#fee2e2',\r\n                    color: message.includes('✅') ? '#065f46' : '#991b1b',\r\n                    padding: '15px',\r\n                    borderRadius: '8px',\r\n                    marginBottom: '20px',\r\n                    textAlign: 'center',\r\n                    fontWeight: '500'\r\n                }}>\r\n                    {message}\r\n                </div>\r\n            )}\r\n\r\n            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px' }}>\r\n                \r\n                {/* SECTION EXISTANTE - Connexion & Purge */}\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <h2 style={{\r\n                        fontSize: '18px',\r\n                        fontWeight: 'bold',\r\n                        color: '#1f2937',\r\n                        marginBottom: '15px'\r\n                    }}>\r\n                        🔌 Tests Connexion\r\n                    </h2>\r\n\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                        <div style={{\r\n                            padding: '15px',\r\n                            backgroundColor: isConnected ? '#d1fae5' : '#fee2e2',\r\n                            border: `1px solid ${isConnected ? '#10b981' : '#ef4444'}`,\r\n                            borderRadius: '8px',\r\n                            marginBottom: '15px'\r\n                        }}>\r\n                            <strong>{connectionMessage}</strong>\r\n                        </div>\r\n\r\n                        <button\r\n                            onClick={testConnection}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '12px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                cursor: 'pointer',\r\n                                marginBottom: '15px'\r\n                            }}\r\n                        >\r\n                            🔄 Retester la connexion\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div style={{ paddingTop: '20px', borderTop: '1px solid #e5e7eb' }}>\r\n                        <h3 style={{ fontSize: '16px', fontWeight: 'bold', color: '#dc2626', marginBottom: '10px' }}>\r\n                            ⚠️ Zone Dangereuse\r\n                        </h3>\r\n                        <button\r\n                            onClick={purgeFormateur}\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '12px',\r\n                                backgroundColor: isLoading ? '#9ca3af' : '#dc2626',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                            }}\r\n                        >\r\n                            {isLoading ? 'Purge...' : '🗑️ Purger Planning Formateur'}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* 📊 NOUVELLE SECTION - Tests Logs Audit */}\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <h2 style={{\r\n                        fontSize: '18px',\r\n                        fontWeight: 'bold',\r\n                        color: '#1f2937',\r\n                        marginBottom: '15px'\r\n                    }}>\r\n                        📊 Tests Logs Audit\r\n                    </h2>\r\n\r\n                    {/* Stats audit */}\r\n                    {auditStats && (\r\n                        <div style={{\r\n                            display: 'grid',\r\n                            gridTemplateColumns: '1fr 1fr',\r\n                            gap: '10px',\r\n                            marginBottom: '20px'\r\n                        }}>\r\n                            <div style={{\r\n                                padding: '10px',\r\n                                backgroundColor: '#f0f9ff',\r\n                                borderRadius: '6px',\r\n                                textAlign: 'center'\r\n                            }}>\r\n                                <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#3b82f6' }}>\r\n                                    {auditStats.total_logs}\r\n                                </div>\r\n                                <div style={{ fontSize: '12px', color: '#6b7280' }}>Total logs</div>\r\n                            </div>\r\n                            <div style={{\r\n                                padding: '10px',\r\n                                backgroundColor: '#f0fdf4',\r\n                                borderRadius: '6px',\r\n                                textAlign: 'center'\r\n                            }}>\r\n                                <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#10b981' }}>\r\n                                    {auditStats.actions_today}\r\n                                </div>\r\n                                <div style={{ fontSize: '12px', color: '#6b7280' }}>Aujourd'hui</div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Test result */}\r\n                    {testResult && (\r\n                        <div style={{\r\n                            padding: '10px',\r\n                            backgroundColor: testResult.includes('✅') ? '#d1fae5' : '#fef3c7',\r\n                            border: `1px solid ${testResult.includes('✅') ? '#10b981' : '#f59e0b'}`,\r\n                            borderRadius: '6px',\r\n                            marginBottom: '15px',\r\n                            fontSize: '13px'\r\n                        }}>\r\n                            {testResult}\r\n                        </div>\r\n                    )}\r\n\r\n                    <button\r\n                        onClick={testAuditSystem}\r\n                        disabled={isLoading}\r\n                        style={{\r\n                            width: '100%',\r\n                            padding: '12px',\r\n                            backgroundColor: isLoading ? '#9ca3af' : '#8b5cf6',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            fontWeight: '600',\r\n                            cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                            marginBottom: '20px'\r\n                        }}\r\n                    >\r\n                        {isLoading ? 'Test...' : '🧪 Tester Système Audit'}\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/logs-audit')}\r\n                        style={{\r\n                            width: '100%',\r\n                            padding: '12px',\r\n                            backgroundColor: '#6366f1',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            fontWeight: '600',\r\n                            cursor: 'pointer',\r\n                            marginBottom: '20px'\r\n                        }}\r\n                    >\r\n                        📊 Voir Interface Logs Complète\r\n                    </button>\r\n\r\n                    {/* Derniers logs */}\r\n                    {recentLogs.length > 0 && (\r\n                        <div style={{ paddingTop: '15px', borderTop: '1px solid #e5e7eb' }}>\r\n                            <h4 style={{ fontSize: '14px', fontWeight: 'bold', marginBottom: '10px' }}>\r\n                                🕐 Derniers logs\r\n                            </h4>\r\n                            <div style={{ maxHeight: '200px', overflowY: 'auto' }}>\r\n                                {recentLogs.slice(0, 5).map((log) => (\r\n                                    <div key={log.id} style={{\r\n                                        padding: '8px',\r\n                                        borderBottom: '1px solid #f3f4f6',\r\n                                        fontSize: '12px'\r\n                                    }}>\r\n                                        <div style={{ fontWeight: '500', color: '#374151' }}>\r\n                                            {formatLogAction(log.action)}\r\n                                        </div>\r\n                                        <div style={{ color: '#6b7280' }}>\r\n                                            {new Date(log.timestamp).toLocaleString('fr-FR')} • {log.admin_email}\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC\r\nexport default withAuthAdmin(Debug, \"Debug & Tests\")",
          "taille": 18393,
          "lignes": 442,
          "dateModif": "2025-08-19T06:48:39.599Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "pages/formateur/absence.js",
      "resultat": {
        "statut": "QUASI_IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport { supabase } from '../../lib/supabaseClient';\r\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext';\r\n\r\nexport default function AbsenceFormateur() {\r\n    const { user, isLoading: authLoading, isAuthenticated } = useFormateurAuth()\r\n    const [currentDate, setCurrentDate] = useState(new Date());\r\n    const [modeSelection, setModeSelection] = useState('absent');\r\n    const [planningModifie, setPlanningModifie] = useState({});\r\n    const [planningOriginal, setPlanningOriginal] = useState({});\r\n    const [historiqueModi, setHistoriqueModi] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n    const [lieux, setLieux] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [envoiEnCours, setEnvoiEnCours] = useState(false);\r\n    // ✅ NOUVEAU: États pour modal message facultatif\r\n    const [showMessageModal, setShowMessageModal] = useState(false);\r\n    const [messageFacultatif, setMessageFacultatif] = useState('');\r\n    const router = useRouter();\r\n\r\n    // Protection authentification\r\n    useEffect(() => {\r\n        if (!authLoading && !isAuthenticated) {\r\n            router.push('/formateur/login')\r\n        }\r\n    }, [authLoading, isAuthenticated, router])\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            loadPlanningData();\r\n        }\r\n    }, [currentDate, user]);\r\n\r\n\r\n    const loadPlanningData = async () => {\r\n        if (!user) return;\r\n        \r\n        try {\r\n            setIsLoading(true);\r\n            \r\n            // Charger les lieux pour affichage\r\n            const { data: lieuxData, error: lieuxError } = await supabase\r\n                .from('lieux')\r\n                .select('id, nom, couleur, initiale')\r\n                .eq('archive', false);\r\n\r\n            if (lieuxError) throw lieuxError;\r\n            setLieux(lieuxData || []);\r\n\r\n            const annee = currentDate.getFullYear();\r\n            const mois = currentDate.getMonth();\r\n            const premierJour = new Date(annee, mois, 1);\r\n            const dernierJour = new Date(annee, mois + 1, 0);\r\n            \r\n            // Construire le planning original basé sur le planning type VALIDÉ\r\n            const planning = {};\r\n            \r\n            // Ajouter seulement les jours ouvrés (Lun-Ven) comme \"libre\" par défaut\r\n            for (let jour = 1; jour <= new Date(annee, mois + 1, 0).getDate(); jour++) {\r\n                const date = new Date(annee, mois, jour);\r\n                const jourSemaine = date.getDay();\r\n                \r\n                // Seulement les jours de travail (lundi à vendredi)\r\n                if (jourSemaine >= 1 && jourSemaine <= 5) {\r\n                    const anneeStr = date.getFullYear();\r\n                    const moisStr = String(date.getMonth() + 1).padStart(2, '0');\r\n                    const jourStr = String(date.getDate()).padStart(2, '0');\r\n                    const dateStr = `${anneeStr}-${moisStr}-${jourStr}`;\r\n                    planning[dateStr] = 'libre';\r\n                }\r\n            }\r\n\r\n            // Récupérer le planning type VALIDÉ du formateur\r\n            const { data: planningTypeData, error: planningTypeError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .select('jour, creneau, statut, lieu_id, valide')\r\n                .eq('formateur_id', user.id)\r\n                .eq('valide', true);\r\n\r\n            // Appliquer le planning type VALIDÉ (BASE VERTE)\r\n            if (planningTypeData && !planningTypeError) {\r\n                // Créer un mapping des jours\r\n                const joursMapping = {\r\n                    0: 'Dimanche', 1: 'Lundi', 2: 'Mardi', 3: 'Mercredi', \r\n                    4: 'Jeudi', 5: 'Vendredi', 6: 'Samedi'\r\n                };\r\n\r\n                // Pour chaque jour du mois\r\n                for (let jour = 1; jour <= new Date(annee, mois + 1, 0).getDate(); jour++) {\r\n                    const date = new Date(annee, mois, jour);\r\n                    const jourSemaine = date.getDay();\r\n                    const nomJour = joursMapping[jourSemaine];\r\n                    \r\n                    // Si c'est un jour ouvré\r\n                    if (jourSemaine >= 1 && jourSemaine <= 5) {\r\n                        const anneeStr = date.getFullYear();\r\n                        const moisStr = String(date.getMonth() + 1).padStart(2, '0');\r\n                        const jourStr = String(date.getDate()).padStart(2, '0');\r\n                        const dateStr = `${anneeStr}-${moisStr}-${jourStr}`;\r\n                        \r\n                        // Vérifier si le formateur a une disponibilité validée ce jour-là   \r\n                        const disponibiliteJour = planningTypeData.find(pt => \r\n                            pt.jour === nomJour && pt.statut === 'disponible'\r\n                        );\r\n                        \r\n                        const disponibiliteExcept = planningTypeData.find(pt => \r\n                            pt.jour === nomJour && pt.statut === 'dispo_except'\r\n                        );\r\n                        \r\n                        if (disponibiliteJour) {\r\n                            planning[dateStr] = 'planning_type'; // JOUR VALIDÉ = VERT\r\n                        } else if (disponibiliteExcept) {\r\n                            planning[dateStr] = 'dispo_except'; // DISPO EXCEPTIONNELLE = ORANGE\r\n                        }\r\n                    }\r\n                }\r\n                console.log(`✅ Planning type validé appliqué: ${planningTypeData.length} créneaux`);\r\n            }\r\n\r\n            // 🔧 CORRECTION CRITIQUE : Charger ET afficher TOUTES les absences\r\n            const { data: absencesData, error: absencesError } = await supabase\r\n                .from('absences_formateurs')\r\n                .select('date_debut, date_fin, type, statut, id')\r\n                .eq('formateur_id', user.id);\r\n\r\n            // 🔧 NOUVEAU : Appliquer TOUTES les absences (en_attente + validées)\r\n            if (absencesData && !absencesError) {\r\n                console.log(`🔧 CHARGEMENT: ${absencesData.length} absences trouvées:`, absencesData);\r\n                \r\n                absencesData.forEach(absence => {\r\n                    const debut = new Date(absence.date_debut);\r\n                    const fin = new Date(absence.date_fin);\r\n                    \r\n                    console.log(`🔧 Traitement absence: ${absence.date_debut} - ${absence.date_fin}, type: ${absence.type}, statut: ${absence.statut}`);\r\n                    \r\n                    for (let d = new Date(debut); d <= fin; d.setDate(d.getDate() + 1)) {\r\n                        const anneeStr = d.getFullYear();\r\n                        const moisStr = String(d.getMonth() + 1).padStart(2, '0');\r\n                        const jourStr = String(d.getDate()).padStart(2, '0');\r\n                        const dateStr = `${anneeStr}-${moisStr}-${jourStr}`;\r\n                        \r\n                        if (planning.hasOwnProperty(dateStr)) {\r\n                            // 🔧 CORRECTION : Afficher TOUTES les absences (en_attente ET validées)\r\n                            if (absence.type === 'personnel' || absence.type === 'absence') {\r\n                                planning[dateStr] = 'absent';\r\n                                console.log(`🔴 ${dateStr} marqué ABSENT (${absence.type}, ${absence.statut})`);\r\n                            } else if (absence.type === 'formation' || absence.type === 'dispo_except') {\r\n                                planning[dateStr] = 'dispo';\r\n                                console.log(`🟡 ${dateStr} marqué DISPO EXCEPT (${absence.type}, ${absence.statut})`);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                console.log(`✅ Modifications affichées: ${absencesData.length} (en_attente + validées)`);\r\n            }\r\n\r\n            // Debug : Afficher le résultat final\r\n            const joursVerts = Object.keys(planning).filter(d => planning[d] === 'planning_type').length;\r\n            const joursRouges = Object.keys(planning).filter(d => planning[d] === 'absent').length;\r\n            const joursOranges = Object.keys(planning).filter(d => planning[d] === 'dispo').length;\r\n            \r\n            console.log(`📊 RÉSULTAT FINAL:`);\r\n            console.log(`  🟢 Jours verts (planning type): ${joursVerts}`);\r\n            console.log(`  🔴 Jours rouges (absences): ${joursRouges}`);\r\n            console.log(`  🟡 Jours oranges (dispo except): ${joursOranges}`);\r\n\r\n            setPlanningOriginal(planning);\r\n            setPlanningModifie({...planning});\r\n\r\n        } catch (error) {\r\n            console.error('⚠ Erreur:', error.message);\r\n            setMessage(`⚠ Erreur: ${error.message}`);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Navigation mensuelle\r\n    const changerMois = (direction) => {\r\n        const nouvelleDate = new Date(currentDate);\r\n        nouvelleDate.setMonth(currentDate.getMonth() + direction);\r\n        setCurrentDate(nouvelleDate);\r\n        setMessage('');\r\n    };\r\n\r\n    // Fonction pour obtenir les détails d'un statut\r\n    const getStatutDetails = (statut) => {\r\n        switch (statut) {\r\n            case 'absent':\r\n                return { \r\n                    backgroundColor: '#ef4444', \r\n                    color: 'white', \r\n                    label: 'ABS',\r\n                    nom: 'Absent'\r\n                };\r\n            case 'dispo':\r\n                return { \r\n                    backgroundColor: '#f59e0b', \r\n                    color: 'white', \r\n                    label: 'DISPO',\r\n                    nom: 'Dispo exceptionnelle'\r\n                };\r\n            case 'planning_type':\r\n                return { \r\n                    backgroundColor: '#22c55e', \r\n                    color: 'white', \r\n                    label: 'DISPO',\r\n                    nom: 'Planning habituel'\r\n                };\r\n            case 'dispo_except':\r\n                return { \r\n                    backgroundColor: '#f59e0b', \r\n                    color: 'white', \r\n                    label: 'EXCEPT',\r\n                    nom: 'Dispo exceptionnelle'\r\n                };\r\n            case 'libre':\r\n            default:\r\n                return { \r\n                    backgroundColor: '#d1d5db', \r\n                    color: '#374151', \r\n                    label: '',\r\n                    nom: 'Libre'\r\n                };\r\n        }\r\n    };\r\n\r\n    // Fonction pour gérer le clic sur une case\r\n    const gererClicCase = (date) => {\r\n        const annee = date.getFullYear();\r\n        const mois = String(date.getMonth() + 1).padStart(2, '0');\r\n        const jourStr = String(date.getDate()).padStart(2, '0');\r\n        const dateStr = `${annee}-${mois}-${jourStr}`;\r\n        \r\n        const aujourdhui = new Date();\r\n        const aujourdhuiStr = `${aujourdhui.getFullYear()}-${String(aujourdhui.getMonth() + 1).padStart(2, '0')}-${String(aujourdhui.getDate()).padStart(2, '0')}`;\r\n        \r\n        if (dateStr < aujourdhuiStr) {\r\n            setMessage('Impossible de modifier le passé');\r\n            return;\r\n        }\r\n\r\n        // Ajouter à l'historique avant de modifier\r\n        setHistoriqueModi(prev => [...prev, { date: dateStr, action: 'modifier', mode: modeSelection }]);\r\n\r\n        setPlanningModifie(prev => ({\r\n            ...prev,\r\n            [dateStr]: modeSelection\r\n        }));\r\n\r\n        const details = getStatutDetails(modeSelection);\r\n        setMessage(`${date.getDate()} ${currentDate.toLocaleDateString('fr-FR', {month: 'long'})} → ${details.nom}`);\r\n    };\r\n\r\n    // Fonction ANNULER : annuler la dernière action\r\n    const annulerDerniereAction = () => {\r\n        if (historiqueModi.length === 0) {\r\n            setMessage('Aucune action à annuler');\r\n            return;\r\n        }\r\n\r\n        const derniereAction = historiqueModi[historiqueModi.length - 1];\r\n        \r\n        // Supprimer la dernière action de l'historique\r\n        setHistoriqueModi(prev => prev.slice(0, -1));\r\n        \r\n        if (derniereAction.action === 'modifier') {\r\n            // Annuler une modification = remettre l'état original\r\n            setPlanningModifie(prev => ({\r\n                ...prev,\r\n                [derniereAction.date]: planningOriginal[derniereAction.date]\r\n            }));\r\n            setMessage('Dernière action annulée');\r\n        } else if (derniereAction.action === 'annuler_case') {\r\n            // Annuler une annulation = remettre la case\r\n            setPlanningModifie(prev => ({\r\n                ...prev,\r\n                [derniereAction.date]: derniereAction.mode || 'planning_type'\r\n            }));\r\n            setMessage('Annulation annulée');\r\n        }\r\n    };\r\n\r\n    // Fonction ANNULER UNE CASE : supprimer une case spécifique (mode annuler)\r\n    const annulerModificationCase = (date) => {\r\n        const annee = date.getFullYear();\r\n        const mois = String(date.getMonth() + 1).padStart(2, '0');\r\n        const jourStr = String(date.getDate()).padStart(2, '0');\r\n        const dateStr = `${annee}-${mois}-${jourStr}`;\r\n        \r\n        // Ajouter à l'historique avant d'annuler\r\n        setHistoriqueModi(prev => [...prev, { \r\n            date: dateStr, \r\n            action: 'annuler_case',\r\n            mode: planningModifie[dateStr]\r\n        }]);\r\n        \r\n        // Remettre à l'état original\r\n        setPlanningModifie(prev => ({\r\n            ...prev,\r\n            [dateStr]: planningOriginal[dateStr]\r\n        }));\r\n        \r\n        setMessage(`Modification annulée pour le ${date.getDate()} ${currentDate.toLocaleDateString('fr-FR', {month: 'long'})}`);\r\n    };\r\n\r\n    // Fonction EFFACER TOUT : effacer toutes les modifications\r\n    const effacerTout = () => {\r\n        setPlanningModifie({...planningOriginal}); // Remettre à l'état original\r\n        setHistoriqueModi([]); // Vider aussi l'historique\r\n        setMessage('Toutes les modifications ont été effacées');\r\n    };\r\n\r\n    // ✅ NOUVEAU: Fonction pour générer la liste des modifications pour le message\r\n    const genererListeModifications = () => {\r\n        const modificationsDetectees = [];\r\n        \r\n        Object.keys(planningModifie).forEach(dateStr => {\r\n            const statutOriginal = planningOriginal[dateStr];\r\n            const statutModifie = planningModifie[dateStr];\r\n            \r\n            if (statutOriginal !== statutModifie) {\r\n                const date = new Date(dateStr);\r\n                const dateFormatee = date.toLocaleDateString('fr-FR', { \r\n                    weekday: 'long', \r\n                    day: 'numeric', \r\n                    month: 'long' \r\n                });\r\n                \r\n                let typeModification = '';\r\n                if (statutModifie === 'absent') {\r\n                    typeModification = 'Absence';\r\n                } else if (statutModifie === 'dispo') {\r\n                    typeModification = 'Disponibilité exceptionnelle';\r\n                }\r\n                \r\n                if (typeModification) {\r\n                    modificationsDetectees.push(`${dateFormatee} : ${typeModification}`);\r\n                }\r\n            }\r\n        });\r\n        \r\n        return modificationsDetectees;\r\n    };\r\n\r\n    // ✅ CORRIGÉ: Fonction d'envoi de message automatique vers admin\r\n    const envoyerMessageAdmin = async (messageFacultatif = '') => {\r\n        try {\r\n            console.log('🚀 DÉBUT envoyerMessageAdmin')\r\n            console.log('user:', user)\r\n            \r\n            if (!user) {\r\n                console.error('❌ Données utilisateur manquantes')\r\n                return\r\n            }\r\n\r\n            const formateurNom = `${user.prenom} ${user.nom}`\r\n            const listeModifications = genererListeModifications()\r\n            \r\n            console.log('📝 Liste modifications:', listeModifications)\r\n            \r\n            let contenu = `${formateurNom} souhaite effectuer des modifications ponctuelles sur son planning :\\n\\n`\r\n            \r\n            // Ajouter la liste des modifications\r\n            if (listeModifications.length > 0) {\r\n                contenu += `MODIFICATIONS DEMANDÉES :\\n`\r\n                listeModifications.forEach((modif, index) => {\r\n                    contenu += `${index + 1}. ${modif}\\n`\r\n                })\r\n                contenu += '\\n'\r\n            }\r\n            \r\n            // Ajouter le message facultatif s'il existe\r\n            if (messageFacultatif.trim()) {\r\n                contenu += `MESSAGE DU FORMATEUR :\\n\"${messageFacultatif.trim()}\"`\r\n            }\r\n            \r\n            console.log('📨 Contenu du message:', contenu)\r\n            \r\n            const messageData = {\r\n                expediteur_id: user.id,\r\n                destinataire_id: null, // null = admin\r\n                expediteur: formateurNom,\r\n                destinataire: 'Coordination ACLEF',\r\n                objet: 'Validation de modification ponctuelle',\r\n                contenu: contenu,\r\n                type: 'planning',\r\n                lu: false,\r\n                archive: false,\r\n                statut_validation: 'a_traiter',\r\n                date: new Date().toISOString().split('T')[0],\r\n                heure: new Date().toTimeString().slice(0, 5)\r\n            }\r\n            \r\n            console.log('📤 Données à insérer:', messageData)\r\n            \r\n            const { data, error } = await supabase\r\n                .from('messages')\r\n                .insert(messageData)\r\n                .select()\r\n\r\n            if (error) {\r\n                console.error('❌ Erreur Supabase:', error)\r\n                alert('Erreur envoi message: ' + error.message)\r\n            } else {\r\n                console.log('✅ Message inséré avec succès:', data)\r\n                alert('✅ Message envoyé à l\\'administration !')\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('❌ Erreur générale:', error)\r\n            alert('Erreur: ' + error.message)\r\n        }\r\n    }\r\n\r\n    // ✅ NOUVEAU: Gestion de la validation avec modal message facultatif\r\n    const handleValider = async () => {\r\n        const modificationsDetectees = Object.keys(planningModifie).filter(date => \r\n            planningModifie[date] !== planningOriginal[date]\r\n        );\r\n        \r\n        if (modificationsDetectees.length === 0) {\r\n            setMessage('⚠️ Aucune modification à envoyer');\r\n            return;\r\n        }\r\n\r\n        // ✅ NOUVEAU: Afficher modal pour message facultatif\r\n        setShowMessageModal(true);\r\n    };\r\n\r\n    // ✅ NOUVEAU: Fonction de validation finale avec envoi message\r\n    const handleValidationFinale = async () => {\r\n        setShowMessageModal(false);\r\n        \r\n        // Envoyer message vers admin AVANT la sauvegarde\r\n        await envoyerMessageAdmin(messageFacultatif);\r\n        \r\n        // Puis sauvegarder le planning\r\n        await envoyerDemande();\r\n        \r\n        // Reset du message facultatif\r\n        setMessageFacultatif('');\r\n    };\r\n\r\n    // Fonction ENVOYER LA DEMANDE : sauvegarder en BDD (MODIFIÉE pour retirer le modal)\r\n    const envoyerDemande = async () => {\r\n        try {\r\n            setEnvoiEnCours(true);\r\n            setMessage('⏳ Envoi de la demande en cours...');\r\n\r\n            // Détecter les modifications\r\n            const modificationsDetectees = [];\r\n            \r\n            Object.keys(planningModifie).forEach(dateStr => {\r\n                const statutOriginal = planningOriginal[dateStr];\r\n                const statutModifie = planningModifie[dateStr];\r\n                \r\n                // Si la case a été modifiée\r\n                if (statutOriginal !== statutModifie) {\r\n                    let type = null;\r\n                    \r\n                    if (statutModifie === 'absent') {\r\n                        type = 'personnel';\r\n                    } else if (statutModifie === 'dispo') {\r\n                        type = 'formation';\r\n                    }\r\n                    \r\n                    // Ajouter seulement si c'est un type reconnu\r\n                    if (type) {\r\n                        modificationsDetectees.push({\r\n                            date: dateStr,\r\n                            type: type,\r\n                            statutOriginal: statutOriginal,\r\n                            statutModifie: statutModifie\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (modificationsDetectees.length === 0) {\r\n                setMessage('⚠️ Aucune modification à envoyer');\r\n                setEnvoiEnCours(false);\r\n                return;\r\n            }\r\n\r\n            console.log(`📤 ${modificationsDetectees.length} modifications détectées:`, modificationsDetectees);\r\n\r\n            // Créer un enregistrement par jour modifié\r\n            const enregistrementsACreer = modificationsDetectees.map(modif => ({\r\n                formateur_id: user.id,\r\n                date_debut: modif.date,\r\n                date_fin: modif.date, // Même date pour jour par jour\r\n                type: modif.type,\r\n                statut: 'en_attente',\r\n                motif: null, // Optionnel, peut être ajouté plus tard\r\n                created_at: new Date().toISOString()\r\n            }));\r\n\r\n            // Insérer en BDD\r\n            const { data: resultats, error: erreurInsert } = await supabase\r\n                .from('absences_formateurs')\r\n                .insert(enregistrementsACreer)\r\n                .select();\r\n\r\n            if (erreurInsert) {\r\n                throw erreurInsert;\r\n            }\r\n\r\n            console.log(`✅ ${resultats.length} enregistrements créés en BDD`);\r\n\r\n            // Succès !\r\n            setMessage(`✅ Demande envoyée ! ${modificationsDetectees.length} modification(s) en attente de validation.`);\r\n            \r\n            // Remettre le planning à l'état d'origine après envoi réussi\r\n            setPlanningModifie({...planningOriginal});\r\n            setHistoriqueModi([]);\r\n\r\n            // Rediriger vers l'accueil après 2 secondes\r\n            setTimeout(() => {\r\n                router.push('/formateur');\r\n            }, 2000);\r\n\r\n        } catch (error) {\r\n            console.error('⚠️ Erreur lors de l\\'envoi:', error);\r\n            setMessage(`⚠️ Erreur lors de l'envoi: ${error.message}`);\r\n        } finally {\r\n            setEnvoiEnCours(false);\r\n        }\r\n    };\r\n\r\n    // Génération du calendrier 5 jours ouvrés\r\n    const genererCalendrierComplet = () => {\r\n        const annee = currentDate.getFullYear();\r\n        const mois = currentDate.getMonth();\r\n        \r\n        const nbJoursMois = new Date(annee, mois + 1, 0).getDate();\r\n        const joursOuvres = [];\r\n        \r\n        for (let jour = 1; jour <= nbJoursMois; jour++) {\r\n            const date = new Date(annee, mois, jour, 12, 0, 0, 0);\r\n            const jourSemaine = date.getDay();\r\n            \r\n            if (jourSemaine >= 1 && jourSemaine <= 5) {\r\n                joursOuvres.push(date);\r\n            }\r\n        }\r\n        \r\n        const grille = [];\r\n        let indexJour = 0;\r\n        \r\n        const nbSemaines = Math.ceil(joursOuvres.length / 5);\r\n        \r\n        for (let semaine = 0; semaine < nbSemaines; semaine++) {\r\n            for (let jourSemaine = 0; jourSemaine < 5; jourSemaine++) {\r\n                if (indexJour < joursOuvres.length) {\r\n                    const date = joursOuvres[indexJour];\r\n                    const jourReel = date.getDay();\r\n                    const jourAttendu = jourSemaine + 1;\r\n                    \r\n                    if (jourReel === jourAttendu) {\r\n                        grille.push(date);\r\n                        indexJour++;\r\n                    } else {\r\n                        grille.push(null);\r\n                    }\r\n                } else {\r\n                    grille.push(null);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return grille;\r\n    };\r\n\r\n    // Vérifier s'il y a des modifications\r\n    const aDesModifications = () => {\r\n        return JSON.stringify(planningOriginal) !== JSON.stringify(planningModifie);\r\n    };\r\n\r\n    if (isLoading || authLoading) {\r\n        return (\r\n            <div style={{\r\n                height: '100vh',\r\n                backgroundColor: '#ffffff',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                padding: '8px'\r\n            }}>\r\n                <div style={{fontSize: '48px', marginBottom: '16px'}}>⏳</div>\r\n                <p style={{fontSize: '18px', color: '#667eea'}}>Chargement de votre planning...</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!user) {\r\n        return null;\r\n    }\r\n\r\n    const nomMois = currentDate.toLocaleDateString('fr-FR', { month: 'long', year: 'numeric' });\r\n    const casesCalendrier = genererCalendrierComplet();\r\n\r\n    // Styles CSS optimisés pour pleine page\r\n    const containerStyle = {\r\n        height: '100vh',\r\n        backgroundColor: '#ffffff',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        padding: '8px',\r\n        overflow: 'hidden'\r\n    };\r\n\r\n    const calendrierStyle = {\r\n        width: '100%',\r\n        maxWidth: '380px',\r\n        backgroundColor: 'white',\r\n        borderRadius: '16px',\r\n        padding: '16px',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        height: '100%',\r\n        maxHeight: '95vh'\r\n    };\r\n\r\n    return (\r\n        <div style={containerStyle}>\r\n            {/* ✅ NOUVEAU: Modal pour message facultatif */}\r\n            {showMessageModal && (\r\n                <div style={{\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    backgroundColor: 'rgba(0,0,0,0.5)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    zIndex: 1000\r\n                }}>\r\n                    <div style={{\r\n                        backgroundColor: 'white',\r\n                        borderRadius: '15px',\r\n                        padding: '25px',\r\n                        maxWidth: '380px',\r\n                        width: '90%'\r\n                    }}>\r\n                        <h3 style={{ \r\n                            margin: '0 0 15px 0', \r\n                            fontSize: '18px', \r\n                            color: '#374151',\r\n                            textAlign: 'center'\r\n                        }}>\r\n                            💬 Message facultatif\r\n                        </h3>\r\n                        <p style={{ \r\n                            fontSize: '14px', \r\n                            color: '#6b7280', \r\n                            margin: '0 0 15px 0',\r\n                            textAlign: 'center',\r\n                            lineHeight: '1.4'\r\n                        }}>\r\n                            Souhaitez-vous ajouter un message pour expliquer vos modifications ?\r\n                            <br />\r\n                            <em>(ex: \"Je serai en formation\", \"Congés prévus\")</em>\r\n                        </p>\r\n                        <textarea\r\n                            value={messageFacultatif}\r\n                            onChange={(e) => setMessageFacultatif(e.target.value)}\r\n                            placeholder=\"Votre message (optionnel)...\"\r\n                            rows={4}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '12px',\r\n                                border: '2px solid #e5e7eb',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                resize: 'vertical',\r\n                                boxSizing: 'border-box',\r\n                                marginBottom: '20px'\r\n                            }}\r\n                        />\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                onClick={() => setShowMessageModal(false)}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    padding: '12px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: 'bold',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                            <button\r\n                                onClick={handleValidationFinale}\r\n                                disabled={envoiEnCours}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    backgroundColor: envoiEnCours ? '#9ca3af' : '#10b981',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    padding: '12px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: 'bold',\r\n                                    cursor: envoiEnCours ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                {envoiEnCours ? 'Envoi...' : 'Valider'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            <div style={calendrierStyle}>\r\n                \r\n                {/* En-tête compact */}\r\n                <div style={{marginBottom: '12px', textAlign: 'center'}}>\r\n                    <h1 style={{fontSize: '18px', fontWeight: 'bold', margin: 0, color: '#1e40af'}}>\r\n                        Modifier mes disponibilités\r\n                    </h1>\r\n                </div>\r\n\r\n                {/* Modes de sélection compacts */}\r\n                <div style={{marginBottom: '12px'}}>\r\n                    <h3 style={{fontSize: '12px', fontWeight: 'bold', marginBottom: '8px', textAlign: 'center', color: '#374151'}}>\r\n                        Choisir un mode puis cliquer sur les dates\r\n                    </h3>\r\n                    <div style={{display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '6px', marginBottom: '6px'}}>\r\n                        <button\r\n                            onClick={() => {\r\n                                setModeSelection('absent');\r\n                                setMessage('Mode ABSENT activé');\r\n                            }}\r\n                            style={{\r\n                                padding: '8px',\r\n                                borderRadius: '8px',\r\n                                border: modeSelection === 'absent' ? '2px solid #fbbf24' : 'none',\r\n                                backgroundColor: '#ef4444',\r\n                                color: 'white',\r\n                                fontWeight: 'bold',\r\n                                fontSize: '9px',\r\n                                cursor: 'pointer',\r\n                                textAlign: 'center'\r\n                            }}\r\n                        >\r\n                            ABSENT\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={() => {\r\n                                setModeSelection('dispo');\r\n                                setMessage('Mode DISPO EXCEPT. activé');\r\n                            }}\r\n                            style={{\r\n                                padding: '8px',\r\n                                borderRadius: '8px',\r\n                                border: modeSelection === 'dispo' ? '2px solid #fbbf24' : 'none',\r\n                                backgroundColor: '#f59e0b',\r\n                                color: 'white',\r\n                                fontWeight: 'bold',\r\n                                fontSize: '9px',\r\n                                cursor: 'pointer',\r\n                                textAlign: 'center'\r\n                            }}\r\n                        >\r\n                            DISPO EXCEPT.\r\n                        </button>\r\n                    </div>\r\n                    <div style={{display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '6px'}}>\r\n                        <button\r\n                            onClick={() => {\r\n                                setModeSelection('annuler_case');\r\n                                setMessage('Mode ANNULER CASE activé');\r\n                            }}\r\n                            style={{\r\n                                padding: '8px',\r\n                                borderRadius: '8px',\r\n                                border: modeSelection === 'annuler_case' ? '2px solid #fbbf24' : 'none',\r\n                                backgroundColor: '#d1d5db',\r\n                                color: '#374151',\r\n                                fontWeight: 'bold',\r\n                                fontSize: '8px',\r\n                                cursor: 'pointer',\r\n                                textAlign: 'center'\r\n                            }}\r\n                        >\r\n                            ANNULER CASE\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={annulerDerniereAction}\r\n                            style={{\r\n                                padding: '8px',\r\n                                borderRadius: '8px',\r\n                                backgroundColor: '#d1d5db',\r\n                                color: '#374151',\r\n                                fontWeight: 'bold',\r\n                                fontSize: '8px',\r\n                                cursor: 'pointer',\r\n                                textAlign: 'center',\r\n                                border: 'none'\r\n                            }}\r\n                        >\r\n                            ANNULER\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={effacerTout}\r\n                            style={{\r\n                                padding: '8px',\r\n                                borderRadius: '8px',\r\n                                backgroundColor: '#6b7280',\r\n                                color: 'white',\r\n                                fontWeight: 'bold',\r\n                                fontSize: '8px',\r\n                                cursor: 'pointer',\r\n                                textAlign: 'center',\r\n                                border: 'none'\r\n                            }}\r\n                        >\r\n                            EFFACER TOUT\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Messages compacts */}\r\n                {message && (\r\n                    <div style={{\r\n                        padding: '8px',\r\n                        borderRadius: '8px',\r\n                        marginBottom: '8px',\r\n                        textAlign: 'center',\r\n                        backgroundColor: message.includes('Impossible') || message.includes('⚠️') ? '#fee2e2' : \r\n                                         message.includes('⏳') ? '#dbeafe' :\r\n                                         message.includes('✅') ? '#d1fae5' : '#dbeafe',\r\n                        color: message.includes('Impossible') || message.includes('⚠️') ? '#991b1b' : \r\n                               message.includes('⏳') ? '#1e40af' :\r\n                               message.includes('✅') ? '#065f46' : '#1e40af',\r\n                        fontWeight: 'bold',\r\n                        fontSize: '10px'\r\n                    }}>\r\n                        {message}\r\n                    </div>\r\n                )}\r\n\r\n                {/* Compteur modifications compact */}\r\n                {aDesModifications() && (\r\n                    <div style={{\r\n                        backgroundColor: '#fef3c7',\r\n                        padding: '6px',\r\n                        borderRadius: '8px',\r\n                        marginBottom: '8px',\r\n                        textAlign: 'center',\r\n                        color: '#92400e',\r\n                        fontWeight: 'bold',\r\n                        fontSize: '10px'\r\n                    }}>\r\n                        {Object.keys(planningModifie).filter(date => \r\n                            planningModifie[date] !== planningOriginal[date]\r\n                        ).length} modification(s)\r\n                    </div>\r\n                )}\r\n\r\n                {/* Navigation compacte */}\r\n                <div style={{display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '12px'}}>\r\n                    <button \r\n                        style={{\r\n                            width: '40px', \r\n                            height: '40px', \r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', \r\n                            color: 'white',\r\n                            border: 'none', \r\n                            borderRadius: '10px', \r\n                            fontSize: '18px', \r\n                            fontWeight: 'bold',\r\n                            cursor: 'pointer', \r\n                            display: 'flex', \r\n                            alignItems: 'center', \r\n                            justifyContent: 'center'\r\n                        }}\r\n                        onClick={() => changerMois(-1)}\r\n                    >\r\n                        ←\r\n                    </button>\r\n                    \r\n                    <h2 style={{\r\n                        fontSize: '16px', \r\n                        fontWeight: 'bold', \r\n                        textTransform: 'capitalize', \r\n                        margin: 0,\r\n                        color: '#1e40af',\r\n                        textAlign: 'center'\r\n                    }}>\r\n                        {nomMois.split(' ')[0]} {currentDate.getFullYear()}\r\n                    </h2>\r\n                    \r\n                    <button \r\n                        style={{\r\n                            width: '40px', \r\n                            height: '40px', \r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', \r\n                            color: 'white',\r\n                            border: 'none', \r\n                            borderRadius: '10px', \r\n                            fontSize: '18px', \r\n                            fontWeight: 'bold',\r\n                            cursor: 'pointer', \r\n                            display: 'flex', \r\n                            alignItems: 'center', \r\n                            justifyContent: 'center'\r\n                        }}\r\n                        onClick={() => changerMois(1)}\r\n                    >\r\n                        →\r\n                    </button>\r\n                </div>\r\n\r\n                {/* En-têtes des jours compacts */}\r\n                <div style={{display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)', gap: '4px', marginBottom: '8px'}}>\r\n                    {['Lu', 'Ma', 'Me', 'Je', 'Ve'].map(jour => (\r\n                        <div key={jour} style={{\r\n                            textAlign: 'center', \r\n                            fontWeight: 'bold', \r\n                            fontSize: '10px',\r\n                            color: '#6b7280',\r\n                            padding: '2px'\r\n                        }}>\r\n                            {jour}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* Grille du calendrier compacte */}\r\n                <div style={{\r\n                    display: 'grid', \r\n                    gridTemplateColumns: 'repeat(5, 1fr)', \r\n                    gap: '4px', \r\n                    marginBottom: '12px',\r\n                    flex: 1\r\n                }}>\r\n                    {casesCalendrier.map((date, index) => {\r\n                        if (!date) {\r\n                            return <div key={`empty-${index}`} style={{width: '48px', height: '48px'}}></div>;\r\n                        }\r\n\r\n                        const dateStr = date.toISOString().split('T')[0];\r\n                        const statut = planningModifie[dateStr] || 'libre';\r\n                        const details = getStatutDetails(statut);\r\n                        const estAujourdhui = date.toDateString() === new Date().toDateString();\r\n                        const estPasse = dateStr < new Date().toISOString().split('T')[0];\r\n                        const estModifie = planningModifie[dateStr] !== planningOriginal[dateStr];\r\n                        const numeroJour = date.getDate();\r\n                        \r\n                        return (\r\n                            <div\r\n                                key={date.getTime()}\r\n                                style={{\r\n                                    width: '48px',\r\n                                    height: '48px',\r\n                                    borderRadius: '10px',\r\n                                    display: 'flex',\r\n                                    flexDirection: 'column',\r\n                                    alignItems: 'center',\r\n                                    justifyContent: 'center',\r\n                                    fontWeight: 'bold',\r\n                                    fontSize: '12px',\r\n                                    backgroundColor: details.backgroundColor,\r\n                                    color: details.color,\r\n                                    border: estAujourdhui ? '3px solid #fbbf24' : estModifie ? '2px solid #10b981' : '1px solid rgba(0,0,0,0.1)',\r\n                                    cursor: estPasse ? 'not-allowed' : 'pointer',\r\n                                    opacity: estPasse ? 0.5 : 1,\r\n                                    position: 'relative'\r\n                                }}\r\n                                onClick={() => {\r\n                                    if (modeSelection === 'annuler_case') {\r\n                                        annulerModificationCase(date);\r\n                                    } else {\r\n                                        gererClicCase(date);\r\n                                    }\r\n                                }}\r\n                            >\r\n                                <span style={{fontSize: '14px'}}>{numeroJour}</span>\r\n                                {details.label && (\r\n                                    <span style={{fontSize: '7px', marginTop: '1px'}}>{details.label}</span>\r\n                                )}\r\n                                {/* Indicateur de modification */}\r\n                                {estModifie && (\r\n                                    <div style={{\r\n                                        position: 'absolute',\r\n                                        top: '1px',\r\n                                        right: '1px',\r\n                                        width: '6px',\r\n                                        height: '6px',\r\n                                        backgroundColor: '#10b981',\r\n                                        borderRadius: '50%'\r\n                                    }}></div>\r\n                                )}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n\r\n                {/* Couleurs compactes */}\r\n                <div style={{marginBottom: '12px'}}>\r\n                    <div style={{display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '4px', fontSize: '9px'}}>\r\n                        <div style={{display: 'flex', alignItems: 'center'}}>\r\n                            <div style={{width: '8px', height: '8px', backgroundColor: '#ef4444', borderRadius: '2px', marginRight: '4px'}}></div>\r\n                            <span style={{color: '#374151'}}>Absent</span>\r\n                        </div>\r\n                        <div style={{display: 'flex', alignItems: 'center'}}>\r\n                            <div style={{width: '8px', height: '8px', backgroundColor: '#f59e0b', borderRadius: '2px', marginRight: '4px'}}></div>\r\n                            <span style={{color: '#374151'}}>Dispo except.</span>\r\n                        </div>\r\n                        <div style={{display: 'flex', alignItems: 'center'}}>\r\n                            <div style={{width: '8px', height: '8px', backgroundColor: '#22c55e', borderRadius: '2px', marginRight: '4px'}}></div>\r\n                            <span style={{color: '#374151'}}>Planning habituel</span>\r\n                        </div>\r\n                        <div style={{display: 'flex', alignItems: 'center'}}>\r\n                            <div style={{width: '8px', height: '8px', backgroundColor: '#d1d5db', borderRadius: '2px', marginRight: '4px'}}></div>\r\n                            <span style={{color: '#374151'}}>Libre</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Actions compactes */}\r\n                <div style={{display: 'flex', flexDirection: 'column', gap: '8px'}}>\r\n                    {/* ✅ MODIFIÉ: Bouton sauvegarder utilise maintenant handleValider */}\r\n                    {aDesModifications() && (\r\n                        <button\r\n                            onClick={handleValider}\r\n                            disabled={envoiEnCours}\r\n                            style={{\r\n                                width: '100%',\r\n                                background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n                                color: 'white',\r\n                                padding: '12px',\r\n                                borderRadius: '10px',\r\n                                fontWeight: 'bold',\r\n                                fontSize: '12px',\r\n                                border: 'none',\r\n                                cursor: envoiEnCours ? 'not-allowed' : 'pointer',\r\n                                opacity: envoiEnCours ? 0.6 : 1\r\n                            }}\r\n                        >\r\n                            {envoiEnCours ? '⏳ Envoi en cours...' : '📤 Envoyer la demande'}\r\n                        </button>\r\n                    )}\r\n                    \r\n                    <button\r\n                        onClick={() => router.push('/formateur')}\r\n                        style={{\r\n                            width: '100%',\r\n                            padding: '12px',\r\n                            background: '#6b7280',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '16px',\r\n                            fontWeight: '600',\r\n                            cursor: 'pointer',\r\n                            marginTop: '16px',\r\n                            transition: 'transform 0.2s'\r\n                        }}\r\n                    >\r\n                        Retour à l'accueil\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}",
          "taille": 48194,
          "lignes": 1083,
          "dateModif": "2025-08-28T19:00:40.348Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { supabase } from '../../lib/supabaseClient';\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext';\n\nexport default function AbsenceFormateur() {\n    const { user, isLoading: authLoading, isAuthenticated } = useFormateurAuth()\n    const [currentDate, setCurrentDate] = useState(new Date());\n    const [modeSelection, setModeSelection] = useState('absent');\n    const [planningModifie, setPlanningModifie] = useState({});\n    const [planningOriginal, setPlanningOriginal] = useState({});\n    const [historiqueModi, setHistoriqueModi] = useState([]);\n    const [message, setMessage] = useState('');\n    const [lieux, setLieux] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [envoiEnCours, setEnvoiEnCours] = useState(false);\n    // ✅ NOUVEAU: États pour modal message facultatif\n    const [showMessageModal, setShowMessageModal] = useState(false);\n    const [messageFacultatif, setMessageFacultatif] = useState('');\n    const router = useRouter();\n\n    // Protection authentification\n    useEffect(() => {\n        if (!authLoading && !isAuthenticated) {\n            router.push('/formateur/login')\n        }\n    }, [authLoading, isAuthenticated, router])\n\n    useEffect(() => {\n        if (user) {\n            loadPlanningData();\n        }\n    }, [currentDate, user]);\n\n\n    const loadPlanningData = async () => {\n        if (!user) return;\n        \n        try {\n            setIsLoading(true);\n            \n            // Charger les lieux pour affichage\n            const { data: lieuxData, error: lieuxError } = await supabase\n                .from('lieux')\n                .select('id, nom, couleur, initiale')\n                .eq('archive', false);\n\n            if (lieuxError) throw lieuxError;\n            setLieux(lieuxData || []);\n\n            const annee = currentDate.getFullYear();\n            const mois = currentDate.getMonth();\n            const premierJour = new Date(annee, mois, 1);\n            const dernierJour = new Date(annee, mois + 1, 0);\n            \n            // Construire le planning original basé sur le planning type VALIDÉ\n            const planning = {};\n            \n            // Ajouter seulement les jours ouvrés (Lun-Ven) comme \"libre\" par défaut\n            for (let jour = 1; jour <= new Date(annee, mois + 1, 0).getDate(); jour++) {\n                const date = new Date(annee, mois, jour);\n                const jourSemaine = date.getDay();\n                \n                // Seulement les jours de travail (lundi à vendredi)\n                if (jourSemaine >= 1 && jourSemaine <= 5) {\n                    const anneeStr = date.getFullYear();\n                    const moisStr = String(date.getMonth() + 1).padStart(2, '0');\n                    const jourStr = String(date.getDate()).padStart(2, '0');\n                    const dateStr = `${anneeStr}-${moisStr}-${jourStr}`;\n                    planning[dateStr] = 'libre';\n                }\n            }\n\n            // Récupérer le planning type VALIDÉ du formateur\n            const { data: planningTypeData, error: planningTypeError } = await supabase\n                .from('planning_type_formateurs')\n                .select('jour, creneau, statut, lieu_id, valide')\n                .eq('formateur_id', user.id)\n                .eq('valide', true);\n\n            // Appliquer le planning type VALIDÉ (BASE VERTE)\n            if (planningTypeData && !planningTypeError) {\n                // Créer un mapping des jours\n                const joursMapping = {\n                    0: 'Dimanche', 1: 'Lundi', 2: 'Mardi', 3: 'Mercredi', \n                    4: 'Jeudi', 5: 'Vendredi', 6: 'Samedi'\n                };\n\n                // Pour chaque jour du mois\n                for (let jour = 1; jour <= new Date(annee, mois + 1, 0).getDate(); jour++) {\n                    const date = new Date(annee, mois, jour);\n                    const jourSemaine = date.getDay();\n                    const nomJour = joursMapping[jourSemaine];\n                    \n                    // Si c'est un jour ouvré\n                    if (jourSemaine >= 1 && jourSemaine <= 5) {\n                        const anneeStr = date.getFullYear();\n                        const moisStr = String(date.getMonth() + 1).padStart(2, '0');\n                        const jourStr = String(date.getDate()).padStart(2, '0');\n                        const dateStr = `${anneeStr}-${moisStr}-${jourStr}`;\n                        \n                        // Vérifier si le formateur a une disponibilité validée ce jour-là   \n                        const disponibiliteJour = planningTypeData.find(pt => \n                            pt.jour === nomJour && pt.statut === 'disponible'\n                        );\n                        \n                        const disponibiliteExcept = planningTypeData.find(pt => \n                            pt.jour === nomJour && pt.statut === 'dispo_except'\n                        );\n                        \n                        if (disponibiliteJour) {\n                            planning[dateStr] = 'planning_type'; // JOUR VALIDÉ = VERT\n                        } else if (disponibiliteExcept) {\n                            planning[dateStr] = 'dispo_except'; // DISPO EXCEPTIONNELLE = ORANGE\n                        }\n                    }\n                }\n                console.log(`✅ Planning type validé appliqué: ${planningTypeData.length} créneaux`);\n            }\n\n            // 🔧 CORRECTION CRITIQUE : Charger ET afficher TOUTES les absences\n            const { data: absencesData, error: absencesError } = await supabase\n                .from('absences_formateurs')\n                .select('date_debut, date_fin, type, statut, id')\n                .eq('formateur_id', user.id);\n\n            // 🔧 NOUVEAU : Appliquer TOUTES les absences (en_attente + validées)\n            if (absencesData && !absencesError) {\n                console.log(`🔧 CHARGEMENT: ${absencesData.length} absences trouvées:`, absencesData);\n                \n                absencesData.forEach(absence => {\n                    const debut = new Date(absence.date_debut);\n                    const fin = new Date(absence.date_fin);\n                    \n                    console.log(`🔧 Traitement absence: ${absence.date_debut} - ${absence.date_fin}, type: ${absence.type}, statut: ${absence.statut}`);\n                    \n                    for (let d = new Date(debut); d <= fin; d.setDate(d.getDate() + 1)) {\n                        const anneeStr = d.getFullYear();\n                        const moisStr = String(d.getMonth() + 1).padStart(2, '0');\n                        const jourStr = String(d.getDate()).padStart(2, '0');\n                        const dateStr = `${anneeStr}-${moisStr}-${jourStr}`;\n                        \n                        if (planning.hasOwnProperty(dateStr)) {\n                            // 🔧 CORRECTION : Afficher TOUTES les absences (en_attente ET validées)\n                            if (absence.type === 'personnel' || absence.type === 'absence') {\n                                planning[dateStr] = 'absent';\n                                console.log(`🔴 ${dateStr} marqué ABSENT (${absence.type}, ${absence.statut})`);\n                            } else if (absence.type === 'formation' || absence.type === 'dispo_except') {\n                                planning[dateStr] = 'dispo';\n                                console.log(`🟡 ${dateStr} marqué DISPO EXCEPT (${absence.type}, ${absence.statut})`);\n                            }\n                        }\n                    }\n                });\n                console.log(`✅ Modifications affichées: ${absencesData.length} (en_attente + validées)`);\n            }\n\n            // Debug : Afficher le résultat final\n            const joursVerts = Object.keys(planning).filter(d => planning[d] === 'planning_type').length;\n            const joursRouges = Object.keys(planning).filter(d => planning[d] === 'absent').length;\n            const joursOranges = Object.keys(planning).filter(d => planning[d] === 'dispo').length;\n            \n            console.log(`📊 RÉSULTAT FINAL:`);\n            console.log(`  🟢 Jours verts (planning type): ${joursVerts}`);\n            console.log(`  🔴 Jours rouges (absences): ${joursRouges}`);\n            console.log(`  🟡 Jours oranges (dispo except): ${joursOranges}`);\n\n            setPlanningOriginal(planning);\n            setPlanningModifie({...planning});\n\n        } catch (error) {\n            console.error('⚠ Erreur:', error.message);\n            setMessage(`⚠ Erreur: ${error.message}`);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    // Navigation mensuelle\n    const changerMois = (direction) => {\n        const nouvelleDate = new Date(currentDate);\n        nouvelleDate.setMonth(currentDate.getMonth() + direction);\n        setCurrentDate(nouvelleDate);\n        setMessage('');\n    };\n\n    // Fonction pour obtenir les détails d'un statut\n    const getStatutDetails = (statut) => {\n        switch (statut) {\n            case 'absent':\n                return { \n                    backgroundColor: '#ef4444', \n                    color: 'white', \n                    label: 'ABS',\n                    nom: 'Absent'\n                };\n            case 'dispo':\n                return { \n                    backgroundColor: '#f59e0b', \n                    color: 'white', \n                    label: 'DISPO',\n                    nom: 'Dispo exceptionnelle'\n                };\n            case 'planning_type':\n                return { \n                    backgroundColor: '#22c55e', \n                    color: 'white', \n                    label: 'DISPO',\n                    nom: 'Planning habituel'\n                };\n            case 'dispo_except':\n                return { \n                    backgroundColor: '#f59e0b', \n                    color: 'white', \n                    label: 'EXCEPT',\n                    nom: 'Dispo exceptionnelle'\n                };\n            case 'libre':\n            default:\n                return { \n                    backgroundColor: '#d1d5db', \n                    color: '#374151', \n                    label: '',\n                    nom: 'Libre'\n                };\n        }\n    };\n\n    // Fonction pour gérer le clic sur une case\n    const gererClicCase = (date) => {\n        const annee = date.getFullYear();\n        const mois = String(date.getMonth() + 1).padStart(2, '0');\n        const jourStr = String(date.getDate()).padStart(2, '0');\n        const dateStr = `${annee}-${mois}-${jourStr}`;\n        \n        const aujourdhui = new Date();\n        const aujourdhuiStr = `${aujourdhui.getFullYear()}-${String(aujourdhui.getMonth() + 1).padStart(2, '0')}-${String(aujourdhui.getDate()).padStart(2, '0')}`;\n        \n        if (dateStr < aujourdhuiStr) {\n            setMessage('Impossible de modifier le passé');\n            return;\n        }\n\n        // Ajouter à l'historique avant de modifier\n        setHistoriqueModi(prev => [...prev, { date: dateStr, action: 'modifier', mode: modeSelection }]);\n\n        setPlanningModifie(prev => ({\n            ...prev,\n            [dateStr]: modeSelection\n        }));\n\n        const details = getStatutDetails(modeSelection);\n        setMessage(`${date.getDate()} ${currentDate.toLocaleDateString('fr-FR', {month: 'long'})} → ${details.nom}`);\n    };\n\n    // Fonction ANNULER : annuler la dernière action\n    const annulerDerniereAction = () => {\n        if (historiqueModi.length === 0) {\n            setMessage('Aucune action à annuler');\n            return;\n        }\n\n        const derniereAction = historiqueModi[historiqueModi.length - 1];\n        \n        // Supprimer la dernière action de l'historique\n        setHistoriqueModi(prev => prev.slice(0, -1));\n        \n        if (derniereAction.action === 'modifier') {\n            // Annuler une modification = remettre l'état original\n            setPlanningModifie(prev => ({\n                ...prev,\n                [derniereAction.date]: planningOriginal[derniereAction.date]\n            }));\n            setMessage('Dernière action annulée');\n        } else if (derniereAction.action === 'annuler_case') {\n            // Annuler une annulation = remettre la case\n            setPlanningModifie(prev => ({\n                ...prev,\n                [derniereAction.date]: derniereAction.mode || 'planning_type'\n            }));\n            setMessage('Annulation annulée');\n        }\n    };\n\n    // Fonction ANNULER UNE CASE : supprimer une case spécifique (mode annuler)\n    const annulerModificationCase = (date) => {\n        const annee = date.getFullYear();\n        const mois = String(date.getMonth() + 1).padStart(2, '0');\n        const jourStr = String(date.getDate()).padStart(2, '0');\n        const dateStr = `${annee}-${mois}-${jourStr}`;\n        \n        // Ajouter à l'historique avant d'annuler\n        setHistoriqueModi(prev => [...prev, { \n            date: dateStr, \n            action: 'annuler_case',\n            mode: planningModifie[dateStr]\n        }]);\n        \n        // Remettre à l'état original\n        setPlanningModifie(prev => ({\n            ...prev,\n            [dateStr]: planningOriginal[dateStr]\n        }));\n        \n        setMessage(`Modification annulée pour le ${date.getDate()} ${currentDate.toLocaleDateString('fr-FR', {month: 'long'})}`);\n    };\n\n    // Fonction EFFACER TOUT : effacer toutes les modifications\n    const effacerTout = () => {\n        setPlanningModifie({...planningOriginal}); // Remettre à l'état original\n        setHistoriqueModi([]); // Vider aussi l'historique\n        setMessage('Toutes les modifications ont été effacées');\n    };\n\n    // ✅ NOUVEAU: Fonction pour générer la liste des modifications pour le message\n    const genererListeModifications = () => {\n        const modificationsDetectees = [];\n        \n        Object.keys(planningModifie).forEach(dateStr => {\n            const statutOriginal = planningOriginal[dateStr];\n            const statutModifie = planningModifie[dateStr];\n            \n            if (statutOriginal !== statutModifie) {\n                const date = new Date(dateStr);\n                const dateFormatee = date.toLocaleDateString('fr-FR', { \n                    weekday: 'long', \n                    day: 'numeric', \n                    month: 'long' \n                });\n                \n                let typeModification = '';\n                if (statutModifie === 'absent') {\n                    typeModification = 'Absence';\n                } else if (statutModifie === 'dispo') {\n                    typeModification = 'Disponibilité exceptionnelle';\n                }\n                \n                if (typeModification) {\n                    modificationsDetectees.push(`${dateFormatee} : ${typeModification}`);\n                }\n            }\n        });\n        \n        return modificationsDetectees;\n    };\n\n    // ✅ CORRIGÉ: Fonction d'envoi de message automatique vers admin\n    const envoyerMessageAdmin = async (messageFacultatif = '') => {\n        try {\n            console.log('🚀 DÉBUT envoyerMessageAdmin')\n            console.log('user:', user)\n            \n            if (!user) {\n                console.error('❌ Données utilisateur manquantes')\n                return\n            }\n\n            const formateurNom = `${user.prenom} ${user.nom}`\n            const listeModifications = genererListeModifications()\n            \n            console.log('📝 Liste modifications:', listeModifications)\n            \n            let contenu = `${formateurNom} souhaite effectuer des modifications ponctuelles sur son planning :\\n\\n`\n            \n            // Ajouter la liste des modifications\n            if (listeModifications.length > 0) {\n                contenu += `MODIFICATIONS DEMANDÉES :\\n`\n                listeModifications.forEach((modif, index) => {\n                    contenu += `${index + 1}. ${modif}\\n`\n                })\n                contenu += '\\n'\n            }\n            \n            // Ajouter le message facultatif s'il existe\n            if (messageFacultatif.trim()) {\n                contenu += `MESSAGE DU FORMATEUR :\\n\"${messageFacultatif.trim()}\"`\n            }\n            \n            console.log('📨 Contenu du message:', contenu)\n            \n            const messageData = {\n                expediteur_id: user.id,\n                destinataire_id: null, // null = admin\n                expediteur: formateurNom,\n                destinataire: 'Coordination ACLEF',\n                objet: 'Validation de modification ponctuelle',\n                contenu: contenu,\n                type: 'planning',\n                lu: false,\n                archive: false,\n                statut_validation: 'a_traiter',\n                date: new Date().toISOString().split('T')[0],\n                heure: new Date().toTimeString().slice(0, 5)\n            }\n            \n            console.log('📤 Données à insérer:', messageData)\n            \n            const { data, error } = await supabase\n                .from('messages')\n                .insert(messageData)\n                .select()\n\n            if (error) {\n                console.error('❌ Erreur Supabase:', error)\n                alert('Erreur envoi message: ' + error.message)\n            } else {\n                console.log('✅ Message inséré avec succès:', data)\n                alert('✅ Message envoyé à l\\'administration !')\n            }\n\n        } catch (error) {\n            console.error('❌ Erreur générale:', error)\n            alert('Erreur: ' + error.message)\n        }\n    }\n\n    // ✅ NOUVEAU: Gestion de la validation avec modal message facultatif\n    const handleValider = async () => {\n        const modificationsDetectees = Object.keys(planningModifie).filter(date => \n            planningModifie[date] !== planningOriginal[date]\n        );\n        \n        if (modificationsDetectees.length === 0) {\n            setMessage('⚠️ Aucune modification à envoyer');\n            return;\n        }\n\n        // ✅ NOUVEAU: Afficher modal pour message facultatif\n        setShowMessageModal(true);\n    };\n\n    // ✅ NOUVEAU: Fonction de validation finale avec envoi message\n    const handleValidationFinale = async () => {\n        setShowMessageModal(false);\n        \n        // Envoyer message vers admin AVANT la sauvegarde\n        await envoyerMessageAdmin(messageFacultatif);\n        \n        // Puis sauvegarder le planning\n        await envoyerDemande();\n        \n        // Reset du message facultatif\n        setMessageFacultatif('');\n    };\n\n    // Fonction ENVOYER LA DEMANDE : sauvegarder en BDD (MODIFIÉE pour retirer le modal)\n    const envoyerDemande = async () => {\n        try {\n            setEnvoiEnCours(true);\n            setMessage('⏳ Envoi de la demande en cours...');\n\n            // Détecter les modifications\n            const modificationsDetectees = [];\n            \n            Object.keys(planningModifie).forEach(dateStr => {\n                const statutOriginal = planningOriginal[dateStr];\n                const statutModifie = planningModifie[dateStr];\n                \n                // Si la case a été modifiée\n                if (statutOriginal !== statutModifie) {\n                    let type = null;\n                    \n                    if (statutModifie === 'absent') {\n                        type = 'personnel';\n                    } else if (statutModifie === 'dispo') {\n                        type = 'formation';\n                    }\n                    \n                    // Ajouter seulement si c'est un type reconnu\n                    if (type) {\n                        modificationsDetectees.push({\n                            date: dateStr,\n                            type: type,\n                            statutOriginal: statutOriginal,\n                            statutModifie: statutModifie\n                        });\n                    }\n                }\n            });\n\n            if (modificationsDetectees.length === 0) {\n                setMessage('⚠️ Aucune modification à envoyer');\n                setEnvoiEnCours(false);\n                return;\n            }\n\n            console.log(`📤 ${modificationsDetectees.length} modifications détectées:`, modificationsDetectees);\n\n            // Créer un enregistrement par jour modifié\n            const enregistrementsACreer = modificationsDetectees.map(modif => ({\n                formateur_id: user.id,\n                date_debut: modif.date,\n                date_fin: modif.date, // Même date pour jour par jour\n                type: modif.type,\n                statut: 'en_attente',\n                motif: null, // Optionnel, peut être ajouté plus tard\n                created_at: new Date().toISOString()\n            }));\n\n            // Insérer en BDD\n            const { data: resultats, error: erreurInsert } = await supabase\n                .from('absences_formateurs')\n                .insert(enregistrementsACreer)\n                .select();\n\n            if (erreurInsert) {\n                throw erreurInsert;\n            }\n\n            console.log(`✅ ${resultats.length} enregistrements créés en BDD`);\n\n            // Succès !\n            setMessage(`✅ Demande envoyée ! ${modificationsDetectees.length} modification(s) en attente de validation.`);\n            \n            // Remettre le planning à l'état d'origine après envoi réussi\n            setPlanningModifie({...planningOriginal});\n            setHistoriqueModi([]);\n\n            // Rediriger vers l'accueil après 2 secondes\n            setTimeout(() => {\n                router.push('/formateur');\n            }, 2000);\n\n        } catch (error) {\n            console.error('⚠️ Erreur lors de l\\'envoi:', error);\n            setMessage(`⚠️ Erreur lors de l'envoi: ${error.message}`);\n        } finally {\n            setEnvoiEnCours(false);\n        }\n    };\n\n    // Génération du calendrier 5 jours ouvrés\n    const genererCalendrierComplet = () => {\n        const annee = currentDate.getFullYear();\n        const mois = currentDate.getMonth();\n        \n        const nbJoursMois = new Date(annee, mois + 1, 0).getDate();\n        const joursOuvres = [];\n        \n        for (let jour = 1; jour <= nbJoursMois; jour++) {\n            const date = new Date(annee, mois, jour, 12, 0, 0, 0);\n            const jourSemaine = date.getDay();\n            \n            if (jourSemaine >= 1 && jourSemaine <= 5) {\n                joursOuvres.push(date);\n            }\n        }\n        \n        const grille = [];\n        let indexJour = 0;\n        \n        const nbSemaines = Math.ceil(joursOuvres.length / 5);\n        \n        for (let semaine = 0; semaine < nbSemaines; semaine++) {\n            for (let jourSemaine = 0; jourSemaine < 5; jourSemaine++) {\n                if (indexJour < joursOuvres.length) {\n                    const date = joursOuvres[indexJour];\n                    const jourReel = date.getDay();\n                    const jourAttendu = jourSemaine + 1;\n                    \n                    if (jourReel === jourAttendu) {\n                        grille.push(date);\n                        indexJour++;\n                    } else {\n                        grille.push(null);\n                    }\n                } else {\n                    grille.push(null);\n                }\n            }\n        }\n        \n        return grille;\n    };\n\n    // Vérifier s'il y a des modifications\n    const aDesModifications = () => {\n        return JSON.stringify(planningOriginal) !== JSON.stringify(planningModifie);\n    };\n\n    if (isLoading || authLoading) {\n        return (\n            <div style={{\n                height: '100vh',\n                backgroundColor: '#ffffff',\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                alignItems: 'center',\n                padding: '8px'\n            }}>\n                <div style={{fontSize: '48px', marginBottom: '16px'}}>⏳</div>\n                <p style={{fontSize: '18px', color: '#667eea'}}>Chargement de votre planning...</p>\n            </div>\n        );\n    }\n\n    if (!user) {\n        return null;\n    }\n\n    const nomMois = currentDate.toLocaleDateString('fr-FR', { month: 'long', year: 'numeric' });\n    const casesCalendrier = genererCalendrierComplet();\n\n    // Styles CSS optimisés pour pleine page\n    const containerStyle = {\n        height: '100vh',\n        backgroundColor: '#ffffff',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: '8px',\n        overflow: 'hidden'\n    };\n\n    const calendrierStyle = {\n        width: '100%',\n        maxWidth: '380px',\n        backgroundColor: 'white',\n        borderRadius: '16px',\n        padding: '16px',\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n        maxHeight: '95vh'\n    };\n\n    return (\n        <div style={containerStyle}>\n            {/* ✅ NOUVEAU: Modal pour message facultatif */}\n            {showMessageModal && (\n                <div style={{\n                    position: 'fixed',\n                    top: 0,\n                    left: 0,\n                    right: 0,\n                    bottom: 0,\n                    backgroundColor: 'rgba(0,0,0,0.5)',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    zIndex: 1000\n                }}>\n                    <div style={{\n                        backgroundColor: 'white',\n                        borderRadius: '15px',\n                        padding: '25px',\n                        maxWidth: '380px',\n                        width: '90%'\n                    }}>\n                        <h3 style={{ \n                            margin: '0 0 15px 0', \n                            fontSize: '18px', \n                            color: '#374151',\n                            textAlign: 'center'\n                        }}>\n                            💬 Message facultatif\n                        </h3>\n                        <p style={{ \n                            fontSize: '14px', \n                            color: '#6b7280', \n                            margin: '0 0 15px 0',\n                            textAlign: 'center',\n                            lineHeight: '1.4'\n                        }}>\n                            Souhaitez-vous ajouter un message pour expliquer vos modifications ?\n                            <br />\n                            <em>(ex: \"Je serai en formation\", \"Congés prévus\")</em>\n                        </p>\n                        <textarea\n                            value={messageFacultatif}\n                            onChange={(e) => setMessageFacultatif(e.target.value)}\n                            placeholder=\"Votre message (optionnel)...\"\n                            rows={4}\n                            style={{\n                                width: '100%',\n                                padding: '12px',\n                                border: '2px solid #e5e7eb',\n                                borderRadius: '8px',\n                                fontSize: '14px',\n                                resize: 'vertical',\n                                boxSizing: 'border-box',\n                                marginBottom: '20px'\n                            }}\n                        />\n                        <div style={{ display: 'flex', gap: '10px' }}>\n                            <button\n                                onClick={() => setShowMessageModal(false)}\n                                style={{\n                                    flex: 1,\n                                    backgroundColor: '#6b7280',\n                                    color: 'white',\n                                    border: 'none',\n                                    borderRadius: '8px',\n                                    padding: '12px',\n                                    fontSize: '14px',\n                                    fontWeight: 'bold',\n                                    cursor: 'pointer'\n                                }}\n                            >\n                                Annuler\n                            </button>\n                            <button\n                                onClick={handleValidationFinale}\n                                disabled={envoiEnCours}\n                                style={{\n                                    flex: 1,\n                                    backgroundColor: envoiEnCours ? '#9ca3af' : '#10b981',\n                                    color: 'white',\n                                    border: 'none',\n                                    borderRadius: '8px',\n                                    padding: '12px',\n                                    fontSize: '14px',\n                                    fontWeight: 'bold',\n                                    cursor: envoiEnCours ? 'not-allowed' : 'pointer'\n                                }}\n                            >\n                                {envoiEnCours ? 'Envoi...' : 'Valider'}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            )}\n\n            <div style={calendrierStyle}>\n                \n                {/* En-tête compact */}\n                <div style={{marginBottom: '12px', textAlign: 'center'}}>\n                    <h1 style={{fontSize: '18px', fontWeight: 'bold', margin: 0, color: '#1e40af'}}>\n                        Modifier mes disponibilités\n                    </h1>\n                </div>\n\n                {/* Modes de sélection compacts */}\n                <div style={{marginBottom: '12px'}}>\n                    <h3 style={{fontSize: '12px', fontWeight: 'bold', marginBottom: '8px', textAlign: 'center', color: '#374151'}}>\n                        Choisir un mode puis cliquer sur les dates\n                    </h3>\n                    <div style={{display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '6px', marginBottom: '6px'}}>\n                        <button\n                            onClick={() => {\n                                setModeSelection('absent');\n                                setMessage('Mode ABSENT activé');\n                            }}\n                            style={{\n                                padding: '8px',\n                                borderRadius: '8px',\n                                border: modeSelection === 'absent' ? '2px solid #fbbf24' : 'none',\n                                backgroundColor: '#ef4444',\n                                color: 'white',\n                                fontWeight: 'bold',\n                                fontSize: '9px',\n                                cursor: 'pointer',\n                                textAlign: 'center'\n                            }}\n                        >\n                            ABSENT\n                        </button>\n                        \n                        <button\n                            onClick={() => {\n                                setModeSelection('dispo');\n                                setMessage('Mode DISPO EXCEPT. activé');\n                            }}\n                            style={{\n                                padding: '8px',\n                                borderRadius: '8px',\n                                border: modeSelection === 'dispo' ? '2px solid #fbbf24' : 'none',\n                                backgroundColor: '#f59e0b',\n                                color: 'white',\n                                fontWeight: 'bold',\n                                fontSize: '9px',\n                                cursor: 'pointer',\n                                textAlign: 'center'\n                            }}\n                        >\n                            DISPO EXCEPT.\n                        </button>\n                    </div>\n                    <div style={{display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '6px'}}>\n                        <button\n                            onClick={() => {\n                                setModeSelection('annuler_case');\n                                setMessage('Mode ANNULER CASE activé');\n                            }}\n                            style={{\n                                padding: '8px',\n                                borderRadius: '8px',\n                                border: modeSelection === 'annuler_case' ? '2px solid #fbbf24' : 'none',\n                                backgroundColor: '#d1d5db',\n                                color: '#374151',\n                                fontWeight: 'bold',\n                                fontSize: '8px',\n                                cursor: 'pointer',\n                                textAlign: 'center'\n                            }}\n                        >\n                            ANNULER CASE\n                        </button>\n                        \n                        <button\n                            onClick={annulerDerniereAction}\n                            style={{\n                                padding: '8px',\n                                borderRadius: '8px',\n                                backgroundColor: '#d1d5db',\n                                color: '#374151',\n                                fontWeight: 'bold',\n                                fontSize: '8px',\n                                cursor: 'pointer',\n                                textAlign: 'center',\n                                border: 'none'\n                            }}\n                        >\n                            ANNULER\n                        </button>\n                        \n                        <button\n                            onClick={effacerTout}\n                            style={{\n                                padding: '8px',\n                                borderRadius: '8px',\n                                backgroundColor: '#6b7280',\n                                color: 'white',\n                                fontWeight: 'bold',\n                                fontSize: '8px',\n                                cursor: 'pointer',\n                                textAlign: 'center',\n                                border: 'none'\n                            }}\n                        >\n                            EFFACER TOUT\n                        </button>\n                    </div>\n                </div>\n\n                {/* Messages compacts */}\n                {message && (\n                    <div style={{\n                        padding: '8px',\n                        borderRadius: '8px',\n                        marginBottom: '8px',\n                        textAlign: 'center',\n                        backgroundColor: message.includes('Impossible') || message.includes('⚠️') ? '#fee2e2' : \n                                         message.includes('⏳') ? '#dbeafe' :\n                                         message.includes('✅') ? '#d1fae5' : '#dbeafe',\n                        color: message.includes('Impossible') || message.includes('⚠️') ? '#991b1b' : \n                               message.includes('⏳') ? '#1e40af' :\n                               message.includes('✅') ? '#065f46' : '#1e40af',\n                        fontWeight: 'bold',\n                        fontSize: '10px'\n                    }}>\n                        {message}\n                    </div>\n                )}\n\n                {/* Compteur modifications compact */}\n                {aDesModifications() && (\n                    <div style={{\n                        backgroundColor: '#fef3c7',\n                        padding: '6px',\n                        borderRadius: '8px',\n                        marginBottom: '8px',\n                        textAlign: 'center',\n                        color: '#92400e',\n                        fontWeight: 'bold',\n                        fontSize: '10px'\n                    }}>\n                        {Object.keys(planningModifie).filter(date => \n                            planningModifie[date] !== planningOriginal[date]\n                        ).length} modification(s)\n                    </div>\n                )}\n\n                {/* Navigation compacte */}\n                <div style={{display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '12px'}}>\n                    <button \n                        style={{\n                            width: '40px', \n                            height: '40px', \n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', \n                            color: 'white',\n                            border: 'none', \n                            borderRadius: '10px', \n                            fontSize: '18px', \n                            fontWeight: 'bold',\n                            cursor: 'pointer', \n                            display: 'flex', \n                            alignItems: 'center', \n                            justifyContent: 'center'\n                        }}\n                        onClick={() => changerMois(-1)}\n                    >\n                        ←\n                    </button>\n                    \n                    <h2 style={{\n                        fontSize: '16px', \n                        fontWeight: 'bold', \n                        textTransform: 'capitalize', \n                        margin: 0,\n                        color: '#1e40af',\n                        textAlign: 'center'\n                    }}>\n                        {nomMois.split(' ')[0]} {currentDate.getFullYear()}\n                    </h2>\n                    \n                    <button \n                        style={{\n                            width: '40px', \n                            height: '40px', \n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', \n                            color: 'white',\n                            border: 'none', \n                            borderRadius: '10px', \n                            fontSize: '18px', \n                            fontWeight: 'bold',\n                            cursor: 'pointer', \n                            display: 'flex', \n                            alignItems: 'center', \n                            justifyContent: 'center'\n                        }}\n                        onClick={() => changerMois(1)}\n                    >\n                        →\n                    </button>\n                </div>\n\n                {/* En-têtes des jours compacts */}\n                <div style={{display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)', gap: '4px', marginBottom: '8px'}}>\n                    {['Lu', 'Ma', 'Me', 'Je', 'Ve'].map(jour => (\n                        <div key={jour} style={{\n                            textAlign: 'center', \n                            fontWeight: 'bold', \n                            fontSize: '10px',\n                            color: '#6b7280',\n                            padding: '2px'\n                        }}>\n                            {jour}\n                        </div>\n                    ))}\n                </div>\n\n                {/* Grille du calendrier compacte */}\n                <div style={{\n                    display: 'grid', \n                    gridTemplateColumns: 'repeat(5, 1fr)', \n                    gap: '4px', \n                    marginBottom: '12px',\n                    flex: 1\n                }}>\n                    {casesCalendrier.map((date, index) => {\n                        if (!date) {\n                            return <div key={`empty-${index}`} style={{width: '48px', height: '48px'}}></div>;\n                        }\n\n                        const dateStr = date.toISOString().split('T')[0];\n                        const statut = planningModifie[dateStr] || 'libre';\n                        const details = getStatutDetails(statut);\n                        const estAujourdhui = date.toDateString() === new Date().toDateString();\n                        const estPasse = dateStr < new Date().toISOString().split('T')[0];\n                        const estModifie = planningModifie[dateStr] !== planningOriginal[dateStr];\n                        const numeroJour = date.getDate();\n                        \n                        return (\n                            <div\n                                key={date.getTime()}\n                                style={{\n                                    width: '48px',\n                                    height: '48px',\n                                    borderRadius: '10px',\n                                    display: 'flex',\n                                    flexDirection: 'column',\n                                    alignItems: 'center',\n                                    justifyContent: 'center',\n                                    fontWeight: 'bold',\n                                    fontSize: '12px',\n                                    backgroundColor: details.backgroundColor,\n                                    color: details.color,\n                                    border: estAujourdhui ? '3px solid #fbbf24' : estModifie ? '2px solid #10b981' : '1px solid rgba(0,0,0,0.1)',\n                                    cursor: estPasse ? 'not-allowed' : 'pointer',\n                                    opacity: estPasse ? 0.5 : 1,\n                                    position: 'relative'\n                                }}\n                                onClick={() => {\n                                    if (modeSelection === 'annuler_case') {\n                                        annulerModificationCase(date);\n                                    } else {\n                                        gererClicCase(date);\n                                    }\n                                }}\n                            >\n                                <span style={{fontSize: '14px'}}>{numeroJour}</span>\n                                {details.label && (\n                                    <span style={{fontSize: '7px', marginTop: '1px'}}>{details.label}</span>\n                                )}\n                                {/* Indicateur de modification */}\n                                {estModifie && (\n                                    <div style={{\n                                        position: 'absolute',\n                                        top: '1px',\n                                        right: '1px',\n                                        width: '6px',\n                                        height: '6px',\n                                        backgroundColor: '#10b981',\n                                        borderRadius: '50%'\n                                    }}></div>\n                                )}\n                            </div>\n                        );\n                    })}\n                </div>\n\n                {/* Couleurs compactes */}\n                <div style={{marginBottom: '12px'}}>\n                    <div style={{display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '4px', fontSize: '9px'}}>\n                        <div style={{display: 'flex', alignItems: 'center'}}>\n                            <div style={{width: '8px', height: '8px', backgroundColor: '#ef4444', borderRadius: '2px', marginRight: '4px'}}></div>\n                            <span style={{color: '#374151'}}>Absent</span>\n                        </div>\n                        <div style={{display: 'flex', alignItems: 'center'}}>\n                            <div style={{width: '8px', height: '8px', backgroundColor: '#f59e0b', borderRadius: '2px', marginRight: '4px'}}></div>\n                            <span style={{color: '#374151'}}>Dispo except.</span>\n                        </div>\n                        <div style={{display: 'flex', alignItems: 'center'}}>\n                            <div style={{width: '8px', height: '8px', backgroundColor: '#22c55e', borderRadius: '2px', marginRight: '4px'}}></div>\n                            <span style={{color: '#374151'}}>Planning habituel</span>\n                        </div>\n                        <div style={{display: 'flex', alignItems: 'center'}}>\n                            <div style={{width: '8px', height: '8px', backgroundColor: '#d1d5db', borderRadius: '2px', marginRight: '4px'}}></div>\n                            <span style={{color: '#374151'}}>Libre</span>\n                        </div>\n                    </div>\n                </div>\n\n                {/* Actions compactes */}\n                <div style={{display: 'flex', flexDirection: 'column', gap: '8px'}}>\n                    {/* ✅ MODIFIÉ: Bouton sauvegarder utilise maintenant handleValider */}\n                    {aDesModifications() && (\n                        <button\n                            onClick={handleValider}\n                            disabled={envoiEnCours}\n                            style={{\n                                width: '100%',\n                                background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\n                                color: 'white',\n                                padding: '12px',\n                                borderRadius: '10px',\n                                fontWeight: 'bold',\n                                fontSize: '12px',\n                                border: 'none',\n                                cursor: envoiEnCours ? 'not-allowed' : 'pointer',\n                                opacity: envoiEnCours ? 0.6 : 1\n                            }}\n                        >\n                            {envoiEnCours ? '⏳ Envoi en cours...' : '📤 Envoyer la demande'}\n                        </button>\n                    )}\n                    \n                    <button\n                        onClick={() => router.push('/formateur')}\n                        style={{\n                            width: '100%',\n                            padding: '12px',\n                            background: '#6b7280',\n                            color: 'white',\n                            border: 'none',\n                            borderRadius: '8px',\n                            fontSize: '16px',\n                            fontWeight: '600',\n                            cursor: 'pointer',\n                            marginTop: '16px',\n                            transition: 'transform 0.2s'\n                        }}\n                    >\n                        Retour à l'accueil\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}",
          "taille": 47112,
          "lignes": 1083,
          "dateModif": "2025-08-22T12:29:51.985Z",
          "erreur": null
        },
        "identique": false,
        "diffTaille": 1082,
        "diffLignes": 0,
        "pourcentageSimilarite": 98,
        "message": "🟢 QUASI_IDENTIQUE - Similarité: 98% (±1082 bytes, ±0 lignes)"
      }
    },
    {
      "fichier": "pages/formateur/change-password.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext'\r\n\r\nexport default function ChangePassword() {\r\n    const [currentPassword, setCurrentPassword] = useState('')\r\n    const [newPassword, setNewPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const [successMessage, setSuccessMessage] = useState('')\r\n    const [showCurrentPassword, setShowCurrentPassword] = useState(false)\r\n    const [showNewPassword, setShowNewPassword] = useState(false)\r\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false)\r\n    const { user, changePassword } = useFormateurAuth()\r\n    const router = useRouter()\r\n\r\n    useEffect(() => {\r\n        // Si l'utilisateur n'est pas connecté, rediriger vers login\r\n        if (!user) {\r\n            router.push('/formateur/login')\r\n        }\r\n        // Permettre l'accès à la page même si mustChangePassword est false\r\n        // (changement volontaire de mot de passe)\r\n    }, [user, router])\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setIsLoading(true)\r\n        setErrorMessage('')\r\n        setSuccessMessage('')\r\n\r\n        // Validation\r\n        if (newPassword !== confirmPassword) {\r\n            setErrorMessage('Les mots de passe ne correspondent pas')\r\n            setIsLoading(false)\r\n            return\r\n        }\r\n\r\n        if (newPassword.length < 6) {\r\n            setErrorMessage('Le nouveau mot de passe doit contenir au moins 6 caractères')\r\n            setIsLoading(false)\r\n            return\r\n        }\r\n\r\n        try {\r\n            const result = await changePassword(currentPassword, newPassword)\r\n            \r\n            if (result.success) {\r\n                setSuccessMessage('Mot de passe changé avec succès')\r\n                setTimeout(() => {\r\n                    router.push('/formateur')\r\n                }, 1500)\r\n            } else {\r\n                setErrorMessage(result.error || 'Erreur lors du changement de mot de passe')\r\n            }\r\n        } catch (error) {\r\n            console.error('Erreur changement mot de passe:', error)\r\n            setErrorMessage('Erreur inattendue lors du changement')\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    if (!user) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            padding: '20px'\r\n        }}>\r\n            <div style={{\r\n                backgroundColor: 'white',\r\n                borderRadius: '12px',\r\n                padding: '40px',\r\n                width: '100%',\r\n                maxWidth: '450px',\r\n                boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n            }}>\r\n                <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n                    <h1 style={{\r\n                        fontSize: '28px',\r\n                        fontWeight: 'bold',\r\n                        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                        WebkitBackgroundClip: 'text',\r\n                        WebkitTextFillColor: 'transparent',\r\n                        marginBottom: '10px'\r\n                    }}>\r\n                        Changement de mot de passe\r\n                    </h1>\r\n                    <p style={{ color: '#6b7280', fontSize: '14px' }}>\r\n                        Première connexion - Veuillez choisir un nouveau mot de passe\r\n                    </p>\r\n                </div>\r\n\r\n                <div style={{\r\n                    backgroundColor: '#fef3c7',\r\n                    border: '1px solid #fbbf24',\r\n                    borderRadius: '8px',\r\n                    padding: '12px',\r\n                    marginBottom: '20px'\r\n                }}>\r\n                    <p style={{ color: '#92400e', fontSize: '13px', margin: 0 }}>\r\n                        <strong>Bienvenue {user.prenom} !</strong><br />\r\n                        Pour sécuriser votre compte, veuillez créer un nouveau mot de passe personnel.\r\n                    </p>\r\n                </div>\r\n\r\n                <form onSubmit={handleSubmit}>\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            marginBottom: '8px',\r\n                            color: '#374151',\r\n                            fontSize: '14px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Mot de passe actuel\r\n                        </label>\r\n                        <div style={{ position: 'relative' }}>\r\n                            <input\r\n                                type={showCurrentPassword ? \"text\" : \"password\"}\r\n                                value={currentPassword}\r\n                                onChange={(e) => setCurrentPassword(e.target.value)}\r\n                                required\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '12px',\r\n                                    paddingRight: '45px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '16px',\r\n                                    outline: 'none',\r\n                                    transition: 'border-color 0.2s'\r\n                                }}\r\n                                placeholder=\"Votre mot de passe actuel\"\r\n                            />\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => setShowCurrentPassword(!showCurrentPassword)}\r\n                                style={{\r\n                                    position: 'absolute',\r\n                                    right: '12px',\r\n                                    top: '50%',\r\n                                    transform: 'translateY(-50%)',\r\n                                    background: 'none',\r\n                                    border: 'none',\r\n                                    cursor: 'pointer',\r\n                                    fontSize: '18px',\r\n                                    color: '#6b7280'\r\n                                }}\r\n                            >\r\n                                {showCurrentPassword ? '🙈' : '👁️'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            marginBottom: '8px',\r\n                            color: '#374151',\r\n                            fontSize: '14px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Nouveau mot de passe\r\n                        </label>\r\n                        <div style={{ position: 'relative' }}>\r\n                            <input\r\n                                type={showNewPassword ? \"text\" : \"password\"}\r\n                                value={newPassword}\r\n                                onChange={(e) => setNewPassword(e.target.value)}\r\n                                required\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '12px',\r\n                                    paddingRight: '45px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '16px',\r\n                                    outline: 'none',\r\n                                    transition: 'border-color 0.2s'\r\n                                }}\r\n                                placeholder=\"Minimum 6 caractères\"\r\n                            />\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => setShowNewPassword(!showNewPassword)}\r\n                                style={{\r\n                                    position: 'absolute',\r\n                                    right: '12px',\r\n                                    top: '50%',\r\n                                    transform: 'translateY(-50%)',\r\n                                    background: 'none',\r\n                                    border: 'none',\r\n                                    cursor: 'pointer',\r\n                                    fontSize: '18px',\r\n                                    color: '#6b7280'\r\n                                }}\r\n                            >\r\n                                {showNewPassword ? '🙈' : '👁️'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            marginBottom: '8px',\r\n                            color: '#374151',\r\n                            fontSize: '14px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Confirmer le nouveau mot de passe\r\n                        </label>\r\n                        <div style={{ position: 'relative' }}>\r\n                            <input\r\n                                type={showConfirmPassword ? \"text\" : \"password\"}\r\n                                value={confirmPassword}\r\n                                onChange={(e) => setConfirmPassword(e.target.value)}\r\n                                required\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '12px',\r\n                                    paddingRight: '45px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '16px',\r\n                                    outline: 'none',\r\n                                    transition: 'border-color 0.2s'\r\n                                }}\r\n                                placeholder=\"Répétez le nouveau mot de passe\"\r\n                            />\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\r\n                                style={{\r\n                                    position: 'absolute',\r\n                                    right: '12px',\r\n                                    top: '50%',\r\n                                    transform: 'translateY(-50%)',\r\n                                    background: 'none',\r\n                                    border: 'none',\r\n                                    cursor: 'pointer',\r\n                                    fontSize: '18px',\r\n                                    color: '#6b7280'\r\n                                }}\r\n                            >\r\n                                {showConfirmPassword ? '🙈' : '👁️'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {errorMessage && (\r\n                        <div style={{\r\n                            backgroundColor: '#fee2e2',\r\n                            color: '#991b1b',\r\n                            padding: '12px',\r\n                            borderRadius: '8px',\r\n                            marginBottom: '20px',\r\n                            fontSize: '14px'\r\n                        }}>\r\n                            {errorMessage}\r\n                        </div>\r\n                    )}\r\n\r\n                    {successMessage && (\r\n                        <div style={{\r\n                            backgroundColor: '#d1fae5',\r\n                            color: '#065f46',\r\n                            padding: '12px',\r\n                            borderRadius: '8px',\r\n                            marginBottom: '20px',\r\n                            fontSize: '14px'\r\n                        }}>\r\n                            {successMessage}\r\n                        </div>\r\n                    )}\r\n\r\n                    <button\r\n                        type=\"submit\"\r\n                        disabled={isLoading}\r\n                        style={{\r\n                            width: '100%',\r\n                            padding: '12px',\r\n                            background: isLoading ? '#9ca3af' : 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '16px',\r\n                            fontWeight: '600',\r\n                            cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                            transition: 'transform 0.2s'\r\n                        }}\r\n                    >\r\n                        {isLoading ? 'Changement en cours...' : 'Changer mon mot de passe'}\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/formateur')}\r\n                        style={{\r\n                            width: '100%',\r\n                            padding: '12px',\r\n                            background: '#6b7280',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '16px',\r\n                            fontWeight: '600',\r\n                            cursor: 'pointer',\r\n                            marginTop: '16px',\r\n                            transition: 'transform 0.2s'\r\n                        }}\r\n                    >\r\n                        Retour à l'accueil\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}",
          "taille": 14568,
          "lignes": 327,
          "dateModif": "2025-08-28T19:00:40.360Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext'\r\n\r\nexport default function ChangePassword() {\r\n    const [currentPassword, setCurrentPassword] = useState('')\r\n    const [newPassword, setNewPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const [successMessage, setSuccessMessage] = useState('')\r\n    const [showCurrentPassword, setShowCurrentPassword] = useState(false)\r\n    const [showNewPassword, setShowNewPassword] = useState(false)\r\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false)\r\n    const { user, changePassword } = useFormateurAuth()\r\n    const router = useRouter()\r\n\r\n    useEffect(() => {\r\n        // Si l'utilisateur n'est pas connecté, rediriger vers login\r\n        if (!user) {\r\n            router.push('/formateur/login')\r\n        }\r\n        // Permettre l'accès à la page même si mustChangePassword est false\r\n        // (changement volontaire de mot de passe)\r\n    }, [user, router])\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setIsLoading(true)\r\n        setErrorMessage('')\r\n        setSuccessMessage('')\r\n\r\n        // Validation\r\n        if (newPassword !== confirmPassword) {\r\n            setErrorMessage('Les mots de passe ne correspondent pas')\r\n            setIsLoading(false)\r\n            return\r\n        }\r\n\r\n        if (newPassword.length < 6) {\r\n            setErrorMessage('Le nouveau mot de passe doit contenir au moins 6 caractères')\r\n            setIsLoading(false)\r\n            return\r\n        }\r\n\r\n        try {\r\n            const result = await changePassword(currentPassword, newPassword)\r\n            \r\n            if (result.success) {\r\n                setSuccessMessage('Mot de passe changé avec succès')\r\n                setTimeout(() => {\r\n                    router.push('/formateur')\r\n                }, 1500)\r\n            } else {\r\n                setErrorMessage(result.error || 'Erreur lors du changement de mot de passe')\r\n            }\r\n        } catch (error) {\r\n            console.error('Erreur changement mot de passe:', error)\r\n            setErrorMessage('Erreur inattendue lors du changement')\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    if (!user) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            padding: '20px'\r\n        }}>\r\n            <div style={{\r\n                backgroundColor: 'white',\r\n                borderRadius: '12px',\r\n                padding: '40px',\r\n                width: '100%',\r\n                maxWidth: '450px',\r\n                boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n            }}>\r\n                <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n                    <h1 style={{\r\n                        fontSize: '28px',\r\n                        fontWeight: 'bold',\r\n                        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                        WebkitBackgroundClip: 'text',\r\n                        WebkitTextFillColor: 'transparent',\r\n                        marginBottom: '10px'\r\n                    }}>\r\n                        Changement de mot de passe\r\n                    </h1>\r\n                    <p style={{ color: '#6b7280', fontSize: '14px' }}>\r\n                        Première connexion - Veuillez choisir un nouveau mot de passe\r\n                    </p>\r\n                </div>\r\n\r\n                <div style={{\r\n                    backgroundColor: '#fef3c7',\r\n                    border: '1px solid #fbbf24',\r\n                    borderRadius: '8px',\r\n                    padding: '12px',\r\n                    marginBottom: '20px'\r\n                }}>\r\n                    <p style={{ color: '#92400e', fontSize: '13px', margin: 0 }}>\r\n                        <strong>Bienvenue {user.prenom} !</strong><br />\r\n                        Pour sécuriser votre compte, veuillez créer un nouveau mot de passe personnel.\r\n                    </p>\r\n                </div>\r\n\r\n                <form onSubmit={handleSubmit}>\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            marginBottom: '8px',\r\n                            color: '#374151',\r\n                            fontSize: '14px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Mot de passe actuel\r\n                        </label>\r\n                        <div style={{ position: 'relative' }}>\r\n                            <input\r\n                                type={showCurrentPassword ? \"text\" : \"password\"}\r\n                                value={currentPassword}\r\n                                onChange={(e) => setCurrentPassword(e.target.value)}\r\n                                required\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '12px',\r\n                                    paddingRight: '45px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '16px',\r\n                                    outline: 'none',\r\n                                    transition: 'border-color 0.2s'\r\n                                }}\r\n                                placeholder=\"Votre mot de passe actuel\"\r\n                            />\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => setShowCurrentPassword(!showCurrentPassword)}\r\n                                style={{\r\n                                    position: 'absolute',\r\n                                    right: '12px',\r\n                                    top: '50%',\r\n                                    transform: 'translateY(-50%)',\r\n                                    background: 'none',\r\n                                    border: 'none',\r\n                                    cursor: 'pointer',\r\n                                    fontSize: '18px',\r\n                                    color: '#6b7280'\r\n                                }}\r\n                            >\r\n                                {showCurrentPassword ? '🙈' : '👁️'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            marginBottom: '8px',\r\n                            color: '#374151',\r\n                            fontSize: '14px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Nouveau mot de passe\r\n                        </label>\r\n                        <div style={{ position: 'relative' }}>\r\n                            <input\r\n                                type={showNewPassword ? \"text\" : \"password\"}\r\n                                value={newPassword}\r\n                                onChange={(e) => setNewPassword(e.target.value)}\r\n                                required\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '12px',\r\n                                    paddingRight: '45px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '16px',\r\n                                    outline: 'none',\r\n                                    transition: 'border-color 0.2s'\r\n                                }}\r\n                                placeholder=\"Minimum 6 caractères\"\r\n                            />\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => setShowNewPassword(!showNewPassword)}\r\n                                style={{\r\n                                    position: 'absolute',\r\n                                    right: '12px',\r\n                                    top: '50%',\r\n                                    transform: 'translateY(-50%)',\r\n                                    background: 'none',\r\n                                    border: 'none',\r\n                                    cursor: 'pointer',\r\n                                    fontSize: '18px',\r\n                                    color: '#6b7280'\r\n                                }}\r\n                            >\r\n                                {showNewPassword ? '🙈' : '👁️'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            marginBottom: '8px',\r\n                            color: '#374151',\r\n                            fontSize: '14px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Confirmer le nouveau mot de passe\r\n                        </label>\r\n                        <div style={{ position: 'relative' }}>\r\n                            <input\r\n                                type={showConfirmPassword ? \"text\" : \"password\"}\r\n                                value={confirmPassword}\r\n                                onChange={(e) => setConfirmPassword(e.target.value)}\r\n                                required\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '12px',\r\n                                    paddingRight: '45px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '16px',\r\n                                    outline: 'none',\r\n                                    transition: 'border-color 0.2s'\r\n                                }}\r\n                                placeholder=\"Répétez le nouveau mot de passe\"\r\n                            />\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\r\n                                style={{\r\n                                    position: 'absolute',\r\n                                    right: '12px',\r\n                                    top: '50%',\r\n                                    transform: 'translateY(-50%)',\r\n                                    background: 'none',\r\n                                    border: 'none',\r\n                                    cursor: 'pointer',\r\n                                    fontSize: '18px',\r\n                                    color: '#6b7280'\r\n                                }}\r\n                            >\r\n                                {showConfirmPassword ? '🙈' : '👁️'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {errorMessage && (\r\n                        <div style={{\r\n                            backgroundColor: '#fee2e2',\r\n                            color: '#991b1b',\r\n                            padding: '12px',\r\n                            borderRadius: '8px',\r\n                            marginBottom: '20px',\r\n                            fontSize: '14px'\r\n                        }}>\r\n                            {errorMessage}\r\n                        </div>\r\n                    )}\r\n\r\n                    {successMessage && (\r\n                        <div style={{\r\n                            backgroundColor: '#d1fae5',\r\n                            color: '#065f46',\r\n                            padding: '12px',\r\n                            borderRadius: '8px',\r\n                            marginBottom: '20px',\r\n                            fontSize: '14px'\r\n                        }}>\r\n                            {successMessage}\r\n                        </div>\r\n                    )}\r\n\r\n                    <button\r\n                        type=\"submit\"\r\n                        disabled={isLoading}\r\n                        style={{\r\n                            width: '100%',\r\n                            padding: '12px',\r\n                            background: isLoading ? '#9ca3af' : 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '16px',\r\n                            fontWeight: '600',\r\n                            cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                            transition: 'transform 0.2s'\r\n                        }}\r\n                    >\r\n                        {isLoading ? 'Changement en cours...' : 'Changer mon mot de passe'}\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/formateur')}\r\n                        style={{\r\n                            width: '100%',\r\n                            padding: '12px',\r\n                            background: '#6b7280',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '16px',\r\n                            fontWeight: '600',\r\n                            cursor: 'pointer',\r\n                            marginTop: '16px',\r\n                            transition: 'transform 0.2s'\r\n                        }}\r\n                    >\r\n                        Retour à l'accueil\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}",
          "taille": 14568,
          "lignes": 327,
          "dateModif": "2025-08-22T12:39:40.223Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/formateur/index.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "// pages/formateur/index.js - Accueil Formateur avec nouveau système d'auth\r\nimport { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../../lib/supabaseClient'\r\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext'\r\n\r\nexport default function AccueilFormateur() {\r\n    const [messagesNonLus, setMessagesNonLus] = useState(0)\r\n    const { user, isLoading, isAuthenticated, logout } = useFormateurAuth()\r\n    const router = useRouter()\r\n\r\n    useEffect(() => {\r\n        // Rediriger vers login si pas authentifié\r\n        if (!isLoading && !isAuthenticated) {\r\n            console.log('🔒 [FORMATEUR PAGE] Non authentifié, redirection vers login')\r\n            router.push('/formateur/login')\r\n        }\r\n    }, [isLoading, isAuthenticated, router])\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            console.log('✅ [FORMATEUR PAGE] Utilisateur connecté:', user)\r\n            checkMessages()\r\n        }\r\n    }, [user])\r\n\r\n\r\n    const checkMessages = async () => {\r\n        try {\r\n            // Vérifier les messages non lus pour ce formateur\r\n            const { data, error } = await supabase\r\n                .from('messages')\r\n                .select('id')\r\n                .eq('destinataire_id', user.id)\r\n                .eq('lu', false)\r\n                .eq('archive', false)\r\n\r\n            if (!error && data) {\r\n                setMessagesNonLus(data.length)\r\n            }\r\n        } catch (error) {\r\n            console.error('Erreur vérification messages:', error)\r\n        }\r\n    }\r\n\r\n    const handleFermer = async () => {\r\n        const confirmation = window.confirm(\r\n            \"Voulez-vous vraiment fermer votre session ?\\n\\n\" +\r\n            \"Vous devrez vous reconnecter la prochaine fois.\"\r\n        )\r\n        \r\n        if (confirmation) {\r\n            await logout()\r\n        }\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                backgroundColor: '#ffffff',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                padding: '20px'\r\n            }}>\r\n                <div style={{\r\n                    padding: '40px',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement...</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!user) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            backgroundColor: '#ffffff',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            padding: '20px'\r\n        }}>\r\n            <div style={{\r\n                padding: '30px',\r\n                maxWidth: '400px',\r\n                width: '100%',\r\n                textAlign: 'center'\r\n            }}>\r\n                {/* Titre */}\r\n                <h1 style={{\r\n                    fontSize: '24px',\r\n                    fontWeight: 'bold',\r\n                    marginBottom: '10px',\r\n                    color: '#333'\r\n                }}>\r\n                    Planning ACLEF\r\n                </h1>\r\n\r\n                {/* Message personnalisé */}\r\n                <p style={{\r\n                    fontSize: '16px',\r\n                    color: '#666',\r\n                    marginBottom: '30px',\r\n                    lineHeight: '1.4'\r\n                }}>\r\n                    Bonjour <strong>{user?.prenom}</strong>. \r\n                    Que souhaitez-vous faire ?\r\n                </p>\r\n\r\n                {/* Grille de boutons */}\r\n                <div style={{\r\n                    display: 'grid',\r\n                    gridTemplateColumns: '1fr 1fr',\r\n                    gap: '15px',\r\n                    marginBottom: '15px'\r\n                }}>\r\n                    <button\r\n                        onClick={() => router.push('/formateur/mon-planning-hebdo')}\r\n                        style={{\r\n                            backgroundColor: '#6366f1',\r\n                            color: 'white',\r\n                            padding: '20px 15px',\r\n                            borderRadius: '15px',\r\n                            border: 'none',\r\n                            fontSize: '14px',\r\n                            fontWeight: 'bold',\r\n                            cursor: 'pointer',\r\n                            boxShadow: '0 4px 15px rgba(99, 102, 241, 0.3)',\r\n                            transition: 'transform 0.2s ease'\r\n                        }}\r\n                        onMouseOver={(e) => e.target.style.transform = 'translateY(-2px)'}\r\n                        onMouseOut={(e) => e.target.style.transform = 'translateY(0)'}\r\n                    >\r\n                        Planning Hebdo\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/formateur/absence')}\r\n                        style={{\r\n                            backgroundColor: '#10b981',\r\n                            color: 'white',\r\n                            padding: '20px 15px',\r\n                            borderRadius: '15px',\r\n                            border: 'none',\r\n                            fontSize: '14px',\r\n                            fontWeight: 'bold',\r\n                            cursor: 'pointer',\r\n                            boxShadow: '0 4px 15px rgba(16, 185, 129, 0.3)',\r\n                            transition: 'transform 0.2s ease'\r\n                        }}\r\n                        onMouseOver={(e) => e.target.style.transform = 'translateY(-2px)'}\r\n                        onMouseOut={(e) => e.target.style.transform = 'translateY(0)'}\r\n                    >\r\n                        Modifications ponctuelles\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/formateur/planning-formateur-type')}\r\n                        style={{\r\n                            backgroundColor: '#3b82f6',\r\n                            color: 'white',\r\n                            padding: '20px 15px',\r\n                            borderRadius: '15px',\r\n                            border: 'none',\r\n                            fontSize: '14px',\r\n                            fontWeight: 'bold',\r\n                            cursor: 'pointer',\r\n                            boxShadow: '0 4px 15px rgba(59, 130, 246, 0.3)',\r\n                            transition: 'transform 0.2s ease'\r\n                        }}\r\n                        onMouseOver={(e) => e.target.style.transform = 'translateY(-2px)'}\r\n                        onMouseOut={(e) => e.target.style.transform = 'translateY(0)'}\r\n                    >\r\n                        Déclarer mon planning type\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/formateur/mon-planning-type')}\r\n                        style={{\r\n                            backgroundColor: '#8b5cf6',\r\n                            color: 'white',\r\n                            padding: '20px 15px',\r\n                            borderRadius: '15px',\r\n                            border: 'none',\r\n                            fontSize: '14px',\r\n                            fontWeight: 'bold',\r\n                            cursor: 'pointer',\r\n                            boxShadow: '0 4px 15px rgba(139, 92, 246, 0.3)',\r\n                            transition: 'transform 0.2s ease'\r\n                        }}\r\n                        onMouseOver={(e) => e.target.style.transform = 'translateY(-2px)'}\r\n                        onMouseOut={(e) => e.target.style.transform = 'translateY(0)'}\r\n                    >\r\n                        Afficher mon planning type\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/formateur/change-password')}\r\n                        style={{\r\n                            backgroundColor: '#f59e0b',\r\n                            color: 'white',\r\n                            padding: '20px 15px',\r\n                            borderRadius: '15px',\r\n                            border: 'none',\r\n                            fontSize: '14px',\r\n                            fontWeight: 'bold',\r\n                            cursor: 'pointer',\r\n                            boxShadow: '0 4px 15px rgba(245, 158, 11, 0.3)',\r\n                            transition: 'transform 0.2s ease'\r\n                        }}\r\n                        onMouseOver={(e) => e.target.style.transform = 'translateY(-2px)'}\r\n                        onMouseOut={(e) => e.target.style.transform = 'translateY(0)'}\r\n                    >\r\n                        Changer de mot de passe\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/formateur/ma-messagerie')}\r\n                        style={{\r\n                            backgroundColor: '#06b6d4',\r\n                            color: 'white',\r\n                            padding: '20px 15px',\r\n                            borderRadius: '15px',\r\n                            border: 'none',\r\n                            fontSize: '14px',\r\n                            fontWeight: 'bold',\r\n                            cursor: 'pointer',\r\n                            boxShadow: '0 4px 15px rgba(6, 182, 212, 0.3)',\r\n                            transition: 'transform 0.2s ease',\r\n                            position: 'relative'\r\n                        }}\r\n                        onMouseOver={(e) => e.target.style.transform = 'translateY(-2px)'}\r\n                        onMouseOut={(e) => e.target.style.transform = 'translateY(0)'}\r\n                    >\r\n                        {messagesNonLus > 0 ? (\r\n                            <>\r\n                                <div style={{\r\n                                    position: 'absolute',\r\n                                    top: '-8px',\r\n                                    right: '-8px',\r\n                                    backgroundColor: '#dc3545',\r\n                                    color: 'white',\r\n                                    borderRadius: '50%',\r\n                                    width: '24px',\r\n                                    height: '24px',\r\n                                    display: 'flex',\r\n                                    alignItems: 'center',\r\n                                    justifyContent: 'center',\r\n                                    fontSize: '12px',\r\n                                    fontWeight: 'bold',\r\n                                    border: '2px solid white'\r\n                                }}>\r\n                                    {messagesNonLus > 9 ? '9+' : messagesNonLus}\r\n                                </div>\r\n                                Messagerie\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                Messagerie\r\n                            </>\r\n                        )}\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Bouton Fermer */}\r\n                <button\r\n                    onClick={handleFermer}\r\n                    style={{\r\n                        backgroundColor: '#dc3545',\r\n                        color: 'white',\r\n                        padding: '15px 40px',\r\n                        borderRadius: '25px',\r\n                        border: 'none',\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        cursor: 'pointer',\r\n                        boxShadow: '0 4px 15px rgba(220, 53, 69, 0.3)',\r\n                        transition: 'all 0.3s ease',\r\n                        marginTop: '10px'\r\n                    }}\r\n                    onMouseOver={(e) => e.target.style.backgroundColor = '#c82333'}\r\n                    onMouseOut={(e) => e.target.style.backgroundColor = '#dc3545'}\r\n                >\r\n                    Fermer\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}",
          "taille": 12231,
          "lignes": 296,
          "dateModif": "2025-08-28T19:00:40.374Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "// pages/formateur/index.js - Accueil Formateur avec nouveau système d'auth\r\nimport { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../../lib/supabaseClient'\r\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext'\r\n\r\nexport default function AccueilFormateur() {\r\n    const [messagesNonLus, setMessagesNonLus] = useState(0)\r\n    const { user, isLoading, isAuthenticated, logout } = useFormateurAuth()\r\n    const router = useRouter()\r\n\r\n    useEffect(() => {\r\n        // Rediriger vers login si pas authentifié\r\n        if (!isLoading && !isAuthenticated) {\r\n            console.log('🔒 [FORMATEUR PAGE] Non authentifié, redirection vers login')\r\n            router.push('/formateur/login')\r\n        }\r\n    }, [isLoading, isAuthenticated, router])\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            console.log('✅ [FORMATEUR PAGE] Utilisateur connecté:', user)\r\n            checkMessages()\r\n        }\r\n    }, [user])\r\n\r\n\r\n    const checkMessages = async () => {\r\n        try {\r\n            // Vérifier les messages non lus pour ce formateur\r\n            const { data, error } = await supabase\r\n                .from('messages')\r\n                .select('id')\r\n                .eq('destinataire_id', user.id)\r\n                .eq('lu', false)\r\n                .eq('archive', false)\r\n\r\n            if (!error && data) {\r\n                setMessagesNonLus(data.length)\r\n            }\r\n        } catch (error) {\r\n            console.error('Erreur vérification messages:', error)\r\n        }\r\n    }\r\n\r\n    const handleFermer = async () => {\r\n        const confirmation = window.confirm(\r\n            \"Voulez-vous vraiment fermer votre session ?\\n\\n\" +\r\n            \"Vous devrez vous reconnecter la prochaine fois.\"\r\n        )\r\n        \r\n        if (confirmation) {\r\n            await logout()\r\n        }\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                backgroundColor: '#ffffff',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                padding: '20px'\r\n            }}>\r\n                <div style={{\r\n                    padding: '40px',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement...</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!user) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            backgroundColor: '#ffffff',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            padding: '20px'\r\n        }}>\r\n            <div style={{\r\n                padding: '30px',\r\n                maxWidth: '400px',\r\n                width: '100%',\r\n                textAlign: 'center'\r\n            }}>\r\n                {/* Titre */}\r\n                <h1 style={{\r\n                    fontSize: '24px',\r\n                    fontWeight: 'bold',\r\n                    marginBottom: '10px',\r\n                    color: '#333'\r\n                }}>\r\n                    Planning ACLEF\r\n                </h1>\r\n\r\n                {/* Message personnalisé */}\r\n                <p style={{\r\n                    fontSize: '16px',\r\n                    color: '#666',\r\n                    marginBottom: '30px',\r\n                    lineHeight: '1.4'\r\n                }}>\r\n                    Bonjour <strong>{user?.prenom}</strong>. \r\n                    Que souhaitez-vous faire ?\r\n                </p>\r\n\r\n                {/* Grille de boutons */}\r\n                <div style={{\r\n                    display: 'grid',\r\n                    gridTemplateColumns: '1fr 1fr',\r\n                    gap: '15px',\r\n                    marginBottom: '15px'\r\n                }}>\r\n                    <button\r\n                        onClick={() => router.push('/formateur/mon-planning-hebdo')}\r\n                        style={{\r\n                            backgroundColor: '#6366f1',\r\n                            color: 'white',\r\n                            padding: '20px 15px',\r\n                            borderRadius: '15px',\r\n                            border: 'none',\r\n                            fontSize: '14px',\r\n                            fontWeight: 'bold',\r\n                            cursor: 'pointer',\r\n                            boxShadow: '0 4px 15px rgba(99, 102, 241, 0.3)',\r\n                            transition: 'transform 0.2s ease'\r\n                        }}\r\n                        onMouseOver={(e) => e.target.style.transform = 'translateY(-2px)'}\r\n                        onMouseOut={(e) => e.target.style.transform = 'translateY(0)'}\r\n                    >\r\n                        Planning Hebdo\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/formateur/absence')}\r\n                        style={{\r\n                            backgroundColor: '#10b981',\r\n                            color: 'white',\r\n                            padding: '20px 15px',\r\n                            borderRadius: '15px',\r\n                            border: 'none',\r\n                            fontSize: '14px',\r\n                            fontWeight: 'bold',\r\n                            cursor: 'pointer',\r\n                            boxShadow: '0 4px 15px rgba(16, 185, 129, 0.3)',\r\n                            transition: 'transform 0.2s ease'\r\n                        }}\r\n                        onMouseOver={(e) => e.target.style.transform = 'translateY(-2px)'}\r\n                        onMouseOut={(e) => e.target.style.transform = 'translateY(0)'}\r\n                    >\r\n                        Modifications ponctuelles\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/formateur/planning-formateur-type')}\r\n                        style={{\r\n                            backgroundColor: '#3b82f6',\r\n                            color: 'white',\r\n                            padding: '20px 15px',\r\n                            borderRadius: '15px',\r\n                            border: 'none',\r\n                            fontSize: '14px',\r\n                            fontWeight: 'bold',\r\n                            cursor: 'pointer',\r\n                            boxShadow: '0 4px 15px rgba(59, 130, 246, 0.3)',\r\n                            transition: 'transform 0.2s ease'\r\n                        }}\r\n                        onMouseOver={(e) => e.target.style.transform = 'translateY(-2px)'}\r\n                        onMouseOut={(e) => e.target.style.transform = 'translateY(0)'}\r\n                    >\r\n                        Déclarer mon planning type\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/formateur/mon-planning-type')}\r\n                        style={{\r\n                            backgroundColor: '#8b5cf6',\r\n                            color: 'white',\r\n                            padding: '20px 15px',\r\n                            borderRadius: '15px',\r\n                            border: 'none',\r\n                            fontSize: '14px',\r\n                            fontWeight: 'bold',\r\n                            cursor: 'pointer',\r\n                            boxShadow: '0 4px 15px rgba(139, 92, 246, 0.3)',\r\n                            transition: 'transform 0.2s ease'\r\n                        }}\r\n                        onMouseOver={(e) => e.target.style.transform = 'translateY(-2px)'}\r\n                        onMouseOut={(e) => e.target.style.transform = 'translateY(0)'}\r\n                    >\r\n                        Afficher mon planning type\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/formateur/change-password')}\r\n                        style={{\r\n                            backgroundColor: '#f59e0b',\r\n                            color: 'white',\r\n                            padding: '20px 15px',\r\n                            borderRadius: '15px',\r\n                            border: 'none',\r\n                            fontSize: '14px',\r\n                            fontWeight: 'bold',\r\n                            cursor: 'pointer',\r\n                            boxShadow: '0 4px 15px rgba(245, 158, 11, 0.3)',\r\n                            transition: 'transform 0.2s ease'\r\n                        }}\r\n                        onMouseOver={(e) => e.target.style.transform = 'translateY(-2px)'}\r\n                        onMouseOut={(e) => e.target.style.transform = 'translateY(0)'}\r\n                    >\r\n                        Changer de mot de passe\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/formateur/ma-messagerie')}\r\n                        style={{\r\n                            backgroundColor: '#06b6d4',\r\n                            color: 'white',\r\n                            padding: '20px 15px',\r\n                            borderRadius: '15px',\r\n                            border: 'none',\r\n                            fontSize: '14px',\r\n                            fontWeight: 'bold',\r\n                            cursor: 'pointer',\r\n                            boxShadow: '0 4px 15px rgba(6, 182, 212, 0.3)',\r\n                            transition: 'transform 0.2s ease',\r\n                            position: 'relative'\r\n                        }}\r\n                        onMouseOver={(e) => e.target.style.transform = 'translateY(-2px)'}\r\n                        onMouseOut={(e) => e.target.style.transform = 'translateY(0)'}\r\n                    >\r\n                        {messagesNonLus > 0 ? (\r\n                            <>\r\n                                <div style={{\r\n                                    position: 'absolute',\r\n                                    top: '-8px',\r\n                                    right: '-8px',\r\n                                    backgroundColor: '#dc3545',\r\n                                    color: 'white',\r\n                                    borderRadius: '50%',\r\n                                    width: '24px',\r\n                                    height: '24px',\r\n                                    display: 'flex',\r\n                                    alignItems: 'center',\r\n                                    justifyContent: 'center',\r\n                                    fontSize: '12px',\r\n                                    fontWeight: 'bold',\r\n                                    border: '2px solid white'\r\n                                }}>\r\n                                    {messagesNonLus > 9 ? '9+' : messagesNonLus}\r\n                                </div>\r\n                                Messagerie\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                Messagerie\r\n                            </>\r\n                        )}\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Bouton Fermer */}\r\n                <button\r\n                    onClick={handleFermer}\r\n                    style={{\r\n                        backgroundColor: '#dc3545',\r\n                        color: 'white',\r\n                        padding: '15px 40px',\r\n                        borderRadius: '25px',\r\n                        border: 'none',\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        cursor: 'pointer',\r\n                        boxShadow: '0 4px 15px rgba(220, 53, 69, 0.3)',\r\n                        transition: 'all 0.3s ease',\r\n                        marginTop: '10px'\r\n                    }}\r\n                    onMouseOver={(e) => e.target.style.backgroundColor = '#c82333'}\r\n                    onMouseOut={(e) => e.target.style.backgroundColor = '#dc3545'}\r\n                >\r\n                    Fermer\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}",
          "taille": 12231,
          "lignes": 296,
          "dateModif": "2025-08-22T12:26:14.196Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/formateur/login.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext'\r\n\r\nexport default function LoginFormateur() {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const { login } = useFormateurAuth()\r\n    const router = useRouter()\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setIsLoading(true)\r\n        setErrorMessage('')\r\n\r\n        try {\r\n            console.log('📝 [LOGIN PAGE] Appel de la fonction login...')\r\n            const result = await login(username, password)\r\n            console.log('📝 [LOGIN PAGE] Résultat login:', result)\r\n            \r\n            if (result.success) {\r\n                // La redirection est gérée automatiquement par le contexte\r\n                console.log('✅ [LOGIN PAGE] Connexion formateur réussie, attente redirection...')\r\n            } else {\r\n                console.error('❌ [LOGIN PAGE] Échec connexion:', result.error)\r\n                setErrorMessage(result.error || 'Erreur de connexion')\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('💥 [LOGIN PAGE] Erreur de connexion:', error)\r\n            setErrorMessage('Erreur inattendue lors de la connexion')\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            padding: '20px'\r\n        }}>\r\n            <div style={{\r\n                backgroundColor: 'white',\r\n                borderRadius: '12px',\r\n                padding: '40px',\r\n                width: '100%',\r\n                maxWidth: '400px',\r\n                boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n            }}>\r\n                {/* Logo et titre */}\r\n                <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n                    <h1 style={{\r\n                        fontSize: '32px',\r\n                        fontWeight: 'bold',\r\n                        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                        WebkitBackgroundClip: 'text',\r\n                        WebkitTextFillColor: 'transparent',\r\n                        marginBottom: '10px'\r\n                    }}>\r\n                        ACLEF Planning\r\n                    </h1>\r\n                    <p style={{ color: '#6b7280', fontSize: '14px' }}>\r\n                        Espace Formateur\r\n                    </p>\r\n                </div>\r\n\r\n                {/* Formulaire */}\r\n                <form onSubmit={handleSubmit}>\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            marginBottom: '8px',\r\n                            color: '#374151',\r\n                            fontSize: '14px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Identifiant\r\n                        </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                            required\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '12px',\r\n                                border: '1px solid #d1d5db',\r\n                                borderRadius: '8px',\r\n                                fontSize: '16px',\r\n                                outline: 'none',\r\n                                transition: 'border-color 0.2s'\r\n                            }}\r\n                            placeholder=\"Nom d'utilisateur\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            marginBottom: '8px',\r\n                            color: '#374151',\r\n                            fontSize: '14px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Mot de passe\r\n                        </label>\r\n                        <input\r\n                            type=\"password\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            required\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '12px',\r\n                                border: '1px solid #d1d5db',\r\n                                borderRadius: '8px',\r\n                                fontSize: '16px',\r\n                                outline: 'none',\r\n                                transition: 'border-color 0.2s'\r\n                            }}\r\n                            placeholder=\"••••••••\"\r\n                        />\r\n                    </div>\r\n\r\n                    {/* Message d'erreur */}\r\n                    {errorMessage && (\r\n                        <div style={{\r\n                            backgroundColor: '#fee2e2',\r\n                            color: '#991b1b',\r\n                            padding: '12px',\r\n                            borderRadius: '8px',\r\n                            marginBottom: '20px',\r\n                            fontSize: '14px'\r\n                        }}>\r\n                            {errorMessage}\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Bouton connexion */}\r\n                    <button\r\n                        type=\"submit\"\r\n                        disabled={isLoading}\r\n                        style={{\r\n                            width: '100%',\r\n                            padding: '12px',\r\n                            background: isLoading ? '#9ca3af' : 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '16px',\r\n                            fontWeight: '600',\r\n                            cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                            transition: 'transform 0.2s',\r\n                            transform: isLoading ? 'scale(1)' : 'scale(1)'\r\n                        }}\r\n                        onMouseOver={(e) => !isLoading && (e.target.style.transform = 'scale(1.02)')}\r\n                        onMouseOut={(e) => !isLoading && (e.target.style.transform = 'scale(1)')}\r\n                    >\r\n                        {isLoading ? 'Connexion...' : 'Se connecter'}\r\n                    </button>\r\n                </form>\r\n\r\n                {/* Info de connexion */}\r\n                <div style={{\r\n                    marginTop: '30px',\r\n                    padding: '15px',\r\n                    backgroundColor: '#f3f4f6',\r\n                    borderRadius: '8px',\r\n                    fontSize: '13px',\r\n                    color: '#6b7280',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    <strong>Première connexion ?</strong><br />\r\n                    Nom d'utilisateur = votre prénom<br />\r\n                    Mot de passe = votre nom de famille\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}",
          "taille": 7834,
          "lignes": 186,
          "dateModif": "2025-08-30T06:02:13.178Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext'\r\n\r\nexport default function LoginFormateur() {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const { login } = useFormateurAuth()\r\n    const router = useRouter()\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setIsLoading(true)\r\n        setErrorMessage('')\r\n\r\n        try {\r\n            console.log('📝 [LOGIN PAGE] Appel de la fonction login...')\r\n            const result = await login(username, password)\r\n            console.log('📝 [LOGIN PAGE] Résultat login:', result)\r\n            \r\n            if (result.success) {\r\n                // La redirection est gérée automatiquement par le contexte\r\n                console.log('✅ [LOGIN PAGE] Connexion formateur réussie, attente redirection...')\r\n            } else {\r\n                console.error('❌ [LOGIN PAGE] Échec connexion:', result.error)\r\n                setErrorMessage(result.error || 'Erreur de connexion')\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('💥 [LOGIN PAGE] Erreur de connexion:', error)\r\n            setErrorMessage('Erreur inattendue lors de la connexion')\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            padding: '20px'\r\n        }}>\r\n            <div style={{\r\n                backgroundColor: 'white',\r\n                borderRadius: '12px',\r\n                padding: '40px',\r\n                width: '100%',\r\n                maxWidth: '400px',\r\n                boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n            }}>\r\n                {/* Logo et titre */}\r\n                <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n                    <h1 style={{\r\n                        fontSize: '32px',\r\n                        fontWeight: 'bold',\r\n                        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                        WebkitBackgroundClip: 'text',\r\n                        WebkitTextFillColor: 'transparent',\r\n                        marginBottom: '10px'\r\n                    }}>\r\n                        ACLEF Planning\r\n                    </h1>\r\n                    <p style={{ color: '#6b7280', fontSize: '14px' }}>\r\n                        Espace Formateur\r\n                    </p>\r\n                </div>\r\n\r\n                {/* Formulaire */}\r\n                <form onSubmit={handleSubmit}>\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            marginBottom: '8px',\r\n                            color: '#374151',\r\n                            fontSize: '14px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Identifiant\r\n                        </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                            required\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '12px',\r\n                                border: '1px solid #d1d5db',\r\n                                borderRadius: '8px',\r\n                                fontSize: '16px',\r\n                                outline: 'none',\r\n                                transition: 'border-color 0.2s'\r\n                            }}\r\n                            placeholder=\"Nom d'utilisateur\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            marginBottom: '8px',\r\n                            color: '#374151',\r\n                            fontSize: '14px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Mot de passe\r\n                        </label>\r\n                        <input\r\n                            type=\"password\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            required\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '12px',\r\n                                border: '1px solid #d1d5db',\r\n                                borderRadius: '8px',\r\n                                fontSize: '16px',\r\n                                outline: 'none',\r\n                                transition: 'border-color 0.2s'\r\n                            }}\r\n                            placeholder=\"••••••••\"\r\n                        />\r\n                    </div>\r\n\r\n                    {/* Message d'erreur */}\r\n                    {errorMessage && (\r\n                        <div style={{\r\n                            backgroundColor: '#fee2e2',\r\n                            color: '#991b1b',\r\n                            padding: '12px',\r\n                            borderRadius: '8px',\r\n                            marginBottom: '20px',\r\n                            fontSize: '14px'\r\n                        }}>\r\n                            {errorMessage}\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Bouton connexion */}\r\n                    <button\r\n                        type=\"submit\"\r\n                        disabled={isLoading}\r\n                        style={{\r\n                            width: '100%',\r\n                            padding: '12px',\r\n                            background: isLoading ? '#9ca3af' : 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '16px',\r\n                            fontWeight: '600',\r\n                            cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                            transition: 'transform 0.2s',\r\n                            transform: isLoading ? 'scale(1)' : 'scale(1)'\r\n                        }}\r\n                        onMouseOver={(e) => !isLoading && (e.target.style.transform = 'scale(1.02)')}\r\n                        onMouseOut={(e) => !isLoading && (e.target.style.transform = 'scale(1)')}\r\n                    >\r\n                        {isLoading ? 'Connexion...' : 'Se connecter'}\r\n                    </button>\r\n                </form>\r\n\r\n                {/* Info de connexion */}\r\n                <div style={{\r\n                    marginTop: '30px',\r\n                    padding: '15px',\r\n                    backgroundColor: '#f3f4f6',\r\n                    borderRadius: '8px',\r\n                    fontSize: '13px',\r\n                    color: '#6b7280',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    <strong>Première connexion ?</strong><br />\r\n                    Nom d'utilisateur = votre prénom<br />\r\n                    Mot de passe = votre nom de famille\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}",
          "taille": 7834,
          "lignes": 186,
          "dateModif": "2025-08-21T06:37:23.268Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/formateur/ma-messagerie.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../../lib/supabaseClient'\r\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext'\r\n\r\nexport default function MaMessagerie() {\r\n  const [vue, setVue] = useState('liste') // 'liste', 'lecture', 'nouveau'\r\n  const [ongletActif, setOngletActif] = useState('non_lus') // 'non_lus', 'lus', 'archives'\r\n  const [selectedMessage, setSelectedMessage] = useState(null)\r\n  const [nouveauMessage, setNouveauMessage] = useState('')\r\n  const [objet, setObjet] = useState('')\r\n  const [messages, setMessages] = useState([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [sending, setSending] = useState(false)\r\n  const { user, isLoading, isAuthenticated } = useFormateurAuth()\r\n  const router = useRouter()\r\n\r\n  // Protection authentification\r\n  useEffect(() => {\r\n    if (!isLoading && !isAuthenticated) {\r\n      router.push('/formateur/login')\r\n    }\r\n  }, [isLoading, isAuthenticated, router])\r\n\r\n  // Charger les messages quand l'utilisateur est connecté\r\n  useEffect(() => {\r\n    if (user && user.id) {\r\n      chargerMessages(user.id)\r\n      setLoading(false)\r\n    }\r\n  }, [user])\r\n\r\n  const chargerMessages = async (formateurId) => {\r\n    try {\r\n      // Charger messages reçus par ce formateur\r\n      const { data: messagesData, error } = await supabase\r\n        .from('messages')\r\n        .select('*')\r\n        .eq('destinataire_id', formateurId)\r\n        .order('created_at', { ascending: false })\r\n\r\n      if (error) {\r\n        console.error('Erreur chargement messages:', error)\r\n        return\r\n      }\r\n\r\n      setMessages(messagesData || [])\r\n      console.log('Messages chargés:', messagesData?.length || 0)\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur:', error)\r\n    }\r\n  }\r\n\r\n  // Envoyer un message vers admin\r\n  const envoyerMessage = async () => {\r\n    if (!objet.trim() || !nouveauMessage.trim()) {\r\n      alert('⚠️ Veuillez remplir l\\'objet et le message')\r\n      return\r\n    }\r\n\r\n    if (!user?.id) {\r\n      alert('⚠️ Erreur: Utilisateur non identifié')\r\n      return\r\n    }\r\n\r\n    try {\r\n      setSending(true)\r\n      \r\n      const { error } = await supabase\r\n        .from('messages')\r\n        .insert({\r\n          expediteur_id: user.id,\r\n          destinataire_id: null, // null = admin\r\n          expediteur: `${user.prenom} ${user.nom}`,\r\n          destinataire: 'Coordination ACLEF',\r\n          objet: objet.trim(),\r\n          contenu: nouveauMessage.trim(),\r\n          type: 'messagerie',\r\n          lu: false,\r\n          archive: false,\r\n          statut_validation: 'nouveau',\r\n          date: new Date().toISOString().split('T')[0],\r\n          heure: new Date().toTimeString().slice(0, 5)\r\n        })\r\n\r\n      if (error) {\r\n        console.error('Erreur envoi message:', error)\r\n        alert('❌ Erreur lors de l\\'envoi: ' + error.message)\r\n        return\r\n      }\r\n\r\n      console.log('Message envoyé vers admin')\r\n      alert('✅ Message envoyé avec succès !')\r\n      \r\n      // Reset formulaire\r\n      setObjet('')\r\n      setNouveauMessage('')\r\n      setVue('liste')\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur:', error)\r\n      alert('❌ Erreur: ' + error.message)\r\n    } finally {\r\n      setSending(false)\r\n    }\r\n  }\r\n\r\n  // Marquer comme lu\r\n  const marquerCommeLu = async (messageId) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('messages')\r\n        .update({ lu: true })\r\n        .eq('id', messageId)\r\n\r\n      if (error) throw error\r\n\r\n      // Recharger messages\r\n      if (user?.id) {\r\n        chargerMessages(user.id)\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur marquer lu:', error)\r\n      alert('Erreur: ' + error.message)\r\n    }\r\n  }\r\n\r\n  // Archiver un message\r\n  const archiverMessage = async (messageId) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('messages')\r\n        .update({ \r\n          archive: true,\r\n          lu: true, // Marquer comme lu aussi\r\n          date_archivage: new Date().toISOString().split('T')[0]\r\n        })\r\n        .eq('id', messageId)\r\n\r\n      if (error) throw error\r\n\r\n      alert('📁 Message archivé avec succès !')\r\n      \r\n      // Recharger et aller à l'onglet archives\r\n      if (user?.id) {\r\n        chargerMessages(user.id)\r\n      }\r\n      setOngletActif('archives')\r\n      setVue('liste')\r\n      setSelectedMessage(null)\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur archivage:', error)\r\n      alert('Erreur archivage: ' + error.message)\r\n    }\r\n  }\r\n\r\n  // Supprimer définitivement un message\r\n  const supprimerMessage = async (messageId) => {\r\n    if (!confirm('⚠️ Êtes-vous sûr de vouloir supprimer définitivement ce message ?\\n\\nCette action est irréversible.')) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('messages')\r\n        .delete()\r\n        .eq('id', messageId)\r\n\r\n      if (error) throw error\r\n\r\n      alert('🗑️ Message supprimé définitivement !')\r\n      \r\n      // Recharger messages\r\n      if (user?.id) {\r\n        chargerMessages(user.id)\r\n      }\r\n      setVue('liste')\r\n      setSelectedMessage(null)\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur suppression:', error)\r\n      alert('Erreur suppression: ' + error.message)\r\n    }\r\n  }\r\n\r\n  // Ouvrir un message\r\n  const ouvrirMessage = (message) => {\r\n    setSelectedMessage(message)\r\n    setVue('lecture')\r\n    // Marquer comme lu automatiquement si pas encore lu\r\n    if (!message.lu) {\r\n      marquerCommeLu(message.id)\r\n    }\r\n  }\r\n\r\n  // Filtrer les messages selon l'onglet actif\r\n  const getMessagesFiltres = () => {\r\n    switch (ongletActif) {\r\n      case 'non_lus':\r\n        return messages.filter(m => !m.lu && !m.archive)\r\n      case 'lus':\r\n        return messages.filter(m => m.lu && !m.archive)\r\n      case 'archives':\r\n        return messages.filter(m => m.archive)\r\n      default:\r\n        return []\r\n    }\r\n  }\r\n\r\n  // Compter messages non lus\r\n  const messagesNonLus = messages.filter(m => !m.lu && !m.archive).length\r\n\r\n  // Protection si pas authentifié\r\n  if (!user) {\r\n    return null\r\n  }\r\n\r\n  if (loading || isLoading) {\r\n    return (\r\n      <div style={{ \r\n        minHeight: '100vh',\r\n        backgroundColor: '#ffffff',\r\n        padding: '40px 20px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n      }}>\r\n        <div style={{ textAlign: 'center', color: '#666' }}>\r\n          <div style={{ fontSize: '24px', marginBottom: '10px' }}>⏳</div>\r\n          <div>Chargement de la messagerie...</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div style={{ \r\n      minHeight: '100vh',\r\n      backgroundColor: '#ffffff',\r\n      padding: '40px 20px',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'flex-start'\r\n    }}>\r\n      <div style={{\r\n        width: '100%',\r\n        maxWidth: '450px',\r\n        margin: '0 auto'\r\n      }}>\r\n        \r\n        {/* En-tête */}\r\n        <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n          <h1 style={{\r\n            fontSize: '28px',\r\n            fontWeight: 'bold',\r\n            marginBottom: '15px',\r\n            color: '#333'\r\n          }}>\r\n            Ma Messagerie\r\n          </h1>\r\n\r\n          {/* Indicateur messages non lus */}\r\n          {messagesNonLus > 0 && (\r\n            <div style={{\r\n              padding: '12px 20px',\r\n              borderRadius: '25px',\r\n              backgroundColor: '#fee2e2',\r\n              border: '2px solid #fecaca',\r\n              color: '#991b1b',\r\n              fontSize: '16px',\r\n              fontWeight: 'bold',\r\n              marginBottom: '15px',\r\n              display: 'inline-block'\r\n            }}>\r\n              {messagesNonLus} nouveau{messagesNonLus > 1 ? 'x' : ''} message{messagesNonLus > 1 ? 's' : ''}\r\n            </div>\r\n          )}\r\n\r\n          {/* Bouton nouveau message - remonté */}\r\n          <div style={{ marginBottom: '25px' }}>\r\n            <button\r\n              onClick={() => setVue('nouveau')}\r\n              disabled={sending}\r\n              style={{\r\n                width: '100%',\r\n                backgroundColor: '#10b981',\r\n                color: 'white',\r\n                padding: '18px',\r\n                borderRadius: '20px',\r\n                border: 'none',\r\n                fontSize: '18px',\r\n                fontWeight: 'bold',\r\n                cursor: sending ? 'not-allowed' : 'pointer',\r\n                transition: 'transform 0.2s ease',\r\n                boxShadow: '0 4px 12px rgba(16, 185, 129, 0.3)',\r\n                opacity: sending ? 0.6 : 1\r\n              }}\r\n              onMouseOver={(e) => !sending && (e.target.style.transform = 'translateY(-2px)')}\r\n              onMouseOut={(e) => !sending && (e.target.style.transform = 'translateY(0)')}\r\n            >\r\n              Envoyer un message\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* VUE LISTE DES MESSAGES */}\r\n        {vue === 'liste' && (\r\n          <>\r\n            {/* Onglets */}\r\n            <div style={{\r\n              display: 'flex',\r\n              marginBottom: '20px',\r\n              backgroundColor: '#f8f9fa',\r\n              borderRadius: '20px',\r\n              padding: '6px',\r\n              gap: '4px'\r\n            }}>\r\n              <button\r\n                onClick={() => setOngletActif('non_lus')}\r\n                style={{\r\n                  flex: 1,\r\n                  padding: '14px 10px',\r\n                  borderRadius: '16px',\r\n                  border: ongletActif === 'non_lus' ? 'none' : '2px solid #ef4444',\r\n                  fontSize: '14px',\r\n                  fontWeight: 'bold',\r\n                  cursor: 'pointer',\r\n                  backgroundColor: ongletActif === 'non_lus' ? '#ef4444' : 'transparent',\r\n                  color: ongletActif === 'non_lus' ? 'white' : '#ef4444',\r\n                  transition: 'all 0.2s ease'\r\n                }}\r\n              >\r\n                Non lus ({messages.filter(m => !m.lu && !m.archive).length})\r\n              </button>\r\n              <button\r\n                onClick={() => setOngletActif('lus')}\r\n                style={{\r\n                  flex: 1,\r\n                  padding: '14px 10px',\r\n                  borderRadius: '16px',\r\n                  border: ongletActif === 'lus' ? 'none' : '2px solid #10b981',\r\n                  fontSize: '14px',\r\n                  fontWeight: 'bold',\r\n                  cursor: 'pointer',\r\n                  backgroundColor: ongletActif === 'lus' ? '#10b981' : 'transparent',\r\n                  color: ongletActif === 'lus' ? 'white' : '#10b981',\r\n                  transition: 'all 0.2s ease'\r\n                }}\r\n              >\r\n                Lus ({messages.filter(m => m.lu && !m.archive).length})\r\n              </button>\r\n              <button\r\n                onClick={() => setOngletActif('archives')}\r\n                style={{\r\n                  flex: 1,\r\n                  padding: '14px 10px',\r\n                  borderRadius: '16px',\r\n                  border: ongletActif === 'archives' ? 'none' : '2px solid #f59e0b',\r\n                  fontSize: '14px',\r\n                  fontWeight: 'bold',\r\n                  cursor: 'pointer',\r\n                  backgroundColor: ongletActif === 'archives' ? '#f59e0b' : 'transparent',\r\n                  color: ongletActif === 'archives' ? 'white' : '#f59e0b',\r\n                  transition: 'all 0.2s ease'\r\n                }}\r\n              >\r\n                Archives ({messages.filter(m => m.archive).length})\r\n              </button>\r\n            </div>\r\n\r\n            {/* Liste des messages filtrés */}\r\n            <div style={{ marginBottom: '25px' }}>\r\n              {getMessagesFiltres().length === 0 ? (\r\n                <div style={{\r\n                  textAlign: 'center',\r\n                  padding: '50px 20px',\r\n                  color: '#666'\r\n                }}>\r\n                  <div style={{ fontSize: '18px', marginBottom: '20px' }}>\r\n                    {ongletActif === 'non_lus' ? 'Aucun message non lu' :\r\n                     ongletActif === 'lus' ? 'Aucun message lu' :\r\n                     'Aucun message archivé'}\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div style={{ \r\n                  maxHeight: '500px',\r\n                  overflowY: 'auto',\r\n                  paddingRight: '5px'\r\n                }}>\r\n                  {getMessagesFiltres()\r\n                    .sort((a, b) => {\r\n                      const dateA = new Date(a.created_at)\r\n                      const dateB = new Date(b.created_at)\r\n                      return dateB - dateA\r\n                    })\r\n                    .map((message) => (\r\n                    <div\r\n                      key={message.id}\r\n                      onClick={() => ouvrirMessage(message)}\r\n                      style={{\r\n                        backgroundColor: message.lu ? '#f9fafb' : '#eff6ff',\r\n                        border: `3px solid ${message.archive ? '#f59e0b' : message.lu ? '#e5e7eb' : '#3b82f6'}`,\r\n                        borderRadius: '20px',\r\n                        padding: '18px',\r\n                        marginBottom: '15px',\r\n                        cursor: 'pointer',\r\n                        transition: 'all 0.2s ease'\r\n                      }}\r\n                      onMouseOver={(e) => {\r\n                        e.currentTarget.style.transform = 'translateY(-3px)'\r\n                        e.currentTarget.style.boxShadow = '0 8px 25px rgba(0,0,0,0.1)'\r\n                      }}\r\n                      onMouseOut={(e) => {\r\n                        e.currentTarget.style.transform = 'translateY(0)'\r\n                        e.currentTarget.style.boxShadow = 'none'\r\n                      }}\r\n                    >\r\n                      <div style={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                        alignItems: 'center',\r\n                        marginBottom: '10px'\r\n                      }}>\r\n                        <div style={{\r\n                          fontWeight: message.lu ? 'normal' : 'bold',\r\n                          color: '#333',\r\n                          fontSize: '16px'\r\n                        }}>\r\n                          {message.expediteur}\r\n                        </div>\r\n                        <div style={{\r\n                          fontSize: '14px',\r\n                          color: '#666'\r\n                        }}>\r\n                          {message.date} {message.heure}\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div style={{\r\n                        fontWeight: message.lu ? 'normal' : 'bold',\r\n                        color: '#333',\r\n                        fontSize: '17px',\r\n                        marginBottom: '8px'\r\n                      }}>\r\n                        {message.objet}\r\n                      </div>\r\n\r\n                      <div style={{\r\n                        color: '#666',\r\n                        fontSize: '15px',\r\n                        overflow: 'hidden',\r\n                        textOverflow: 'ellipsis',\r\n                        whiteSpace: 'nowrap'\r\n                      }}>\r\n                        {message.contenu.substring(0, 80)}...\r\n                      </div>\r\n\r\n                      {!message.lu && !message.archive && (\r\n                        <div style={{\r\n                          marginTop: '10px',\r\n                          display: 'inline-block',\r\n                          backgroundColor: '#ef4444',\r\n                          color: 'white',\r\n                          fontSize: '12px',\r\n                          padding: '4px 12px',\r\n                          borderRadius: '15px',\r\n                          fontWeight: 'bold'\r\n                        }}>\r\n                          NOUVEAU\r\n                        </div>\r\n                      )}\r\n\r\n                      {message.archive && (\r\n                        <div style={{\r\n                          marginTop: '10px',\r\n                          display: 'inline-block',\r\n                          backgroundColor: '#f59e0b',\r\n                          color: 'white',\r\n                          fontSize: '12px',\r\n                          padding: '4px 12px',\r\n                          borderRadius: '15px',\r\n                          fontWeight: 'bold'\r\n                        }}>\r\n                          ARCHIVÉ\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {/* VUE LECTURE MESSAGE */}\r\n        {vue === 'lecture' && selectedMessage && (\r\n          <>\r\n            {/* Header lecture */}\r\n            <div style={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'space-between',\r\n              marginBottom: '25px',\r\n              paddingBottom: '20px',\r\n              borderBottom: '3px solid #e5e7eb'\r\n            }}>\r\n              <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                <button\r\n                  onClick={() => setVue('liste')}\r\n                  style={{\r\n                    backgroundColor: '#6b7280',\r\n                    color: 'white',\r\n                    border: 'none',\r\n                    padding: '12px 18px',\r\n                    borderRadius: '15px',\r\n                    fontSize: '16px',\r\n                    cursor: 'pointer',\r\n                    marginRight: '15px',\r\n                    fontWeight: 'bold'\r\n                  }}\r\n                >\r\n                  Retour\r\n                </button>\r\n                <div style={{\r\n                  fontSize: '20px',\r\n                  fontWeight: 'bold',\r\n                  color: '#333'\r\n                }}>\r\n                  Lecture\r\n                </div>\r\n              </div>\r\n\r\n              {/* Actions selon l'état du message */}\r\n              <div style={{ display: 'flex', gap: '8px' }}>\r\n                {!selectedMessage.archive ? (\r\n                  <button\r\n                    onClick={() => archiverMessage(selectedMessage.id)}\r\n                    style={{\r\n                      backgroundColor: '#f59e0b',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      padding: '12px 18px',\r\n                      borderRadius: '15px',\r\n                      fontSize: '16px',\r\n                      cursor: 'pointer',\r\n                      fontWeight: 'bold'\r\n                    }}\r\n                  >\r\n                    Archiver\r\n                  </button>\r\n                ) : (\r\n                  <button\r\n                    onClick={() => supprimerMessage(selectedMessage.id)}\r\n                    style={{\r\n                      backgroundColor: '#dc2626',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      padding: '12px 18px',\r\n                      borderRadius: '15px',\r\n                      fontSize: '16px',\r\n                      cursor: 'pointer',\r\n                      fontWeight: 'bold'\r\n                    }}\r\n                  >\r\n                    Supprimer\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Contenu message */}\r\n            <div style={{\r\n              backgroundColor: '#f9fafb',\r\n              borderRadius: '20px',\r\n              padding: '25px',\r\n              marginBottom: '25px'\r\n            }}>\r\n              <div style={{\r\n                marginBottom: '20px',\r\n                paddingBottom: '20px',\r\n                borderBottom: '2px solid #e5e7eb'\r\n              }}>\r\n                <div style={{ marginBottom: '10px' }}>\r\n                  <span style={{ fontWeight: 'bold', color: '#333', fontSize: '16px' }}>De : </span>\r\n                  <span style={{ color: '#666', fontSize: '16px' }}>{selectedMessage.expediteur}</span>\r\n                </div>\r\n                <div style={{ marginBottom: '10px' }}>\r\n                  <span style={{ fontWeight: 'bold', color: '#333', fontSize: '16px' }}>Objet : </span>\r\n                  <span style={{ color: '#333', fontWeight: 'bold', fontSize: '16px' }}>{selectedMessage.objet}</span>\r\n                </div>\r\n                <div style={{ marginBottom: selectedMessage.archive ? '10px' : '0' }}>\r\n                  <span style={{ fontWeight: 'bold', color: '#333', fontSize: '16px' }}>Date : </span>\r\n                  <span style={{ color: '#666', fontSize: '16px' }}>\r\n                    {selectedMessage.date} à {selectedMessage.heure}\r\n                  </span>\r\n                </div>\r\n                {selectedMessage.archive && selectedMessage.date_archivage && (\r\n                  <div>\r\n                    <span style={{ fontWeight: 'bold', color: '#f59e0b', fontSize: '16px' }}>Archivé le : </span>\r\n                    <span style={{ color: '#f59e0b', fontSize: '16px' }}>\r\n                      {selectedMessage.date_archivage}\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div style={{\r\n                color: '#374151',\r\n                fontSize: '17px',\r\n                lineHeight: '1.6',\r\n                whiteSpace: 'pre-wrap'\r\n              }}>\r\n                {selectedMessage.contenu}\r\n              </div>\r\n\r\n              {/* Avertissement pour messages archivés */}\r\n              {selectedMessage.archive && (\r\n                <div style={{\r\n                  marginTop: '15px',\r\n                  padding: '10px',\r\n                  backgroundColor: '#fef3c7',\r\n                  border: '1px solid #fbbf24',\r\n                  borderRadius: '8px',\r\n                  fontSize: '12px',\r\n                  color: '#92400e'\r\n                }}>\r\n                  ⚠️ <strong>Message archivé</strong> - Sera supprimé automatiquement après 3 mois d'archivage\r\n                </div>\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {/* VUE NOUVEAU MESSAGE */}\r\n        {vue === 'nouveau' && (\r\n          <>\r\n            {/* Header nouveau */}\r\n            <div style={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              marginBottom: '25px',\r\n              paddingBottom: '20px',\r\n              borderBottom: '3px solid #e5e7eb'\r\n            }}>\r\n              <button\r\n                onClick={() => setVue('liste')}\r\n                disabled={sending}\r\n                style={{\r\n                  backgroundColor: '#6b7280',\r\n                  color: 'white',\r\n                  border: 'none',\r\n                  padding: '12px 18px',\r\n                  borderRadius: '15px',\r\n                  fontSize: '16px',\r\n                  cursor: sending ? 'not-allowed' : 'pointer',\r\n                  marginRight: '15px',\r\n                  fontWeight: 'bold',\r\n                  opacity: sending ? 0.6 : 1\r\n                }}\r\n              >\r\n                Annuler\r\n              </button>\r\n              <div style={{\r\n                fontSize: '20px',\r\n                fontWeight: 'bold',\r\n                color: '#333'\r\n              }}>\r\n                Nouveau message\r\n              </div>\r\n            </div>\r\n\r\n            {/* Formulaire */}\r\n            <div style={{ marginBottom: '25px' }}>\r\n              <div style={{ marginBottom: '20px' }}>\r\n                <label style={{\r\n                  display: 'block',\r\n                  fontSize: '16px',\r\n                  fontWeight: 'bold',\r\n                  color: '#374151',\r\n                  marginBottom: '8px'\r\n                }}>\r\n                  À : Coordination ACLEF\r\n                </label>\r\n                <div style={{\r\n                  padding: '15px',\r\n                  backgroundColor: '#f3f4f6',\r\n                  borderRadius: '15px',\r\n                  color: '#666',\r\n                  fontSize: '16px'\r\n                }}>\r\n                  Votre message sera envoyé à l'équipe de coordination\r\n                </div>\r\n              </div>\r\n\r\n              <div style={{ marginBottom: '20px' }}>\r\n                <label style={{\r\n                  display: 'block',\r\n                  fontSize: '16px',\r\n                  fontWeight: 'bold',\r\n                  color: '#374151',\r\n                  marginBottom: '8px'\r\n                }}>\r\n                  Objet *\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={objet}\r\n                  onChange={(e) => setObjet(e.target.value)}\r\n                  placeholder=\"De quoi voulez-vous parler ?\"\r\n                  disabled={sending}\r\n                  style={{\r\n                    width: '100%',\r\n                    padding: '15px',\r\n                    border: '3px solid #e5e7eb',\r\n                    borderRadius: '15px',\r\n                    fontSize: '18px',\r\n                    boxSizing: 'border-box',\r\n                    backgroundColor: sending ? '#f3f4f6' : 'white'\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n              <div style={{ marginBottom: '25px' }}>\r\n                <label style={{\r\n                  display: 'block',\r\n                  fontSize: '16px',\r\n                  fontWeight: 'bold',\r\n                  color: '#374151',\r\n                  marginBottom: '8px'\r\n                }}>\r\n                  Votre message *\r\n                </label>\r\n                <textarea\r\n                  value={nouveauMessage}\r\n                  onChange={(e) => setNouveauMessage(e.target.value)}\r\n                  placeholder=\"Écrivez votre message ici...\"\r\n                  rows={6}\r\n                  disabled={sending}\r\n                  style={{\r\n                    width: '100%',\r\n                    padding: '15px',\r\n                    border: '3px solid #e5e7eb',\r\n                    borderRadius: '15px',\r\n                    fontSize: '18px',\r\n                    resize: 'vertical',\r\n                    boxSizing: 'border-box',\r\n                    backgroundColor: sending ? '#f3f4f6' : 'white'\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n              <button\r\n                onClick={envoyerMessage}\r\n                disabled={sending}\r\n                style={{\r\n                  width: '100%',\r\n                  backgroundColor: '#10b981',\r\n                  color: 'white',\r\n                  padding: '18px',\r\n                  borderRadius: '20px',\r\n                  border: 'none',\r\n                  fontSize: '18px',\r\n                  fontWeight: 'bold',\r\n                  cursor: sending ? 'not-allowed' : 'pointer',\r\n                  transition: 'transform 0.2s ease',\r\n                  boxShadow: '0 4px 12px rgba(16, 185, 129, 0.3)',\r\n                  opacity: sending ? 0.6 : 1\r\n                }}\r\n                onMouseOver={(e) => !sending && (e.target.style.transform = 'translateY(-2px)')}\r\n                onMouseOut={(e) => !sending && (e.target.style.transform = 'translateY(0)')}\r\n              >\r\n                {sending ? 'Envoi en cours...' : 'Envoyer le message'}\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {/* Bouton retour accueil */}\r\n        <button\r\n          onClick={() => router.push('/formateur')}\r\n          style={{\r\n            width: '100%',\r\n            padding: '12px',\r\n            background: '#6b7280',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '8px',\r\n            fontSize: '16px',\r\n            fontWeight: '600',\r\n            cursor: 'pointer',\r\n            marginTop: '16px',\r\n            transition: 'transform 0.2s'\r\n          }}\r\n        >\r\n          Retour à l'accueil\r\n        </button>\r\n\r\n        {/* Stats */}\r\n        <div style={{\r\n          marginTop: '20px',\r\n          fontSize: '14px',\r\n          color: '#6b7280',\r\n          textAlign: 'center'\r\n        }}>\r\n          {messages.length} messages • {messagesNonLus} non lus\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}",
          "taille": 28307,
          "lignes": 814,
          "dateModif": "2025-08-28T19:00:40.402Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../../lib/supabaseClient'\r\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext'\r\n\r\nexport default function MaMessagerie() {\r\n  const [vue, setVue] = useState('liste') // 'liste', 'lecture', 'nouveau'\r\n  const [ongletActif, setOngletActif] = useState('non_lus') // 'non_lus', 'lus', 'archives'\r\n  const [selectedMessage, setSelectedMessage] = useState(null)\r\n  const [nouveauMessage, setNouveauMessage] = useState('')\r\n  const [objet, setObjet] = useState('')\r\n  const [messages, setMessages] = useState([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [sending, setSending] = useState(false)\r\n  const { user, isLoading, isAuthenticated } = useFormateurAuth()\r\n  const router = useRouter()\r\n\r\n  // Protection authentification\r\n  useEffect(() => {\r\n    if (!isLoading && !isAuthenticated) {\r\n      router.push('/formateur/login')\r\n    }\r\n  }, [isLoading, isAuthenticated, router])\r\n\r\n  // Charger les messages quand l'utilisateur est connecté\r\n  useEffect(() => {\r\n    if (user && user.id) {\r\n      chargerMessages(user.id)\r\n      setLoading(false)\r\n    }\r\n  }, [user])\r\n\r\n  const chargerMessages = async (formateurId) => {\r\n    try {\r\n      // Charger messages reçus par ce formateur\r\n      const { data: messagesData, error } = await supabase\r\n        .from('messages')\r\n        .select('*')\r\n        .eq('destinataire_id', formateurId)\r\n        .order('created_at', { ascending: false })\r\n\r\n      if (error) {\r\n        console.error('Erreur chargement messages:', error)\r\n        return\r\n      }\r\n\r\n      setMessages(messagesData || [])\r\n      console.log('Messages chargés:', messagesData?.length || 0)\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur:', error)\r\n    }\r\n  }\r\n\r\n  // Envoyer un message vers admin\r\n  const envoyerMessage = async () => {\r\n    if (!objet.trim() || !nouveauMessage.trim()) {\r\n      alert('⚠️ Veuillez remplir l\\'objet et le message')\r\n      return\r\n    }\r\n\r\n    if (!user?.id) {\r\n      alert('⚠️ Erreur: Utilisateur non identifié')\r\n      return\r\n    }\r\n\r\n    try {\r\n      setSending(true)\r\n      \r\n      const { error } = await supabase\r\n        .from('messages')\r\n        .insert({\r\n          expediteur_id: user.id,\r\n          destinataire_id: null, // null = admin\r\n          expediteur: `${user.prenom} ${user.nom}`,\r\n          destinataire: 'Coordination ACLEF',\r\n          objet: objet.trim(),\r\n          contenu: nouveauMessage.trim(),\r\n          type: 'messagerie',\r\n          lu: false,\r\n          archive: false,\r\n          statut_validation: 'nouveau',\r\n          date: new Date().toISOString().split('T')[0],\r\n          heure: new Date().toTimeString().slice(0, 5)\r\n        })\r\n\r\n      if (error) {\r\n        console.error('Erreur envoi message:', error)\r\n        alert('❌ Erreur lors de l\\'envoi: ' + error.message)\r\n        return\r\n      }\r\n\r\n      console.log('Message envoyé vers admin')\r\n      alert('✅ Message envoyé avec succès !')\r\n      \r\n      // Reset formulaire\r\n      setObjet('')\r\n      setNouveauMessage('')\r\n      setVue('liste')\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur:', error)\r\n      alert('❌ Erreur: ' + error.message)\r\n    } finally {\r\n      setSending(false)\r\n    }\r\n  }\r\n\r\n  // Marquer comme lu\r\n  const marquerCommeLu = async (messageId) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('messages')\r\n        .update({ lu: true })\r\n        .eq('id', messageId)\r\n\r\n      if (error) throw error\r\n\r\n      // Recharger messages\r\n      if (user?.id) {\r\n        chargerMessages(user.id)\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur marquer lu:', error)\r\n      alert('Erreur: ' + error.message)\r\n    }\r\n  }\r\n\r\n  // Archiver un message\r\n  const archiverMessage = async (messageId) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('messages')\r\n        .update({ \r\n          archive: true,\r\n          lu: true, // Marquer comme lu aussi\r\n          date_archivage: new Date().toISOString().split('T')[0]\r\n        })\r\n        .eq('id', messageId)\r\n\r\n      if (error) throw error\r\n\r\n      alert('📁 Message archivé avec succès !')\r\n      \r\n      // Recharger et aller à l'onglet archives\r\n      if (user?.id) {\r\n        chargerMessages(user.id)\r\n      }\r\n      setOngletActif('archives')\r\n      setVue('liste')\r\n      setSelectedMessage(null)\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur archivage:', error)\r\n      alert('Erreur archivage: ' + error.message)\r\n    }\r\n  }\r\n\r\n  // Supprimer définitivement un message\r\n  const supprimerMessage = async (messageId) => {\r\n    if (!confirm('⚠️ Êtes-vous sûr de vouloir supprimer définitivement ce message ?\\n\\nCette action est irréversible.')) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('messages')\r\n        .delete()\r\n        .eq('id', messageId)\r\n\r\n      if (error) throw error\r\n\r\n      alert('🗑️ Message supprimé définitivement !')\r\n      \r\n      // Recharger messages\r\n      if (user?.id) {\r\n        chargerMessages(user.id)\r\n      }\r\n      setVue('liste')\r\n      setSelectedMessage(null)\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur suppression:', error)\r\n      alert('Erreur suppression: ' + error.message)\r\n    }\r\n  }\r\n\r\n  // Ouvrir un message\r\n  const ouvrirMessage = (message) => {\r\n    setSelectedMessage(message)\r\n    setVue('lecture')\r\n    // Marquer comme lu automatiquement si pas encore lu\r\n    if (!message.lu) {\r\n      marquerCommeLu(message.id)\r\n    }\r\n  }\r\n\r\n  // Filtrer les messages selon l'onglet actif\r\n  const getMessagesFiltres = () => {\r\n    switch (ongletActif) {\r\n      case 'non_lus':\r\n        return messages.filter(m => !m.lu && !m.archive)\r\n      case 'lus':\r\n        return messages.filter(m => m.lu && !m.archive)\r\n      case 'archives':\r\n        return messages.filter(m => m.archive)\r\n      default:\r\n        return []\r\n    }\r\n  }\r\n\r\n  // Compter messages non lus\r\n  const messagesNonLus = messages.filter(m => !m.lu && !m.archive).length\r\n\r\n  // Protection si pas authentifié\r\n  if (!user) {\r\n    return null\r\n  }\r\n\r\n  if (loading || isLoading) {\r\n    return (\r\n      <div style={{ \r\n        minHeight: '100vh',\r\n        backgroundColor: '#ffffff',\r\n        padding: '40px 20px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n      }}>\r\n        <div style={{ textAlign: 'center', color: '#666' }}>\r\n          <div style={{ fontSize: '24px', marginBottom: '10px' }}>⏳</div>\r\n          <div>Chargement de la messagerie...</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div style={{ \r\n      minHeight: '100vh',\r\n      backgroundColor: '#ffffff',\r\n      padding: '40px 20px',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'flex-start'\r\n    }}>\r\n      <div style={{\r\n        width: '100%',\r\n        maxWidth: '450px',\r\n        margin: '0 auto'\r\n      }}>\r\n        \r\n        {/* En-tête */}\r\n        <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n          <h1 style={{\r\n            fontSize: '28px',\r\n            fontWeight: 'bold',\r\n            marginBottom: '15px',\r\n            color: '#333'\r\n          }}>\r\n            Ma Messagerie\r\n          </h1>\r\n\r\n          {/* Indicateur messages non lus */}\r\n          {messagesNonLus > 0 && (\r\n            <div style={{\r\n              padding: '12px 20px',\r\n              borderRadius: '25px',\r\n              backgroundColor: '#fee2e2',\r\n              border: '2px solid #fecaca',\r\n              color: '#991b1b',\r\n              fontSize: '16px',\r\n              fontWeight: 'bold',\r\n              marginBottom: '15px',\r\n              display: 'inline-block'\r\n            }}>\r\n              {messagesNonLus} nouveau{messagesNonLus > 1 ? 'x' : ''} message{messagesNonLus > 1 ? 's' : ''}\r\n            </div>\r\n          )}\r\n\r\n          {/* Bouton nouveau message - remonté */}\r\n          <div style={{ marginBottom: '25px' }}>\r\n            <button\r\n              onClick={() => setVue('nouveau')}\r\n              disabled={sending}\r\n              style={{\r\n                width: '100%',\r\n                backgroundColor: '#10b981',\r\n                color: 'white',\r\n                padding: '18px',\r\n                borderRadius: '20px',\r\n                border: 'none',\r\n                fontSize: '18px',\r\n                fontWeight: 'bold',\r\n                cursor: sending ? 'not-allowed' : 'pointer',\r\n                transition: 'transform 0.2s ease',\r\n                boxShadow: '0 4px 12px rgba(16, 185, 129, 0.3)',\r\n                opacity: sending ? 0.6 : 1\r\n              }}\r\n              onMouseOver={(e) => !sending && (e.target.style.transform = 'translateY(-2px)')}\r\n              onMouseOut={(e) => !sending && (e.target.style.transform = 'translateY(0)')}\r\n            >\r\n              Envoyer un message\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* VUE LISTE DES MESSAGES */}\r\n        {vue === 'liste' && (\r\n          <>\r\n            {/* Onglets */}\r\n            <div style={{\r\n              display: 'flex',\r\n              marginBottom: '20px',\r\n              backgroundColor: '#f8f9fa',\r\n              borderRadius: '20px',\r\n              padding: '6px',\r\n              gap: '4px'\r\n            }}>\r\n              <button\r\n                onClick={() => setOngletActif('non_lus')}\r\n                style={{\r\n                  flex: 1,\r\n                  padding: '14px 10px',\r\n                  borderRadius: '16px',\r\n                  border: ongletActif === 'non_lus' ? 'none' : '2px solid #ef4444',\r\n                  fontSize: '14px',\r\n                  fontWeight: 'bold',\r\n                  cursor: 'pointer',\r\n                  backgroundColor: ongletActif === 'non_lus' ? '#ef4444' : 'transparent',\r\n                  color: ongletActif === 'non_lus' ? 'white' : '#ef4444',\r\n                  transition: 'all 0.2s ease'\r\n                }}\r\n              >\r\n                Non lus ({messages.filter(m => !m.lu && !m.archive).length})\r\n              </button>\r\n              <button\r\n                onClick={() => setOngletActif('lus')}\r\n                style={{\r\n                  flex: 1,\r\n                  padding: '14px 10px',\r\n                  borderRadius: '16px',\r\n                  border: ongletActif === 'lus' ? 'none' : '2px solid #10b981',\r\n                  fontSize: '14px',\r\n                  fontWeight: 'bold',\r\n                  cursor: 'pointer',\r\n                  backgroundColor: ongletActif === 'lus' ? '#10b981' : 'transparent',\r\n                  color: ongletActif === 'lus' ? 'white' : '#10b981',\r\n                  transition: 'all 0.2s ease'\r\n                }}\r\n              >\r\n                Lus ({messages.filter(m => m.lu && !m.archive).length})\r\n              </button>\r\n              <button\r\n                onClick={() => setOngletActif('archives')}\r\n                style={{\r\n                  flex: 1,\r\n                  padding: '14px 10px',\r\n                  borderRadius: '16px',\r\n                  border: ongletActif === 'archives' ? 'none' : '2px solid #f59e0b',\r\n                  fontSize: '14px',\r\n                  fontWeight: 'bold',\r\n                  cursor: 'pointer',\r\n                  backgroundColor: ongletActif === 'archives' ? '#f59e0b' : 'transparent',\r\n                  color: ongletActif === 'archives' ? 'white' : '#f59e0b',\r\n                  transition: 'all 0.2s ease'\r\n                }}\r\n              >\r\n                Archives ({messages.filter(m => m.archive).length})\r\n              </button>\r\n            </div>\r\n\r\n            {/* Liste des messages filtrés */}\r\n            <div style={{ marginBottom: '25px' }}>\r\n              {getMessagesFiltres().length === 0 ? (\r\n                <div style={{\r\n                  textAlign: 'center',\r\n                  padding: '50px 20px',\r\n                  color: '#666'\r\n                }}>\r\n                  <div style={{ fontSize: '18px', marginBottom: '20px' }}>\r\n                    {ongletActif === 'non_lus' ? 'Aucun message non lu' :\r\n                     ongletActif === 'lus' ? 'Aucun message lu' :\r\n                     'Aucun message archivé'}\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div style={{ \r\n                  maxHeight: '500px',\r\n                  overflowY: 'auto',\r\n                  paddingRight: '5px'\r\n                }}>\r\n                  {getMessagesFiltres()\r\n                    .sort((a, b) => {\r\n                      const dateA = new Date(a.created_at)\r\n                      const dateB = new Date(b.created_at)\r\n                      return dateB - dateA\r\n                    })\r\n                    .map((message) => (\r\n                    <div\r\n                      key={message.id}\r\n                      onClick={() => ouvrirMessage(message)}\r\n                      style={{\r\n                        backgroundColor: message.lu ? '#f9fafb' : '#eff6ff',\r\n                        border: `3px solid ${message.archive ? '#f59e0b' : message.lu ? '#e5e7eb' : '#3b82f6'}`,\r\n                        borderRadius: '20px',\r\n                        padding: '18px',\r\n                        marginBottom: '15px',\r\n                        cursor: 'pointer',\r\n                        transition: 'all 0.2s ease'\r\n                      }}\r\n                      onMouseOver={(e) => {\r\n                        e.currentTarget.style.transform = 'translateY(-3px)'\r\n                        e.currentTarget.style.boxShadow = '0 8px 25px rgba(0,0,0,0.1)'\r\n                      }}\r\n                      onMouseOut={(e) => {\r\n                        e.currentTarget.style.transform = 'translateY(0)'\r\n                        e.currentTarget.style.boxShadow = 'none'\r\n                      }}\r\n                    >\r\n                      <div style={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                        alignItems: 'center',\r\n                        marginBottom: '10px'\r\n                      }}>\r\n                        <div style={{\r\n                          fontWeight: message.lu ? 'normal' : 'bold',\r\n                          color: '#333',\r\n                          fontSize: '16px'\r\n                        }}>\r\n                          {message.expediteur}\r\n                        </div>\r\n                        <div style={{\r\n                          fontSize: '14px',\r\n                          color: '#666'\r\n                        }}>\r\n                          {message.date} {message.heure}\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div style={{\r\n                        fontWeight: message.lu ? 'normal' : 'bold',\r\n                        color: '#333',\r\n                        fontSize: '17px',\r\n                        marginBottom: '8px'\r\n                      }}>\r\n                        {message.objet}\r\n                      </div>\r\n\r\n                      <div style={{\r\n                        color: '#666',\r\n                        fontSize: '15px',\r\n                        overflow: 'hidden',\r\n                        textOverflow: 'ellipsis',\r\n                        whiteSpace: 'nowrap'\r\n                      }}>\r\n                        {message.contenu.substring(0, 80)}...\r\n                      </div>\r\n\r\n                      {!message.lu && !message.archive && (\r\n                        <div style={{\r\n                          marginTop: '10px',\r\n                          display: 'inline-block',\r\n                          backgroundColor: '#ef4444',\r\n                          color: 'white',\r\n                          fontSize: '12px',\r\n                          padding: '4px 12px',\r\n                          borderRadius: '15px',\r\n                          fontWeight: 'bold'\r\n                        }}>\r\n                          NOUVEAU\r\n                        </div>\r\n                      )}\r\n\r\n                      {message.archive && (\r\n                        <div style={{\r\n                          marginTop: '10px',\r\n                          display: 'inline-block',\r\n                          backgroundColor: '#f59e0b',\r\n                          color: 'white',\r\n                          fontSize: '12px',\r\n                          padding: '4px 12px',\r\n                          borderRadius: '15px',\r\n                          fontWeight: 'bold'\r\n                        }}>\r\n                          ARCHIVÉ\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {/* VUE LECTURE MESSAGE */}\r\n        {vue === 'lecture' && selectedMessage && (\r\n          <>\r\n            {/* Header lecture */}\r\n            <div style={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'space-between',\r\n              marginBottom: '25px',\r\n              paddingBottom: '20px',\r\n              borderBottom: '3px solid #e5e7eb'\r\n            }}>\r\n              <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                <button\r\n                  onClick={() => setVue('liste')}\r\n                  style={{\r\n                    backgroundColor: '#6b7280',\r\n                    color: 'white',\r\n                    border: 'none',\r\n                    padding: '12px 18px',\r\n                    borderRadius: '15px',\r\n                    fontSize: '16px',\r\n                    cursor: 'pointer',\r\n                    marginRight: '15px',\r\n                    fontWeight: 'bold'\r\n                  }}\r\n                >\r\n                  Retour\r\n                </button>\r\n                <div style={{\r\n                  fontSize: '20px',\r\n                  fontWeight: 'bold',\r\n                  color: '#333'\r\n                }}>\r\n                  Lecture\r\n                </div>\r\n              </div>\r\n\r\n              {/* Actions selon l'état du message */}\r\n              <div style={{ display: 'flex', gap: '8px' }}>\r\n                {!selectedMessage.archive ? (\r\n                  <button\r\n                    onClick={() => archiverMessage(selectedMessage.id)}\r\n                    style={{\r\n                      backgroundColor: '#f59e0b',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      padding: '12px 18px',\r\n                      borderRadius: '15px',\r\n                      fontSize: '16px',\r\n                      cursor: 'pointer',\r\n                      fontWeight: 'bold'\r\n                    }}\r\n                  >\r\n                    Archiver\r\n                  </button>\r\n                ) : (\r\n                  <button\r\n                    onClick={() => supprimerMessage(selectedMessage.id)}\r\n                    style={{\r\n                      backgroundColor: '#dc2626',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      padding: '12px 18px',\r\n                      borderRadius: '15px',\r\n                      fontSize: '16px',\r\n                      cursor: 'pointer',\r\n                      fontWeight: 'bold'\r\n                    }}\r\n                  >\r\n                    Supprimer\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Contenu message */}\r\n            <div style={{\r\n              backgroundColor: '#f9fafb',\r\n              borderRadius: '20px',\r\n              padding: '25px',\r\n              marginBottom: '25px'\r\n            }}>\r\n              <div style={{\r\n                marginBottom: '20px',\r\n                paddingBottom: '20px',\r\n                borderBottom: '2px solid #e5e7eb'\r\n              }}>\r\n                <div style={{ marginBottom: '10px' }}>\r\n                  <span style={{ fontWeight: 'bold', color: '#333', fontSize: '16px' }}>De : </span>\r\n                  <span style={{ color: '#666', fontSize: '16px' }}>{selectedMessage.expediteur}</span>\r\n                </div>\r\n                <div style={{ marginBottom: '10px' }}>\r\n                  <span style={{ fontWeight: 'bold', color: '#333', fontSize: '16px' }}>Objet : </span>\r\n                  <span style={{ color: '#333', fontWeight: 'bold', fontSize: '16px' }}>{selectedMessage.objet}</span>\r\n                </div>\r\n                <div style={{ marginBottom: selectedMessage.archive ? '10px' : '0' }}>\r\n                  <span style={{ fontWeight: 'bold', color: '#333', fontSize: '16px' }}>Date : </span>\r\n                  <span style={{ color: '#666', fontSize: '16px' }}>\r\n                    {selectedMessage.date} à {selectedMessage.heure}\r\n                  </span>\r\n                </div>\r\n                {selectedMessage.archive && selectedMessage.date_archivage && (\r\n                  <div>\r\n                    <span style={{ fontWeight: 'bold', color: '#f59e0b', fontSize: '16px' }}>Archivé le : </span>\r\n                    <span style={{ color: '#f59e0b', fontSize: '16px' }}>\r\n                      {selectedMessage.date_archivage}\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div style={{\r\n                color: '#374151',\r\n                fontSize: '17px',\r\n                lineHeight: '1.6',\r\n                whiteSpace: 'pre-wrap'\r\n              }}>\r\n                {selectedMessage.contenu}\r\n              </div>\r\n\r\n              {/* Avertissement pour messages archivés */}\r\n              {selectedMessage.archive && (\r\n                <div style={{\r\n                  marginTop: '15px',\r\n                  padding: '10px',\r\n                  backgroundColor: '#fef3c7',\r\n                  border: '1px solid #fbbf24',\r\n                  borderRadius: '8px',\r\n                  fontSize: '12px',\r\n                  color: '#92400e'\r\n                }}>\r\n                  ⚠️ <strong>Message archivé</strong> - Sera supprimé automatiquement après 3 mois d'archivage\r\n                </div>\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {/* VUE NOUVEAU MESSAGE */}\r\n        {vue === 'nouveau' && (\r\n          <>\r\n            {/* Header nouveau */}\r\n            <div style={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              marginBottom: '25px',\r\n              paddingBottom: '20px',\r\n              borderBottom: '3px solid #e5e7eb'\r\n            }}>\r\n              <button\r\n                onClick={() => setVue('liste')}\r\n                disabled={sending}\r\n                style={{\r\n                  backgroundColor: '#6b7280',\r\n                  color: 'white',\r\n                  border: 'none',\r\n                  padding: '12px 18px',\r\n                  borderRadius: '15px',\r\n                  fontSize: '16px',\r\n                  cursor: sending ? 'not-allowed' : 'pointer',\r\n                  marginRight: '15px',\r\n                  fontWeight: 'bold',\r\n                  opacity: sending ? 0.6 : 1\r\n                }}\r\n              >\r\n                Annuler\r\n              </button>\r\n              <div style={{\r\n                fontSize: '20px',\r\n                fontWeight: 'bold',\r\n                color: '#333'\r\n              }}>\r\n                Nouveau message\r\n              </div>\r\n            </div>\r\n\r\n            {/* Formulaire */}\r\n            <div style={{ marginBottom: '25px' }}>\r\n              <div style={{ marginBottom: '20px' }}>\r\n                <label style={{\r\n                  display: 'block',\r\n                  fontSize: '16px',\r\n                  fontWeight: 'bold',\r\n                  color: '#374151',\r\n                  marginBottom: '8px'\r\n                }}>\r\n                  À : Coordination ACLEF\r\n                </label>\r\n                <div style={{\r\n                  padding: '15px',\r\n                  backgroundColor: '#f3f4f6',\r\n                  borderRadius: '15px',\r\n                  color: '#666',\r\n                  fontSize: '16px'\r\n                }}>\r\n                  Votre message sera envoyé à l'équipe de coordination\r\n                </div>\r\n              </div>\r\n\r\n              <div style={{ marginBottom: '20px' }}>\r\n                <label style={{\r\n                  display: 'block',\r\n                  fontSize: '16px',\r\n                  fontWeight: 'bold',\r\n                  color: '#374151',\r\n                  marginBottom: '8px'\r\n                }}>\r\n                  Objet *\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={objet}\r\n                  onChange={(e) => setObjet(e.target.value)}\r\n                  placeholder=\"De quoi voulez-vous parler ?\"\r\n                  disabled={sending}\r\n                  style={{\r\n                    width: '100%',\r\n                    padding: '15px',\r\n                    border: '3px solid #e5e7eb',\r\n                    borderRadius: '15px',\r\n                    fontSize: '18px',\r\n                    boxSizing: 'border-box',\r\n                    backgroundColor: sending ? '#f3f4f6' : 'white'\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n              <div style={{ marginBottom: '25px' }}>\r\n                <label style={{\r\n                  display: 'block',\r\n                  fontSize: '16px',\r\n                  fontWeight: 'bold',\r\n                  color: '#374151',\r\n                  marginBottom: '8px'\r\n                }}>\r\n                  Votre message *\r\n                </label>\r\n                <textarea\r\n                  value={nouveauMessage}\r\n                  onChange={(e) => setNouveauMessage(e.target.value)}\r\n                  placeholder=\"Écrivez votre message ici...\"\r\n                  rows={6}\r\n                  disabled={sending}\r\n                  style={{\r\n                    width: '100%',\r\n                    padding: '15px',\r\n                    border: '3px solid #e5e7eb',\r\n                    borderRadius: '15px',\r\n                    fontSize: '18px',\r\n                    resize: 'vertical',\r\n                    boxSizing: 'border-box',\r\n                    backgroundColor: sending ? '#f3f4f6' : 'white'\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n              <button\r\n                onClick={envoyerMessage}\r\n                disabled={sending}\r\n                style={{\r\n                  width: '100%',\r\n                  backgroundColor: '#10b981',\r\n                  color: 'white',\r\n                  padding: '18px',\r\n                  borderRadius: '20px',\r\n                  border: 'none',\r\n                  fontSize: '18px',\r\n                  fontWeight: 'bold',\r\n                  cursor: sending ? 'not-allowed' : 'pointer',\r\n                  transition: 'transform 0.2s ease',\r\n                  boxShadow: '0 4px 12px rgba(16, 185, 129, 0.3)',\r\n                  opacity: sending ? 0.6 : 1\r\n                }}\r\n                onMouseOver={(e) => !sending && (e.target.style.transform = 'translateY(-2px)')}\r\n                onMouseOut={(e) => !sending && (e.target.style.transform = 'translateY(0)')}\r\n              >\r\n                {sending ? 'Envoi en cours...' : 'Envoyer le message'}\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {/* Bouton retour accueil */}\r\n        <button\r\n          onClick={() => router.push('/formateur')}\r\n          style={{\r\n            width: '100%',\r\n            padding: '12px',\r\n            background: '#6b7280',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '8px',\r\n            fontSize: '16px',\r\n            fontWeight: '600',\r\n            cursor: 'pointer',\r\n            marginTop: '16px',\r\n            transition: 'transform 0.2s'\r\n          }}\r\n        >\r\n          Retour à l'accueil\r\n        </button>\r\n\r\n        {/* Stats */}\r\n        <div style={{\r\n          marginTop: '20px',\r\n          fontSize: '14px',\r\n          color: '#6b7280',\r\n          textAlign: 'center'\r\n        }}>\r\n          {messages.length} messages • {messagesNonLus} non lus\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}",
          "taille": 28307,
          "lignes": 814,
          "dateModif": "2025-08-22T12:29:32.242Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/formateur/mon-planning-hebdo.js",
      "resultat": {
        "statut": "QUASI_IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect, useCallback } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../../lib/supabaseClient'\r\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext'\r\n\r\nexport default function MonPlanningHebdo() {\r\n    const { user, isLoading: authLoading, isAuthenticated } = useFormateurAuth()\r\n    const [planningType, setPlanningType] = useState([])\r\n    const [absencesValidees, setAbsencesValidees] = useState([])\r\n    const [planningCoordo, setPlanningCoordo] = useState([])\r\n    const [planningFinal, setPlanningFinal] = useState([])\r\n    const [lieux, setLieux] = useState([])\r\n    const [currentWeek, setCurrentWeek] = useState(new Date())\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [message, setMessage] = useState('')\r\n    const router = useRouter()\r\n\r\n    // ★★★ NOUVEAUX ÉTATS POUR ÉCOUTE ROI AMÉLIORÉE - ÉTAPE 4.1 ★★★\r\n    const [derniereCommande, setDerniereCommande] = useState(null)\r\n    const [commandesTraitees, setCommandesTraitees] = useState(new Set())\r\n    const [statsEcoute, setStatsEcoute] = useState({\r\n        commandesRecues: 0,\r\n        refreshEffectues: 0,\r\n        derniereActivite: null\r\n    })\r\n\r\n    const jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi']\r\n    const creneaux = ['Matin', 'AM']\r\n\r\n    // Protection authentification\r\n    useEffect(() => {\r\n        if (!authLoading && !isAuthenticated) {\r\n            router.push('/formateur/login')\r\n        }\r\n    }, [authLoading, isAuthenticated, router])\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            loadPlanningData()\r\n        }\r\n    }, [user, currentWeek])\r\n\r\n    // ★★★ FONCTION ROI AMÉLIORÉE - ÉCOUTE ACTIVE SPÉCIALISÉE FORMATEUR ★★★\r\n    const ecouterCommandesRoi = () => {\r\n        const interval = setInterval(() => {\r\n            const commande = localStorage.getItem('roiCommande');\r\n            if (commande) {\r\n                try {\r\n                    const parsed = JSON.parse(commande);\r\n                    \r\n                    // Vérifier si c'est une nouvelle commande ET si elle concerne ce formateur\r\n                    if (!commandesTraitees.has(parsed.timestamp)) {\r\n                        if (parsed.formateur_id === user?.id || parsed.action === 'refresh_complet') {\r\n                            console.log('📱 SUJET reçoit ordre du ROI:', parsed);\r\n                            \r\n                            setDerniereCommande(parsed);\r\n                            setCommandesTraitees(prev => new Set([...prev, parsed.timestamp]));\r\n                            \r\n                            // Traiter immédiatement l'ordre ROI\r\n                            executerOrdreRoiFormateur(parsed);\r\n                            \r\n                            // Mettre à jour stats écoute\r\n                            setStatsEcoute(prev => ({\r\n                                ...prev,\r\n                                commandesRecues: prev.commandesRecues + 1,\r\n                                derniereActivite: new Date().toLocaleTimeString()\r\n                            }));\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    console.error('❌ Erreur parsing commande ROI formateur:', error);\r\n                }\r\n            }\r\n        }, 500); // Check plus fréquent pour réactivité\r\n\r\n        return interval;\r\n    };\r\n\r\n    // ★★★ FONCTION ROI PRINCIPALE - EXÉCUTION ORDRES FORMATEUR ★★★\r\n    const executerOrdreRoiFormateur = async (commande) => {\r\n        try {\r\n            console.log(`📱 SUJET exécute ordre ROI: ${commande.action}`);\r\n            \r\n            switch (commande.action) {\r\n                case 'retirer_formateur':\r\n                    await traiterRetirerFormateurFormateur(commande);\r\n                    break;\r\n                    \r\n                case 'ajouter_formateur':\r\n                    await traiterAjouterFormateurFormateur(commande);\r\n                    break;\r\n                    \r\n                case 'remettre_disponible':\r\n                    await traiterRemettreDisponibleFormateur(commande);\r\n                    break;\r\n                    \r\n                case 'changer_statut':\r\n                    await traiterChangerStatutFormateur(commande);\r\n                    break;\r\n                    \r\n                case 'refresh_complet':\r\n                    await traiterRefreshCompletFormateur(commande);\r\n                    break;\r\n                    \r\n                default:\r\n                    console.log(`⚠️ Ordre ROI formateur non reconnu: ${commande.action}`);\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur exécution ordre ROI formateur:', error);\r\n        }\r\n    };\r\n\r\n    // ★★★ TRAITEMENTS SPÉCIFIQUES DES ORDRES ROI FORMATEUR ★★★\r\n    \r\n    const traiterRetirerFormateurFormateur = async (commande) => {\r\n        console.log(`🚫 SUJET traite retrait: ${commande.date}`);\r\n        \r\n        const transformationType = commande.details?.transformation || 'retrait_standard';\r\n        \r\n        setMessage(`📱 Vous êtes retiré le ${commande.date}\r\n🔄 Votre planning passe en ABSENT...`);\r\n        \r\n        // Refresh immédiat\r\n        await rechargerDonneesFormateur();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterAjouterFormateurFormateur = async (commande) => {\r\n        console.log(`✅ SUJET traite ajout: ${commande.date}`);\r\n        \r\n        const isDispoExcept = commande.details?.transformation?.includes('dispo_except');\r\n        \r\n        setMessage(`📱 Vous êtes ${\r\n            isDispoExcept ? 'DISPONIBLE EXCEPTIONNELLEMENT' : 'AJOUTÉ'\r\n        } le ${commande.date}\r\n🔄 Votre planning se met à jour...`);\r\n        \r\n        // Refresh immédiat\r\n        await rechargerDonneesFormateur();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterRemettreDisponibleFormateur = async (commande) => {\r\n        console.log(`🔄 SUJET traite remise disponible: ${commande.date}`);\r\n        \r\n        setMessage(`📱 Vous redevenez disponible le ${commande.date}\r\n🔄 Retour à votre planning type habituel...`);\r\n        \r\n        // Refresh immédiat\r\n        await rechargerDonneesFormateur();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterChangerStatutFormateur = async (commande) => {\r\n        console.log(`🔄 SUJET traite changement statut: ${commande.date}`);\r\n        \r\n        const transformation = commande.details?.transformation || 'changement_type';\r\n        \r\n        setMessage(`📱 Changement de statut (${transformation})\r\n🔄 Mise à jour de votre planning...`);\r\n        \r\n        // Refresh immédiat\r\n        await rechargerDonneesFormateur();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterRefreshCompletFormateur = async (commande) => {\r\n        console.log('🔄 SUJET effectue refresh complet sur ordre ROI');\r\n        \r\n        setMessage(`📱 Refresh complet de votre planning\r\n🔄 Rechargement total en cours...`);\r\n        \r\n        // Refresh complet\r\n        await rechargerToutesDonneesFormateur();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    // ★★★ FONCTIONS DE RECHARGEMENT OPTIMISÉES FORMATEUR ★★★\r\n    \r\n    const rechargerDonneesFormateur = async () => {\r\n        try {\r\n            console.log('🔄 Rechargement données formateur...');\r\n            \r\n            // Recharger absences validées\r\n            const weekDates = getWeekDates(currentWeek)\r\n            const startDate = weekDates[0].toISOString().split('T')[0]\r\n            const endDate = weekDates[4].toISOString().split('T')[0]\r\n\r\n            const { data: absencesData, error } = await supabase\r\n                .from('absences_formateurs')\r\n                .select(`\r\n                    id,\r\n                    date_debut,\r\n                    date_fin,\r\n                    type,\r\n                    statut,\r\n                    motif,\r\n                    created_at\r\n                `)\r\n                .eq('formateur_id', user.id)\r\n                .eq('statut', 'validé')\r\n                .gte('date_debut', startDate)\r\n                .lte('date_fin', endDate)\r\n\r\n            if (error) throw error;\r\n                \r\n            if (absencesData) {\r\n                console.log(`✅ ${absencesData.length} absences formateur rechargées`);\r\n                setAbsencesValidees(absencesData);\r\n                \r\n                // Reconstruire planning final\r\n                await reconstruirePlanningFinal();\r\n                \r\n                // Mettre à jour stats\r\n                setStatsEcoute(prev => ({\r\n                    ...prev,\r\n                    refreshEffectues: prev.refreshEffectues + 1\r\n                }));\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur rechargement données formateur:', error);\r\n        }\r\n    };\r\n\r\n    const rechargerToutesDonneesFormateur = async () => {\r\n        try {\r\n            console.log('🔄 Rechargement complet données formateur...');\r\n            \r\n            // Recharger toutes les données\r\n            await loadPlanningData();\r\n            \r\n            console.log('✅ Rechargement complet formateur terminé');\r\n            \r\n            // Mettre à jour stats\r\n            setStatsEcoute(prev => ({\r\n                ...prev,\r\n                refreshEffectues: prev.refreshEffectues + 1\r\n            }));\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur rechargement complet formateur:', error);\r\n        }\r\n    };\r\n\r\n    const reconstruirePlanningFinal = async () => {\r\n        try {\r\n            // Reconstruire le planning final avec les nouvelles données\r\n            const weekDates = getWeekDates(currentWeek)\r\n            const planningArbitre = construirePlanningArbitre(\r\n                planningType, \r\n                absencesValidees, \r\n                planningCoordo, \r\n                weekDates\r\n            )\r\n            \r\n            setPlanningFinal(planningArbitre)\r\n            console.log('⚖️ Planning final reconstruit après ordre ROI:', planningArbitre.length, 'créneaux')\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur reconstruction planning final:', error);\r\n        }\r\n    };\r\n\r\n    // ★★★ EFFET POUR DÉMARRER L'ÉCOUTE ROI AMÉLIORÉE ★★★\r\n    useEffect(() => {\r\n        if (user) {\r\n            console.log('🎧 SUJET démarre écoute active des ordres du ROI...');\r\n            const interval = ecouterCommandesRoi();\r\n            \r\n            return () => {\r\n                console.log('🔇 SUJET arrête écoute des ordres ROI');\r\n                clearInterval(interval);\r\n            };\r\n        }\r\n    }, [user]); // Pas de dépendances pour écoute continue\r\n\r\n\r\n    const loadPlanningData = async () => {\r\n        if (!user) return\r\n        \r\n        try {\r\n            setIsLoading(true)\r\n            console.log('📝 Chargement planning hebdomadaire avec arbitrage pour:', user.prenom, user.nom)\r\n\r\n            // Charger les lieux\r\n            const { data: lieuxData, error: lieuxError } = await supabase\r\n                .from('lieux')\r\n                .select('id, nom, couleur, initiale')\r\n                .eq('archive', false)\r\n\r\n            if (lieuxError) throw lieuxError\r\n            setLieux(lieuxData || [])\r\n\r\n            // 1. NIVEAU BASE : Charger SEULEMENT le planning type NORMAL validé\r\n            const { data: planningTypeData, error: planningTypeError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .select(`\r\n                    id,\r\n                    jour,\r\n                    creneau,\r\n                    statut,\r\n                    lieu_id,\r\n                    valide,\r\n                    created_at\r\n                `)\r\n                .eq('formateur_id', user.id)\r\n                .eq('valide', true)\r\n                .eq('statut', 'disponible')  // Filtre SEULEMENT les dispo normales\r\n\r\n            if (planningTypeError) throw planningTypeError\r\n            setPlanningType(planningTypeData || [])\r\n            console.log('📋 Planning type NORMAL chargé:', planningTypeData?.length || 0, 'créneaux')\r\n\r\n            // 2. NIVEAU MOYEN : Charger les absences/modifications validées pour cette semaine\r\n            const weekDates = getWeekDates(currentWeek)\r\n            const startDate = weekDates[0].toISOString().split('T')[0]\r\n            const endDate = weekDates[4].toISOString().split('T')[0]\r\n\r\n            console.log('📅 Recherche absences pour la période:', startDate, 'à', endDate)\r\n\r\n            const { data: absencesData, error: absencesError } = await supabase\r\n                .from('absences_formateurs')\r\n                .select(`\r\n                    id,\r\n                    date_debut,\r\n                    date_fin,\r\n                    type,\r\n                    statut,\r\n                    motif,\r\n                    created_at\r\n                `)\r\n                .eq('formateur_id', user.id)\r\n                .eq('statut', 'validé')\r\n                .gte('date_debut', startDate)\r\n                .lte('date_fin', endDate)\r\n\r\n            if (absencesError) throw absencesError\r\n            setAbsencesValidees(absencesData || [])\r\n            console.log('🚫 Absences validées chargées:', absencesData?.length || 0)\r\n            if (absencesData && absencesData.length > 0) {\r\n                console.log('📋 Détail absences:', absencesData)\r\n            }\r\n\r\n            // 🔧 CORRECTION CRITIQUE : Charger le planning coordo avec MEILLEURE LOGIQUE\r\n            console.log('🔧 NOUVELLE LOGIQUE - Chargement planning coordo pour formateur:', user.id)\r\n            \r\n            const { data: planningCoordoData, error: coordoError } = await supabase\r\n                .from('planning_hebdomadaire')\r\n                .select(`\r\n                    id,\r\n                    date,\r\n                    jour,\r\n                    creneau,\r\n                    lieu_id,\r\n                    formateurs_ids,\r\n                    created_at\r\n                `)\r\n                .gte('date', startDate)\r\n                .lte('date', endDate)\r\n                .order('created_at', { ascending: false }) // Plus récent en premier\r\n\r\n            if (coordoError) throw coordoError\r\n            \r\n            // 🔧 FILTRAGE CÔTÉ CLIENT pour ce formateur spécifique\r\n            const planningCoordoFormateur = (planningCoordoData || []).filter(pc => {\r\n                const estAffecte = pc.formateurs_ids && pc.formateurs_ids.includes(user.id)\r\n                console.log('🔧 Planning coordo:', pc.jour, pc.creneau, 'formateurs:', pc.formateurs_ids, 'affecté?', estAffecte)\r\n                return estAffecte\r\n            })\r\n\r\n            setPlanningCoordo(planningCoordoFormateur)\r\n            console.log('👨‍💼 Planning coordo chargé:', planningCoordoFormateur?.length || 0, 'affectations')\r\n\r\n            // 4. ARBITRAGE : Construire le planning final avec priorités\r\n            const planningArbitre = construirePlanningArbitre(\r\n                planningTypeData || [], \r\n                absencesData || [], \r\n                planningCoordoFormateur || [], \r\n                weekDates\r\n            )\r\n            \r\n            setPlanningFinal(planningArbitre)\r\n            console.log('⚖️ Planning final après arbitrage:', planningArbitre.length, 'créneaux')\r\n\r\n        } catch (error) {\r\n            console.error('Erreur chargement planning:', error)\r\n            setMessage('Erreur lors du chargement de votre planning')\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // 🎯 FONCTION D'ARBITRAGE CORRIGÉE - LOGIQUE ROI PRIORITÉ ABSOLUE\r\n    const construirePlanningArbitre = (planningType, absences, planningCoordo, weekDates) => {\r\n        const planningFinal = []\r\n\r\n        console.log('🎯 DÉBUT ARBITRAGE - LOGIQUE ROI 4 ÉTATS DISTINCTS')\r\n        console.log('🔧 Données planning coordo disponibles:', planningCoordo)\r\n\r\n        for (const jour of jours) {\r\n            for (const creneau of creneaux) {\r\n                console.log(`\\n🔍 Arbitrage ${jour} ${creneau}:`)\r\n\r\n                // Vérifier d'abord les absences validées pour ce jour\r\n                const dateJour = weekDates[jours.indexOf(jour)]\r\n                const dateString = dateJour.toISOString().split('T')[0]\r\n                \r\n                console.log(`📅 Date recherchée: ${dateString}`)\r\n                \r\n                const absenceJour = absences.find(abs => {\r\n                    const debut = new Date(abs.date_debut)\r\n                    const fin = new Date(abs.date_fin)\r\n                    const current = new Date(dateString)\r\n                    \r\n                    console.log(`🔧 Vérification absence: ${abs.date_debut} - ${abs.date_fin} (type: ${abs.type})`)\r\n                    \r\n                    return current >= debut && current <= fin\r\n                })\r\n\r\n                if (absenceJour) {\r\n                    console.log(`✅ Absence trouvée pour ${jour}:`, absenceJour.type)\r\n                }\r\n\r\n                // ★★★ LOGIQUE ROI - PRIORITÉ DISPO EXCEPTIONNELLE ABSOLUE ★★★\r\n                if (absenceJour && absenceJour.type === 'formation') {\r\n                    console.log(`🟡 ÉTAT 1 - DISPO EXCEPTIONNELLE (ROI A VALIDÉ): priorité absolue !`)\r\n                    planningFinal.push({\r\n                        jour,\r\n                        creneau,\r\n                        lieu_id: null,\r\n                        statut: 'dispo_except',\r\n                        source: 'roi_dispo_except',\r\n                        priorite: 1,\r\n                        type_absence: absenceJour.type\r\n                    })\r\n                    continue\r\n                }\r\n\r\n                // 🎯 PRIORITÉ 2 : Absence validée (NOUVELLE RÈGLE - GAGNE TOUJOURS)\r\n                if (absenceJour && absenceJour.type !== 'formation') {\r\n                    console.log(`🟥 ÉTAT 2 - ABSENT VALIDÉ (JE NE PEUX PAS VENIR):`, absenceJour.type)\r\n                    console.log(`🔧 ABSENCE GAGNE - Même si affecté par coordo, l'absence prime !`)\r\n                    planningFinal.push({\r\n                        jour,\r\n                        creneau,\r\n                        lieu_id: null,\r\n                        statut: 'absent',\r\n                        source: 'absence_validee',\r\n                        priorite: 2,\r\n                        type_absence: absenceJour.type\r\n                    })\r\n                    continue\r\n                }\r\n\r\n                // 🎯 PRIORITÉ 3 : Planning coordo (SEULEMENT si pas d'absence)\r\n                // 🔧 CORRECTION CRITIQUE : Amélioration de la détection\r\n                const affectationCoordo = planningCoordo.find(pc => {\r\n                    const jourMatch = pc.jour === jour\r\n                    const creneauDB = creneau === 'Matin' ? 'matin' : 'AM'\r\n                    const creneauMatch = pc.creneau === creneauDB\r\n                    \r\n                    console.log(`🔧 Vérification planning coordo: ${pc.jour}==${jour}? ${jourMatch}, ${pc.creneau}==${creneauDB}? ${creneauMatch}`)\r\n                    \r\n                    return jourMatch && creneauMatch\r\n                })\r\n\r\n                if (affectationCoordo) {\r\n                    console.log(`🟦 ÉTAT 3 - AFFECTÉ PAR COORDO (JE VIENS):`, affectationCoordo.lieu_id)\r\n                    planningFinal.push({\r\n                        jour,\r\n                        creneau,\r\n                        lieu_id: affectationCoordo.lieu_id,\r\n                        statut: 'affecte_coordo',\r\n                        source: 'planning_coordo',\r\n                        priorite: 3\r\n                    })\r\n                    continue\r\n                }\r\n\r\n                // 🎯 PRIORITÉ 4 : Planning type NORMAL → DISPONIBLE MAIS PAS CHOISI\r\n                const creneauType = planningType.find(pt => \r\n                    pt.jour === jour && pt.creneau === creneau\r\n                )\r\n\r\n                if (creneauType) {\r\n                    console.log(`⬜ ÉTAT 4 - DISPONIBLE MAIS PAS CHOISI (EN ATTENTE):`, creneauType.lieu_id || 'Sans préférence')\r\n                    planningFinal.push({\r\n                        jour,\r\n                        creneau,\r\n                        lieu_id: creneauType.lieu_id,\r\n                        statut: 'disponible_non_choisi',\r\n                        source: 'planning_type',\r\n                        priorite: 4\r\n                    })\r\n                    continue\r\n                }\r\n\r\n                console.log(`⭕ ÉTAT 5 - PAS DISPONIBLE (pas de planning type)`)\r\n                // ✅ Ne rien ajouter = case vide normale\r\n            }\r\n        }\r\n\r\n        console.log('🎯 FIN ARBITRAGE - Résultat final:', planningFinal.length, 'créneaux')\r\n        return planningFinal\r\n    }\r\n\r\n    // Fonction pour obtenir les infos d'un créneau\r\n    const getCreneauInfo = (jour, creneau) => {\r\n        return planningFinal.find(pf => pf.jour === jour && pf.creneau === creneau)\r\n    }\r\n\r\n    // Fonction pour obtenir la couleur d'un lieu\r\n    const getLieuCouleur = (lieuId) => {\r\n        if (!lieuId) return '#6b7280' // Gris pour \"Sans préférence\"\r\n        const lieu = lieux.find(l => l.id === lieuId)\r\n        return lieu?.couleur || '#6b7280'\r\n    }\r\n\r\n    // Fonction pour obtenir le nom d'un lieu\r\n    const getLieuNom = (lieuId) => {\r\n        if (!lieuId) return 'Sans préférence'\r\n        const lieu = lieux.find(l => l.id === lieuId)\r\n        return lieu?.nom || 'Lieu inconnu'\r\n    }\r\n\r\n    // 🎯 FONCTION LABELS SELON LOGIQUE ROI\r\n    const getStatutLabel = (creneau) => {\r\n        switch (creneau.statut) {\r\n            case 'dispo_except':\r\n                return 'EXCEPT'\r\n            case 'affecte_coordo':\r\n                return 'JE VIENS'\r\n            case 'absent':\r\n                return 'ABSENT'\r\n            case 'disponible_non_choisi':\r\n                return 'EN ATTENTE'\r\n            default:\r\n                return 'NORMAL'\r\n        }\r\n    }\r\n\r\n    // 🎯 FONCTION COULEURS SELON LOGIQUE ROI\r\n    const getStatutColor = (creneau) => {\r\n        switch (creneau.statut) {\r\n            case 'dispo_except':\r\n                return '#fbbf24' // JAUNE pour dispo exceptionnelle ROI\r\n            case 'affecte_coordo':\r\n                return '#3b82f6' // BLEU pour affectation coordo\r\n            case 'absent':\r\n                return '#ef4444' // ROUGE pour absence\r\n            case 'disponible_non_choisi':\r\n                return '#ffffff' // BLANC avec bordure bleue\r\n            default:\r\n                return '#f3f4f6'\r\n        }\r\n    }\r\n\r\n    // 🎯 FONCTION BORDURE SELON LOGIQUE ROI\r\n    const getBorderColor = (creneau) => {\r\n        switch (creneau.statut) {\r\n            case 'dispo_except':\r\n                return '#fbbf24' // Jaune pour ROI\r\n            case 'affecte_coordo':\r\n                return getLieuCouleur(creneau.lieu_id) // Couleur du lieu\r\n            case 'absent':\r\n                return '#ef4444' // Rouge\r\n            case 'disponible_non_choisi':\r\n                return '#3b82f6' // BORDURE BLEUE = En attente\r\n            default:\r\n                return '#d1d5db'\r\n        }\r\n    }\r\n\r\n    // Fonctions pour navigation semaines\r\n    const getWeekDates = (date) => {\r\n        const startOfWeek = new Date(date)\r\n        const day = startOfWeek.getDay()\r\n        const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1) // Lundi = début de semaine\r\n        startOfWeek.setDate(diff)\r\n\r\n        const dates = []\r\n        for (let i = 0; i < 5; i++) { // Lundi à Vendredi\r\n            const currentDate = new Date(startOfWeek)\r\n            currentDate.setDate(startOfWeek.getDate() + i)\r\n            dates.push(currentDate)\r\n        }\r\n        return dates\r\n    }\r\n\r\n    const getWeekNumber = (date) => {\r\n        const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()))\r\n        const dayNum = d.getUTCDay() || 7\r\n        d.setUTCDate(d.getUTCDate() + 4 - dayNum)\r\n        const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1))\r\n        return Math.ceil((((d - yearStart) / 86400000) + 1) / 7)\r\n    }\r\n\r\n    const previousWeek = () => {\r\n        const newWeek = new Date(currentWeek)\r\n        newWeek.setDate(newWeek.getDate() - 7)\r\n        setCurrentWeek(newWeek)\r\n    }\r\n\r\n    const nextWeek = () => {\r\n        const newWeek = new Date(currentWeek)\r\n        newWeek.setDate(newWeek.getDate() + 7)\r\n        setCurrentWeek(newWeek)\r\n    }\r\n\r\n    const goToCurrentWeek = () => {\r\n        setCurrentWeek(new Date())\r\n    }\r\n\r\n    const weekDates = getWeekDates(currentWeek)\r\n    const weekNumber = getWeekNumber(currentWeek)\r\n\r\n    if (isLoading || authLoading) {\r\n        return (\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                backgroundColor: '#ffffff',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                padding: '20px'\r\n            }}>\r\n                <div style={{\r\n                    padding: '40px',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement de votre planning...</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!user) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            backgroundColor: '#ffffff',\r\n            padding: '16px'\r\n        }}>\r\n            <div style={{\r\n                maxWidth: '420px',\r\n                margin: '0 auto',\r\n                backgroundColor: 'white',\r\n                borderRadius: '24px',\r\n                padding: '20px'\r\n            }}>\r\n                {/* En-tête */}\r\n                <div style={{ marginBottom: '16px', textAlign: 'center' }}>\r\n                    <h1 style={{ \r\n                        fontSize: '20px', \r\n                        fontWeight: 'bold', \r\n                        margin: '0 0 6px 0',\r\n                        color: '#1f2937'\r\n                    }}>\r\n                        Mon Planning Hebdomadaire\r\n                    </h1>\r\n                    <p style={{ \r\n                        fontSize: '14px', \r\n                        color: '#6b7280',\r\n                        margin: '0'\r\n                    }}>\r\n                        Semaine {weekNumber} - {weekDates[0].getFullYear()}\r\n                    </p>\r\n                    \r\n                </div>\r\n\r\n                {/* Navigation semaines avec flèches */}\r\n                <div style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    marginBottom: '14px',\r\n                    padding: '10px 18px',\r\n                    backgroundColor: '#f8fafc',\r\n                    borderRadius: '12px'\r\n                }}>\r\n                    <button\r\n                        onClick={previousWeek}\r\n                        style={{\r\n                            width: '36px',\r\n                            height: '36px',\r\n                            backgroundColor: '#667eea',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '50%',\r\n                            cursor: 'pointer',\r\n                            fontSize: '16px',\r\n                            fontWeight: 'bold',\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'center',\r\n                            boxShadow: '0 2px 4px rgba(102, 126, 234, 0.3)'\r\n                        }}\r\n                    >\r\n                        ←\r\n                    </button>\r\n                    \r\n                    <button\r\n                        onClick={goToCurrentWeek}\r\n                        style={{\r\n                            padding: '8px 14px',\r\n                            backgroundColor: '#3b82f6',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            cursor: 'pointer',\r\n                            fontSize: '13px',\r\n                            fontWeight: '600'\r\n                        }}\r\n                    >\r\n                        Aujourd'hui\r\n                    </button>\r\n                    \r\n                    <button\r\n                        onClick={nextWeek}\r\n                        style={{\r\n                            width: '36px',\r\n                            height: '36px',\r\n                            backgroundColor: '#667eea',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '50%',\r\n                            cursor: 'pointer',\r\n                            fontSize: '16px',\r\n                            fontWeight: 'bold',\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'center',\r\n                            boxShadow: '0 2px 4px rgba(102, 126, 234, 0.3)'\r\n                        }}\r\n                    >\r\n                        →\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Messages */}\r\n                {message && (\r\n                    <div style={{\r\n                        padding: '12px',\r\n                        borderRadius: '8px',\r\n                        marginBottom: '16px',\r\n                        backgroundColor: message.includes('📱') ? '#dbeafe' : '#fee2e2',\r\n                        color: message.includes('📱') ? '#1e40af' : '#991b1b',\r\n                        fontSize: '14px',\r\n                        textAlign: 'center',\r\n                        whiteSpace: 'pre-line'\r\n                    }}>\r\n                        {message}\r\n                    </div>\r\n                )}\r\n\r\n                {/* Contenu principal */}\r\n                {planningFinal.length === 0 ? (\r\n                    // Aucune affectation ET aucune absence ET aucun planning type\r\n                    <div style={{\r\n                        padding: '40px 20px',\r\n                        textAlign: 'center',\r\n                        backgroundColor: '#f0f9ff',\r\n                        borderRadius: '12px',\r\n                        border: '2px solid #3b82f6'\r\n                    }}>\r\n                        <div style={{ fontSize: '48px', marginBottom: '16px' }}>📋</div>\r\n                        <h3 style={{ \r\n                            fontSize: '18px', \r\n                            fontWeight: 'bold', \r\n                            color: '#1e40af',\r\n                            margin: '0 0 12px 0'\r\n                        }}>\r\n                            Aucun planning configuré\r\n                        </h3>\r\n                        <p style={{ \r\n                            fontSize: '14px', \r\n                            color: '#1e40af',\r\n                            margin: '0',\r\n                            lineHeight: '1.5'\r\n                        }}>\r\n                            Vous n'avez pas encore déclaré votre planning type ou il n'a pas été validé.\r\n                        </p>\r\n                    </div>\r\n                ) : (\r\n                    // Planning disponible - Affichage grille\r\n                    <>\r\n                        {/* Grille planning */}\r\n                        <div style={{\r\n                            backgroundColor: '#f9fafb',\r\n                            borderRadius: '12px',\r\n                            padding: '10px',\r\n                            marginBottom: '14px'\r\n                        }}>\r\n                            <table style={{ \r\n                                width: '100%', \r\n                                borderCollapse: 'separate',\r\n                                borderSpacing: '4px'\r\n                            }}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th style={{ \r\n                                            padding: '8px 4px',\r\n                                            fontSize: '12px',\r\n                                            fontWeight: '600',\r\n                                            color: '#6b7280',\r\n                                            textAlign: 'center',\r\n                                            width: '60px'\r\n                                        }}>\r\n                                            &nbsp;\r\n                                        </th>\r\n                                        {jours.map((jour, index) => (\r\n                                            <th key={jour} style={{ \r\n                                                padding: '4px',\r\n                                                fontSize: '11px',\r\n                                                fontWeight: '600',\r\n                                                color: '#6b7280',\r\n                                                textAlign: 'center',\r\n                                                lineHeight: '1.2'\r\n                                            }}>\r\n                                                <div>{jour.substring(0, 3)}</div>\r\n                                                <div style={{ \r\n                                                    fontSize: '10px', \r\n                                                    color: '#374151',\r\n                                                    marginTop: '2px'\r\n                                                }}>\r\n                                                    {weekDates[index].getDate()}/{(weekDates[index].getMonth() + 1).toString().padStart(2, '0')}\r\n                                                </div>\r\n                                            </th>\r\n                                        ))}\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {creneaux.map(creneau => (\r\n                                        <tr key={creneau}>\r\n                                            <td style={{ \r\n                                                padding: '8px 4px',\r\n                                                fontSize: '11px',\r\n                                                fontWeight: '600',\r\n                                                color: '#374151',\r\n                                                textAlign: 'center',\r\n                                                backgroundColor: creneau === 'Matin' ? '#fef3c7' : '#dbeafe',\r\n                                                borderRadius: '6px'\r\n                                            }}>\r\n                                                {creneau === 'Matin' ? 'M' : 'AM'}\r\n                                            </td>\r\n                                            {jours.map(jour => {\r\n                                                const creneauInfo = getCreneauInfo(jour, creneau)\r\n                                                \r\n                                                return (\r\n                                                    <td key={`${jour}-${creneau}`} style={{ \r\n                                                        padding: '0',\r\n                                                        textAlign: 'center'\r\n                                                    }}>\r\n                                                        <div style={{\r\n                                                            minHeight: '50px',\r\n                                                            backgroundColor: creneauInfo ? \r\n                                                                getStatutColor(creneauInfo) : '#f3f4f6',\r\n                                                            color: creneauInfo ? \r\n                                                                (creneauInfo.statut === 'disponible_non_choisi' ? '#374151' : \r\n                                                                 creneauInfo.statut === 'dispo_except' ? '#92400e' : 'white') : '#d1d5db',\r\n                                                            borderRadius: '8px',\r\n                                                            display: 'flex',\r\n                                                            alignItems: 'center',\r\n                                                            justifyContent: 'center',\r\n                                                            padding: '4px',\r\n                                                            border: creneauInfo ? \r\n                                                                `3px solid ${getBorderColor(creneauInfo)}` : \r\n                                                                '3px solid #d1d5db',\r\n                                                            position: 'relative'\r\n                                                        }}>\r\n                                                            {creneauInfo ? (\r\n                                                                creneauInfo.statut === 'absent' ? (\r\n                                                                    <div style={{ \r\n                                                                        fontSize: '16px',\r\n                                                                        fontWeight: 'bold',\r\n                                                                        textAlign: 'center',\r\n                                                                        color: 'white'\r\n                                                                    }}>\r\n                                                                        ✗\r\n                                                                    </div>\r\n                                                                ) : creneauInfo.statut === 'dispo_except' ? (\r\n                                                                    <div style={{ \r\n                                                                        fontSize: '9px',\r\n                                                                        fontWeight: 'bold',\r\n                                                                        textAlign: 'center',\r\n                                                                        lineHeight: '1.2',\r\n                                                                        color: '#92400e'\r\n                                                                    }}>\r\n                                                                        EXCEP\r\n                                                                    </div>\r\n                                                                ) : creneauInfo.statut === 'affecte_coordo' ? (\r\n                                                                    <div style={{ \r\n                                                                        fontSize: '10px',\r\n                                                                        fontWeight: 'bold',\r\n                                                                        textAlign: 'center',\r\n                                                                        lineHeight: '1.2',\r\n                                                                        color: 'white'\r\n                                                                    }}>\r\n                                                                        {lieux.find(l => l.id === creneauInfo.lieu_id)?.initiale || 'S/P'}\r\n                                                                    </div>\r\n                                                                ) : creneauInfo.statut === 'disponible_non_choisi' ? (\r\n                                                                    <div style={{ \r\n                                                                        fontSize: '8px',\r\n                                                                        fontWeight: 'bold',\r\n                                                                        textAlign: 'center',\r\n                                                                        lineHeight: '1.2',\r\n                                                                        color: '#3b82f6'\r\n                                                                    }}>\r\n                                                                        DISPO\r\n                                                                    </div>\r\n                                                                ) : (\r\n                                                                    <div style={{ \r\n                                                                        fontSize: '10px',\r\n                                                                        fontWeight: 'bold',\r\n                                                                        textAlign: 'center',\r\n                                                                        lineHeight: '1.2'\r\n                                                                    }}>\r\n                                                                        {lieux.find(l => l.id === creneauInfo.lieu_id)?.initiale || 'S/P'}\r\n                                                                    </div>\r\n                                                                )\r\n                                                            ) : (\r\n                                                                <div style={{ \r\n                                                                    fontSize: '14px',\r\n                                                                    color: '#d1d5db'\r\n                                                                }}>\r\n                                                                    -\r\n                                                                </div>\r\n                                                            )}\r\n                                                        </div>\r\n                                                    </td>\r\n                                                )\r\n                                            })}\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        {/* ★★★ NOUVELLE LÉGENDE ROI - ÉTAPE 4.1 ★★★ */}\r\n                        <div style={{\r\n                            backgroundColor: '#f8fafc',\r\n                            padding: '12px',\r\n                            borderRadius: '12px',\r\n                            marginBottom: '16px'\r\n                        }}>\r\n                            <h4 style={{ \r\n                                fontSize: '14px', \r\n                                fontWeight: '600', \r\n                                color: '#374151',\r\n                                margin: '0 0 8px 0'\r\n                            }}>\r\n                                Légende des statuts\r\n                            </h4>\r\n                            <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>\r\n                                <div style={{ display: 'flex', alignItems: 'center', gap: '8px', fontSize: '13px' }}>\r\n                                    <div style={{\r\n                                        width: '16px',\r\n                                        height: '16px',\r\n                                        backgroundColor: '#fbbf24',\r\n                                        borderRadius: '4px',\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        justifyContent: 'center',\r\n                                        color: '#92400e',\r\n                                        fontSize: '8px',\r\n                                        fontWeight: 'bold'\r\n                                    }}>\r\n                                        E\r\n                                    </div>\r\n                                    <span style={{ color: '#374151' }}>JAUNE = Dispo exceptionnelle → Validée par admin</span>\r\n                                </div>\r\n                                <div style={{ display: 'flex', alignItems: 'center', gap: '8px', fontSize: '13px' }}>\r\n                                    <div style={{\r\n                                        width: '16px',\r\n                                        height: '16px',\r\n                                        backgroundColor: '#3b82f6',\r\n                                        borderRadius: '4px',\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        justifyContent: 'center',\r\n                                        color: 'white',\r\n                                        fontSize: '8px',\r\n                                        fontWeight: 'bold'\r\n                                    }}>\r\n                                        ✓\r\n                                    </div>\r\n                                    <span style={{ color: '#374151' }}>BLEU = Affecté par coordinateur → Je viens</span>\r\n                                </div>\r\n                                <div style={{ display: 'flex', alignItems: 'center', gap: '8px', fontSize: '13px' }}>\r\n                                    <div style={{\r\n                                        width: '16px',\r\n                                        height: '16px',\r\n                                        backgroundColor: '#ef4444',\r\n                                        borderRadius: '4px',\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        justifyContent: 'center',\r\n                                        color: 'white',\r\n                                        fontSize: '8px',\r\n                                        fontWeight: 'bold'\r\n                                    }}>\r\n                                        ✗\r\n                                    </div>\r\n                                    <span style={{ color: '#374151' }}>ROUGE = Absent → Je ne peux pas venir</span>\r\n                                </div>\r\n                                <div style={{ display: 'flex', alignItems: 'center', gap: '8px', fontSize: '13px' }}>\r\n                                    <div style={{\r\n                                        width: '16px',\r\n                                        height: '16px',\r\n                                        backgroundColor: '#ffffff',\r\n                                        borderRadius: '4px',\r\n                                        border: '2px solid #3b82f6',\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        justifyContent: 'center',\r\n                                        color: '#3b82f6',\r\n                                        fontSize: '6px',\r\n                                        fontWeight: 'bold'\r\n                                    }}>\r\n                                        D\r\n                                    </div>\r\n                                    <span style={{ color: '#374151' }}>BORDURE BLEUE = Disponible mais pas choisi → En attente</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Détails des interventions */}\r\n                        <div style={{\r\n                            backgroundColor: '#f8fafc',\r\n                            padding: '10px',\r\n                            borderRadius: '12px',\r\n                            marginBottom: '14px'\r\n                        }}>\r\n                            <h4 style={{ \r\n                                fontSize: '14px', \r\n                                fontWeight: '600', \r\n                                color: '#374151',\r\n                                margin: '0 0 8px 0'\r\n                            }}>\r\n                                Votre planning cette semaine\r\n                            </h4>\r\n                            <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>\r\n                                {planningFinal.map((creneau, index) => (\r\n                                    <div key={index} style={{\r\n                                        display: 'flex',\r\n                                        justifyContent: 'space-between',\r\n                                        alignItems: 'center',\r\n                                        padding: '12px',\r\n                                        backgroundColor: creneau.statut === 'dispo_except' ? '#fffbeb' :\r\n                                                         creneau.statut === 'affecte_coordo' ? '#eff6ff' : \r\n                                                         creneau.statut === 'absent' ? '#fef2f2' :\r\n                                                         creneau.statut === 'disponible_non_choisi' ? '#f0f9ff' : '#eff6ff',\r\n                                        borderRadius: '8px',\r\n                                        border: `2px solid ${getBorderColor(creneau)}`,\r\n                                        fontSize: '13px'\r\n                                    }}>\r\n                                        <div style={{ \r\n                                            fontWeight: '600', \r\n                                            color: creneau.statut === 'dispo_except' ? '#92400e' :\r\n                                                   creneau.statut === 'affecte_coordo' ? '#1e40af' :\r\n                                                   creneau.statut === 'absent' ? '#991b1b' :\r\n                                                   creneau.statut === 'disponible_non_choisi' ? '#3b82f6' : '#1e40af'\r\n                                        }}>\r\n                                            {creneau.jour} {creneau.creneau}\r\n                                        </div>\r\n                                        <div style={{ \r\n                                            display: 'flex',\r\n                                            alignItems: 'center',\r\n                                            gap: '8px'\r\n                                        }}>\r\n                                            <div style={{\r\n                                                width: '14px',\r\n                                                height: '14px',\r\n                                                backgroundColor: getLieuCouleur(creneau.lieu_id),\r\n                                                borderRadius: '3px'\r\n                                            }} />\r\n                                            <span style={{ \r\n                                                color: '#6b7280',\r\n                                                fontSize: '12px'\r\n                                            }}>\r\n                                                {getLieuNom(creneau.lieu_id)}\r\n                                            </span>\r\n                                            <span style={{\r\n                                                fontSize: '10px',\r\n                                                fontWeight: '600',\r\n                                                padding: '2px 6px',\r\n                                                borderRadius: '4px',\r\n                                                backgroundColor: getStatutColor(creneau),\r\n                                                color: creneau.statut === 'disponible_non_choisi' ? '#3b82f6' : \r\n                                                       creneau.statut === 'dispo_except' ? '#92400e' : 'white',\r\n                                                border: creneau.statut === 'disponible_non_choisi' ? '1px solid #3b82f6' : 'none'\r\n                                            }}>\r\n                                                {getStatutLabel(creneau)}\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                )}\r\n\r\n                {/* Boutons d'action */}\r\n                <button\r\n                    onClick={() => router.push('/formateur')}\r\n                    style={{\r\n                        width: '100%',\r\n                        padding: '12px',\r\n                        background: '#6b7280',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '8px',\r\n                        fontSize: '16px',\r\n                        fontWeight: '600',\r\n                        cursor: 'pointer',\r\n                        marginTop: '16px',\r\n                        transition: 'transform 0.2s'\r\n                    }}\r\n                >\r\n                    Retour à l'accueil\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}",
          "taille": 53931,
          "lignes": 1135,
          "dateModif": "2025-08-28T19:00:40.411Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect, useCallback } from 'react'\nimport { useRouter } from 'next/router'\nimport { supabase } from '../../lib/supabaseClient'\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext'\n\nexport default function MonPlanningHebdo() {\n    const { user, isLoading: authLoading, isAuthenticated } = useFormateurAuth()\n    const [planningType, setPlanningType] = useState([])\n    const [absencesValidees, setAbsencesValidees] = useState([])\n    const [planningCoordo, setPlanningCoordo] = useState([])\n    const [planningFinal, setPlanningFinal] = useState([])\n    const [lieux, setLieux] = useState([])\n    const [currentWeek, setCurrentWeek] = useState(new Date())\n    const [isLoading, setIsLoading] = useState(true)\n    const [message, setMessage] = useState('')\n    const router = useRouter()\n\n    // ★★★ NOUVEAUX ÉTATS POUR ÉCOUTE ROI AMÉLIORÉE - ÉTAPE 4.1 ★★★\n    const [derniereCommande, setDerniereCommande] = useState(null)\n    const [commandesTraitees, setCommandesTraitees] = useState(new Set())\n    const [statsEcoute, setStatsEcoute] = useState({\n        commandesRecues: 0,\n        refreshEffectues: 0,\n        derniereActivite: null\n    })\n\n    const jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi']\n    const creneaux = ['Matin', 'AM']\n\n    // Protection authentification\n    useEffect(() => {\n        if (!authLoading && !isAuthenticated) {\n            router.push('/formateur/login')\n        }\n    }, [authLoading, isAuthenticated, router])\n\n    useEffect(() => {\n        if (user) {\n            loadPlanningData()\n        }\n    }, [user, currentWeek])\n\n    // ★★★ FONCTION ROI AMÉLIORÉE - ÉCOUTE ACTIVE SPÉCIALISÉE FORMATEUR ★★★\n    const ecouterCommandesRoi = () => {\n        const interval = setInterval(() => {\n            const commande = localStorage.getItem('roiCommande');\n            if (commande) {\n                try {\n                    const parsed = JSON.parse(commande);\n                    \n                    // Vérifier si c'est une nouvelle commande ET si elle concerne ce formateur\n                    if (!commandesTraitees.has(parsed.timestamp)) {\n                        if (parsed.formateur_id === user?.id || parsed.action === 'refresh_complet') {\n                            console.log('📱 SUJET reçoit ordre du ROI:', parsed);\n                            \n                            setDerniereCommande(parsed);\n                            setCommandesTraitees(prev => new Set([...prev, parsed.timestamp]));\n                            \n                            // Traiter immédiatement l'ordre ROI\n                            executerOrdreRoiFormateur(parsed);\n                            \n                            // Mettre à jour stats écoute\n                            setStatsEcoute(prev => ({\n                                ...prev,\n                                commandesRecues: prev.commandesRecues + 1,\n                                derniereActivite: new Date().toLocaleTimeString()\n                            }));\n                        }\n                    }\n                } catch (error) {\n                    console.error('❌ Erreur parsing commande ROI formateur:', error);\n                }\n            }\n        }, 500); // Check plus fréquent pour réactivité\n\n        return interval;\n    };\n\n    // ★★★ FONCTION ROI PRINCIPALE - EXÉCUTION ORDRES FORMATEUR ★★★\n    const executerOrdreRoiFormateur = async (commande) => {\n        try {\n            console.log(`📱 SUJET exécute ordre ROI: ${commande.action}`);\n            \n            switch (commande.action) {\n                case 'retirer_formateur':\n                    await traiterRetirerFormateurFormateur(commande);\n                    break;\n                    \n                case 'ajouter_formateur':\n                    await traiterAjouterFormateurFormateur(commande);\n                    break;\n                    \n                case 'remettre_disponible':\n                    await traiterRemettreDisponibleFormateur(commande);\n                    break;\n                    \n                case 'changer_statut':\n                    await traiterChangerStatutFormateur(commande);\n                    break;\n                    \n                case 'refresh_complet':\n                    await traiterRefreshCompletFormateur(commande);\n                    break;\n                    \n                default:\n                    console.log(`⚠️ Ordre ROI formateur non reconnu: ${commande.action}`);\n            }\n            \n        } catch (error) {\n            console.error('❌ Erreur exécution ordre ROI formateur:', error);\n        }\n    };\n\n    // ★★★ TRAITEMENTS SPÉCIFIQUES DES ORDRES ROI FORMATEUR ★★★\n    \n    const traiterRetirerFormateurFormateur = async (commande) => {\n        console.log(`🚫 SUJET traite retrait: ${commande.date}`);\n        \n        const transformationType = commande.details?.transformation || 'retrait_standard';\n        \n        setMessage(`📱 Vous êtes retiré le ${commande.date}\n🔄 Votre planning passe en ABSENT...`);\n        \n        // Refresh immédiat\n        await rechargerDonneesFormateur();\n        \n        setTimeout(() => setMessage(''), 4000);\n    };\n\n    const traiterAjouterFormateurFormateur = async (commande) => {\n        console.log(`✅ SUJET traite ajout: ${commande.date}`);\n        \n        const isDispoExcept = commande.details?.transformation?.includes('dispo_except');\n        \n        setMessage(`📱 Vous êtes ${\n            isDispoExcept ? 'DISPONIBLE EXCEPTIONNELLEMENT' : 'AJOUTÉ'\n        } le ${commande.date}\n🔄 Votre planning se met à jour...`);\n        \n        // Refresh immédiat\n        await rechargerDonneesFormateur();\n        \n        setTimeout(() => setMessage(''), 4000);\n    };\n\n    const traiterRemettreDisponibleFormateur = async (commande) => {\n        console.log(`🔄 SUJET traite remise disponible: ${commande.date}`);\n        \n        setMessage(`📱 Vous redevenez disponible le ${commande.date}\n🔄 Retour à votre planning type habituel...`);\n        \n        // Refresh immédiat\n        await rechargerDonneesFormateur();\n        \n        setTimeout(() => setMessage(''), 4000);\n    };\n\n    const traiterChangerStatutFormateur = async (commande) => {\n        console.log(`🔄 SUJET traite changement statut: ${commande.date}`);\n        \n        const transformation = commande.details?.transformation || 'changement_type';\n        \n        setMessage(`📱 Changement de statut (${transformation})\n🔄 Mise à jour de votre planning...`);\n        \n        // Refresh immédiat\n        await rechargerDonneesFormateur();\n        \n        setTimeout(() => setMessage(''), 4000);\n    };\n\n    const traiterRefreshCompletFormateur = async (commande) => {\n        console.log('🔄 SUJET effectue refresh complet sur ordre ROI');\n        \n        setMessage(`📱 Refresh complet de votre planning\n🔄 Rechargement total en cours...`);\n        \n        // Refresh complet\n        await rechargerToutesDonneesFormateur();\n        \n        setTimeout(() => setMessage(''), 4000);\n    };\n\n    // ★★★ FONCTIONS DE RECHARGEMENT OPTIMISÉES FORMATEUR ★★★\n    \n    const rechargerDonneesFormateur = async () => {\n        try {\n            console.log('🔄 Rechargement données formateur...');\n            \n            // Recharger absences validées\n            const weekDates = getWeekDates(currentWeek)\n            const startDate = weekDates[0].toISOString().split('T')[0]\n            const endDate = weekDates[4].toISOString().split('T')[0]\n\n            const { data: absencesData, error } = await supabase\n                .from('absences_formateurs')\n                .select(`\n                    id,\n                    date_debut,\n                    date_fin,\n                    type,\n                    statut,\n                    motif,\n                    created_at\n                `)\n                .eq('formateur_id', user.id)\n                .eq('statut', 'validé')\n                .gte('date_debut', startDate)\n                .lte('date_fin', endDate)\n\n            if (error) throw error;\n                \n            if (absencesData) {\n                console.log(`✅ ${absencesData.length} absences formateur rechargées`);\n                setAbsencesValidees(absencesData);\n                \n                // Reconstruire planning final\n                await reconstruirePlanningFinal();\n                \n                // Mettre à jour stats\n                setStatsEcoute(prev => ({\n                    ...prev,\n                    refreshEffectues: prev.refreshEffectues + 1\n                }));\n            }\n            \n        } catch (error) {\n            console.error('❌ Erreur rechargement données formateur:', error);\n        }\n    };\n\n    const rechargerToutesDonneesFormateur = async () => {\n        try {\n            console.log('🔄 Rechargement complet données formateur...');\n            \n            // Recharger toutes les données\n            await loadPlanningData();\n            \n            console.log('✅ Rechargement complet formateur terminé');\n            \n            // Mettre à jour stats\n            setStatsEcoute(prev => ({\n                ...prev,\n                refreshEffectues: prev.refreshEffectues + 1\n            }));\n            \n        } catch (error) {\n            console.error('❌ Erreur rechargement complet formateur:', error);\n        }\n    };\n\n    const reconstruirePlanningFinal = async () => {\n        try {\n            // Reconstruire le planning final avec les nouvelles données\n            const weekDates = getWeekDates(currentWeek)\n            const planningArbitre = construirePlanningArbitre(\n                planningType, \n                absencesValidees, \n                planningCoordo, \n                weekDates\n            )\n            \n            setPlanningFinal(planningArbitre)\n            console.log('⚖️ Planning final reconstruit après ordre ROI:', planningArbitre.length, 'créneaux')\n            \n        } catch (error) {\n            console.error('❌ Erreur reconstruction planning final:', error);\n        }\n    };\n\n    // ★★★ EFFET POUR DÉMARRER L'ÉCOUTE ROI AMÉLIORÉE ★★★\n    useEffect(() => {\n        if (user) {\n            console.log('🎧 SUJET démarre écoute active des ordres du ROI...');\n            const interval = ecouterCommandesRoi();\n            \n            return () => {\n                console.log('🔇 SUJET arrête écoute des ordres ROI');\n                clearInterval(interval);\n            };\n        }\n    }, [user]); // Pas de dépendances pour écoute continue\n\n\n    const loadPlanningData = async () => {\n        if (!user) return\n        \n        try {\n            setIsLoading(true)\n            console.log('📝 Chargement planning hebdomadaire avec arbitrage pour:', user.prenom, user.nom)\n\n            // Charger les lieux\n            const { data: lieuxData, error: lieuxError } = await supabase\n                .from('lieux')\n                .select('id, nom, couleur, initiale')\n                .eq('archive', false)\n\n            if (lieuxError) throw lieuxError\n            setLieux(lieuxData || [])\n\n            // 1. NIVEAU BASE : Charger SEULEMENT le planning type NORMAL validé\n            const { data: planningTypeData, error: planningTypeError } = await supabase\n                .from('planning_type_formateurs')\n                .select(`\n                    id,\n                    jour,\n                    creneau,\n                    statut,\n                    lieu_id,\n                    valide,\n                    created_at\n                `)\n                .eq('formateur_id', user.id)\n                .eq('valide', true)\n                .eq('statut', 'disponible')  // Filtre SEULEMENT les dispo normales\n\n            if (planningTypeError) throw planningTypeError\n            setPlanningType(planningTypeData || [])\n            console.log('📋 Planning type NORMAL chargé:', planningTypeData?.length || 0, 'créneaux')\n\n            // 2. NIVEAU MOYEN : Charger les absences/modifications validées pour cette semaine\n            const weekDates = getWeekDates(currentWeek)\n            const startDate = weekDates[0].toISOString().split('T')[0]\n            const endDate = weekDates[4].toISOString().split('T')[0]\n\n            console.log('📅 Recherche absences pour la période:', startDate, 'à', endDate)\n\n            const { data: absencesData, error: absencesError } = await supabase\n                .from('absences_formateurs')\n                .select(`\n                    id,\n                    date_debut,\n                    date_fin,\n                    type,\n                    statut,\n                    motif,\n                    created_at\n                `)\n                .eq('formateur_id', user.id)\n                .eq('statut', 'validé')\n                .gte('date_debut', startDate)\n                .lte('date_fin', endDate)\n\n            if (absencesError) throw absencesError\n            setAbsencesValidees(absencesData || [])\n            console.log('🚫 Absences validées chargées:', absencesData?.length || 0)\n            if (absencesData && absencesData.length > 0) {\n                console.log('📋 Détail absences:', absencesData)\n            }\n\n            // 🔧 CORRECTION CRITIQUE : Charger le planning coordo avec MEILLEURE LOGIQUE\n            console.log('🔧 NOUVELLE LOGIQUE - Chargement planning coordo pour formateur:', user.id)\n            \n            const { data: planningCoordoData, error: coordoError } = await supabase\n                .from('planning_hebdomadaire')\n                .select(`\n                    id,\n                    date,\n                    jour,\n                    creneau,\n                    lieu_id,\n                    formateurs_ids,\n                    created_at\n                `)\n                .gte('date', startDate)\n                .lte('date', endDate)\n                .order('created_at', { ascending: false }) // Plus récent en premier\n\n            if (coordoError) throw coordoError\n            \n            // 🔧 FILTRAGE CÔTÉ CLIENT pour ce formateur spécifique\n            const planningCoordoFormateur = (planningCoordoData || []).filter(pc => {\n                const estAffecte = pc.formateurs_ids && pc.formateurs_ids.includes(user.id)\n                console.log('🔧 Planning coordo:', pc.jour, pc.creneau, 'formateurs:', pc.formateurs_ids, 'affecté?', estAffecte)\n                return estAffecte\n            })\n\n            setPlanningCoordo(planningCoordoFormateur)\n            console.log('👨‍💼 Planning coordo chargé:', planningCoordoFormateur?.length || 0, 'affectations')\n\n            // 4. ARBITRAGE : Construire le planning final avec priorités\n            const planningArbitre = construirePlanningArbitre(\n                planningTypeData || [], \n                absencesData || [], \n                planningCoordoFormateur || [], \n                weekDates\n            )\n            \n            setPlanningFinal(planningArbitre)\n            console.log('⚖️ Planning final après arbitrage:', planningArbitre.length, 'créneaux')\n\n        } catch (error) {\n            console.error('Erreur chargement planning:', error)\n            setMessage('Erreur lors du chargement de votre planning')\n        } finally {\n            setIsLoading(false)\n        }\n    }\n\n    // 🎯 FONCTION D'ARBITRAGE CORRIGÉE - LOGIQUE ROI PRIORITÉ ABSOLUE\n    const construirePlanningArbitre = (planningType, absences, planningCoordo, weekDates) => {\n        const planningFinal = []\n\n        console.log('🎯 DÉBUT ARBITRAGE - LOGIQUE ROI 4 ÉTATS DISTINCTS')\n        console.log('🔧 Données planning coordo disponibles:', planningCoordo)\n\n        for (const jour of jours) {\n            for (const creneau of creneaux) {\n                console.log(`\\n🔍 Arbitrage ${jour} ${creneau}:`)\n\n                // Vérifier d'abord les absences validées pour ce jour\n                const dateJour = weekDates[jours.indexOf(jour)]\n                const dateString = dateJour.toISOString().split('T')[0]\n                \n                console.log(`📅 Date recherchée: ${dateString}`)\n                \n                const absenceJour = absences.find(abs => {\n                    const debut = new Date(abs.date_debut)\n                    const fin = new Date(abs.date_fin)\n                    const current = new Date(dateString)\n                    \n                    console.log(`🔧 Vérification absence: ${abs.date_debut} - ${abs.date_fin} (type: ${abs.type})`)\n                    \n                    return current >= debut && current <= fin\n                })\n\n                if (absenceJour) {\n                    console.log(`✅ Absence trouvée pour ${jour}:`, absenceJour.type)\n                }\n\n                // ★★★ LOGIQUE ROI - PRIORITÉ DISPO EXCEPTIONNELLE ABSOLUE ★★★\n                if (absenceJour && absenceJour.type === 'formation') {\n                    console.log(`🟡 ÉTAT 1 - DISPO EXCEPTIONNELLE (ROI A VALIDÉ): priorité absolue !`)\n                    planningFinal.push({\n                        jour,\n                        creneau,\n                        lieu_id: null,\n                        statut: 'dispo_except',\n                        source: 'roi_dispo_except',\n                        priorite: 1,\n                        type_absence: absenceJour.type\n                    })\n                    continue\n                }\n\n                // 🎯 PRIORITÉ 2 : Absence validée (NOUVELLE RÈGLE - GAGNE TOUJOURS)\n                if (absenceJour && absenceJour.type !== 'formation') {\n                    console.log(`🟥 ÉTAT 2 - ABSENT VALIDÉ (JE NE PEUX PAS VENIR):`, absenceJour.type)\n                    console.log(`🔧 ABSENCE GAGNE - Même si affecté par coordo, l'absence prime !`)\n                    planningFinal.push({\n                        jour,\n                        creneau,\n                        lieu_id: null,\n                        statut: 'absent',\n                        source: 'absence_validee',\n                        priorite: 2,\n                        type_absence: absenceJour.type\n                    })\n                    continue\n                }\n\n                // 🎯 PRIORITÉ 3 : Planning coordo (SEULEMENT si pas d'absence)\n                // 🔧 CORRECTION CRITIQUE : Amélioration de la détection\n                const affectationCoordo = planningCoordo.find(pc => {\n                    const jourMatch = pc.jour === jour\n                    const creneauDB = creneau === 'Matin' ? 'matin' : 'AM'\n                    const creneauMatch = pc.creneau === creneauDB\n                    \n                    console.log(`🔧 Vérification planning coordo: ${pc.jour}==${jour}? ${jourMatch}, ${pc.creneau}==${creneauDB}? ${creneauMatch}`)\n                    \n                    return jourMatch && creneauMatch\n                })\n\n                if (affectationCoordo) {\n                    console.log(`🟦 ÉTAT 3 - AFFECTÉ PAR COORDO (JE VIENS):`, affectationCoordo.lieu_id)\n                    planningFinal.push({\n                        jour,\n                        creneau,\n                        lieu_id: affectationCoordo.lieu_id,\n                        statut: 'affecte_coordo',\n                        source: 'planning_coordo',\n                        priorite: 3\n                    })\n                    continue\n                }\n\n                // 🎯 PRIORITÉ 4 : Planning type NORMAL → DISPONIBLE MAIS PAS CHOISI\n                const creneauType = planningType.find(pt => \n                    pt.jour === jour && pt.creneau === creneau\n                )\n\n                if (creneauType) {\n                    console.log(`⬜ ÉTAT 4 - DISPONIBLE MAIS PAS CHOISI (EN ATTENTE):`, creneauType.lieu_id || 'Sans préférence')\n                    planningFinal.push({\n                        jour,\n                        creneau,\n                        lieu_id: creneauType.lieu_id,\n                        statut: 'disponible_non_choisi',\n                        source: 'planning_type',\n                        priorite: 4\n                    })\n                    continue\n                }\n\n                console.log(`⭕ ÉTAT 5 - PAS DISPONIBLE (pas de planning type)`)\n                // ✅ Ne rien ajouter = case vide normale\n            }\n        }\n\n        console.log('🎯 FIN ARBITRAGE - Résultat final:', planningFinal.length, 'créneaux')\n        return planningFinal\n    }\n\n    // Fonction pour obtenir les infos d'un créneau\n    const getCreneauInfo = (jour, creneau) => {\n        return planningFinal.find(pf => pf.jour === jour && pf.creneau === creneau)\n    }\n\n    // Fonction pour obtenir la couleur d'un lieu\n    const getLieuCouleur = (lieuId) => {\n        if (!lieuId) return '#6b7280' // Gris pour \"Sans préférence\"\n        const lieu = lieux.find(l => l.id === lieuId)\n        return lieu?.couleur || '#6b7280'\n    }\n\n    // Fonction pour obtenir le nom d'un lieu\n    const getLieuNom = (lieuId) => {\n        if (!lieuId) return 'Sans préférence'\n        const lieu = lieux.find(l => l.id === lieuId)\n        return lieu?.nom || 'Lieu inconnu'\n    }\n\n    // 🎯 FONCTION LABELS SELON LOGIQUE ROI\n    const getStatutLabel = (creneau) => {\n        switch (creneau.statut) {\n            case 'dispo_except':\n                return 'EXCEPT'\n            case 'affecte_coordo':\n                return 'JE VIENS'\n            case 'absent':\n                return 'ABSENT'\n            case 'disponible_non_choisi':\n                return 'EN ATTENTE'\n            default:\n                return 'NORMAL'\n        }\n    }\n\n    // 🎯 FONCTION COULEURS SELON LOGIQUE ROI\n    const getStatutColor = (creneau) => {\n        switch (creneau.statut) {\n            case 'dispo_except':\n                return '#fbbf24' // JAUNE pour dispo exceptionnelle ROI\n            case 'affecte_coordo':\n                return '#3b82f6' // BLEU pour affectation coordo\n            case 'absent':\n                return '#ef4444' // ROUGE pour absence\n            case 'disponible_non_choisi':\n                return '#ffffff' // BLANC avec bordure bleue\n            default:\n                return '#f3f4f6'\n        }\n    }\n\n    // 🎯 FONCTION BORDURE SELON LOGIQUE ROI\n    const getBorderColor = (creneau) => {\n        switch (creneau.statut) {\n            case 'dispo_except':\n                return '#fbbf24' // Jaune pour ROI\n            case 'affecte_coordo':\n                return getLieuCouleur(creneau.lieu_id) // Couleur du lieu\n            case 'absent':\n                return '#ef4444' // Rouge\n            case 'disponible_non_choisi':\n                return '#3b82f6' // BORDURE BLEUE = En attente\n            default:\n                return '#d1d5db'\n        }\n    }\n\n    // Fonctions pour navigation semaines\n    const getWeekDates = (date) => {\n        const startOfWeek = new Date(date)\n        const day = startOfWeek.getDay()\n        const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1) // Lundi = début de semaine\n        startOfWeek.setDate(diff)\n\n        const dates = []\n        for (let i = 0; i < 5; i++) { // Lundi à Vendredi\n            const currentDate = new Date(startOfWeek)\n            currentDate.setDate(startOfWeek.getDate() + i)\n            dates.push(currentDate)\n        }\n        return dates\n    }\n\n    const getWeekNumber = (date) => {\n        const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()))\n        const dayNum = d.getUTCDay() || 7\n        d.setUTCDate(d.getUTCDate() + 4 - dayNum)\n        const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1))\n        return Math.ceil((((d - yearStart) / 86400000) + 1) / 7)\n    }\n\n    const previousWeek = () => {\n        const newWeek = new Date(currentWeek)\n        newWeek.setDate(newWeek.getDate() - 7)\n        setCurrentWeek(newWeek)\n    }\n\n    const nextWeek = () => {\n        const newWeek = new Date(currentWeek)\n        newWeek.setDate(newWeek.getDate() + 7)\n        setCurrentWeek(newWeek)\n    }\n\n    const goToCurrentWeek = () => {\n        setCurrentWeek(new Date())\n    }\n\n    const weekDates = getWeekDates(currentWeek)\n    const weekNumber = getWeekNumber(currentWeek)\n\n    if (isLoading || authLoading) {\n        return (\n            <div style={{\n                minHeight: '100vh',\n                backgroundColor: '#ffffff',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                padding: '20px'\n            }}>\n                <div style={{\n                    padding: '40px',\n                    textAlign: 'center'\n                }}>\n                    <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement de votre planning...</div>\n                </div>\n            </div>\n        )\n    }\n\n    if (!user) {\n        return null\n    }\n\n    return (\n        <div style={{\n            minHeight: '100vh',\n            backgroundColor: '#ffffff',\n            padding: '16px'\n        }}>\n            <div style={{\n                maxWidth: '420px',\n                margin: '0 auto',\n                backgroundColor: 'white',\n                borderRadius: '24px',\n                padding: '20px'\n            }}>\n                {/* En-tête */}\n                <div style={{ marginBottom: '16px', textAlign: 'center' }}>\n                    <h1 style={{ \n                        fontSize: '20px', \n                        fontWeight: 'bold', \n                        margin: '0 0 6px 0',\n                        color: '#1f2937'\n                    }}>\n                        Mon Planning Hebdomadaire\n                    </h1>\n                    <p style={{ \n                        fontSize: '14px', \n                        color: '#6b7280',\n                        margin: '0'\n                    }}>\n                        Semaine {weekNumber} - {weekDates[0].getFullYear()}\n                    </p>\n                    \n                </div>\n\n                {/* Navigation semaines avec flèches */}\n                <div style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'center',\n                    marginBottom: '14px',\n                    padding: '10px 18px',\n                    backgroundColor: '#f8fafc',\n                    borderRadius: '12px'\n                }}>\n                    <button\n                        onClick={previousWeek}\n                        style={{\n                            width: '36px',\n                            height: '36px',\n                            backgroundColor: '#667eea',\n                            color: 'white',\n                            border: 'none',\n                            borderRadius: '50%',\n                            cursor: 'pointer',\n                            fontSize: '16px',\n                            fontWeight: 'bold',\n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                            boxShadow: '0 2px 4px rgba(102, 126, 234, 0.3)'\n                        }}\n                    >\n                        ←\n                    </button>\n                    \n                    <button\n                        onClick={goToCurrentWeek}\n                        style={{\n                            padding: '8px 14px',\n                            backgroundColor: '#3b82f6',\n                            color: 'white',\n                            border: 'none',\n                            borderRadius: '8px',\n                            cursor: 'pointer',\n                            fontSize: '13px',\n                            fontWeight: '600'\n                        }}\n                    >\n                        Aujourd'hui\n                    </button>\n                    \n                    <button\n                        onClick={nextWeek}\n                        style={{\n                            width: '36px',\n                            height: '36px',\n                            backgroundColor: '#667eea',\n                            color: 'white',\n                            border: 'none',\n                            borderRadius: '50%',\n                            cursor: 'pointer',\n                            fontSize: '16px',\n                            fontWeight: 'bold',\n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                            boxShadow: '0 2px 4px rgba(102, 126, 234, 0.3)'\n                        }}\n                    >\n                        →\n                    </button>\n                </div>\n\n                {/* Messages */}\n                {message && (\n                    <div style={{\n                        padding: '12px',\n                        borderRadius: '8px',\n                        marginBottom: '16px',\n                        backgroundColor: message.includes('📱') ? '#dbeafe' : '#fee2e2',\n                        color: message.includes('📱') ? '#1e40af' : '#991b1b',\n                        fontSize: '14px',\n                        textAlign: 'center',\n                        whiteSpace: 'pre-line'\n                    }}>\n                        {message}\n                    </div>\n                )}\n\n                {/* Contenu principal */}\n                {planningFinal.length === 0 ? (\n                    // Aucune affectation ET aucune absence ET aucun planning type\n                    <div style={{\n                        padding: '40px 20px',\n                        textAlign: 'center',\n                        backgroundColor: '#f0f9ff',\n                        borderRadius: '12px',\n                        border: '2px solid #3b82f6'\n                    }}>\n                        <div style={{ fontSize: '48px', marginBottom: '16px' }}>📋</div>\n                        <h3 style={{ \n                            fontSize: '18px', \n                            fontWeight: 'bold', \n                            color: '#1e40af',\n                            margin: '0 0 12px 0'\n                        }}>\n                            Aucun planning configuré\n                        </h3>\n                        <p style={{ \n                            fontSize: '14px', \n                            color: '#1e40af',\n                            margin: '0',\n                            lineHeight: '1.5'\n                        }}>\n                            Vous n'avez pas encore déclaré votre planning type ou il n'a pas été validé.\n                        </p>\n                    </div>\n                ) : (\n                    // Planning disponible - Affichage grille\n                    <>\n                        {/* Grille planning */}\n                        <div style={{\n                            backgroundColor: '#f9fafb',\n                            borderRadius: '12px',\n                            padding: '10px',\n                            marginBottom: '14px'\n                        }}>\n                            <table style={{ \n                                width: '100%', \n                                borderCollapse: 'separate',\n                                borderSpacing: '4px'\n                            }}>\n                                <thead>\n                                    <tr>\n                                        <th style={{ \n                                            padding: '8px 4px',\n                                            fontSize: '12px',\n                                            fontWeight: '600',\n                                            color: '#6b7280',\n                                            textAlign: 'center',\n                                            width: '60px'\n                                        }}>\n                                            &nbsp;\n                                        </th>\n                                        {jours.map((jour, index) => (\n                                            <th key={jour} style={{ \n                                                padding: '4px',\n                                                fontSize: '11px',\n                                                fontWeight: '600',\n                                                color: '#6b7280',\n                                                textAlign: 'center',\n                                                lineHeight: '1.2'\n                                            }}>\n                                                <div>{jour.substring(0, 3)}</div>\n                                                <div style={{ \n                                                    fontSize: '10px', \n                                                    color: '#374151',\n                                                    marginTop: '2px'\n                                                }}>\n                                                    {weekDates[index].getDate()}/{(weekDates[index].getMonth() + 1).toString().padStart(2, '0')}\n                                                </div>\n                                            </th>\n                                        ))}\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {creneaux.map(creneau => (\n                                        <tr key={creneau}>\n                                            <td style={{ \n                                                padding: '8px 4px',\n                                                fontSize: '11px',\n                                                fontWeight: '600',\n                                                color: '#374151',\n                                                textAlign: 'center',\n                                                backgroundColor: creneau === 'Matin' ? '#fef3c7' : '#dbeafe',\n                                                borderRadius: '6px'\n                                            }}>\n                                                {creneau === 'Matin' ? 'M' : 'AM'}\n                                            </td>\n                                            {jours.map(jour => {\n                                                const creneauInfo = getCreneauInfo(jour, creneau)\n                                                \n                                                return (\n                                                    <td key={`${jour}-${creneau}`} style={{ \n                                                        padding: '0',\n                                                        textAlign: 'center'\n                                                    }}>\n                                                        <div style={{\n                                                            minHeight: '50px',\n                                                            backgroundColor: creneauInfo ? \n                                                                getStatutColor(creneauInfo) : '#f3f4f6',\n                                                            color: creneauInfo ? \n                                                                (creneauInfo.statut === 'disponible_non_choisi' ? '#374151' : \n                                                                 creneauInfo.statut === 'dispo_except' ? '#92400e' : 'white') : '#d1d5db',\n                                                            borderRadius: '8px',\n                                                            display: 'flex',\n                                                            alignItems: 'center',\n                                                            justifyContent: 'center',\n                                                            padding: '4px',\n                                                            border: creneauInfo ? \n                                                                `3px solid ${getBorderColor(creneauInfo)}` : \n                                                                '3px solid #d1d5db',\n                                                            position: 'relative'\n                                                        }}>\n                                                            {creneauInfo ? (\n                                                                creneauInfo.statut === 'absent' ? (\n                                                                    <div style={{ \n                                                                        fontSize: '16px',\n                                                                        fontWeight: 'bold',\n                                                                        textAlign: 'center',\n                                                                        color: 'white'\n                                                                    }}>\n                                                                        ✗\n                                                                    </div>\n                                                                ) : creneauInfo.statut === 'dispo_except' ? (\n                                                                    <div style={{ \n                                                                        fontSize: '9px',\n                                                                        fontWeight: 'bold',\n                                                                        textAlign: 'center',\n                                                                        lineHeight: '1.2',\n                                                                        color: '#92400e'\n                                                                    }}>\n                                                                        EXCEP\n                                                                    </div>\n                                                                ) : creneauInfo.statut === 'affecte_coordo' ? (\n                                                                    <div style={{ \n                                                                        fontSize: '10px',\n                                                                        fontWeight: 'bold',\n                                                                        textAlign: 'center',\n                                                                        lineHeight: '1.2',\n                                                                        color: 'white'\n                                                                    }}>\n                                                                        {lieux.find(l => l.id === creneauInfo.lieu_id)?.initiale || 'S/P'}\n                                                                    </div>\n                                                                ) : creneauInfo.statut === 'disponible_non_choisi' ? (\n                                                                    <div style={{ \n                                                                        fontSize: '8px',\n                                                                        fontWeight: 'bold',\n                                                                        textAlign: 'center',\n                                                                        lineHeight: '1.2',\n                                                                        color: '#3b82f6'\n                                                                    }}>\n                                                                        DISPO\n                                                                    </div>\n                                                                ) : (\n                                                                    <div style={{ \n                                                                        fontSize: '10px',\n                                                                        fontWeight: 'bold',\n                                                                        textAlign: 'center',\n                                                                        lineHeight: '1.2'\n                                                                    }}>\n                                                                        {lieux.find(l => l.id === creneauInfo.lieu_id)?.initiale || 'S/P'}\n                                                                    </div>\n                                                                )\n                                                            ) : (\n                                                                <div style={{ \n                                                                    fontSize: '14px',\n                                                                    color: '#d1d5db'\n                                                                }}>\n                                                                    -\n                                                                </div>\n                                                            )}\n                                                        </div>\n                                                    </td>\n                                                )\n                                            })}\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </div>\n\n                        {/* ★★★ NOUVELLE LÉGENDE ROI - ÉTAPE 4.1 ★★★ */}\n                        <div style={{\n                            backgroundColor: '#f8fafc',\n                            padding: '12px',\n                            borderRadius: '12px',\n                            marginBottom: '16px'\n                        }}>\n                            <h4 style={{ \n                                fontSize: '14px', \n                                fontWeight: '600', \n                                color: '#374151',\n                                margin: '0 0 8px 0'\n                            }}>\n                                Légende des statuts\n                            </h4>\n                            <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>\n                                <div style={{ display: 'flex', alignItems: 'center', gap: '8px', fontSize: '13px' }}>\n                                    <div style={{\n                                        width: '16px',\n                                        height: '16px',\n                                        backgroundColor: '#fbbf24',\n                                        borderRadius: '4px',\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                        justifyContent: 'center',\n                                        color: '#92400e',\n                                        fontSize: '8px',\n                                        fontWeight: 'bold'\n                                    }}>\n                                        E\n                                    </div>\n                                    <span style={{ color: '#374151' }}>JAUNE = Dispo exceptionnelle → Validée par admin</span>\n                                </div>\n                                <div style={{ display: 'flex', alignItems: 'center', gap: '8px', fontSize: '13px' }}>\n                                    <div style={{\n                                        width: '16px',\n                                        height: '16px',\n                                        backgroundColor: '#3b82f6',\n                                        borderRadius: '4px',\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                        justifyContent: 'center',\n                                        color: 'white',\n                                        fontSize: '8px',\n                                        fontWeight: 'bold'\n                                    }}>\n                                        ✓\n                                    </div>\n                                    <span style={{ color: '#374151' }}>BLEU = Affecté par coordinateur → Je viens</span>\n                                </div>\n                                <div style={{ display: 'flex', alignItems: 'center', gap: '8px', fontSize: '13px' }}>\n                                    <div style={{\n                                        width: '16px',\n                                        height: '16px',\n                                        backgroundColor: '#ef4444',\n                                        borderRadius: '4px',\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                        justifyContent: 'center',\n                                        color: 'white',\n                                        fontSize: '8px',\n                                        fontWeight: 'bold'\n                                    }}>\n                                        ✗\n                                    </div>\n                                    <span style={{ color: '#374151' }}>ROUGE = Absent → Je ne peux pas venir</span>\n                                </div>\n                                <div style={{ display: 'flex', alignItems: 'center', gap: '8px', fontSize: '13px' }}>\n                                    <div style={{\n                                        width: '16px',\n                                        height: '16px',\n                                        backgroundColor: '#ffffff',\n                                        borderRadius: '4px',\n                                        border: '2px solid #3b82f6',\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                        justifyContent: 'center',\n                                        color: '#3b82f6',\n                                        fontSize: '6px',\n                                        fontWeight: 'bold'\n                                    }}>\n                                        D\n                                    </div>\n                                    <span style={{ color: '#374151' }}>BORDURE BLEUE = Disponible mais pas choisi → En attente</span>\n                                </div>\n                            </div>\n                        </div>\n\n                        {/* Détails des interventions */}\n                        <div style={{\n                            backgroundColor: '#f8fafc',\n                            padding: '10px',\n                            borderRadius: '12px',\n                            marginBottom: '14px'\n                        }}>\n                            <h4 style={{ \n                                fontSize: '14px', \n                                fontWeight: '600', \n                                color: '#374151',\n                                margin: '0 0 8px 0'\n                            }}>\n                                Votre planning cette semaine\n                            </h4>\n                            <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>\n                                {planningFinal.map((creneau, index) => (\n                                    <div key={index} style={{\n                                        display: 'flex',\n                                        justifyContent: 'space-between',\n                                        alignItems: 'center',\n                                        padding: '12px',\n                                        backgroundColor: creneau.statut === 'dispo_except' ? '#fffbeb' :\n                                                         creneau.statut === 'affecte_coordo' ? '#eff6ff' : \n                                                         creneau.statut === 'absent' ? '#fef2f2' :\n                                                         creneau.statut === 'disponible_non_choisi' ? '#f0f9ff' : '#eff6ff',\n                                        borderRadius: '8px',\n                                        border: `2px solid ${getBorderColor(creneau)}`,\n                                        fontSize: '13px'\n                                    }}>\n                                        <div style={{ \n                                            fontWeight: '600', \n                                            color: creneau.statut === 'dispo_except' ? '#92400e' :\n                                                   creneau.statut === 'affecte_coordo' ? '#1e40af' :\n                                                   creneau.statut === 'absent' ? '#991b1b' :\n                                                   creneau.statut === 'disponible_non_choisi' ? '#3b82f6' : '#1e40af'\n                                        }}>\n                                            {creneau.jour} {creneau.creneau}\n                                        </div>\n                                        <div style={{ \n                                            display: 'flex',\n                                            alignItems: 'center',\n                                            gap: '8px'\n                                        }}>\n                                            <div style={{\n                                                width: '14px',\n                                                height: '14px',\n                                                backgroundColor: getLieuCouleur(creneau.lieu_id),\n                                                borderRadius: '3px'\n                                            }} />\n                                            <span style={{ \n                                                color: '#6b7280',\n                                                fontSize: '12px'\n                                            }}>\n                                                {getLieuNom(creneau.lieu_id)}\n                                            </span>\n                                            <span style={{\n                                                fontSize: '10px',\n                                                fontWeight: '600',\n                                                padding: '2px 6px',\n                                                borderRadius: '4px',\n                                                backgroundColor: getStatutColor(creneau),\n                                                color: creneau.statut === 'disponible_non_choisi' ? '#3b82f6' : \n                                                       creneau.statut === 'dispo_except' ? '#92400e' : 'white',\n                                                border: creneau.statut === 'disponible_non_choisi' ? '1px solid #3b82f6' : 'none'\n                                            }}>\n                                                {getStatutLabel(creneau)}\n                                            </span>\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    </>\n                )}\n\n                {/* Boutons d'action */}\n                <button\n                    onClick={() => router.push('/formateur')}\n                    style={{\n                        width: '100%',\n                        padding: '12px',\n                        background: '#6b7280',\n                        color: 'white',\n                        border: 'none',\n                        borderRadius: '8px',\n                        fontSize: '16px',\n                        fontWeight: '600',\n                        cursor: 'pointer',\n                        marginTop: '16px',\n                        transition: 'transform 0.2s'\n                    }}\n                >\n                    Retour à l'accueil\n                </button>\n            </div>\n        </div>\n    )\n}",
          "taille": 52797,
          "lignes": 1135,
          "dateModif": "2025-08-25T03:52:11.050Z",
          "erreur": null
        },
        "identique": false,
        "diffTaille": 1134,
        "diffLignes": 0,
        "pourcentageSimilarite": 98,
        "message": "🟢 QUASI_IDENTIQUE - Similarité: 98% (±1134 bytes, ±0 lignes)"
      }
    },
    {
      "fichier": "pages/formateur/mon-planning-type.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../../lib/supabaseClient'\r\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext'\r\n\r\nexport default function MonPlanningType() {\r\n    const { user, isLoading: authLoading, isAuthenticated } = useFormateurAuth()\r\n    const [planningType, setPlanningType] = useState([])\r\n    const [lieux, setLieux] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [message, setMessage] = useState('')\r\n    const router = useRouter()\r\n\r\n    const jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi']\r\n    const creneaux = ['Matin', 'AM']  // ✅ CORRECTION: AM au lieu d'Après-midi\r\n\r\n    // Protection authentification\r\n    useEffect(() => {\r\n        if (!authLoading && !isAuthenticated) {\r\n            router.push('/formateur/login')\r\n        }\r\n    }, [authLoading, isAuthenticated, router])\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            loadPlanningType(user.id)\r\n        }\r\n    }, [user])\r\n\r\n\r\n    const loadPlanningType = async (formateurId) => {\r\n        try {\r\n            console.log('🔍 Chargement planning type pour:', formateurId)\r\n\r\n            // Charger les lieux pour affichage\r\n            const { data: lieuxData, error: lieuxError } = await supabase\r\n                .from('lieux')\r\n                .select('id, nom, couleur, initiale')\r\n                .eq('archive', false)\r\n\r\n            if (lieuxError) throw lieuxError\r\n            setLieux(lieuxData || [])\r\n\r\n            // ✅ MODIFICATION: Charger SEULEMENT les disponibilités NORMALES validées\r\n            const { data: planningData, error: planningError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .select(`\r\n                    id,\r\n                    jour,\r\n                    creneau,\r\n                    statut,\r\n                    lieu_id,\r\n                    valide,\r\n                    valide_par,\r\n                    date_validation,\r\n                    created_at\r\n                `)\r\n                .eq('formateur_id', formateurId)\r\n                .eq('valide', true)\r\n                .eq('statut', 'disponible')  // ✅ NOUVEAU: Filtre SEULEMENT les dispo normales\r\n                .order('created_at')\r\n\r\n            if (planningError) throw planningError\r\n\r\n            console.log('✅ Planning type NORMAL validé chargé:', planningData?.length || 0, 'créneaux')\r\n            setPlanningType(planningData || [])\r\n\r\n        } catch (error) {\r\n            console.error('Erreur chargement planning:', error)\r\n            setMessage('Erreur lors du chargement de votre planning')\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Fonction pour obtenir les détails d'un créneau\r\n    const getCreneauInfo = (jour, creneau) => {\r\n        return planningType.find(pt => pt.jour === jour && pt.creneau === creneau)\r\n    }\r\n\r\n    // Fonction pour obtenir la couleur d'un lieu\r\n    const getLieuCouleur = (lieuId) => {\r\n        if (!lieuId) return '#f3f4f6'\r\n        const lieu = lieux.find(l => l.id === lieuId)\r\n        return lieu?.couleur || '#f3f4f6'\r\n    }\r\n\r\n    // Fonction pour obtenir le nom d'un lieu\r\n    const getLieuNom = (lieuId) => {\r\n        if (!lieuId) return 'Sans préférence'\r\n        const lieu = lieux.find(l => l.id === lieuId)\r\n        return lieu?.nom || 'Lieu inconnu'\r\n    }\r\n\r\n    // Fonction pour déterminer la couleur du texte\r\n    const getTextColor = (backgroundColor) => {\r\n        if (!backgroundColor || backgroundColor === '#f3f4f6') return '#000000'\r\n        \r\n        const hex = backgroundColor.replace('#', '')\r\n        const r = parseInt(hex.substr(0, 2), 16)\r\n        const g = parseInt(hex.substr(2, 2), 16)\r\n        const b = parseInt(hex.substr(4, 2), 16)\r\n        \r\n        const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255\r\n        return luminance > 0.5 ? '#000000' : '#ffffff'\r\n    }\r\n\r\n    if (isLoading || authLoading) {\r\n        return (\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                backgroundColor: '#ffffff',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                padding: '20px'\r\n            }}>\r\n                <div style={{\r\n                    padding: '40px',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement de votre planning...</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!user) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            backgroundColor: '#ffffff',\r\n            padding: '16px'\r\n        }}>\r\n            <div style={{\r\n                maxWidth: '420px',\r\n                margin: '0 auto',\r\n                backgroundColor: 'white',\r\n                borderRadius: '24px',\r\n                padding: '20px'\r\n            }}>\r\n                {/* En-tête */}\r\n                <div style={{ marginBottom: '16px', textAlign: 'center' }}>\r\n                    <h1 style={{ \r\n                        fontSize: '20px', \r\n                        fontWeight: 'bold', \r\n                        margin: '0 0 6px 0',\r\n                        color: '#1f2937'\r\n                    }}>\r\n                        Mon Planning Type\r\n                    </h1>\r\n                    <p style={{ \r\n                        fontSize: '14px', \r\n                        color: '#6b7280',\r\n                        margin: '0'\r\n                    }}>\r\n                        Vos disponibilités habituelles validées\r\n                    </p>\r\n                </div>\r\n\r\n                {/* Messages */}\r\n                {message && (\r\n                    <div style={{\r\n                        padding: '12px',\r\n                        borderRadius: '8px',\r\n                        marginBottom: '16px',\r\n                        backgroundColor: '#fee2e2',\r\n                        color: '#991b1b',\r\n                        fontSize: '14px',\r\n                        textAlign: 'center'\r\n                    }}>\r\n                        {message}\r\n                    </div>\r\n                )}\r\n\r\n                {/* Contenu principal */}\r\n                {planningType.length === 0 ? (\r\n                    // Aucun planning validé\r\n                    <div style={{\r\n                        padding: '40px 20px',\r\n                        textAlign: 'center',\r\n                        backgroundColor: '#fef3c7',\r\n                        borderRadius: '12px',\r\n                        border: '2px solid #f59e0b'\r\n                    }}>\r\n                        <div style={{ fontSize: '48px', marginBottom: '16px' }}>📅</div>\r\n                        <h3 style={{ \r\n                            fontSize: '18px', \r\n                            fontWeight: 'bold', \r\n                            color: '#92400e',\r\n                            margin: '0 0 12px 0'\r\n                        }}>\r\n                            Planning en attente\r\n                        </h3>\r\n                        <p style={{ \r\n                            fontSize: '14px', \r\n                            color: '#92400e',\r\n                            margin: '0 0 20px 0',\r\n                            lineHeight: '1.5'\r\n                        }}>\r\n                            Vos disponibilités habituelles n'ont pas encore été validées par l'administration.\r\n                        </p>\r\n                        <div style={{\r\n                            backgroundColor: '#fffbeb',\r\n                            padding: '12px',\r\n                            borderRadius: '8px',\r\n                            fontSize: '13px',\r\n                            color: '#92400e'\r\n                        }}>\r\n                            <strong>Que faire ?</strong><br />\r\n                            Patientez ou contactez l'administration pour connaître le statut de validation.\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    // Planning validé - Affichage grille\r\n                    <>\r\n                        {/* Grille planning */}\r\n                        <div style={{\r\n                            backgroundColor: '#f9fafb',\r\n                            borderRadius: '12px',\r\n                            padding: '12px',\r\n                            marginBottom: '16px'\r\n                        }}>\r\n                            <table style={{ \r\n                                width: '100%', \r\n                                borderCollapse: 'separate',\r\n                                borderSpacing: '4px'\r\n                            }}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th style={{ \r\n                                            padding: '8px 4px',\r\n                                            fontSize: '12px',\r\n                                            fontWeight: '600',\r\n                                            color: '#6b7280',\r\n                                            textAlign: 'center',\r\n                                            width: '60px'\r\n                                        }}>\r\n                                            Créneaux\r\n                                        </th>\r\n                                        {jours.map(jour => (\r\n                                            <th key={jour} style={{ \r\n                                                padding: '8px 4px',\r\n                                                fontSize: '11px',\r\n                                                fontWeight: '600',\r\n                                                color: '#6b7280',\r\n                                                textAlign: 'center'\r\n                                            }}>\r\n                                                {jour.substring(0, 3)}\r\n                                            </th>\r\n                                        ))}\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {creneaux.map(creneau => (\r\n                                        <tr key={creneau}>\r\n                                            <td style={{ \r\n                                                padding: '8px 4px',\r\n                                                fontSize: '11px',\r\n                                                fontWeight: '600',\r\n                                                color: '#374151',\r\n                                                textAlign: 'center',\r\n                                                backgroundColor: creneau === 'Matin' ? '#fef3c7' : '#dbeafe',\r\n                                                borderRadius: '6px'\r\n                                            }}>\r\n                                                {creneau === 'Matin' ? 'M' : 'AM'}\r\n                                            </td>\r\n                                            {jours.map(jour => {\r\n                                                const creneauInfo = getCreneauInfo(jour, creneau)\r\n                                                const backgroundColor = creneauInfo ? getLieuCouleur(creneauInfo.lieu_id) : '#f3f4f6'\r\n                                                const textColor = getTextColor(backgroundColor)\r\n                                                \r\n                                                return (\r\n                                                    <td key={`${jour}-${creneau}`} style={{ \r\n                                                        padding: '0',\r\n                                                        textAlign: 'center'\r\n                                                    }}>\r\n                                                        <div style={{\r\n                                                            minHeight: '50px',\r\n                                                            backgroundColor: creneauInfo ? '#3b82f6' : '#f3f4f6', // ✅ Toujours bleu pour dispo normale\r\n                                                            color: creneauInfo ? 'white' : '#d1d5db',\r\n                                                            borderRadius: '8px',\r\n                                                            display: 'flex',\r\n                                                            alignItems: 'center',\r\n                                                            justifyContent: 'center',\r\n                                                            padding: '4px',\r\n                                                            border: creneauInfo ? \r\n                                                                `3px solid ${getLieuCouleur(creneauInfo.lieu_id)}` : \r\n                                                                '1px solid #e5e7eb',\r\n                                                            position: 'relative'\r\n                                                        }}>\r\n                                                            {creneauInfo ? (\r\n                                                                <div style={{ \r\n                                                                    fontSize: '10px',\r\n                                                                    fontWeight: 'bold',\r\n                                                                    textAlign: 'center',\r\n                                                                    lineHeight: '1.2'\r\n                                                                }}>\r\n                                                                    {lieux.find(l => l.id === creneauInfo.lieu_id)?.initiale || 'S/P'}\r\n                                                                </div>\r\n                                                            ) : (\r\n                                                                <div style={{ \r\n                                                                    fontSize: '14px',\r\n                                                                    color: '#d1d5db'\r\n                                                                }}>\r\n                                                                    -\r\n                                                                </div>\r\n                                                            )}\r\n                                                        </div>\r\n                                                    </td>\r\n                                                )\r\n                                            })}\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        {/* Légende */}\r\n                        <div style={{\r\n                            backgroundColor: '#f8fafc',\r\n                            padding: '12px',\r\n                            borderRadius: '12px',\r\n                            marginBottom: '16px'\r\n                        }}>\r\n                            <h4 style={{ \r\n                                fontSize: '14px', \r\n                                fontWeight: '600', \r\n                                color: '#374151',\r\n                                margin: '0 0 8px 0'\r\n                            }}>\r\n                                Légende\r\n                            </h4>\r\n                            <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>\r\n                                <div style={{ display: 'flex', alignItems: 'center', gap: '8px', fontSize: '13px' }}>\r\n                                    <div style={{\r\n                                        width: '16px',\r\n                                        height: '16px',\r\n                                        backgroundColor: '#3b82f6',\r\n                                        borderRadius: '4px',\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        justifyContent: 'center',\r\n                                        color: 'white',\r\n                                        fontSize: '8px',\r\n                                        fontWeight: 'bold'\r\n                                    }}>\r\n                                        ✓\r\n                                    </div>\r\n                                    <span style={{ color: '#374151' }}>Disponibilité habituelle validée</span>\r\n                                </div>\r\n                                <div style={{ display: 'flex', alignItems: 'center', gap: '8px', fontSize: '13px' }}>\r\n                                    <div style={{\r\n                                        width: '16px',\r\n                                        height: '16px',\r\n                                        border: '3px solid #10b981',\r\n                                        borderRadius: '4px'\r\n                                    }} />\r\n                                    <span style={{ color: '#374151' }}>Bordure colorée = lieu d'intervention</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Détails des créneaux */}\r\n                        <div style={{\r\n                            backgroundColor: '#f8fafc',\r\n                            padding: '12px',\r\n                            borderRadius: '12px',\r\n                            marginBottom: '16px'\r\n                        }}>\r\n                            <h4 style={{ \r\n                                fontSize: '14px', \r\n                                fontWeight: '600', \r\n                                color: '#374151',\r\n                                margin: '0 0 8px 0'\r\n                            }}>\r\n                                Vos disponibilités habituelles\r\n                            </h4>\r\n                            <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>\r\n                                {planningType.map((creneau, index) => (\r\n                                    <div key={index} style={{\r\n                                        display: 'flex',\r\n                                        justifyContent: 'space-between',\r\n                                        alignItems: 'center',\r\n                                        padding: '12px',\r\n                                        backgroundColor: '#eff6ff', // ✅ Toujours bleu pour disponibilité normale\r\n                                        borderRadius: '8px',\r\n                                        border: `2px solid ${getLieuCouleur(creneau.lieu_id)}`,\r\n                                        fontSize: '13px'\r\n                                    }}>\r\n                                        <div style={{ \r\n                                            fontWeight: '600', \r\n                                            color: '#1e40af' // ✅ Toujours bleu pour disponibilité normale\r\n                                        }}>\r\n                                            {creneau.jour} {creneau.creneau}\r\n                                        </div>\r\n                                        <div style={{ \r\n                                            display: 'flex',\r\n                                            alignItems: 'center',\r\n                                            gap: '8px'\r\n                                        }}>\r\n                                            <div style={{\r\n                                                width: '14px',\r\n                                                height: '14px',\r\n                                                backgroundColor: getLieuCouleur(creneau.lieu_id),\r\n                                                borderRadius: '3px'\r\n                                            }} />\r\n                                            <span style={{ \r\n                                                color: '#6b7280',\r\n                                                fontSize: '12px'\r\n                                            }}>\r\n                                                {getLieuNom(creneau.lieu_id)}\r\n                                            </span>\r\n                                            <span style={{\r\n                                                fontSize: '10px',\r\n                                                fontWeight: '600',\r\n                                                padding: '2px 6px',\r\n                                                borderRadius: '4px',\r\n                                                backgroundColor: '#3b82f6', // ✅ Toujours bleu pour disponibilité normale\r\n                                                color: 'white'\r\n                                            }}>\r\n                                                VALIDÉ\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                )}\r\n\r\n                {/* Boutons d'action */}\r\n                <div style={{ display: 'flex', gap: '12px' }}>\r\n                    <button\r\n                        onClick={() => router.push('/formateur')}\r\n                        style={{\r\n                            flex: 1,\r\n                            padding: '12px',\r\n                            background: '#6b7280',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '16px',\r\n                            fontWeight: '600',\r\n                            cursor: 'pointer',\r\n                            transition: 'transform 0.2s'\r\n                        }}\r\n                    >\r\n                        Retour à l'accueil\r\n                    </button>\r\n                    \r\n                    {planningType.length === 0 && (\r\n                        <button\r\n                            onClick={() => router.push('/formateur/planning-formateur-type')}\r\n                            style={{\r\n                                flex: 1,\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                textAlign: 'center',\r\n                                padding: '12px',\r\n                                borderRadius: '12px',\r\n                                fontWeight: 'bold',\r\n                                border: 'none',\r\n                                cursor: 'pointer',\r\n                                fontSize: '14px'\r\n                            }}\r\n                        >\r\n                            Déclarer planning\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}",
          "taille": 23370,
          "lignes": 478,
          "dateModif": "2025-08-28T19:00:40.424Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../../lib/supabaseClient'\r\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext'\r\n\r\nexport default function MonPlanningType() {\r\n    const { user, isLoading: authLoading, isAuthenticated } = useFormateurAuth()\r\n    const [planningType, setPlanningType] = useState([])\r\n    const [lieux, setLieux] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [message, setMessage] = useState('')\r\n    const router = useRouter()\r\n\r\n    const jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi']\r\n    const creneaux = ['Matin', 'AM']  // ✅ CORRECTION: AM au lieu d'Après-midi\r\n\r\n    // Protection authentification\r\n    useEffect(() => {\r\n        if (!authLoading && !isAuthenticated) {\r\n            router.push('/formateur/login')\r\n        }\r\n    }, [authLoading, isAuthenticated, router])\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            loadPlanningType(user.id)\r\n        }\r\n    }, [user])\r\n\r\n\r\n    const loadPlanningType = async (formateurId) => {\r\n        try {\r\n            console.log('🔍 Chargement planning type pour:', formateurId)\r\n\r\n            // Charger les lieux pour affichage\r\n            const { data: lieuxData, error: lieuxError } = await supabase\r\n                .from('lieux')\r\n                .select('id, nom, couleur, initiale')\r\n                .eq('archive', false)\r\n\r\n            if (lieuxError) throw lieuxError\r\n            setLieux(lieuxData || [])\r\n\r\n            // ✅ MODIFICATION: Charger SEULEMENT les disponibilités NORMALES validées\r\n            const { data: planningData, error: planningError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .select(`\r\n                    id,\r\n                    jour,\r\n                    creneau,\r\n                    statut,\r\n                    lieu_id,\r\n                    valide,\r\n                    valide_par,\r\n                    date_validation,\r\n                    created_at\r\n                `)\r\n                .eq('formateur_id', formateurId)\r\n                .eq('valide', true)\r\n                .eq('statut', 'disponible')  // ✅ NOUVEAU: Filtre SEULEMENT les dispo normales\r\n                .order('created_at')\r\n\r\n            if (planningError) throw planningError\r\n\r\n            console.log('✅ Planning type NORMAL validé chargé:', planningData?.length || 0, 'créneaux')\r\n            setPlanningType(planningData || [])\r\n\r\n        } catch (error) {\r\n            console.error('Erreur chargement planning:', error)\r\n            setMessage('Erreur lors du chargement de votre planning')\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Fonction pour obtenir les détails d'un créneau\r\n    const getCreneauInfo = (jour, creneau) => {\r\n        return planningType.find(pt => pt.jour === jour && pt.creneau === creneau)\r\n    }\r\n\r\n    // Fonction pour obtenir la couleur d'un lieu\r\n    const getLieuCouleur = (lieuId) => {\r\n        if (!lieuId) return '#f3f4f6'\r\n        const lieu = lieux.find(l => l.id === lieuId)\r\n        return lieu?.couleur || '#f3f4f6'\r\n    }\r\n\r\n    // Fonction pour obtenir le nom d'un lieu\r\n    const getLieuNom = (lieuId) => {\r\n        if (!lieuId) return 'Sans préférence'\r\n        const lieu = lieux.find(l => l.id === lieuId)\r\n        return lieu?.nom || 'Lieu inconnu'\r\n    }\r\n\r\n    // Fonction pour déterminer la couleur du texte\r\n    const getTextColor = (backgroundColor) => {\r\n        if (!backgroundColor || backgroundColor === '#f3f4f6') return '#000000'\r\n        \r\n        const hex = backgroundColor.replace('#', '')\r\n        const r = parseInt(hex.substr(0, 2), 16)\r\n        const g = parseInt(hex.substr(2, 2), 16)\r\n        const b = parseInt(hex.substr(4, 2), 16)\r\n        \r\n        const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255\r\n        return luminance > 0.5 ? '#000000' : '#ffffff'\r\n    }\r\n\r\n    if (isLoading || authLoading) {\r\n        return (\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                backgroundColor: '#ffffff',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                padding: '20px'\r\n            }}>\r\n                <div style={{\r\n                    padding: '40px',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement de votre planning...</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!user) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            backgroundColor: '#ffffff',\r\n            padding: '16px'\r\n        }}>\r\n            <div style={{\r\n                maxWidth: '420px',\r\n                margin: '0 auto',\r\n                backgroundColor: 'white',\r\n                borderRadius: '24px',\r\n                padding: '20px'\r\n            }}>\r\n                {/* En-tête */}\r\n                <div style={{ marginBottom: '16px', textAlign: 'center' }}>\r\n                    <h1 style={{ \r\n                        fontSize: '20px', \r\n                        fontWeight: 'bold', \r\n                        margin: '0 0 6px 0',\r\n                        color: '#1f2937'\r\n                    }}>\r\n                        Mon Planning Type\r\n                    </h1>\r\n                    <p style={{ \r\n                        fontSize: '14px', \r\n                        color: '#6b7280',\r\n                        margin: '0'\r\n                    }}>\r\n                        Vos disponibilités habituelles validées\r\n                    </p>\r\n                </div>\r\n\r\n                {/* Messages */}\r\n                {message && (\r\n                    <div style={{\r\n                        padding: '12px',\r\n                        borderRadius: '8px',\r\n                        marginBottom: '16px',\r\n                        backgroundColor: '#fee2e2',\r\n                        color: '#991b1b',\r\n                        fontSize: '14px',\r\n                        textAlign: 'center'\r\n                    }}>\r\n                        {message}\r\n                    </div>\r\n                )}\r\n\r\n                {/* Contenu principal */}\r\n                {planningType.length === 0 ? (\r\n                    // Aucun planning validé\r\n                    <div style={{\r\n                        padding: '40px 20px',\r\n                        textAlign: 'center',\r\n                        backgroundColor: '#fef3c7',\r\n                        borderRadius: '12px',\r\n                        border: '2px solid #f59e0b'\r\n                    }}>\r\n                        <div style={{ fontSize: '48px', marginBottom: '16px' }}>📅</div>\r\n                        <h3 style={{ \r\n                            fontSize: '18px', \r\n                            fontWeight: 'bold', \r\n                            color: '#92400e',\r\n                            margin: '0 0 12px 0'\r\n                        }}>\r\n                            Planning en attente\r\n                        </h3>\r\n                        <p style={{ \r\n                            fontSize: '14px', \r\n                            color: '#92400e',\r\n                            margin: '0 0 20px 0',\r\n                            lineHeight: '1.5'\r\n                        }}>\r\n                            Vos disponibilités habituelles n'ont pas encore été validées par l'administration.\r\n                        </p>\r\n                        <div style={{\r\n                            backgroundColor: '#fffbeb',\r\n                            padding: '12px',\r\n                            borderRadius: '8px',\r\n                            fontSize: '13px',\r\n                            color: '#92400e'\r\n                        }}>\r\n                            <strong>Que faire ?</strong><br />\r\n                            Patientez ou contactez l'administration pour connaître le statut de validation.\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    // Planning validé - Affichage grille\r\n                    <>\r\n                        {/* Grille planning */}\r\n                        <div style={{\r\n                            backgroundColor: '#f9fafb',\r\n                            borderRadius: '12px',\r\n                            padding: '12px',\r\n                            marginBottom: '16px'\r\n                        }}>\r\n                            <table style={{ \r\n                                width: '100%', \r\n                                borderCollapse: 'separate',\r\n                                borderSpacing: '4px'\r\n                            }}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th style={{ \r\n                                            padding: '8px 4px',\r\n                                            fontSize: '12px',\r\n                                            fontWeight: '600',\r\n                                            color: '#6b7280',\r\n                                            textAlign: 'center',\r\n                                            width: '60px'\r\n                                        }}>\r\n                                            Créneaux\r\n                                        </th>\r\n                                        {jours.map(jour => (\r\n                                            <th key={jour} style={{ \r\n                                                padding: '8px 4px',\r\n                                                fontSize: '11px',\r\n                                                fontWeight: '600',\r\n                                                color: '#6b7280',\r\n                                                textAlign: 'center'\r\n                                            }}>\r\n                                                {jour.substring(0, 3)}\r\n                                            </th>\r\n                                        ))}\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {creneaux.map(creneau => (\r\n                                        <tr key={creneau}>\r\n                                            <td style={{ \r\n                                                padding: '8px 4px',\r\n                                                fontSize: '11px',\r\n                                                fontWeight: '600',\r\n                                                color: '#374151',\r\n                                                textAlign: 'center',\r\n                                                backgroundColor: creneau === 'Matin' ? '#fef3c7' : '#dbeafe',\r\n                                                borderRadius: '6px'\r\n                                            }}>\r\n                                                {creneau === 'Matin' ? 'M' : 'AM'}\r\n                                            </td>\r\n                                            {jours.map(jour => {\r\n                                                const creneauInfo = getCreneauInfo(jour, creneau)\r\n                                                const backgroundColor = creneauInfo ? getLieuCouleur(creneauInfo.lieu_id) : '#f3f4f6'\r\n                                                const textColor = getTextColor(backgroundColor)\r\n                                                \r\n                                                return (\r\n                                                    <td key={`${jour}-${creneau}`} style={{ \r\n                                                        padding: '0',\r\n                                                        textAlign: 'center'\r\n                                                    }}>\r\n                                                        <div style={{\r\n                                                            minHeight: '50px',\r\n                                                            backgroundColor: creneauInfo ? '#3b82f6' : '#f3f4f6', // ✅ Toujours bleu pour dispo normale\r\n                                                            color: creneauInfo ? 'white' : '#d1d5db',\r\n                                                            borderRadius: '8px',\r\n                                                            display: 'flex',\r\n                                                            alignItems: 'center',\r\n                                                            justifyContent: 'center',\r\n                                                            padding: '4px',\r\n                                                            border: creneauInfo ? \r\n                                                                `3px solid ${getLieuCouleur(creneauInfo.lieu_id)}` : \r\n                                                                '1px solid #e5e7eb',\r\n                                                            position: 'relative'\r\n                                                        }}>\r\n                                                            {creneauInfo ? (\r\n                                                                <div style={{ \r\n                                                                    fontSize: '10px',\r\n                                                                    fontWeight: 'bold',\r\n                                                                    textAlign: 'center',\r\n                                                                    lineHeight: '1.2'\r\n                                                                }}>\r\n                                                                    {lieux.find(l => l.id === creneauInfo.lieu_id)?.initiale || 'S/P'}\r\n                                                                </div>\r\n                                                            ) : (\r\n                                                                <div style={{ \r\n                                                                    fontSize: '14px',\r\n                                                                    color: '#d1d5db'\r\n                                                                }}>\r\n                                                                    -\r\n                                                                </div>\r\n                                                            )}\r\n                                                        </div>\r\n                                                    </td>\r\n                                                )\r\n                                            })}\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        {/* Légende */}\r\n                        <div style={{\r\n                            backgroundColor: '#f8fafc',\r\n                            padding: '12px',\r\n                            borderRadius: '12px',\r\n                            marginBottom: '16px'\r\n                        }}>\r\n                            <h4 style={{ \r\n                                fontSize: '14px', \r\n                                fontWeight: '600', \r\n                                color: '#374151',\r\n                                margin: '0 0 8px 0'\r\n                            }}>\r\n                                Légende\r\n                            </h4>\r\n                            <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>\r\n                                <div style={{ display: 'flex', alignItems: 'center', gap: '8px', fontSize: '13px' }}>\r\n                                    <div style={{\r\n                                        width: '16px',\r\n                                        height: '16px',\r\n                                        backgroundColor: '#3b82f6',\r\n                                        borderRadius: '4px',\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        justifyContent: 'center',\r\n                                        color: 'white',\r\n                                        fontSize: '8px',\r\n                                        fontWeight: 'bold'\r\n                                    }}>\r\n                                        ✓\r\n                                    </div>\r\n                                    <span style={{ color: '#374151' }}>Disponibilité habituelle validée</span>\r\n                                </div>\r\n                                <div style={{ display: 'flex', alignItems: 'center', gap: '8px', fontSize: '13px' }}>\r\n                                    <div style={{\r\n                                        width: '16px',\r\n                                        height: '16px',\r\n                                        border: '3px solid #10b981',\r\n                                        borderRadius: '4px'\r\n                                    }} />\r\n                                    <span style={{ color: '#374151' }}>Bordure colorée = lieu d'intervention</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Détails des créneaux */}\r\n                        <div style={{\r\n                            backgroundColor: '#f8fafc',\r\n                            padding: '12px',\r\n                            borderRadius: '12px',\r\n                            marginBottom: '16px'\r\n                        }}>\r\n                            <h4 style={{ \r\n                                fontSize: '14px', \r\n                                fontWeight: '600', \r\n                                color: '#374151',\r\n                                margin: '0 0 8px 0'\r\n                            }}>\r\n                                Vos disponibilités habituelles\r\n                            </h4>\r\n                            <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>\r\n                                {planningType.map((creneau, index) => (\r\n                                    <div key={index} style={{\r\n                                        display: 'flex',\r\n                                        justifyContent: 'space-between',\r\n                                        alignItems: 'center',\r\n                                        padding: '12px',\r\n                                        backgroundColor: '#eff6ff', // ✅ Toujours bleu pour disponibilité normale\r\n                                        borderRadius: '8px',\r\n                                        border: `2px solid ${getLieuCouleur(creneau.lieu_id)}`,\r\n                                        fontSize: '13px'\r\n                                    }}>\r\n                                        <div style={{ \r\n                                            fontWeight: '600', \r\n                                            color: '#1e40af' // ✅ Toujours bleu pour disponibilité normale\r\n                                        }}>\r\n                                            {creneau.jour} {creneau.creneau}\r\n                                        </div>\r\n                                        <div style={{ \r\n                                            display: 'flex',\r\n                                            alignItems: 'center',\r\n                                            gap: '8px'\r\n                                        }}>\r\n                                            <div style={{\r\n                                                width: '14px',\r\n                                                height: '14px',\r\n                                                backgroundColor: getLieuCouleur(creneau.lieu_id),\r\n                                                borderRadius: '3px'\r\n                                            }} />\r\n                                            <span style={{ \r\n                                                color: '#6b7280',\r\n                                                fontSize: '12px'\r\n                                            }}>\r\n                                                {getLieuNom(creneau.lieu_id)}\r\n                                            </span>\r\n                                            <span style={{\r\n                                                fontSize: '10px',\r\n                                                fontWeight: '600',\r\n                                                padding: '2px 6px',\r\n                                                borderRadius: '4px',\r\n                                                backgroundColor: '#3b82f6', // ✅ Toujours bleu pour disponibilité normale\r\n                                                color: 'white'\r\n                                            }}>\r\n                                                VALIDÉ\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                )}\r\n\r\n                {/* Boutons d'action */}\r\n                <div style={{ display: 'flex', gap: '12px' }}>\r\n                    <button\r\n                        onClick={() => router.push('/formateur')}\r\n                        style={{\r\n                            flex: 1,\r\n                            padding: '12px',\r\n                            background: '#6b7280',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '16px',\r\n                            fontWeight: '600',\r\n                            cursor: 'pointer',\r\n                            transition: 'transform 0.2s'\r\n                        }}\r\n                    >\r\n                        Retour à l'accueil\r\n                    </button>\r\n                    \r\n                    {planningType.length === 0 && (\r\n                        <button\r\n                            onClick={() => router.push('/formateur/planning-formateur-type')}\r\n                            style={{\r\n                                flex: 1,\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                textAlign: 'center',\r\n                                padding: '12px',\r\n                                borderRadius: '12px',\r\n                                fontWeight: 'bold',\r\n                                border: 'none',\r\n                                cursor: 'pointer',\r\n                                fontSize: '14px'\r\n                            }}\r\n                        >\r\n                            Déclarer planning\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}",
          "taille": 23370,
          "lignes": 478,
          "dateModif": "2025-08-22T12:29:13.821Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/formateur/planning-formateur-type.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../../lib/supabaseClient'\r\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext'\r\n\r\nexport default function PlanningFormateurType() {\r\n    const { user, isLoading: authLoading, isAuthenticated } = useFormateurAuth()\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [lieux, setLieux] = useState([])\r\n    const [planningData, setPlanningData] = useState({})\r\n    const [creneauSelectionne, setCreneauSelectionne] = useState(null)\r\n    const [statutSelectionne, setStatutSelectionne] = useState('')\r\n    const [lieuSelectionne, setLieuSelectionne] = useState(null)\r\n    const [creneauTermine, setCreneauTermine] = useState(false)\r\n    const [showAide, setShowAide] = useState(false)\r\n    const [showInitialPopup, setShowInitialPopup] = useState(true)\r\n    const [isSaving, setIsSaving] = useState(false)\r\n    // ✅ NOUVEAU: États pour message facultatif\r\n    const [showMessageModal, setShowMessageModal] = useState(false)\r\n    const [messageFacultatif, setMessageFacultatif] = useState('')\r\n    const router = useRouter()\r\n\r\n    // Configuration des jours et créneaux - ✅ AM au lieu d'Après-midi\r\n    const jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi']\r\n    const creneaux = ['Matin', 'AM']\r\n\r\n    // Configuration des statuts avec couleurs\r\n    const statuts = [\r\n        { \r\n            key: 'disponible', \r\n            label: 'DISPONIBLE', \r\n            couleur: '#3b82f6',\r\n            description: 'disponible'\r\n        },\r\n        { \r\n            key: 'dispo_except', \r\n            label: 'DISPO EXCEPT.', \r\n            couleur: '#fbbf24',\r\n            description: 'dispo exceptionnelle'\r\n        },\r\n        { \r\n            key: 'indisponible', \r\n            label: 'INDISPONIBLE', \r\n            couleur: '#9ca3af',\r\n            description: 'indisponible'\r\n        }\r\n    ]\r\n\r\n    // Protection authentification\r\n    useEffect(() => {\r\n        if (!authLoading && !isAuthenticated) {\r\n            router.push('/formateur/login')\r\n        }\r\n    }, [authLoading, isAuthenticated, router])\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            chargerDonnees(user.id)\r\n            setIsLoading(false)\r\n        }\r\n    }, [user])\r\n\r\n\r\n    const chargerDonnees = async (formateurId) => {\r\n        try {\r\n            // Charger les lieux depuis la BDD\r\n            const { data: lieuxData, error: lieuxError } = await supabase\r\n                .from('lieux')\r\n                .select('id, nom, initiale, couleur')\r\n                .eq('archive', false)\r\n                .order('nom')\r\n\r\n            if (lieuxError) {\r\n                console.error('Erreur lieux:', lieuxError)\r\n                setLieux([])\r\n            } else {\r\n                setLieux(lieuxData || [])\r\n            }\r\n\r\n            // Charger le planning type existant du formateur\r\n            const { data: planningExistant, error: planningError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .select(`\r\n                    id,\r\n                    jour,\r\n                    creneau,\r\n                    statut,\r\n                    lieu_id,\r\n                    lieux:lieu_id (\r\n                        id,\r\n                        nom,\r\n                        initiale,\r\n                        couleur\r\n                    )\r\n                `)\r\n                .eq('formateur_id', formateurId)\r\n\r\n            if (planningError) {\r\n                console.error('Erreur chargement planning:', planningError)\r\n            }\r\n\r\n            // Initialiser le planning avec les données existantes ou valeurs par défaut\r\n            const initialPlanning = {}\r\n            jours.forEach(jour => {\r\n                creneaux.forEach(creneau => {\r\n                    const creneauKey = `${jour}-${creneau}`\r\n                    \r\n                    // Chercher si ce créneau existe déjà     \r\n                    const creneauExistant = planningExistant?.find(\r\n                        p => p.jour === jour && p.creneau === creneau\r\n                    )\r\n                    \r\n                    if (creneauExistant) {\r\n                        const statut = statuts.find(s => s.key === creneauExistant.statut)\r\n                        initialPlanning[creneauKey] = {\r\n                            id: creneauExistant.id,\r\n                            statut: creneauExistant.statut,\r\n                            lieu: creneauExistant.lieux,\r\n                            couleurStatut: statut?.couleur || '#9ca3af',\r\n                            couleurLieu: creneauExistant.lieux?.couleur || null,\r\n                            // ✅ CORRECTION: Marquer explicitement \"sans préférence\" si lieu_id est null mais statut disponible\r\n                            sansPreference: creneauExistant.lieu_id === null && creneauExistant.statut !== 'indisponible'\r\n                        }\r\n                    } else {\r\n                        // Valeur par défaut : indisponible\r\n                        initialPlanning[creneauKey] = {\r\n                            id: null,\r\n                            statut: 'indisponible',\r\n                            lieu: null,\r\n                            couleurStatut: '#9ca3af',\r\n                            couleurLieu: null,\r\n                            sansPreference: false\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            \r\n            setPlanningData(initialPlanning)\r\n\r\n        } catch (error) {\r\n            console.error('Erreur chargement données:', error)\r\n            setLieux([])\r\n        }\r\n    }\r\n\r\n    // Obtenir le message d'instruction selon l'état\r\n    const getInstructionMessage = () => {\r\n        if (creneauTermine) {\r\n            return \"✅ Vous souhaitez déclarer un autre créneau ? Choisissez une plage (ex: mardi après-midi). Sinon validez.\"\r\n        }\r\n        \r\n        if (!creneauSelectionne) {\r\n            return \"⬇️ Choisissez une plage du planning où vous souhaitez intervenir\"\r\n        }\r\n        \r\n        if (!statutSelectionne) {\r\n            return \"⬇️ Choisissez un statut\"\r\n        }\r\n        \r\n        if (statutSelectionne && !lieuSelectionne && statutSelectionne !== 'indisponible') {\r\n            return \"⬇️ Choisissez un lieu ou 'Sans Préférence'\"\r\n        }\r\n        \r\n        return \"✅ Vous souhaitez déclarer un autre créneau ? Choisissez une plage (ex: mardi après-midi). Sinon validez.\"\r\n    }\r\n\r\n    // Workflow en 3 étapes : Créneau → Statut → Lieu\r\n    const handleCreneauClick = (jour, creneau) => {\r\n        const creneauKey = `${jour}-${creneau}`\r\n        setCreneauSelectionne(creneauKey)\r\n        setStatutSelectionne('')\r\n        setLieuSelectionne(null)\r\n        setCreneauTermine(false)\r\n    }\r\n\r\n    const handleStatutClick = (statutKey) => {\r\n        if (!creneauSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un créneau (ex: Lundi matin)')\r\n            return\r\n        }\r\n        \r\n        setStatutSelectionne(statutKey)\r\n        \r\n        if (statutKey === 'indisponible') {\r\n            const statut = statuts.find(s => s.key === statutKey)\r\n            setPlanningData(prev => ({\r\n                ...prev,\r\n                [creneauSelectionne]: {\r\n                    ...prev[creneauSelectionne],\r\n                    statut: statutKey,\r\n                    lieu: null,\r\n                    couleurStatut: statut.couleur,\r\n                    couleurLieu: null,\r\n                    sansPreference: false\r\n                }\r\n            }))\r\n            \r\n            setCreneauTermine(true)\r\n            setCreneauSelectionne(null)\r\n            setStatutSelectionne('')\r\n        }\r\n    }\r\n\r\n    const handleLieuClick = (lieu) => {\r\n        if (!creneauSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un créneau')\r\n            return\r\n        }\r\n        \r\n        if (!statutSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un statut')\r\n            return\r\n        }\r\n\r\n        if (statutSelectionne === 'indisponible') {\r\n            alert('Pas besoin de lieu pour \"indisponible\"')\r\n            return\r\n        }\r\n\r\n        const statut = statuts.find(s => s.key === statutSelectionne)\r\n        \r\n        setPlanningData(prev => ({\r\n            ...prev,\r\n            [creneauSelectionne]: {\r\n                ...prev[creneauSelectionne],\r\n                statut: statutSelectionne,\r\n                lieu: lieu,\r\n                couleurStatut: statut.couleur,\r\n                couleurLieu: lieu ? lieu.couleur : null,\r\n                sansPreference: false\r\n            }\r\n        }))\r\n\r\n        setCreneauTermine(true)\r\n        setCreneauSelectionne(null)\r\n        setStatutSelectionne('')\r\n        setLieuSelectionne(null)\r\n    }\r\n\r\n    // ✅ FONCTION CORRIGÉE : Gestion \"Sans Préférence\"\r\n    const handleSansPreference = () => {\r\n        if (!creneauSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un créneau')\r\n            return\r\n        }\r\n        \r\n        if (!statutSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un statut')\r\n            return\r\n        }\r\n\r\n        if (statutSelectionne === 'indisponible') {\r\n            alert('Pas besoin de lieu pour \"indisponible\"')\r\n            return\r\n        }\r\n\r\n        const statut = statuts.find(s => s.key === statutSelectionne)\r\n        \r\n        // ✅ CORRECTION: Marquer explicitement comme \"sans préférence\"\r\n        setPlanningData(prev => ({\r\n            ...prev,\r\n            [creneauSelectionne]: {\r\n                ...prev[creneauSelectionne],\r\n                statut: statutSelectionne,\r\n                lieu: null, // Sans préférence = lieu_id null\r\n                couleurStatut: statut.couleur,\r\n                couleurLieu: null,\r\n                sansPreference: true // ✅ NOUVEAU: Flag pour identifier \"sans préférence\"\r\n            }\r\n        }))\r\n\r\n        setCreneauTermine(true)\r\n        setCreneauSelectionne(null)\r\n        setStatutSelectionne('')\r\n        setLieuSelectionne(null)\r\n    }\r\n\r\n    // ✅ NOUVEAU: Gestion de la validation avec modal message facultatif\r\n    const handleValider = async () => {\r\n        const creneauxModifies = Object.values(planningData).filter(\r\n            data => data.statut !== 'indisponible'\r\n        ).length\r\n        \r\n        if (creneauxModifies === 0) {\r\n            if (!window.confirm('Vous êtes indisponible sur tous les créneaux. Voulez-vous vraiment valider ce planning ?')) {\r\n                return\r\n            }\r\n        }\r\n\r\n        // ✅ NOUVEAU: Afficher modal pour message facultatif\r\n        setShowMessageModal(true)\r\n    }\r\n\r\n    // ✅ NOUVEAU: Fonction d'envoi de message automatique vers admin\r\n    const envoyerMessageAdmin = async (messageFacultatif = '') => {\r\n        try {\r\n            if (!user) {\r\n                console.error('Données utilisateur manquantes')\r\n                return\r\n            }\r\n\r\n            const formateurNom = `${user.prenom} ${user.nom}`\r\n            \r\n            let contenu = `${formateurNom} a déclaré son planning type. Veuillez le valider.`\r\n            \r\n            // Ajouter le message facultatif s'il existe\r\n            if (messageFacultatif.trim()) {\r\n                contenu += `\\n\\nMessage du formateur :\\n\"${messageFacultatif.trim()}\"`\r\n            }\r\n            \r\n            const { error } = await supabase\r\n                .from('messages')\r\n                .insert({\r\n                    expediteur_id: user.id,\r\n                    destinataire_id: null, // null = admin\r\n                    expediteur: formateurNom,\r\n                    destinataire: 'Coordination ACLEF',\r\n                    objet: 'Validation de planning type',\r\n                    contenu: contenu,\r\n                    type: 'planning',\r\n                    lu: false,\r\n                    archive: false,\r\n                    statut_validation: 'a_traiter',\r\n                    date: new Date().toISOString().split('T')[0],\r\n                    heure: new Date().toTimeString().slice(0, 5)\r\n                })\r\n\r\n            if (error) {\r\n                console.error('Erreur envoi message admin:', error)\r\n                // Ne pas faire échouer la sauvegarde pour un problème de message\r\n            } else {\r\n                console.log('✅ Message automatique envoyé à admin:', formateurNom)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n            // Ne pas faire échouer la sauvegarde pour un problème de message\r\n        }\r\n    }\r\n\r\n    // ✅ MODIFIÉ: Fonction de validation finale avec envoi message\r\n    const handleValidationFinale = async () => {\r\n        setShowMessageModal(false)\r\n        \r\n        // Envoyer message vers admin AVANT la sauvegarde\r\n        await envoyerMessageAdmin(messageFacultatif)\r\n        \r\n        // Puis sauvegarder le planning\r\n        await handleSauvegarde()\r\n        \r\n        // Reset du message facultatif\r\n        setMessageFacultatif('')\r\n    }\r\n\r\n    // Sauvegarde en BDD SIMPLIFIÉE\r\n    const handleSauvegarde = async () => {\r\n        if (!user) {\r\n            alert('Erreur: utilisateur non connecté')\r\n            return\r\n        }\r\n        \r\n        setIsSaving(true)\r\n        \r\n        try {\r\n            // Préparer les données à insérer/mettre à jour\r\n            const planningEntries = []\r\n            \r\n            jours.forEach(jour => {\r\n                creneaux.forEach(creneau => {\r\n                    const creneauKey = `${jour}-${creneau}`\r\n                    const data = planningData[creneauKey]\r\n                    \r\n                    planningEntries.push({\r\n                        formateur_id: user.id,\r\n                        jour: jour,\r\n                        creneau: creneau,\r\n                        statut: data.statut,\r\n                        lieu_id: data.lieu?.id || null // ✅ Reste null pour \"sans préférence\"\r\n                    })\r\n                })\r\n            })\r\n\r\n            // Supprimer les anciennes déclarations du formateur\r\n            const { error: deleteError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .delete()\r\n                .eq('formateur_id', user.id)\r\n\r\n            if (deleteError) {\r\n                throw new Error(`Erreur suppression: ${deleteError.message}`)\r\n            }\r\n\r\n            // Insérer les nouvelles déclarations\r\n            const { error: insertError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .insert(planningEntries)\r\n\r\n            if (insertError) {\r\n                throw new Error(`Erreur insertion: ${insertError.message}`)\r\n            }\r\n\r\n            // Afficher confirmation et rediriger\r\n            const confirmationDiv = document.createElement('div')\r\n            confirmationDiv.style.cssText = `\r\n                position: fixed;\r\n                top: 50%;\r\n                left: 50%;\r\n                transform: translate(-50%, -50%);\r\n                background: white;\r\n                padding: 30px;\r\n                border-radius: 15px;\r\n                box-shadow: 0 10px 25px rgba(0,0,0,0.3);\r\n                z-index: 9999;\r\n                text-align: center;\r\n                font-family: system-ui;\r\n                font-size: 16px;\r\n                font-weight: bold;\r\n                color: #16a34a;\r\n                border: 3px solid #16a34a;\r\n                max-width: 350px;\r\n                line-height: 1.4;\r\n            `\r\n            confirmationDiv.innerHTML = `\r\n                <div style=\"font-size: 24px; margin-bottom: 15px;\">✅</div>\r\n                <div style=\"margin-bottom: 15px;\">\r\n                    Planning type sauvegardé avec succès !\r\n                </div>\r\n                <div style=\"margin-top: 15px; font-size: 14px; color: #6b7280;\">\r\n                    Redirection dans <span id=\"countdown\">3</span> secondes...\r\n                </div>\r\n            `\r\n            \r\n            document.body.appendChild(confirmationDiv)\r\n            \r\n            let seconds = 3\r\n            const countdownElement = document.getElementById('countdown')\r\n            const countdownInterval = setInterval(() => {\r\n                seconds--\r\n                if (countdownElement) {\r\n                    countdownElement.textContent = seconds\r\n                }\r\n                if (seconds <= 0) {\r\n                    clearInterval(countdownInterval)\r\n                    document.body.removeChild(confirmationDiv)\r\n                    router.push('/formateur')\r\n                }\r\n            }, 1000)\r\n\r\n        } catch (error) {\r\n            console.error('Erreur sauvegarde:', error)\r\n            alert('Erreur lors de la sauvegarde: ' + error.message)\r\n        } finally {\r\n            setIsSaving(false)\r\n        }\r\n    }\r\n\r\n    // Rendu d'une case de créneau\r\n    const renderCreneau = (jour, creneau) => {\r\n        const creneauKey = `${jour}-${creneau}`\r\n        const data = planningData[creneauKey]\r\n        const isSelected = creneauSelectionne === creneauKey\r\n        \r\n        const style = {\r\n            width: '100%',\r\n            height: '60px',\r\n            border: '2px solid #d1d5db',\r\n            borderRadius: '8px',\r\n            backgroundColor: data?.couleurStatut || '#f3f4f6',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            cursor: 'pointer',\r\n            fontSize: '12px',\r\n            fontWeight: 'bold',\r\n            color: data?.couleurStatut ? '#fff' : '#6b7280',\r\n            position: 'relative',\r\n            transition: 'all 0.2s',\r\n            borderColor: data?.couleurLieu || '#d1d5db',\r\n            borderWidth: data?.couleurLieu ? '3px' : '2px'\r\n        }\r\n\r\n        return (\r\n            <div\r\n                key={creneauKey}\r\n                style={style}\r\n                onClick={() => handleCreneauClick(jour, creneau)}\r\n            >\r\n                {/* ✅ AFFICHAGE CORRIGÉ : SP si sans préférence OU initiales du lieu */}\r\n                {data?.lieu?.initiale ? (\r\n                    <span style={{ fontSize: '14px', fontWeight: 'bold' }}>\r\n                        {data.lieu.initiale}\r\n                    </span>\r\n                ) : data?.sansPreference ? (\r\n                    <span style={{ fontSize: '12px', fontWeight: 'bold' }}>\r\n                        SP\r\n                    </span>\r\n                ) : null}\r\n                \r\n                {isSelected && (\r\n                    <div style={{\r\n                        position: 'absolute',\r\n                        top: '5px',\r\n                        right: '5px',\r\n                        fontSize: '16px',\r\n                        color: '#fbbf24'\r\n                    }}>\r\n                        ⭐\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // Guide contextuel mobile et positionné\r\n    const GuideBox = () => (\r\n        <div style={{\r\n            backgroundColor: '#e5f3ff',\r\n            border: '3px solid #3b82f6',\r\n            borderRadius: '10px',\r\n            padding: '10px',\r\n            marginBottom: '12px',\r\n            fontSize: '14px',\r\n            textAlign: 'center',\r\n            fontWeight: 'bold',\r\n            color: '#1d4ed8',\r\n            transition: 'all 0.5s ease-in-out',\r\n            boxShadow: '0 3px 8px rgba(59, 130, 246, 0.2)'\r\n        }}>\r\n            {getInstructionMessage()}\r\n        </div>\r\n    )\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                backgroundColor: '#ffffff',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                padding: '20px'\r\n            }}>\r\n                <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement...</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!user) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div style={{ padding: '15px', maxWidth: '400px', margin: '0 auto', fontFamily: 'system-ui' }}>\r\n            {/* ✅ NOUVEAU: Modal pour message facultatif */}\r\n            {showMessageModal && (\r\n                <div style={{\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    backgroundColor: 'rgba(0,0,0,0.5)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    zIndex: 1000\r\n                }}>\r\n                    <div style={{\r\n                        backgroundColor: 'white',\r\n                        borderRadius: '15px',\r\n                        padding: '25px',\r\n                        maxWidth: '380px',\r\n                        width: '90%'\r\n                    }}>\r\n                        <h3 style={{ \r\n                            margin: '0 0 15px 0', \r\n                            fontSize: '18px', \r\n                            color: '#374151',\r\n                            textAlign: 'center'\r\n                        }}>\r\n                            💬 Message facultatif\r\n                        </h3>\r\n                        <p style={{ \r\n                            fontSize: '14px', \r\n                            color: '#6b7280', \r\n                            margin: '0 0 15px 0',\r\n                            textAlign: 'center',\r\n                            lineHeight: '1.4'\r\n                        }}>\r\n                            Souhaitez-vous ajouter un message pour l'équipe de coordination ?\r\n                            <br />\r\n                            <em>(ex: \"Je préfère être sur Châtellerault, CCP ou MPT\")</em>\r\n                        </p>\r\n                        <textarea\r\n                            value={messageFacultatif}\r\n                            onChange={(e) => setMessageFacultatif(e.target.value)}\r\n                            placeholder=\"Votre message (optionnel)...\"\r\n                            rows={4}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '12px',\r\n                                border: '2px solid #e5e7eb',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                resize: 'vertical',\r\n                                boxSizing: 'border-box',\r\n                                marginBottom: '20px'\r\n                            }}\r\n                        />\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                onClick={() => setShowMessageModal(false)}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    padding: '12px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: 'bold',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                            <button\r\n                                onClick={handleValidationFinale}\r\n                                disabled={isSaving}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    backgroundColor: isSaving ? '#9ca3af' : '#10b981',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    padding: '12px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: 'bold',\r\n                                    cursor: isSaving ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                {isSaving ? 'Envoi...' : 'Valider'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Popup d'information initiale */}\r\n            {showInitialPopup && (\r\n                <div style={{\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    backgroundColor: 'rgba(0,0,0,0.5)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    zIndex: 1000\r\n                }}>\r\n                    <div style={{\r\n                        backgroundColor: 'white',\r\n                        borderRadius: '15px',\r\n                        padding: '25px',\r\n                        maxWidth: '350px',\r\n                        width: '90%',\r\n                        textAlign: 'center'\r\n                    }}>\r\n                        <h3 style={{ margin: '0 0 15px 0', fontSize: '18px', color: '#d97706' }}>\r\n                            ⚠️ Information importante\r\n                        </h3>\r\n                        <p style={{ \r\n                            fontSize: '14px', \r\n                            color: '#374151', \r\n                            margin: '0 0 15px 0',\r\n                            lineHeight: '1.4'\r\n                        }}>\r\n                            En règle générale, cela ne se fait qu'une seule fois par an, parlez-en au responsable de formation si des modifications sont nécessaires.\r\n                        </p>\r\n                        <p style={{ \r\n                            fontSize: '14px', \r\n                            color: '#d97706', \r\n                            margin: '0 0 20px 0',\r\n                            fontWeight: 'bold',\r\n                            lineHeight: '1.4'\r\n                        }}>\r\n                            ⚠️ Pour vos vacances ou absences temporaires, utilisez \"Modifications ponctuelles\"\r\n                        </p>\r\n                        <button\r\n                            onClick={() => setShowInitialPopup(false)}\r\n                            style={{\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                padding: '12px 24px',\r\n                                fontSize: '14px',\r\n                                fontWeight: 'bold',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            OK, j'ai compris\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* En-tête avec aide */}\r\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '12px' }}>\r\n                <h2 style={{ margin: 0, fontSize: '17px', fontWeight: 'bold' }}>\r\n                    Mon planning type\r\n                </h2>\r\n                <button\r\n                    onClick={() => setShowAide(!showAide)}\r\n                    style={{\r\n                        backgroundColor: '#ef4444',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '18px',\r\n                        padding: '6px 14px',\r\n                        fontSize: '13px',\r\n                        fontWeight: 'bold',\r\n                        cursor: 'pointer'\r\n                    }}\r\n                >\r\n                    Aide\r\n                </button>\r\n            </div>\r\n\r\n            {/* Texte explicatif */}\r\n            <div style={{ \r\n                padding: '8px', \r\n                marginBottom: '12px',\r\n                fontSize: '12px',\r\n                lineHeight: '1.2'\r\n            }}>\r\n                <p style={{ margin: 0, textAlign: 'center', fontWeight: 'bold' }}>\r\n                    Vous allez déclarer les créneaux et les lieux de vos interventions régulières pour l'année 2025-2026.\r\n                </p>\r\n            </div>\r\n\r\n            {/* Aide contextuelle */}\r\n            {showAide && (\r\n                <div style={{\r\n                    backgroundColor: '#e5f3ff',\r\n                    border: '2px solid #3b82f6',\r\n                    borderRadius: '8px',\r\n                    padding: '12px',\r\n                    marginBottom: '15px',\r\n                    fontSize: '12px'\r\n                }}>\r\n                    <div style={{ marginBottom: '8px' }}>\r\n                        <p style={{ margin: '0 0 3px 0', fontWeight: 'bold', fontSize: '11px' }}>\r\n                            🔘 Disponible : Vous pouvez intervenir sur ce créneau normalement.\r\n                        </p>\r\n                        <p style={{ margin: '0 0 3px 0', fontWeight: 'bold', fontSize: '11px' }}>\r\n                            🟡 Disponible exceptionnellement : Vous pouvez intervenir exceptionnellement sur ce créneau (par exemple, pour remplacer un bénévole absent.)\r\n                        </p>\r\n                        <p style={{ margin: '0 0 8px 0', fontWeight: 'bold', fontSize: '11px' }}>\r\n                            🟢 Sans Préférence (SP) : Le lieu d'intervention n'a pas d'importance pour vous.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Guide contextuel positionné AVANT le planning si pas de créneau sélectionné */}\r\n            {!creneauSelectionne && <GuideBox />}\r\n\r\n            {/* Grille du planning */}\r\n            <div style={{ marginBottom: '12px' }}>        \r\n                {/* En-têtes des jours */}\r\n                <div style={{ display: 'grid', gridTemplateColumns: '65px repeat(5, 1fr)', gap: '2px', marginBottom: '4px' }}>\r\n                    <div></div>\r\n                    {jours.map(jour => (\r\n                        <div key={jour} style={{ \r\n                            textAlign: 'center', \r\n                            fontWeight: 'bold', \r\n                            fontSize: '10px',\r\n                            color: '#374151'\r\n                        }}>\r\n                            {jour}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* Grille des créneaux */}\r\n                {creneaux.map(creneau => (\r\n                    <div key={creneau} style={{ \r\n                        display: 'grid', \r\n                        gridTemplateColumns: '65px repeat(5, 1fr)', \r\n                        gap: '2px', \r\n                        marginBottom: '4px' \r\n                    }}>\r\n                        <div style={{ \r\n                            display: 'flex', \r\n                            alignItems: 'center', \r\n                            fontSize: '10px', \r\n                            fontWeight: 'bold',\r\n                            color: '#374151'\r\n                        }}>\r\n                            {creneau}\r\n                        </div>\r\n                        {jours.map(jour => renderCreneau(jour, creneau))}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {/* Guide contextuel positionné AVANT les statuts si créneau sélectionné mais pas de statut */}\r\n            {creneauSelectionne && !statutSelectionne && <GuideBox />}\r\n\r\n            {/* Boutons de statut colorés */}\r\n            <div style={{ marginBottom: '12px' }}>        \r\n                <div style={{ display: 'flex', gap: '4px', marginBottom: '8px' }}>\r\n                    {statuts.map(statut => (\r\n                        <button\r\n                            key={statut.key}\r\n                            onClick={() => handleStatutClick(statut.key)}\r\n                            style={{\r\n                                flex: 1,\r\n                                padding: '8px 4px',\r\n                                backgroundColor: statut.couleur,\r\n                                color: 'white',\r\n                                border: statutSelectionne === statut.key ? '3px solid #000' : '2px solid transparent',\r\n                                borderRadius: '6px',\r\n                                fontSize: '10px',\r\n                                fontWeight: 'bold',\r\n                                cursor: 'pointer',\r\n                                transition: 'all 0.2s',\r\n                                opacity: !creneauSelectionne ? 0.5 : 1\r\n                            }}\r\n                            disabled={!creneauSelectionne}\r\n                        >\r\n                            {statut.label}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Guide contextuel positionné AVANT les lieux si statut sélectionné mais pas de lieu */}\r\n            {creneauSelectionne && statutSelectionne && statutSelectionne !== 'indisponible' && !lieuSelectionne && <GuideBox />}\r\n\r\n            {/* ✅ BOUTONS DE LIEUX CORRIGÉS - SP en premier, tous sur la même ligne */}\r\n            <div style={{ marginBottom: '8px' }}>        \r\n                <div style={{ \r\n                    display: 'grid', \r\n                    gridTemplateColumns: 'repeat(5, 1fr)', // ✅ 5 colonnes exactement\r\n                    gap: '4px',\r\n                    marginBottom: '8px'\r\n                }}>\r\n                    {/* ✅ BOUTON SANS PRÉFÉRENCE EN PREMIER */}\r\n                    <button\r\n                        onClick={handleSansPreference}\r\n                        style={{\r\n                            padding: '10px 4px',\r\n                            backgroundColor: 'white',\r\n                            border: '3px solid #6b7280',\r\n                            borderRadius: '6px',\r\n                            fontSize: '10px',\r\n                            fontWeight: 'bold',\r\n                            color: '#6b7280',\r\n                            cursor: 'pointer',\r\n                            transition: 'all 0.2s',\r\n                            opacity: !creneauSelectionne || !statutSelectionne || statutSelectionne === 'indisponible' ? 0.5 : 1\r\n                        }}\r\n                        disabled={!creneauSelectionne || !statutSelectionne || statutSelectionne === 'indisponible'}\r\n                    >\r\n                        <div style={{ fontSize: '12px', marginBottom: '1px' }}>\r\n                            SP\r\n                        </div>\r\n                        <div style={{ fontSize: '8px' }}>\r\n                            Sans Préf.\r\n                        </div>\r\n                    </button>\r\n\r\n                    {/* ✅ VRAIS LIEUX ENSUITE */}\r\n                    {lieux.map(lieu => (\r\n                        <button\r\n                            key={lieu.id}\r\n                            onClick={() => handleLieuClick(lieu)}\r\n                            style={{\r\n                                padding: '10px 4px',\r\n                                backgroundColor: 'white',\r\n                                border: `3px solid ${lieu.couleur}`,\r\n                                borderRadius: '6px',\r\n                                fontSize: '10px',\r\n                                fontWeight: 'bold',\r\n                                color: lieu.couleur,\r\n                                cursor: 'pointer',\r\n                                transition: 'all 0.2s',\r\n                                opacity: !creneauSelectionne || !statutSelectionne || statutSelectionne === 'indisponible' ? 0.5 : 1,\r\n                                transform: lieuSelectionne?.id === lieu.id ? 'scale(1.05)' : 'scale(1)'\r\n                            }}\r\n                            disabled={!creneauSelectionne || !statutSelectionne || statutSelectionne === 'indisponible'}\r\n                        >\r\n                            <div style={{ fontSize: '12px', marginBottom: '1px' }}>\r\n                                {lieu.initiale}\r\n                            </div>\r\n                            <div style={{ fontSize: '8px' }}>\r\n                                {lieu.nom}\r\n                            </div>\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Guide contextuel positionné AVANT les boutons d'action si créneau terminé */}\r\n            {creneauTermine && <GuideBox />}\r\n\r\n            {/* Boutons d'action */}\r\n            <div style={{ display: 'flex', gap: '10px', marginBottom: '16px' }}>        \r\n                <button\r\n                    onClick={handleValider}\r\n                    disabled={isSaving}\r\n                    style={{\r\n                        width: '100%',\r\n                        backgroundColor: isSaving ? '#9ca3af' : '#84cc16',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '20px',\r\n                        padding: '12px',\r\n                        fontSize: '13px',\r\n                        fontWeight: 'bold',\r\n                        cursor: isSaving ? 'not-allowed' : 'pointer'\r\n                    }}\r\n                >\r\n                    {isSaving ? 'Sauvegarde...' : 'Valider'}\r\n                </button>\r\n            </div>\r\n\r\n            {/* Bouton retour à l'accueil */}\r\n            <div style={{ display: 'flex', gap: '10px' }}>\r\n                <button\r\n                    onClick={() => router.push('/formateur')}\r\n                    style={{\r\n                        width: '100%',\r\n                        padding: '12px',\r\n                        background: '#6b7280',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '8px',\r\n                        fontSize: '16px',\r\n                        fontWeight: '600',\r\n                        cursor: 'pointer',\r\n                        marginTop: '16px',\r\n                        transition: 'transform 0.2s'\r\n                    }}\r\n                >\r\n                    Retour à l'accueil\r\n                </button>\r\n            </div>\r\n\r\n            {/* Stats */}\r\n            {user && (\r\n                <div style={{\r\n                    marginTop: '16px',\r\n                    fontSize: '10px',\r\n                    color: '#6b7280',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    {user.prenom} • {Object.values(planningData).filter(d => d.statut !== 'indisponible').length} créneaux disponibles\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}",
          "taille": 39231,
          "lignes": 967,
          "dateModif": "2025-08-29T17:16:16.329Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../../lib/supabaseClient'\r\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext'\r\n\r\nexport default function PlanningFormateurType() {\r\n    const { user, isLoading: authLoading, isAuthenticated } = useFormateurAuth()\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [lieux, setLieux] = useState([])\r\n    const [planningData, setPlanningData] = useState({})\r\n    const [creneauSelectionne, setCreneauSelectionne] = useState(null)\r\n    const [statutSelectionne, setStatutSelectionne] = useState('')\r\n    const [lieuSelectionne, setLieuSelectionne] = useState(null)\r\n    const [creneauTermine, setCreneauTermine] = useState(false)\r\n    const [showAide, setShowAide] = useState(false)\r\n    const [showInitialPopup, setShowInitialPopup] = useState(true)\r\n    const [isSaving, setIsSaving] = useState(false)\r\n    // ✅ NOUVEAU: États pour message facultatif\r\n    const [showMessageModal, setShowMessageModal] = useState(false)\r\n    const [messageFacultatif, setMessageFacultatif] = useState('')\r\n    const router = useRouter()\r\n\r\n    // Configuration des jours et créneaux - ✅ AM au lieu d'Après-midi\r\n    const jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi']\r\n    const creneaux = ['Matin', 'AM']\r\n\r\n    // Configuration des statuts avec couleurs\r\n    const statuts = [\r\n        { \r\n            key: 'disponible', \r\n            label: 'DISPONIBLE', \r\n            couleur: '#3b82f6',\r\n            description: 'disponible'\r\n        },\r\n        { \r\n            key: 'dispo_except', \r\n            label: 'DISPO EXCEPT.', \r\n            couleur: '#fbbf24',\r\n            description: 'dispo exceptionnelle'\r\n        },\r\n        { \r\n            key: 'indisponible', \r\n            label: 'INDISPONIBLE', \r\n            couleur: '#9ca3af',\r\n            description: 'indisponible'\r\n        }\r\n    ]\r\n\r\n    // Protection authentification\r\n    useEffect(() => {\r\n        if (!authLoading && !isAuthenticated) {\r\n            router.push('/formateur/login')\r\n        }\r\n    }, [authLoading, isAuthenticated, router])\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            chargerDonnees(user.id)\r\n            setIsLoading(false)\r\n        }\r\n    }, [user])\r\n\r\n\r\n    const chargerDonnees = async (formateurId) => {\r\n        try {\r\n            // Charger les lieux depuis la BDD\r\n            const { data: lieuxData, error: lieuxError } = await supabase\r\n                .from('lieux')\r\n                .select('id, nom, initiale, couleur')\r\n                .eq('archive', false)\r\n                .order('nom')\r\n\r\n            if (lieuxError) {\r\n                console.error('Erreur lieux:', lieuxError)\r\n                setLieux([])\r\n            } else {\r\n                setLieux(lieuxData || [])\r\n            }\r\n\r\n            // Charger le planning type existant du formateur\r\n            const { data: planningExistant, error: planningError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .select(`\r\n                    id,\r\n                    jour,\r\n                    creneau,\r\n                    statut,\r\n                    lieu_id,\r\n                    lieux:lieu_id (\r\n                        id,\r\n                        nom,\r\n                        initiale,\r\n                        couleur\r\n                    )\r\n                `)\r\n                .eq('formateur_id', formateurId)\r\n\r\n            if (planningError) {\r\n                console.error('Erreur chargement planning:', planningError)\r\n            }\r\n\r\n            // Initialiser le planning avec les données existantes ou valeurs par défaut\r\n            const initialPlanning = {}\r\n            jours.forEach(jour => {\r\n                creneaux.forEach(creneau => {\r\n                    const creneauKey = `${jour}-${creneau}`\r\n                    \r\n                    // Chercher si ce créneau existe déjà     \r\n                    const creneauExistant = planningExistant?.find(\r\n                        p => p.jour === jour && p.creneau === creneau\r\n                    )\r\n                    \r\n                    if (creneauExistant) {\r\n                        const statut = statuts.find(s => s.key === creneauExistant.statut)\r\n                        initialPlanning[creneauKey] = {\r\n                            id: creneauExistant.id,\r\n                            statut: creneauExistant.statut,\r\n                            lieu: creneauExistant.lieux,\r\n                            couleurStatut: statut?.couleur || '#9ca3af',\r\n                            couleurLieu: creneauExistant.lieux?.couleur || null,\r\n                            // ✅ CORRECTION: Marquer explicitement \"sans préférence\" si lieu_id est null mais statut disponible\r\n                            sansPreference: creneauExistant.lieu_id === null && creneauExistant.statut !== 'indisponible'\r\n                        }\r\n                    } else {\r\n                        // Valeur par défaut : indisponible\r\n                        initialPlanning[creneauKey] = {\r\n                            id: null,\r\n                            statut: 'indisponible',\r\n                            lieu: null,\r\n                            couleurStatut: '#9ca3af',\r\n                            couleurLieu: null,\r\n                            sansPreference: false\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            \r\n            setPlanningData(initialPlanning)\r\n\r\n        } catch (error) {\r\n            console.error('Erreur chargement données:', error)\r\n            setLieux([])\r\n        }\r\n    }\r\n\r\n    // Obtenir le message d'instruction selon l'état\r\n    const getInstructionMessage = () => {\r\n        if (creneauTermine) {\r\n            return \"✅ Vous souhaitez déclarer un autre créneau ? Choisissez une plage (ex: mardi après-midi). Sinon validez.\"\r\n        }\r\n        \r\n        if (!creneauSelectionne) {\r\n            return \"⬇️ Choisissez une plage du planning où vous souhaitez intervenir\"\r\n        }\r\n        \r\n        if (!statutSelectionne) {\r\n            return \"⬇️ Choisissez un statut\"\r\n        }\r\n        \r\n        if (statutSelectionne && !lieuSelectionne && statutSelectionne !== 'indisponible') {\r\n            return \"⬇️ Choisissez un lieu ou 'Sans Préférence'\"\r\n        }\r\n        \r\n        return \"✅ Vous souhaitez déclarer un autre créneau ? Choisissez une plage (ex: mardi après-midi). Sinon validez.\"\r\n    }\r\n\r\n    // Workflow en 3 étapes : Créneau → Statut → Lieu\r\n    const handleCreneauClick = (jour, creneau) => {\r\n        const creneauKey = `${jour}-${creneau}`\r\n        setCreneauSelectionne(creneauKey)\r\n        setStatutSelectionne('')\r\n        setLieuSelectionne(null)\r\n        setCreneauTermine(false)\r\n    }\r\n\r\n    const handleStatutClick = (statutKey) => {\r\n        if (!creneauSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un créneau (ex: Lundi matin)')\r\n            return\r\n        }\r\n        \r\n        setStatutSelectionne(statutKey)\r\n        \r\n        if (statutKey === 'indisponible') {\r\n            const statut = statuts.find(s => s.key === statutKey)\r\n            setPlanningData(prev => ({\r\n                ...prev,\r\n                [creneauSelectionne]: {\r\n                    ...prev[creneauSelectionne],\r\n                    statut: statutKey,\r\n                    lieu: null,\r\n                    couleurStatut: statut.couleur,\r\n                    couleurLieu: null,\r\n                    sansPreference: false\r\n                }\r\n            }))\r\n            \r\n            setCreneauTermine(true)\r\n            setCreneauSelectionne(null)\r\n            setStatutSelectionne('')\r\n        }\r\n    }\r\n\r\n    const handleLieuClick = (lieu) => {\r\n        if (!creneauSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un créneau')\r\n            return\r\n        }\r\n        \r\n        if (!statutSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un statut')\r\n            return\r\n        }\r\n\r\n        if (statutSelectionne === 'indisponible') {\r\n            alert('Pas besoin de lieu pour \"indisponible\"')\r\n            return\r\n        }\r\n\r\n        const statut = statuts.find(s => s.key === statutSelectionne)\r\n        \r\n        setPlanningData(prev => ({\r\n            ...prev,\r\n            [creneauSelectionne]: {\r\n                ...prev[creneauSelectionne],\r\n                statut: statutSelectionne,\r\n                lieu: lieu,\r\n                couleurStatut: statut.couleur,\r\n                couleurLieu: lieu ? lieu.couleur : null,\r\n                sansPreference: false\r\n            }\r\n        }))\r\n\r\n        setCreneauTermine(true)\r\n        setCreneauSelectionne(null)\r\n        setStatutSelectionne('')\r\n        setLieuSelectionne(null)\r\n    }\r\n\r\n    // ✅ FONCTION CORRIGÉE : Gestion \"Sans Préférence\"\r\n    const handleSansPreference = () => {\r\n        if (!creneauSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un créneau')\r\n            return\r\n        }\r\n        \r\n        if (!statutSelectionne) {\r\n            alert('Veuillez d\\'abord sélectionner un statut')\r\n            return\r\n        }\r\n\r\n        if (statutSelectionne === 'indisponible') {\r\n            alert('Pas besoin de lieu pour \"indisponible\"')\r\n            return\r\n        }\r\n\r\n        const statut = statuts.find(s => s.key === statutSelectionne)\r\n        \r\n        // ✅ CORRECTION: Marquer explicitement comme \"sans préférence\"\r\n        setPlanningData(prev => ({\r\n            ...prev,\r\n            [creneauSelectionne]: {\r\n                ...prev[creneauSelectionne],\r\n                statut: statutSelectionne,\r\n                lieu: null, // Sans préférence = lieu_id null\r\n                couleurStatut: statut.couleur,\r\n                couleurLieu: null,\r\n                sansPreference: true // ✅ NOUVEAU: Flag pour identifier \"sans préférence\"\r\n            }\r\n        }))\r\n\r\n        setCreneauTermine(true)\r\n        setCreneauSelectionne(null)\r\n        setStatutSelectionne('')\r\n        setLieuSelectionne(null)\r\n    }\r\n\r\n    // ✅ NOUVEAU: Gestion de la validation avec modal message facultatif\r\n    const handleValider = async () => {\r\n        const creneauxModifies = Object.values(planningData).filter(\r\n            data => data.statut !== 'indisponible'\r\n        ).length\r\n        \r\n        if (creneauxModifies === 0) {\r\n            if (!window.confirm('Vous êtes indisponible sur tous les créneaux. Voulez-vous vraiment valider ce planning ?')) {\r\n                return\r\n            }\r\n        }\r\n\r\n        // ✅ NOUVEAU: Afficher modal pour message facultatif\r\n        setShowMessageModal(true)\r\n    }\r\n\r\n    // ✅ NOUVEAU: Fonction d'envoi de message automatique vers admin\r\n    const envoyerMessageAdmin = async (messageFacultatif = '') => {\r\n        try {\r\n            if (!user) {\r\n                console.error('Données utilisateur manquantes')\r\n                return\r\n            }\r\n\r\n            const formateurNom = `${user.prenom} ${user.nom}`\r\n            \r\n            let contenu = `${formateurNom} a déclaré son planning type. Veuillez le valider.`\r\n            \r\n            // Ajouter le message facultatif s'il existe\r\n            if (messageFacultatif.trim()) {\r\n                contenu += `\\n\\nMessage du formateur :\\n\"${messageFacultatif.trim()}\"`\r\n            }\r\n            \r\n            const { error } = await supabase\r\n                .from('messages')\r\n                .insert({\r\n                    expediteur_id: user.id,\r\n                    destinataire_id: null, // null = admin\r\n                    expediteur: formateurNom,\r\n                    destinataire: 'Coordination ACLEF',\r\n                    objet: 'Validation de planning type',\r\n                    contenu: contenu,\r\n                    type: 'planning',\r\n                    lu: false,\r\n                    archive: false,\r\n                    statut_validation: 'a_traiter',\r\n                    date: new Date().toISOString().split('T')[0],\r\n                    heure: new Date().toTimeString().slice(0, 5)\r\n                })\r\n\r\n            if (error) {\r\n                console.error('Erreur envoi message admin:', error)\r\n                // Ne pas faire échouer la sauvegarde pour un problème de message\r\n            } else {\r\n                console.log('✅ Message automatique envoyé à admin:', formateurNom)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n            // Ne pas faire échouer la sauvegarde pour un problème de message\r\n        }\r\n    }\r\n\r\n    // ✅ MODIFIÉ: Fonction de validation finale avec envoi message\r\n    const handleValidationFinale = async () => {\r\n        setShowMessageModal(false)\r\n        \r\n        // Envoyer message vers admin AVANT la sauvegarde\r\n        await envoyerMessageAdmin(messageFacultatif)\r\n        \r\n        // Puis sauvegarder le planning\r\n        await handleSauvegarde()\r\n        \r\n        // Reset du message facultatif\r\n        setMessageFacultatif('')\r\n    }\r\n\r\n    // Sauvegarde en BDD SIMPLIFIÉE\r\n    const handleSauvegarde = async () => {\r\n        if (!user) {\r\n            alert('Erreur: utilisateur non connecté')\r\n            return\r\n        }\r\n        \r\n        setIsSaving(true)\r\n        \r\n        try {\r\n            // Préparer les données à insérer/mettre à jour\r\n            const planningEntries = []\r\n            \r\n            jours.forEach(jour => {\r\n                creneaux.forEach(creneau => {\r\n                    const creneauKey = `${jour}-${creneau}`\r\n                    const data = planningData[creneauKey]\r\n                    \r\n                    planningEntries.push({\r\n                        formateur_id: user.id,\r\n                        jour: jour,\r\n                        creneau: creneau,\r\n                        statut: data.statut,\r\n                        lieu_id: data.lieu?.id || null // ✅ Reste null pour \"sans préférence\"\r\n                    })\r\n                })\r\n            })\r\n\r\n            // Supprimer les anciennes déclarations du formateur\r\n            const { error: deleteError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .delete()\r\n                .eq('formateur_id', user.id)\r\n\r\n            if (deleteError) {\r\n                throw new Error(`Erreur suppression: ${deleteError.message}`)\r\n            }\r\n\r\n            // Insérer les nouvelles déclarations\r\n            const { error: insertError } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .insert(planningEntries)\r\n\r\n            if (insertError) {\r\n                throw new Error(`Erreur insertion: ${insertError.message}`)\r\n            }\r\n\r\n            // Afficher confirmation et rediriger\r\n            const confirmationDiv = document.createElement('div')\r\n            confirmationDiv.style.cssText = `\r\n                position: fixed;\r\n                top: 50%;\r\n                left: 50%;\r\n                transform: translate(-50%, -50%);\r\n                background: white;\r\n                padding: 30px;\r\n                border-radius: 15px;\r\n                box-shadow: 0 10px 25px rgba(0,0,0,0.3);\r\n                z-index: 9999;\r\n                text-align: center;\r\n                font-family: system-ui;\r\n                font-size: 16px;\r\n                font-weight: bold;\r\n                color: #16a34a;\r\n                border: 3px solid #16a34a;\r\n                max-width: 350px;\r\n                line-height: 1.4;\r\n            `\r\n            confirmationDiv.innerHTML = `\r\n                <div style=\"font-size: 24px; margin-bottom: 15px;\">✅</div>\r\n                <div style=\"margin-bottom: 15px;\">\r\n                    Planning type sauvegardé avec succès !\r\n                </div>\r\n                <div style=\"margin-top: 15px; font-size: 14px; color: #6b7280;\">\r\n                    Redirection dans <span id=\"countdown\">3</span> secondes...\r\n                </div>\r\n            `\r\n            \r\n            document.body.appendChild(confirmationDiv)\r\n            \r\n            let seconds = 3\r\n            const countdownElement = document.getElementById('countdown')\r\n            const countdownInterval = setInterval(() => {\r\n                seconds--\r\n                if (countdownElement) {\r\n                    countdownElement.textContent = seconds\r\n                }\r\n                if (seconds <= 0) {\r\n                    clearInterval(countdownInterval)\r\n                    document.body.removeChild(confirmationDiv)\r\n                    router.push('/formateur')\r\n                }\r\n            }, 1000)\r\n\r\n        } catch (error) {\r\n            console.error('Erreur sauvegarde:', error)\r\n            alert('Erreur lors de la sauvegarde: ' + error.message)\r\n        } finally {\r\n            setIsSaving(false)\r\n        }\r\n    }\r\n\r\n    // Rendu d'une case de créneau\r\n    const renderCreneau = (jour, creneau) => {\r\n        const creneauKey = `${jour}-${creneau}`\r\n        const data = planningData[creneauKey]\r\n        const isSelected = creneauSelectionne === creneauKey\r\n        \r\n        const style = {\r\n            width: '100%',\r\n            height: '60px',\r\n            border: '2px solid #d1d5db',\r\n            borderRadius: '8px',\r\n            backgroundColor: data?.couleurStatut || '#f3f4f6',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            cursor: 'pointer',\r\n            fontSize: '12px',\r\n            fontWeight: 'bold',\r\n            color: data?.couleurStatut ? '#fff' : '#6b7280',\r\n            position: 'relative',\r\n            transition: 'all 0.2s',\r\n            borderColor: data?.couleurLieu || '#d1d5db',\r\n            borderWidth: data?.couleurLieu ? '3px' : '2px'\r\n        }\r\n\r\n        return (\r\n            <div\r\n                key={creneauKey}\r\n                style={style}\r\n                onClick={() => handleCreneauClick(jour, creneau)}\r\n            >\r\n                {/* ✅ AFFICHAGE CORRIGÉ : SP si sans préférence OU initiales du lieu */}\r\n                {data?.lieu?.initiale ? (\r\n                    <span style={{ fontSize: '14px', fontWeight: 'bold' }}>\r\n                        {data.lieu.initiale}\r\n                    </span>\r\n                ) : data?.sansPreference ? (\r\n                    <span style={{ fontSize: '12px', fontWeight: 'bold' }}>\r\n                        SP\r\n                    </span>\r\n                ) : null}\r\n                \r\n                {isSelected && (\r\n                    <div style={{\r\n                        position: 'absolute',\r\n                        top: '5px',\r\n                        right: '5px',\r\n                        fontSize: '16px',\r\n                        color: '#fbbf24'\r\n                    }}>\r\n                        ⭐\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // Guide contextuel mobile et positionné\r\n    const GuideBox = () => (\r\n        <div style={{\r\n            backgroundColor: '#e5f3ff',\r\n            border: '3px solid #3b82f6',\r\n            borderRadius: '10px',\r\n            padding: '10px',\r\n            marginBottom: '12px',\r\n            fontSize: '14px',\r\n            textAlign: 'center',\r\n            fontWeight: 'bold',\r\n            color: '#1d4ed8',\r\n            transition: 'all 0.5s ease-in-out',\r\n            boxShadow: '0 3px 8px rgba(59, 130, 246, 0.2)'\r\n        }}>\r\n            {getInstructionMessage()}\r\n        </div>\r\n    )\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                backgroundColor: '#ffffff',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                padding: '20px'\r\n            }}>\r\n                <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement...</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!user) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div style={{ padding: '15px', maxWidth: '400px', margin: '0 auto', fontFamily: 'system-ui' }}>\r\n            {/* ✅ NOUVEAU: Modal pour message facultatif */}\r\n            {showMessageModal && (\r\n                <div style={{\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    backgroundColor: 'rgba(0,0,0,0.5)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    zIndex: 1000\r\n                }}>\r\n                    <div style={{\r\n                        backgroundColor: 'white',\r\n                        borderRadius: '15px',\r\n                        padding: '25px',\r\n                        maxWidth: '380px',\r\n                        width: '90%'\r\n                    }}>\r\n                        <h3 style={{ \r\n                            margin: '0 0 15px 0', \r\n                            fontSize: '18px', \r\n                            color: '#374151',\r\n                            textAlign: 'center'\r\n                        }}>\r\n                            💬 Message facultatif\r\n                        </h3>\r\n                        <p style={{ \r\n                            fontSize: '14px', \r\n                            color: '#6b7280', \r\n                            margin: '0 0 15px 0',\r\n                            textAlign: 'center',\r\n                            lineHeight: '1.4'\r\n                        }}>\r\n                            Souhaitez-vous ajouter un message pour l'équipe de coordination ?\r\n                            <br />\r\n                            <em>(ex: \"Je préfère être sur Châtellerault, CCP ou MPT\")</em>\r\n                        </p>\r\n                        <textarea\r\n                            value={messageFacultatif}\r\n                            onChange={(e) => setMessageFacultatif(e.target.value)}\r\n                            placeholder=\"Votre message (optionnel)...\"\r\n                            rows={4}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '12px',\r\n                                border: '2px solid #e5e7eb',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                resize: 'vertical',\r\n                                boxSizing: 'border-box',\r\n                                marginBottom: '20px'\r\n                            }}\r\n                        />\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                onClick={() => setShowMessageModal(false)}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    padding: '12px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: 'bold',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                            <button\r\n                                onClick={handleValidationFinale}\r\n                                disabled={isSaving}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    backgroundColor: isSaving ? '#9ca3af' : '#10b981',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    padding: '12px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: 'bold',\r\n                                    cursor: isSaving ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                {isSaving ? 'Envoi...' : 'Valider'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Popup d'information initiale */}\r\n            {showInitialPopup && (\r\n                <div style={{\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    backgroundColor: 'rgba(0,0,0,0.5)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    zIndex: 1000\r\n                }}>\r\n                    <div style={{\r\n                        backgroundColor: 'white',\r\n                        borderRadius: '15px',\r\n                        padding: '25px',\r\n                        maxWidth: '350px',\r\n                        width: '90%',\r\n                        textAlign: 'center'\r\n                    }}>\r\n                        <h3 style={{ margin: '0 0 15px 0', fontSize: '18px', color: '#d97706' }}>\r\n                            ⚠️ Information importante\r\n                        </h3>\r\n                        <p style={{ \r\n                            fontSize: '14px', \r\n                            color: '#374151', \r\n                            margin: '0 0 15px 0',\r\n                            lineHeight: '1.4'\r\n                        }}>\r\n                            En règle générale, cela ne se fait qu'une seule fois par an, parlez-en au responsable de formation si des modifications sont nécessaires.\r\n                        </p>\r\n                        <p style={{ \r\n                            fontSize: '14px', \r\n                            color: '#d97706', \r\n                            margin: '0 0 20px 0',\r\n                            fontWeight: 'bold',\r\n                            lineHeight: '1.4'\r\n                        }}>\r\n                            ⚠️ Pour vos vacances ou absences temporaires, utilisez \"Modifications ponctuelles\"\r\n                        </p>\r\n                        <button\r\n                            onClick={() => setShowInitialPopup(false)}\r\n                            style={{\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                padding: '12px 24px',\r\n                                fontSize: '14px',\r\n                                fontWeight: 'bold',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            OK, j'ai compris\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* En-tête avec aide */}\r\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '12px' }}>\r\n                <h2 style={{ margin: 0, fontSize: '17px', fontWeight: 'bold' }}>\r\n                    Mon planning type\r\n                </h2>\r\n                <button\r\n                    onClick={() => setShowAide(!showAide)}\r\n                    style={{\r\n                        backgroundColor: '#ef4444',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '18px',\r\n                        padding: '6px 14px',\r\n                        fontSize: '13px',\r\n                        fontWeight: 'bold',\r\n                        cursor: 'pointer'\r\n                    }}\r\n                >\r\n                    Aide\r\n                </button>\r\n            </div>\r\n\r\n            {/* Texte explicatif */}\r\n            <div style={{ \r\n                padding: '8px', \r\n                marginBottom: '12px',\r\n                fontSize: '12px',\r\n                lineHeight: '1.2'\r\n            }}>\r\n                <p style={{ margin: 0, textAlign: 'center', fontWeight: 'bold' }}>\r\n                    Vous allez déclarer les créneaux et les lieux de vos interventions régulières pour l'année 2025-2026.\r\n                </p>\r\n            </div>\r\n\r\n            {/* Aide contextuelle */}\r\n            {showAide && (\r\n                <div style={{\r\n                    backgroundColor: '#e5f3ff',\r\n                    border: '2px solid #3b82f6',\r\n                    borderRadius: '8px',\r\n                    padding: '12px',\r\n                    marginBottom: '15px',\r\n                    fontSize: '12px'\r\n                }}>\r\n                    <div style={{ marginBottom: '8px' }}>\r\n                        <p style={{ margin: '0 0 3px 0', fontWeight: 'bold', fontSize: '11px' }}>\r\n                            🔘 Disponible : Vous pouvez intervenir sur ce créneau normalement.\r\n                        </p>\r\n                        <p style={{ margin: '0 0 3px 0', fontWeight: 'bold', fontSize: '11px' }}>\r\n                            🟡 Disponible exceptionnellement : Vous pouvez intervenir exceptionnellement sur ce créneau (par exemple, pour remplacer un bénévole absent.)\r\n                        </p>\r\n                        <p style={{ margin: '0 0 8px 0', fontWeight: 'bold', fontSize: '11px' }}>\r\n                            🟢 Sans Préférence (SP) : Le lieu d'intervention n'a pas d'importance pour vous.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Guide contextuel positionné AVANT le planning si pas de créneau sélectionné */}\r\n            {!creneauSelectionne && <GuideBox />}\r\n\r\n            {/* Grille du planning */}\r\n            <div style={{ marginBottom: '12px' }}>        \r\n                {/* En-têtes des jours */}\r\n                <div style={{ display: 'grid', gridTemplateColumns: '65px repeat(5, 1fr)', gap: '2px', marginBottom: '4px' }}>\r\n                    <div></div>\r\n                    {jours.map(jour => (\r\n                        <div key={jour} style={{ \r\n                            textAlign: 'center', \r\n                            fontWeight: 'bold', \r\n                            fontSize: '10px',\r\n                            color: '#374151'\r\n                        }}>\r\n                            {jour}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* Grille des créneaux */}\r\n                {creneaux.map(creneau => (\r\n                    <div key={creneau} style={{ \r\n                        display: 'grid', \r\n                        gridTemplateColumns: '65px repeat(5, 1fr)', \r\n                        gap: '2px', \r\n                        marginBottom: '4px' \r\n                    }}>\r\n                        <div style={{ \r\n                            display: 'flex', \r\n                            alignItems: 'center', \r\n                            fontSize: '10px', \r\n                            fontWeight: 'bold',\r\n                            color: '#374151'\r\n                        }}>\r\n                            {creneau}\r\n                        </div>\r\n                        {jours.map(jour => renderCreneau(jour, creneau))}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {/* Guide contextuel positionné AVANT les statuts si créneau sélectionné mais pas de statut */}\r\n            {creneauSelectionne && !statutSelectionne && <GuideBox />}\r\n\r\n            {/* Boutons de statut colorés */}\r\n            <div style={{ marginBottom: '12px' }}>        \r\n                <div style={{ display: 'flex', gap: '4px', marginBottom: '8px' }}>\r\n                    {statuts.map(statut => (\r\n                        <button\r\n                            key={statut.key}\r\n                            onClick={() => handleStatutClick(statut.key)}\r\n                            style={{\r\n                                flex: 1,\r\n                                padding: '8px 4px',\r\n                                backgroundColor: statut.couleur,\r\n                                color: 'white',\r\n                                border: statutSelectionne === statut.key ? '3px solid #000' : '2px solid transparent',\r\n                                borderRadius: '6px',\r\n                                fontSize: '10px',\r\n                                fontWeight: 'bold',\r\n                                cursor: 'pointer',\r\n                                transition: 'all 0.2s',\r\n                                opacity: !creneauSelectionne ? 0.5 : 1\r\n                            }}\r\n                            disabled={!creneauSelectionne}\r\n                        >\r\n                            {statut.label}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Guide contextuel positionné AVANT les lieux si statut sélectionné mais pas de lieu */}\r\n            {creneauSelectionne && statutSelectionne && statutSelectionne !== 'indisponible' && !lieuSelectionne && <GuideBox />}\r\n\r\n            {/* ✅ BOUTONS DE LIEUX CORRIGÉS - SP en premier, tous sur la même ligne */}\r\n            <div style={{ marginBottom: '8px' }}>        \r\n                <div style={{ \r\n                    display: 'grid', \r\n                    gridTemplateColumns: 'repeat(5, 1fr)', // ✅ 5 colonnes exactement\r\n                    gap: '4px',\r\n                    marginBottom: '8px'\r\n                }}>\r\n                    {/* ✅ BOUTON SANS PRÉFÉRENCE EN PREMIER */}\r\n                    <button\r\n                        onClick={handleSansPreference}\r\n                        style={{\r\n                            padding: '10px 4px',\r\n                            backgroundColor: 'white',\r\n                            border: '3px solid #6b7280',\r\n                            borderRadius: '6px',\r\n                            fontSize: '10px',\r\n                            fontWeight: 'bold',\r\n                            color: '#6b7280',\r\n                            cursor: 'pointer',\r\n                            transition: 'all 0.2s',\r\n                            opacity: !creneauSelectionne || !statutSelectionne || statutSelectionne === 'indisponible' ? 0.5 : 1\r\n                        }}\r\n                        disabled={!creneauSelectionne || !statutSelectionne || statutSelectionne === 'indisponible'}\r\n                    >\r\n                        <div style={{ fontSize: '12px', marginBottom: '1px' }}>\r\n                            SP\r\n                        </div>\r\n                        <div style={{ fontSize: '8px' }}>\r\n                            Sans Préf.\r\n                        </div>\r\n                    </button>\r\n\r\n                    {/* ✅ VRAIS LIEUX ENSUITE */}\r\n                    {lieux.map(lieu => (\r\n                        <button\r\n                            key={lieu.id}\r\n                            onClick={() => handleLieuClick(lieu)}\r\n                            style={{\r\n                                padding: '10px 4px',\r\n                                backgroundColor: 'white',\r\n                                border: `3px solid ${lieu.couleur}`,\r\n                                borderRadius: '6px',\r\n                                fontSize: '10px',\r\n                                fontWeight: 'bold',\r\n                                color: lieu.couleur,\r\n                                cursor: 'pointer',\r\n                                transition: 'all 0.2s',\r\n                                opacity: !creneauSelectionne || !statutSelectionne || statutSelectionne === 'indisponible' ? 0.5 : 1,\r\n                                transform: lieuSelectionne?.id === lieu.id ? 'scale(1.05)' : 'scale(1)'\r\n                            }}\r\n                            disabled={!creneauSelectionne || !statutSelectionne || statutSelectionne === 'indisponible'}\r\n                        >\r\n                            <div style={{ fontSize: '12px', marginBottom: '1px' }}>\r\n                                {lieu.initiale}\r\n                            </div>\r\n                            <div style={{ fontSize: '8px' }}>\r\n                                {lieu.nom}\r\n                            </div>\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Guide contextuel positionné AVANT les boutons d'action si créneau terminé */}\r\n            {creneauTermine && <GuideBox />}\r\n\r\n            {/* Boutons d'action */}\r\n            <div style={{ display: 'flex', gap: '10px', marginBottom: '16px' }}>        \r\n                <button\r\n                    onClick={handleValider}\r\n                    disabled={isSaving}\r\n                    style={{\r\n                        width: '100%',\r\n                        backgroundColor: isSaving ? '#9ca3af' : '#84cc16',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '20px',\r\n                        padding: '12px',\r\n                        fontSize: '13px',\r\n                        fontWeight: 'bold',\r\n                        cursor: isSaving ? 'not-allowed' : 'pointer'\r\n                    }}\r\n                >\r\n                    {isSaving ? 'Sauvegarde...' : 'Valider'}\r\n                </button>\r\n            </div>\r\n\r\n            {/* Bouton retour à l'accueil */}\r\n            <div style={{ display: 'flex', gap: '10px' }}>\r\n                <button\r\n                    onClick={() => router.push('/formateur')}\r\n                    style={{\r\n                        width: '100%',\r\n                        padding: '12px',\r\n                        background: '#6b7280',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '8px',\r\n                        fontSize: '16px',\r\n                        fontWeight: '600',\r\n                        cursor: 'pointer',\r\n                        marginTop: '16px',\r\n                        transition: 'transform 0.2s'\r\n                    }}\r\n                >\r\n                    Retour à l'accueil\r\n                </button>\r\n            </div>\r\n\r\n            {/* Stats */}\r\n            {user && (\r\n                <div style={{\r\n                    marginTop: '16px',\r\n                    fontSize: '10px',\r\n                    color: '#6b7280',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    {user.prenom} • {Object.values(planningData).filter(d => d.statut !== 'indisponible').length} créneaux disponibles\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}",
          "taille": 39231,
          "lignes": 967,
          "dateModif": "2025-08-22T12:28:58.589Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/formateur/profil - vercel.js",
      "resultat": {
        "statut": "LOCAL_SEULEMENT",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext'\r\nimport { withAuthFormateur } from '../../components/withAuthFormateur'\r\nimport { supabase } from '../../lib/supabaseClient'\r\n\r\nfunction ProfilFormateur() {\r\n    const { user } = useFormateurAuth()\r\n    const [email, setEmail] = useState('')\r\n    const [newPassword, setNewPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [activeSection, setActiveSection] = useState('email')\r\n    const [loading, setLoading] = useState(false)\r\n    const [message, setMessage] = useState('')\r\n    const [showPasswords, setShowPasswords] = useState(false)\r\n    const router = useRouter()\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            setEmail(user.email || '')\r\n        }\r\n    }, [user])\r\n\r\n    const handleUpdateEmail = async () => {\r\n        \r\n        // Si l'email est vide, on veut le supprimer\r\n        if (email === '') {\r\n            setLoading(true)\r\n            try {\r\n                const { error } = await supabase\r\n                    .from('users')\r\n                    .update({ email: null })\r\n                    .eq('id', user.id)\r\n\r\n                if (error) throw error\r\n\r\n                setMessage('Email supprimé avec succès !')\r\n                setTimeout(() => setMessage(''), 4000)\r\n                \r\n            } catch (error) {\r\n                console.error('Erreur:', error)\r\n                setMessage(`Erreur : ${error.message}`)\r\n                setTimeout(() => setMessage(''), 4000)\r\n            } finally {\r\n                setLoading(false)\r\n            }\r\n            return\r\n        }\r\n        \r\n        // Validation de l'email si non vide\r\n        if (!email.trim()) {\r\n            setMessage('Veuillez saisir un email valide')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        if (!email.includes('@') || !email.includes('.')) {\r\n            setMessage('Format d\\'email invalide')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setLoading(true)\r\n        try {\r\n            const { error } = await supabase\r\n                .from('users')\r\n                .update({ email: email.trim() })\r\n                .eq('id', user.id)\r\n\r\n            if (error) throw error\r\n\r\n            setMessage('Email modifié avec succès !')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            \r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    const handleUpdatePassword = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!newPassword || !confirmPassword) {\r\n            setMessage('Veuillez remplir tous les champs')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        if (newPassword !== confirmPassword) {\r\n            setMessage('Les nouveaux mots de passe ne correspondent pas')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        if (newPassword.trim().length === 0) {\r\n            setMessage('Le nouveau mot de passe ne peut pas être vide')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setLoading(true)\r\n        try {\r\n            const token = localStorage.getItem('formateur_token')\r\n            \r\n            const response = await fetch('/api/formateur/update-password', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify({ newPassword })\r\n            })\r\n\r\n            const data = await response.json()\r\n            \r\n            if (response.ok) {\r\n                setMessage('Mot de passe personnalisé sauvegardé !')\r\n                setNewPassword('')\r\n                setConfirmPassword('')\r\n                setTimeout(() => setMessage(''), 4000)\r\n            } else {\r\n                setMessage(data.error || 'Erreur lors de la sauvegarde')\r\n                setTimeout(() => setMessage(''), 4000)\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n            setMessage('Erreur inattendue')\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    const sectionButtonStyle = (isActive) => ({\r\n        flex: 1,\r\n        padding: '8px 12px',\r\n        backgroundColor: isActive ? '#3b82f6' : '#e5e7eb',\r\n        color: isActive ? 'white' : '#374151',\r\n        border: 'none',\r\n        borderRadius: '8px',\r\n        fontSize: '12px',\r\n        fontWeight: 'bold',\r\n        cursor: 'pointer',\r\n        transition: 'all 0.2s'\r\n    })\r\n\r\n    const inputStyle = {\r\n        width: '100%',\r\n        padding: '12px',\r\n        border: '2px solid #d1d5db',\r\n        borderRadius: '8px',\r\n        fontSize: '16px',\r\n        marginBottom: '12px'\r\n    }\r\n\r\n    const buttonStyle = {\r\n        width: '100%',\r\n        backgroundColor: loading ? '#9ca3af' : '#10b981',\r\n        color: 'white',\r\n        padding: '12px',\r\n        borderRadius: '12px',\r\n        border: 'none',\r\n        fontSize: '14px',\r\n        fontWeight: 'bold',\r\n        cursor: loading ? 'not-allowed' : 'pointer',\r\n        marginBottom: '12px'\r\n    }\r\n\r\n    if (!user) {\r\n        return (\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                backgroundColor: '#f3f4f6',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n            }}>\r\n                <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement...</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            backgroundColor: '#f3f4f6',\r\n            padding: '16px'\r\n        }}>\r\n            <div style={{\r\n                maxWidth: '400px',\r\n                margin: '0 auto',\r\n                backgroundColor: 'white',\r\n                borderRadius: '24px',\r\n                padding: '24px'\r\n            }}>\r\n                {/* En-tête */}\r\n                <div style={{ marginBottom: '24px' }}>\r\n                    <h1 style={{ fontSize: '20px', fontWeight: 'bold', margin: 0, textAlign: 'center' }}>\r\n                        Mon Profil\r\n                    </h1>\r\n                </div>\r\n\r\n                {/* Informations utilisateur */}\r\n                <div style={{ \r\n                    backgroundColor: '#f8fafc', \r\n                    padding: '16px', \r\n                    borderRadius: '12px', \r\n                    marginBottom: '24px',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    <h2 style={{ margin: '0 0 8px 0', fontSize: '18px', color: '#1f2937' }}>\r\n                        {user.prenom} {user.nom}\r\n                    </h2>\r\n                    {user.email && (\r\n                        <p style={{ margin: 0, fontSize: '13px', color: '#6b7280' }}>\r\n                            {user.email}\r\n                        </p>\r\n                    )}\r\n                </div>\r\n\r\n                {/* Navigation sections */}\r\n                <div style={{ display: 'flex', gap: '8px', marginBottom: '24px' }}>\r\n                    <button \r\n                        style={sectionButtonStyle(activeSection === 'email')}\r\n                        onClick={() => setActiveSection('email')}\r\n                    >\r\n                        Email\r\n                    </button>\r\n                    <button \r\n                        style={sectionButtonStyle(activeSection === 'password')}\r\n                        onClick={() => setActiveSection('password')}\r\n                    >\r\n                        Mot de passe\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Messages */}\r\n                {message && (\r\n                    <div style={{\r\n                        padding: '12px',\r\n                        borderRadius: '8px',\r\n                        marginBottom: '16px',\r\n                        backgroundColor: message.includes('succès') ? '#d1fae5' : '#fee2e2',\r\n                        color: message.includes('succès') ? '#065f46' : '#991b1b',\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        whiteSpace: 'pre-line'\r\n                    }}>\r\n                        {message}\r\n                    </div>\r\n                )}\r\n\r\n                {/* Section Email */}\r\n                {activeSection === 'email' && (\r\n                    <div>\r\n                        <h3 style={{ margin: '0 0 16px 0', fontSize: '16px' }}>\r\n                            Gérer mes notifications email\r\n                        </h3>\r\n                        \r\n                        {/* Option 1 : Recevoir les emails */}\r\n                        <div \r\n                            onClick={() => setEmail(userData.email || '')}\r\n                            style={{\r\n                                padding: '15px',\r\n                                marginBottom: '12px',\r\n                                border: '2px solid',\r\n                                borderColor: email ? '#3b82f6' : '#e5e7eb',\r\n                                borderRadius: '12px',\r\n                                cursor: 'pointer',\r\n                                backgroundColor: email ? '#eff6ff' : 'white',\r\n                                transition: 'all 0.2s'\r\n                            }}\r\n                        >\r\n                            <div style={{ display: 'flex', alignItems: 'flex-start', gap: '10px' }}>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    checked={email !== ''}\r\n                                    onChange={() => {}}\r\n                                    style={{ marginTop: '2px' }}\r\n                                />\r\n                                <div style={{ flex: 1 }}>\r\n                                    <strong style={{ fontSize: '14px', color: '#1f2937' }}>\r\n                                        Je souhaite recevoir une copie des messages par email\r\n                                    </strong>\r\n                                    <p style={{ margin: '4px 0 0 0', fontSize: '12px', color: '#6b7280' }}>\r\n                                        Tous les messages de la messagerie interne vous seront aussi envoyés par email\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            {email && (\r\n                                <div style={{ marginTop: '12px', marginLeft: '24px' }}>\r\n                                    <input\r\n                                        type=\"email\"\r\n                                        value={email}\r\n                                        onChange={(e) => setEmail(e.target.value)}\r\n                                        placeholder=\"votre.email@exemple.fr\"\r\n                                        style={{\r\n                                            width: '100%',\r\n                                            padding: '10px',\r\n                                            border: '1px solid #d1d5db',\r\n                                            borderRadius: '8px',\r\n                                            fontSize: '14px'\r\n                                        }}\r\n                                        onClick={(e) => e.stopPropagation()}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n\r\n                        {/* Option 2 : Pas d'email */}\r\n                        <div \r\n                            onClick={() => setEmail('')}\r\n                            style={{\r\n                                padding: '15px',\r\n                                marginBottom: '16px',\r\n                                border: '2px solid',\r\n                                borderColor: email === '' ? '#3b82f6' : '#e5e7eb',\r\n                                borderRadius: '12px',\r\n                                cursor: 'pointer',\r\n                                backgroundColor: email === '' ? '#eff6ff' : 'white',\r\n                                transition: 'all 0.2s'\r\n                            }}\r\n                        >\r\n                            <div style={{ display: 'flex', alignItems: 'flex-start', gap: '10px' }}>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    checked={email === ''}\r\n                                    onChange={() => {}}\r\n                                    style={{ marginTop: '2px' }}\r\n                                />\r\n                                <div style={{ flex: 1 }}>\r\n                                    <strong style={{ fontSize: '14px', color: '#1f2937' }}>\r\n                                        Je ne souhaite pas que mon email soit utilisé\r\n                                    </strong>\r\n                                    <p style={{ margin: '4px 0 0 0', fontSize: '12px', color: '#6b7280' }}>\r\n                                        Supprimer mon adresse email du système. Seule la messagerie interne sera utilisée.\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <button \r\n                            onClick={handleUpdateEmail}\r\n                            disabled={loading}\r\n                            style={{\r\n                                width: '100%',\r\n                                backgroundColor: loading ? '#9ca3af' : '#10b981',\r\n                                color: 'white',\r\n                                padding: '12px',\r\n                                borderRadius: '12px',\r\n                                border: 'none',\r\n                                fontSize: '14px',\r\n                                fontWeight: 'bold',\r\n                                cursor: loading ? 'not-allowed' : 'pointer'\r\n                            }}\r\n                        >\r\n                            {loading ? 'Enregistrement...' : 'Enregistrer mon choix'}\r\n                        </button>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Section Mot de passe */}\r\n                {activeSection === 'password' && (\r\n                    <form onSubmit={handleUpdatePassword}>\r\n                        <h3 style={{ margin: '0 0 16px 0', fontSize: '16px' }}>\r\n                            Définir un mot de passe personnalisé\r\n                        </h3>\r\n                        <p style={{ margin: '0 0 16px 0', fontSize: '13px', color: '#666' }}>\r\n                            Vous pourrez ensuite vous connecter avec votre prénom et ce mot de passe.\r\n                        </p>\r\n                        \r\n                        \r\n                        <input\r\n                            type={showPasswords ? 'text' : 'password'}\r\n                            value={newPassword}\r\n                            onChange={(e) => setNewPassword(e.target.value)}\r\n                            placeholder=\"Nouveau mot de passe\"\r\n                            style={inputStyle}\r\n                            required\r\n                        />\r\n                        \r\n                        <input\r\n                            type={showPasswords ? 'text' : 'password'}\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                            placeholder=\"Confirmer le nouveau mot de passe\"\r\n                            style={inputStyle}\r\n                            required\r\n                        />\r\n\r\n                        <label style={{ display: 'flex', alignItems: 'center', marginBottom: '12px', fontSize: '14px' }}>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={showPasswords}\r\n                                onChange={(e) => setShowPasswords(e.target.checked)}\r\n                                style={{ marginRight: '8px' }}\r\n                            />\r\n                            Afficher les mots de passe\r\n                        </label>\r\n\r\n                        <button type=\"submit\" style={buttonStyle} disabled={loading}>\r\n                            {loading ? 'Modification...' : 'Changer le mot de passe'}\r\n                        </button>\r\n                        \r\n                        <p style={{ fontSize: '12px', color: '#6b7280', margin: 0 }}>\r\n                            Changement sécurisé sans email de notification\r\n                        </p>\r\n                    </form>\r\n                )}\r\n\r\n                {/* Bouton retour */}\r\n                <div style={{ marginTop: '24px', paddingTop: '16px', borderTop: '1px solid #e5e7eb' }}>\r\n                    <button\r\n                        onClick={() => router.push('/formateur')}\r\n                        style={{\r\n                            width: '100%',\r\n                            padding: '12px',\r\n                            background: '#6b7280',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '16px',\r\n                            fontWeight: '600',\r\n                            cursor: 'pointer',\r\n                            marginTop: '16px',\r\n                            transition: 'transform 0.2s'\r\n                        }}\r\n                    >\r\n                        Retour à l'accueil\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuthFormateur(ProfilFormateur)",
          "taille": 18317,
          "lignes": 443,
          "dateModif": "2025-08-30T06:15:00.432Z",
          "erreur": null
        },
        "vercel": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🟡 Fichier existe seulement en local"
      }
    },
    {
      "fichier": "pages/formateur/profil.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext'\r\nimport { withAuthFormateur } from '../../components/withAuthFormateur'\r\nimport { supabase } from '../../lib/supabaseClient'\r\n\r\nfunction ProfilFormateur() {\r\n    const { user } = useFormateurAuth()\r\n    const [email, setEmail] = useState('')\r\n    const [newPassword, setNewPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [activeSection, setActiveSection] = useState('email')\r\n    const [loading, setLoading] = useState(false)\r\n    const [message, setMessage] = useState('')\r\n    const [showPasswords, setShowPasswords] = useState(false)\r\n    const router = useRouter()\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            setEmail(user.email || '')\r\n        }\r\n    }, [user])\r\n\r\n    const handleUpdateEmail = async () => {\r\n        \r\n        // Si l'email est vide, on veut le supprimer\r\n        if (email === '') {\r\n            setLoading(true)\r\n            try {\r\n                const { error } = await supabase\r\n                    .from('users')\r\n                    .update({ email: null })\r\n                    .eq('id', user.id)\r\n\r\n                if (error) throw error\r\n\r\n                setMessage('Email supprimé avec succès !')\r\n                setTimeout(() => setMessage(''), 4000)\r\n                \r\n            } catch (error) {\r\n                console.error('Erreur:', error)\r\n                setMessage(`Erreur : ${error.message}`)\r\n                setTimeout(() => setMessage(''), 4000)\r\n            } finally {\r\n                setLoading(false)\r\n            }\r\n            return\r\n        }\r\n        \r\n        // Validation de l'email si non vide\r\n        if (!email.trim()) {\r\n            setMessage('Veuillez saisir un email valide')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        if (!email.includes('@') || !email.includes('.')) {\r\n            setMessage('Format d\\'email invalide')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setLoading(true)\r\n        try {\r\n            const { error } = await supabase\r\n                .from('users')\r\n                .update({ email: email.trim() })\r\n                .eq('id', user.id)\r\n\r\n            if (error) throw error\r\n\r\n            setMessage('Email modifié avec succès !')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            \r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    const handleUpdatePassword = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!newPassword || !confirmPassword) {\r\n            setMessage('Veuillez remplir tous les champs')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        if (newPassword !== confirmPassword) {\r\n            setMessage('Les nouveaux mots de passe ne correspondent pas')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        if (newPassword.trim().length === 0) {\r\n            setMessage('Le nouveau mot de passe ne peut pas être vide')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setLoading(true)\r\n        try {\r\n            const token = localStorage.getItem('formateur_token')\r\n            \r\n            const response = await fetch('/api/formateur/update-password', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify({ newPassword })\r\n            })\r\n\r\n            const data = await response.json()\r\n            \r\n            if (response.ok) {\r\n                setMessage('Mot de passe personnalisé sauvegardé !')\r\n                setNewPassword('')\r\n                setConfirmPassword('')\r\n                setTimeout(() => setMessage(''), 4000)\r\n            } else {\r\n                setMessage(data.error || 'Erreur lors de la sauvegarde')\r\n                setTimeout(() => setMessage(''), 4000)\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n            setMessage('Erreur inattendue')\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    const sectionButtonStyle = (isActive) => ({\r\n        flex: 1,\r\n        padding: '8px 12px',\r\n        backgroundColor: isActive ? '#3b82f6' : '#e5e7eb',\r\n        color: isActive ? 'white' : '#374151',\r\n        border: 'none',\r\n        borderRadius: '8px',\r\n        fontSize: '12px',\r\n        fontWeight: 'bold',\r\n        cursor: 'pointer',\r\n        transition: 'all 0.2s'\r\n    })\r\n\r\n    const inputStyle = {\r\n        width: '100%',\r\n        padding: '12px',\r\n        border: '2px solid #d1d5db',\r\n        borderRadius: '8px',\r\n        fontSize: '16px',\r\n        marginBottom: '12px'\r\n    }\r\n\r\n    const buttonStyle = {\r\n        width: '100%',\r\n        backgroundColor: loading ? '#9ca3af' : '#10b981',\r\n        color: 'white',\r\n        padding: '12px',\r\n        borderRadius: '12px',\r\n        border: 'none',\r\n        fontSize: '14px',\r\n        fontWeight: 'bold',\r\n        cursor: loading ? 'not-allowed' : 'pointer',\r\n        marginBottom: '12px'\r\n    }\r\n\r\n    if (!user) {\r\n        return (\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                backgroundColor: '#f3f4f6',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n            }}>\r\n                <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement...</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            backgroundColor: '#f3f4f6',\r\n            padding: '16px'\r\n        }}>\r\n            <div style={{\r\n                maxWidth: '400px',\r\n                margin: '0 auto',\r\n                backgroundColor: 'white',\r\n                borderRadius: '24px',\r\n                padding: '24px'\r\n            }}>\r\n                {/* En-tête */}\r\n                <div style={{ marginBottom: '24px' }}>\r\n                    <h1 style={{ fontSize: '20px', fontWeight: 'bold', margin: 0, textAlign: 'center' }}>\r\n                        Mon Profil\r\n                    </h1>\r\n                </div>\r\n\r\n                {/* Informations utilisateur */}\r\n                <div style={{ \r\n                    backgroundColor: '#f8fafc', \r\n                    padding: '16px', \r\n                    borderRadius: '12px', \r\n                    marginBottom: '24px',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    <h2 style={{ margin: '0 0 8px 0', fontSize: '18px', color: '#1f2937' }}>\r\n                        {user.prenom} {user.nom}\r\n                    </h2>\r\n                    {user.email && (\r\n                        <p style={{ margin: 0, fontSize: '13px', color: '#6b7280' }}>\r\n                            {user.email}\r\n                        </p>\r\n                    )}\r\n                </div>\r\n\r\n                {/* Navigation sections */}\r\n                <div style={{ display: 'flex', gap: '8px', marginBottom: '24px' }}>\r\n                    <button \r\n                        style={sectionButtonStyle(activeSection === 'email')}\r\n                        onClick={() => setActiveSection('email')}\r\n                    >\r\n                        Email\r\n                    </button>\r\n                    <button \r\n                        style={sectionButtonStyle(activeSection === 'password')}\r\n                        onClick={() => setActiveSection('password')}\r\n                    >\r\n                        Mot de passe\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Messages */}\r\n                {message && (\r\n                    <div style={{\r\n                        padding: '12px',\r\n                        borderRadius: '8px',\r\n                        marginBottom: '16px',\r\n                        backgroundColor: message.includes('succès') ? '#d1fae5' : '#fee2e2',\r\n                        color: message.includes('succès') ? '#065f46' : '#991b1b',\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        whiteSpace: 'pre-line'\r\n                    }}>\r\n                        {message}\r\n                    </div>\r\n                )}\r\n\r\n                {/* Section Email */}\r\n                {activeSection === 'email' && (\r\n                    <div>\r\n                        <h3 style={{ margin: '0 0 16px 0', fontSize: '16px' }}>\r\n                            Gérer mes notifications email\r\n                        </h3>\r\n                        \r\n                        {/* Option 1 : Recevoir les emails */}\r\n                        <div \r\n                            onClick={() => setEmail(userData.email || '')}\r\n                            style={{\r\n                                padding: '15px',\r\n                                marginBottom: '12px',\r\n                                border: '2px solid',\r\n                                borderColor: email ? '#3b82f6' : '#e5e7eb',\r\n                                borderRadius: '12px',\r\n                                cursor: 'pointer',\r\n                                backgroundColor: email ? '#eff6ff' : 'white',\r\n                                transition: 'all 0.2s'\r\n                            }}\r\n                        >\r\n                            <div style={{ display: 'flex', alignItems: 'flex-start', gap: '10px' }}>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    checked={email !== ''}\r\n                                    onChange={() => {}}\r\n                                    style={{ marginTop: '2px' }}\r\n                                />\r\n                                <div style={{ flex: 1 }}>\r\n                                    <strong style={{ fontSize: '14px', color: '#1f2937' }}>\r\n                                        Je souhaite recevoir une copie des messages par email\r\n                                    </strong>\r\n                                    <p style={{ margin: '4px 0 0 0', fontSize: '12px', color: '#6b7280' }}>\r\n                                        Tous les messages de la messagerie interne vous seront aussi envoyés par email\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            {email && (\r\n                                <div style={{ marginTop: '12px', marginLeft: '24px' }}>\r\n                                    <input\r\n                                        type=\"email\"\r\n                                        value={email}\r\n                                        onChange={(e) => setEmail(e.target.value)}\r\n                                        placeholder=\"votre.email@exemple.fr\"\r\n                                        style={{\r\n                                            width: '100%',\r\n                                            padding: '10px',\r\n                                            border: '1px solid #d1d5db',\r\n                                            borderRadius: '8px',\r\n                                            fontSize: '14px'\r\n                                        }}\r\n                                        onClick={(e) => e.stopPropagation()}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n\r\n                        {/* Option 2 : Pas d'email */}\r\n                        <div \r\n                            onClick={() => setEmail('')}\r\n                            style={{\r\n                                padding: '15px',\r\n                                marginBottom: '16px',\r\n                                border: '2px solid',\r\n                                borderColor: email === '' ? '#3b82f6' : '#e5e7eb',\r\n                                borderRadius: '12px',\r\n                                cursor: 'pointer',\r\n                                backgroundColor: email === '' ? '#eff6ff' : 'white',\r\n                                transition: 'all 0.2s'\r\n                            }}\r\n                        >\r\n                            <div style={{ display: 'flex', alignItems: 'flex-start', gap: '10px' }}>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    checked={email === ''}\r\n                                    onChange={() => {}}\r\n                                    style={{ marginTop: '2px' }}\r\n                                />\r\n                                <div style={{ flex: 1 }}>\r\n                                    <strong style={{ fontSize: '14px', color: '#1f2937' }}>\r\n                                        Je ne souhaite pas que mon email soit utilisé\r\n                                    </strong>\r\n                                    <p style={{ margin: '4px 0 0 0', fontSize: '12px', color: '#6b7280' }}>\r\n                                        Supprimer mon adresse email du système. Seule la messagerie interne sera utilisée.\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <button \r\n                            onClick={handleUpdateEmail}\r\n                            disabled={loading}\r\n                            style={{\r\n                                width: '100%',\r\n                                backgroundColor: loading ? '#9ca3af' : '#10b981',\r\n                                color: 'white',\r\n                                padding: '12px',\r\n                                borderRadius: '12px',\r\n                                border: 'none',\r\n                                fontSize: '14px',\r\n                                fontWeight: 'bold',\r\n                                cursor: loading ? 'not-allowed' : 'pointer'\r\n                            }}\r\n                        >\r\n                            {loading ? 'Enregistrement...' : 'Enregistrer mon choix'}\r\n                        </button>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Section Mot de passe */}\r\n                {activeSection === 'password' && (\r\n                    <form onSubmit={handleUpdatePassword}>\r\n                        <h3 style={{ margin: '0 0 16px 0', fontSize: '16px' }}>\r\n                            Définir un mot de passe personnalisé\r\n                        </h3>\r\n                        <p style={{ margin: '0 0 16px 0', fontSize: '13px', color: '#666' }}>\r\n                            Vous pourrez ensuite vous connecter avec votre prénom et ce mot de passe.\r\n                        </p>\r\n                        \r\n                        \r\n                        <input\r\n                            type={showPasswords ? 'text' : 'password'}\r\n                            value={newPassword}\r\n                            onChange={(e) => setNewPassword(e.target.value)}\r\n                            placeholder=\"Nouveau mot de passe\"\r\n                            style={inputStyle}\r\n                            required\r\n                        />\r\n                        \r\n                        <input\r\n                            type={showPasswords ? 'text' : 'password'}\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                            placeholder=\"Confirmer le nouveau mot de passe\"\r\n                            style={inputStyle}\r\n                            required\r\n                        />\r\n\r\n                        <label style={{ display: 'flex', alignItems: 'center', marginBottom: '12px', fontSize: '14px' }}>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={showPasswords}\r\n                                onChange={(e) => setShowPasswords(e.target.checked)}\r\n                                style={{ marginRight: '8px' }}\r\n                            />\r\n                            Afficher les mots de passe\r\n                        </label>\r\n\r\n                        <button type=\"submit\" style={buttonStyle} disabled={loading}>\r\n                            {loading ? 'Modification...' : 'Changer le mot de passe'}\r\n                        </button>\r\n                        \r\n                        <p style={{ fontSize: '12px', color: '#6b7280', margin: 0 }}>\r\n                            Changement sécurisé sans email de notification\r\n                        </p>\r\n                    </form>\r\n                )}\r\n\r\n                {/* Bouton retour */}\r\n                <div style={{ marginTop: '24px', paddingTop: '16px', borderTop: '1px solid #e5e7eb' }}>\r\n                    <button\r\n                        onClick={() => router.push('/formateur')}\r\n                        style={{\r\n                            width: '100%',\r\n                            padding: '12px',\r\n                            background: '#6b7280',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '16px',\r\n                            fontWeight: '600',\r\n                            cursor: 'pointer',\r\n                            marginTop: '16px',\r\n                            transition: 'transform 0.2s'\r\n                        }}\r\n                    >\r\n                        Retour à l'accueil\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuthFormateur(ProfilFormateur)",
          "taille": 18317,
          "lignes": 443,
          "dateModif": "2025-08-28T19:00:40.445Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { useFormateurAuth } from '../../contexts/FormateurAuthContext'\r\nimport { withAuthFormateur } from '../../components/withAuthFormateur'\r\nimport { supabase } from '../../lib/supabaseClient'\r\n\r\nfunction ProfilFormateur() {\r\n    const { user } = useFormateurAuth()\r\n    const [email, setEmail] = useState('')\r\n    const [newPassword, setNewPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [activeSection, setActiveSection] = useState('email')\r\n    const [loading, setLoading] = useState(false)\r\n    const [message, setMessage] = useState('')\r\n    const [showPasswords, setShowPasswords] = useState(false)\r\n    const router = useRouter()\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            setEmail(user.email || '')\r\n        }\r\n    }, [user])\r\n\r\n    const handleUpdateEmail = async () => {\r\n        \r\n        // Si l'email est vide, on veut le supprimer\r\n        if (email === '') {\r\n            setLoading(true)\r\n            try {\r\n                const { error } = await supabase\r\n                    .from('users')\r\n                    .update({ email: null })\r\n                    .eq('id', user.id)\r\n\r\n                if (error) throw error\r\n\r\n                setMessage('Email supprimé avec succès !')\r\n                setTimeout(() => setMessage(''), 4000)\r\n                \r\n            } catch (error) {\r\n                console.error('Erreur:', error)\r\n                setMessage(`Erreur : ${error.message}`)\r\n                setTimeout(() => setMessage(''), 4000)\r\n            } finally {\r\n                setLoading(false)\r\n            }\r\n            return\r\n        }\r\n        \r\n        // Validation de l'email si non vide\r\n        if (!email.trim()) {\r\n            setMessage('Veuillez saisir un email valide')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        if (!email.includes('@') || !email.includes('.')) {\r\n            setMessage('Format d\\'email invalide')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setLoading(true)\r\n        try {\r\n            const { error } = await supabase\r\n                .from('users')\r\n                .update({ email: email.trim() })\r\n                .eq('id', user.id)\r\n\r\n            if (error) throw error\r\n\r\n            setMessage('Email modifié avec succès !')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            \r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    const handleUpdatePassword = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!newPassword || !confirmPassword) {\r\n            setMessage('Veuillez remplir tous les champs')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        if (newPassword !== confirmPassword) {\r\n            setMessage('Les nouveaux mots de passe ne correspondent pas')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        if (newPassword.trim().length === 0) {\r\n            setMessage('Le nouveau mot de passe ne peut pas être vide')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setLoading(true)\r\n        try {\r\n            const token = localStorage.getItem('formateur_token')\r\n            \r\n            const response = await fetch('/api/formateur/update-password', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify({ newPassword })\r\n            })\r\n\r\n            const data = await response.json()\r\n            \r\n            if (response.ok) {\r\n                setMessage('Mot de passe personnalisé sauvegardé !')\r\n                setNewPassword('')\r\n                setConfirmPassword('')\r\n                setTimeout(() => setMessage(''), 4000)\r\n            } else {\r\n                setMessage(data.error || 'Erreur lors de la sauvegarde')\r\n                setTimeout(() => setMessage(''), 4000)\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n            setMessage('Erreur inattendue')\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    const sectionButtonStyle = (isActive) => ({\r\n        flex: 1,\r\n        padding: '8px 12px',\r\n        backgroundColor: isActive ? '#3b82f6' : '#e5e7eb',\r\n        color: isActive ? 'white' : '#374151',\r\n        border: 'none',\r\n        borderRadius: '8px',\r\n        fontSize: '12px',\r\n        fontWeight: 'bold',\r\n        cursor: 'pointer',\r\n        transition: 'all 0.2s'\r\n    })\r\n\r\n    const inputStyle = {\r\n        width: '100%',\r\n        padding: '12px',\r\n        border: '2px solid #d1d5db',\r\n        borderRadius: '8px',\r\n        fontSize: '16px',\r\n        marginBottom: '12px'\r\n    }\r\n\r\n    const buttonStyle = {\r\n        width: '100%',\r\n        backgroundColor: loading ? '#9ca3af' : '#10b981',\r\n        color: 'white',\r\n        padding: '12px',\r\n        borderRadius: '12px',\r\n        border: 'none',\r\n        fontSize: '14px',\r\n        fontWeight: 'bold',\r\n        cursor: loading ? 'not-allowed' : 'pointer',\r\n        marginBottom: '12px'\r\n    }\r\n\r\n    if (!user) {\r\n        return (\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                backgroundColor: '#f3f4f6',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n            }}>\r\n                <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement...</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            backgroundColor: '#f3f4f6',\r\n            padding: '16px'\r\n        }}>\r\n            <div style={{\r\n                maxWidth: '400px',\r\n                margin: '0 auto',\r\n                backgroundColor: 'white',\r\n                borderRadius: '24px',\r\n                padding: '24px'\r\n            }}>\r\n                {/* En-tête */}\r\n                <div style={{ marginBottom: '24px' }}>\r\n                    <h1 style={{ fontSize: '20px', fontWeight: 'bold', margin: 0, textAlign: 'center' }}>\r\n                        Mon Profil\r\n                    </h1>\r\n                </div>\r\n\r\n                {/* Informations utilisateur */}\r\n                <div style={{ \r\n                    backgroundColor: '#f8fafc', \r\n                    padding: '16px', \r\n                    borderRadius: '12px', \r\n                    marginBottom: '24px',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    <h2 style={{ margin: '0 0 8px 0', fontSize: '18px', color: '#1f2937' }}>\r\n                        {user.prenom} {user.nom}\r\n                    </h2>\r\n                    {user.email && (\r\n                        <p style={{ margin: 0, fontSize: '13px', color: '#6b7280' }}>\r\n                            {user.email}\r\n                        </p>\r\n                    )}\r\n                </div>\r\n\r\n                {/* Navigation sections */}\r\n                <div style={{ display: 'flex', gap: '8px', marginBottom: '24px' }}>\r\n                    <button \r\n                        style={sectionButtonStyle(activeSection === 'email')}\r\n                        onClick={() => setActiveSection('email')}\r\n                    >\r\n                        Email\r\n                    </button>\r\n                    <button \r\n                        style={sectionButtonStyle(activeSection === 'password')}\r\n                        onClick={() => setActiveSection('password')}\r\n                    >\r\n                        Mot de passe\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Messages */}\r\n                {message && (\r\n                    <div style={{\r\n                        padding: '12px',\r\n                        borderRadius: '8px',\r\n                        marginBottom: '16px',\r\n                        backgroundColor: message.includes('succès') ? '#d1fae5' : '#fee2e2',\r\n                        color: message.includes('succès') ? '#065f46' : '#991b1b',\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        whiteSpace: 'pre-line'\r\n                    }}>\r\n                        {message}\r\n                    </div>\r\n                )}\r\n\r\n                {/* Section Email */}\r\n                {activeSection === 'email' && (\r\n                    <div>\r\n                        <h3 style={{ margin: '0 0 16px 0', fontSize: '16px' }}>\r\n                            Gérer mes notifications email\r\n                        </h3>\r\n                        \r\n                        {/* Option 1 : Recevoir les emails */}\r\n                        <div \r\n                            onClick={() => setEmail(userData.email || '')}\r\n                            style={{\r\n                                padding: '15px',\r\n                                marginBottom: '12px',\r\n                                border: '2px solid',\r\n                                borderColor: email ? '#3b82f6' : '#e5e7eb',\r\n                                borderRadius: '12px',\r\n                                cursor: 'pointer',\r\n                                backgroundColor: email ? '#eff6ff' : 'white',\r\n                                transition: 'all 0.2s'\r\n                            }}\r\n                        >\r\n                            <div style={{ display: 'flex', alignItems: 'flex-start', gap: '10px' }}>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    checked={email !== ''}\r\n                                    onChange={() => {}}\r\n                                    style={{ marginTop: '2px' }}\r\n                                />\r\n                                <div style={{ flex: 1 }}>\r\n                                    <strong style={{ fontSize: '14px', color: '#1f2937' }}>\r\n                                        Je souhaite recevoir une copie des messages par email\r\n                                    </strong>\r\n                                    <p style={{ margin: '4px 0 0 0', fontSize: '12px', color: '#6b7280' }}>\r\n                                        Tous les messages de la messagerie interne vous seront aussi envoyés par email\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            {email && (\r\n                                <div style={{ marginTop: '12px', marginLeft: '24px' }}>\r\n                                    <input\r\n                                        type=\"email\"\r\n                                        value={email}\r\n                                        onChange={(e) => setEmail(e.target.value)}\r\n                                        placeholder=\"votre.email@exemple.fr\"\r\n                                        style={{\r\n                                            width: '100%',\r\n                                            padding: '10px',\r\n                                            border: '1px solid #d1d5db',\r\n                                            borderRadius: '8px',\r\n                                            fontSize: '14px'\r\n                                        }}\r\n                                        onClick={(e) => e.stopPropagation()}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n\r\n                        {/* Option 2 : Pas d'email */}\r\n                        <div \r\n                            onClick={() => setEmail('')}\r\n                            style={{\r\n                                padding: '15px',\r\n                                marginBottom: '16px',\r\n                                border: '2px solid',\r\n                                borderColor: email === '' ? '#3b82f6' : '#e5e7eb',\r\n                                borderRadius: '12px',\r\n                                cursor: 'pointer',\r\n                                backgroundColor: email === '' ? '#eff6ff' : 'white',\r\n                                transition: 'all 0.2s'\r\n                            }}\r\n                        >\r\n                            <div style={{ display: 'flex', alignItems: 'flex-start', gap: '10px' }}>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    checked={email === ''}\r\n                                    onChange={() => {}}\r\n                                    style={{ marginTop: '2px' }}\r\n                                />\r\n                                <div style={{ flex: 1 }}>\r\n                                    <strong style={{ fontSize: '14px', color: '#1f2937' }}>\r\n                                        Je ne souhaite pas que mon email soit utilisé\r\n                                    </strong>\r\n                                    <p style={{ margin: '4px 0 0 0', fontSize: '12px', color: '#6b7280' }}>\r\n                                        Supprimer mon adresse email du système. Seule la messagerie interne sera utilisée.\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <button \r\n                            onClick={handleUpdateEmail}\r\n                            disabled={loading}\r\n                            style={{\r\n                                width: '100%',\r\n                                backgroundColor: loading ? '#9ca3af' : '#10b981',\r\n                                color: 'white',\r\n                                padding: '12px',\r\n                                borderRadius: '12px',\r\n                                border: 'none',\r\n                                fontSize: '14px',\r\n                                fontWeight: 'bold',\r\n                                cursor: loading ? 'not-allowed' : 'pointer'\r\n                            }}\r\n                        >\r\n                            {loading ? 'Enregistrement...' : 'Enregistrer mon choix'}\r\n                        </button>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Section Mot de passe */}\r\n                {activeSection === 'password' && (\r\n                    <form onSubmit={handleUpdatePassword}>\r\n                        <h3 style={{ margin: '0 0 16px 0', fontSize: '16px' }}>\r\n                            Définir un mot de passe personnalisé\r\n                        </h3>\r\n                        <p style={{ margin: '0 0 16px 0', fontSize: '13px', color: '#666' }}>\r\n                            Vous pourrez ensuite vous connecter avec votre prénom et ce mot de passe.\r\n                        </p>\r\n                        \r\n                        \r\n                        <input\r\n                            type={showPasswords ? 'text' : 'password'}\r\n                            value={newPassword}\r\n                            onChange={(e) => setNewPassword(e.target.value)}\r\n                            placeholder=\"Nouveau mot de passe\"\r\n                            style={inputStyle}\r\n                            required\r\n                        />\r\n                        \r\n                        <input\r\n                            type={showPasswords ? 'text' : 'password'}\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                            placeholder=\"Confirmer le nouveau mot de passe\"\r\n                            style={inputStyle}\r\n                            required\r\n                        />\r\n\r\n                        <label style={{ display: 'flex', alignItems: 'center', marginBottom: '12px', fontSize: '14px' }}>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={showPasswords}\r\n                                onChange={(e) => setShowPasswords(e.target.checked)}\r\n                                style={{ marginRight: '8px' }}\r\n                            />\r\n                            Afficher les mots de passe\r\n                        </label>\r\n\r\n                        <button type=\"submit\" style={buttonStyle} disabled={loading}>\r\n                            {loading ? 'Modification...' : 'Changer le mot de passe'}\r\n                        </button>\r\n                        \r\n                        <p style={{ fontSize: '12px', color: '#6b7280', margin: 0 }}>\r\n                            Changement sécurisé sans email de notification\r\n                        </p>\r\n                    </form>\r\n                )}\r\n\r\n                {/* Bouton retour */}\r\n                <div style={{ marginTop: '24px', paddingTop: '16px', borderTop: '1px solid #e5e7eb' }}>\r\n                    <button\r\n                        onClick={() => router.push('/formateur')}\r\n                        style={{\r\n                            width: '100%',\r\n                            padding: '12px',\r\n                            background: '#6b7280',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '16px',\r\n                            fontWeight: '600',\r\n                            cursor: 'pointer',\r\n                            marginTop: '16px',\r\n                            transition: 'transform 0.2s'\r\n                        }}\r\n                    >\r\n                        Retour à l'accueil\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuthFormateur(ProfilFormateur)",
          "taille": 18317,
          "lignes": 443,
          "dateModif": "2025-08-22T12:30:10.698Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/gestion-apprenants.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\nimport { withAuthAdmin } from '../components/withAuthAdmin'\r\n\r\nfunction GestionApprenants({ user, logout, inactivityTime }) {\r\n    const router = useRouter()\r\n    \r\n    // États\r\n    const [apprenants, setApprenants] = useState([])\r\n    const [filtreStatut, setFiltreStatut] = useState('actif')\r\n    const [filtreDispositif, setFiltreDispositif] = useState('tous')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [message, setMessage] = useState('')\r\n    \r\n    // États formulaire ajout\r\n    const [showAjouterForm, setShowAjouterForm] = useState(false)\r\n    const [prenom, setPrenom] = useState('')\r\n    const [nom, setNom] = useState('')\r\n    const [dispositif, setDispositif] = useState('HSP')\r\n    \r\n    // États formulaire modification\r\n    const [apprenantEnModification, setApprenantEnModification] = useState(null)\r\n    const [showModifierForm, setShowModifierForm] = useState(false)\r\n    \r\n    // États pour confirmation\r\n    const [showConfirmation, setShowConfirmation] = useState(false)\r\n    const [actionEnCours, setActionEnCours] = useState(null)\r\n\r\n    useEffect(() => {\r\n        fetchApprenants()\r\n    }, [filtreStatut, filtreDispositif])\r\n\r\n    // Fonction pour récupérer les apprenants\r\n    const fetchApprenants = async () => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('users')\r\n                .select('*')\r\n                .eq('role', 'apprenant')\r\n                .order('nom')\r\n\r\n            if (error) throw error\r\n\r\n            let apprenantsFiltres = data || []\r\n            \r\n            // Filtre par statut\r\n            if (filtreStatut === 'actif') {\r\n                apprenantsFiltres = apprenantsFiltres.filter(a => a.archive !== true)\r\n            } else if (filtreStatut === 'archive') {\r\n                apprenantsFiltres = apprenantsFiltres.filter(a => a.archive === true)\r\n            }\r\n            \r\n            // Filtre par dispositif\r\n            if (filtreDispositif === 'HSP') {\r\n                apprenantsFiltres = apprenantsFiltres.filter(a => a.dispositif === 'HSP')\r\n            } else if (filtreDispositif === 'OPCO') {\r\n                apprenantsFiltres = apprenantsFiltres.filter(a => a.dispositif === 'OPCO')\r\n            }\r\n\r\n            setApprenants(apprenantsFiltres)\r\n        } catch (error) {\r\n            setMessage('Erreur lors du chargement des apprenants')\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    // Fonction pour ajouter un apprenant\r\n    const handleSubmitAjout = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!prenom.trim() || !nom.trim()) {\r\n            setMessage('Le prénom et le nom sont obligatoires')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { error } = await supabase.from('users').insert([{\r\n                prenom: prenom.trim(),\r\n                nom: nom.trim(),\r\n                dispositif: dispositif,\r\n                role: 'apprenant',\r\n                archive: false\r\n            }])\r\n            \r\n            if (error) throw error\r\n            \r\n            setMessage('Apprenant ajouté avec succès !')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            \r\n            // Réinitialiser le formulaire\r\n            setPrenom('')\r\n            setNom('')\r\n            setDispositif('HSP')\r\n            setShowAjouterForm(false)\r\n            await fetchApprenants()\r\n            \r\n        } catch (error) {\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Fonction pour modifier un apprenant\r\n    const handleSubmitModification = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!apprenantEnModification || !apprenantEnModification.prenom.trim() || !apprenantEnModification.nom.trim()) {\r\n            setMessage('Le prénom et le nom sont obligatoires')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { error } = await supabase\r\n                .from('users')\r\n                .update({ \r\n                    prenom: apprenantEnModification.prenom.trim(),\r\n                    nom: apprenantEnModification.nom.trim(),\r\n                    dispositif: apprenantEnModification.dispositif\r\n                })\r\n                .eq('id', apprenantEnModification.id)\r\n            \r\n            if (error) throw error\r\n            \r\n            setMessage('Apprenant modifié avec succès !')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            setApprenantEnModification(null)\r\n            setShowModifierForm(false)\r\n            await fetchApprenants()\r\n            \r\n        } catch (error) {\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Initier la modification\r\n    const initierModification = (apprenant) => {\r\n        setApprenantEnModification({...apprenant})\r\n        setShowModifierForm(true)\r\n        setShowAjouterForm(false)\r\n    }\r\n\r\n    // Actions archiver/désarchiver/supprimer\r\n    const initierAction = (apprenant, typeAction) => {\r\n        setActionEnCours({\r\n            apprenant: apprenant,\r\n            type: typeAction,\r\n            message: getMessageConfirmation(apprenant, typeAction)\r\n        })\r\n        setShowConfirmation(true)\r\n    }\r\n\r\n    const getMessageConfirmation = (apprenant, typeAction) => {\r\n        switch (typeAction) {\r\n            case 'archiver':\r\n                return `Archiver l'apprenant \"${apprenant.prenom} ${apprenant.nom}\" ?`\r\n            case 'desarchiver':\r\n                return `Désarchiver l'apprenant \"${apprenant.prenom} ${apprenant.nom}\" ?`\r\n            case 'supprimer':\r\n                return `Supprimer définitivement l'apprenant \"${apprenant.prenom} ${apprenant.nom}\" ?\\n\\nATTENTION : Action irréversible !`\r\n            default:\r\n                return 'Confirmer cette action ?'\r\n        }\r\n    }\r\n\r\n    const executerAction = async () => {\r\n        if (!actionEnCours) return\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { apprenant, type } = actionEnCours\r\n\r\n            if (type === 'archiver') {\r\n                await supabase.from('users').update({ archive: true }).eq('id', apprenant.id)\r\n                setMessage('Apprenant archivé avec succès !')\r\n            } else if (type === 'desarchiver') {\r\n                await supabase.from('users').update({ archive: false }).eq('id', apprenant.id)\r\n                setMessage('Apprenant désarchivé avec succès !')\r\n            } else if (type === 'supprimer') {\r\n                await supabase.from('users').delete().eq('id', apprenant.id)\r\n                setMessage('Apprenant supprimé définitivement !')\r\n            }\r\n\r\n            setTimeout(() => setMessage(''), 4000)\r\n            await fetchApprenants()\r\n\r\n        } catch (error) {\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n            setActionEnCours(null)\r\n            setShowConfirmation(false)\r\n        }\r\n    }\r\n\r\n    // Compter les apprenants\r\n    const compterApprenants = () => {\r\n        const tous = apprenants.length\r\n        const actifs = apprenants.filter(a => !a.archive).length\r\n        const archives = apprenants.filter(a => a.archive).length\r\n        const hsp = apprenants.filter(a => a.dispositif === 'HSP' && !a.archive).length\r\n        const opco = apprenants.filter(a => a.dispositif === 'OPCO' && !a.archive).length\r\n        return { tous, actifs, archives, hsp, opco }\r\n    }\r\n\r\n    const stats = compterApprenants()\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            padding: '40px 60px'\r\n        }}>\r\n            {/* Header avec navigation */}\r\n            <div style={{\r\n                backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                borderRadius: '12px',\r\n                padding: '8px 20px',\r\n                marginBottom: '20px',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                backdropFilter: 'blur(10px)'\r\n            }}>\r\n                <nav style={{ fontSize: '14px' }}>\r\n                    <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                    <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                    <span style={{ color: '#3b82f6', fontWeight: '500' }}>Gestion des Apprenants</span>\r\n                </nav>\r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🏠 Accueil\r\n                    </button>\r\n                    \r\n                    <div style={{\r\n                        padding: '6px 12px',\r\n                        borderRadius: '8px',\r\n                        fontSize: '12px',\r\n                        fontWeight: '500',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: '6px',\r\n                        backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n                        color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#d97706' : '#059669',\r\n                        border: `1px solid ${inactivityTime >= 240 ? '#fca5a5' : inactivityTime >= 180 ? '#fcd34d' : '#6ee7b7'}`\r\n                    }}>\r\n                        Status : {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n                                 inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 `🟢 ACTIF`}\r\n                    </div>\r\n                    \r\n                    <button\r\n                        onClick={logout}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🚪 Déconnexion\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Titre principal */}\r\n            <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n                <h1 style={{\r\n                    fontSize: '36px',\r\n                    fontWeight: 'bold',\r\n                    color: 'white',\r\n                    marginBottom: '10px'\r\n                }}>\r\n                    Gestion des Apprenants\r\n                </h1>\r\n                <p style={{ color: 'rgba(255,255,255,0.8)', fontSize: '16px' }}>\r\n                    Gérez les apprenants et leur dispositif de financement\r\n                </p>\r\n            </div>\r\n\r\n            {/* Message de notification */}\r\n            {message && (\r\n                <div style={{\r\n                    backgroundColor: message.includes('succès') ? '#d1fae5' : '#fee2e2',\r\n                    color: message.includes('succès') ? '#065f46' : '#991b1b',\r\n                    padding: '15px',\r\n                    borderRadius: '8px',\r\n                    marginBottom: '20px',\r\n                    textAlign: 'center',\r\n                    fontWeight: '500'\r\n                }}>\r\n                    {message}\r\n                </div>\r\n            )}\r\n\r\n            {/* Bouton Ajouter */}\r\n            <div style={{ marginBottom: '20px' }}>\r\n                <button\r\n                    onClick={() => {\r\n                        setShowAjouterForm(!showAjouterForm)\r\n                        setShowModifierForm(false)\r\n                    }}\r\n                    style={{\r\n                        width: '100%',\r\n                        padding: '15px',\r\n                        background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '12px',\r\n                        fontSize: '16px',\r\n                        fontWeight: '600',\r\n                        cursor: 'pointer',\r\n                        transition: 'transform 0.2s'\r\n                    }}\r\n                    onMouseOver={(e) => e.target.style.transform = 'scale(1.02)'}\r\n                    onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\r\n                >\r\n                    Ajouter un nouvel apprenant\r\n                </button>\r\n            </div>\r\n\r\n            {/* Formulaire d'ajout */}\r\n            {showAjouterForm && (\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    marginBottom: '20px',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <h3 style={{ marginBottom: '15px', color: '#1f2937' }}>Nouvel apprenant</h3>\r\n                    <form onSubmit={handleSubmitAjout} style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 200px 150px', gap: '15px', alignItems: 'end' }}>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>Prénom *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={prenom}\r\n                                onChange={(e) => setPrenom(e.target.value)}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px'\r\n                                }}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>Nom *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={nom}\r\n                                onChange={(e) => setNom(e.target.value)}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px'\r\n                                }}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>Dispositif</label>\r\n                            <select\r\n                                value={dispositif}\r\n                                onChange={(e) => setDispositif(e.target.value)}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                <option value=\"HSP\">HSP</option>\r\n                                <option value=\"OPCO\">OPCO</option>\r\n                            </select>\r\n                        </div>\r\n                        <button\r\n                            type=\"submit\"\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '10px',\r\n                                backgroundColor: isLoading ? '#9ca3af' : '#10b981',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            {isLoading ? '...' : 'Ajouter'}\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            )}\r\n\r\n            {/* Formulaire de modification */}\r\n            {showModifierForm && apprenantEnModification && (\r\n                <div style={{\r\n                    backgroundColor: '#fef3c7',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    marginBottom: '20px',\r\n                    border: '2px solid #f59e0b'\r\n                }}>\r\n                    <h3 style={{ marginBottom: '15px', color: '#92400e' }}>\r\n                        Modifier : {apprenantEnModification.prenom} {apprenantEnModification.nom}\r\n                    </h3>\r\n                    <form onSubmit={handleSubmitModification} style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 200px 150px', gap: '15px', alignItems: 'end' }}>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>Prénom *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={apprenantEnModification.prenom}\r\n                                onChange={(e) => setApprenantEnModification({...apprenantEnModification, prenom: e.target.value})}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #fbbf24',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px'\r\n                                }}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>Nom *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={apprenantEnModification.nom}\r\n                                onChange={(e) => setApprenantEnModification({...apprenantEnModification, nom: e.target.value})}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #fbbf24',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px'\r\n                                }}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>Dispositif</label>\r\n                            <select\r\n                                value={apprenantEnModification.dispositif || 'HSP'}\r\n                                onChange={(e) => setApprenantEnModification({...apprenantEnModification, dispositif: e.target.value})}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #fbbf24',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                <option value=\"HSP\">HSP</option>\r\n                                <option value=\"OPCO\">OPCO</option>\r\n                            </select>\r\n                        </div>\r\n                        <button\r\n                            type=\"submit\"\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '10px',\r\n                                backgroundColor: isLoading ? '#9ca3af' : '#f59e0b',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            {isLoading ? '...' : 'Modifier'}\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            )}\r\n\r\n            {/* Tableau avec filtres */}\r\n            <div style={{\r\n                backgroundColor: 'white',\r\n                borderRadius: '12px',\r\n                overflow: 'hidden',\r\n                boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n            }}>\r\n                {/* Header avec double filtre et stats */}\r\n                <div style={{\r\n                    padding: '20px',\r\n                    backgroundColor: '#f9fafb',\r\n                    borderBottom: '1px solid #e5e7eb'\r\n                }}>\r\n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '15px' }}>\r\n                        <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>\r\n                            <label style={{ fontWeight: '500', color: '#374151' }}>Statut :</label>\r\n                            <select\r\n                                value={filtreStatut}\r\n                                onChange={(e) => setFiltreStatut(e.target.value)}\r\n                                style={{\r\n                                    padding: '8px 12px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                <option value=\"actif\">Apprenants actifs</option>\r\n                                <option value=\"archive\">Apprenants archivés</option>\r\n                                <option value=\"tous\">Tous les apprenants</option>\r\n                            </select>\r\n                        </div>\r\n                        \r\n                        <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>\r\n                            <label style={{ fontWeight: '500', color: '#374151' }}>Dispositif :</label>\r\n                            <select\r\n                                value={filtreDispositif}\r\n                                onChange={(e) => setFiltreDispositif(e.target.value)}\r\n                                style={{\r\n                                    padding: '8px 12px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                <option value=\"tous\">Tous</option>\r\n                                <option value=\"HSP\">HSP uniquement</option>\r\n                                <option value=\"OPCO\">OPCO uniquement</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    {/* Statistiques */}\r\n                    <div style={{ display: 'flex', gap: '20px', fontSize: '14px', justifyContent: 'center' }}>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#d1fae5', \r\n                            color: '#065f46',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Actifs: {stats.actifs}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#dbeafe', \r\n                            color: '#1e40af',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            HSP: {stats.hsp}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#fef3c7', \r\n                            color: '#92400e',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            OPCO: {stats.opco}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#f3f4f6', \r\n                            color: '#6b7280',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Archivés: {stats.archives}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#ede9fe', \r\n                            color: '#7c3aed',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Total: {stats.tous}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Tableau */}\r\n                {apprenants.length > 0 ? (\r\n                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                        <thead>\r\n                            <tr style={{ backgroundColor: '#f9fafb' }}>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Statut</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Prénom</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Nom</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Dispositif</th>\r\n                                <th style={{ padding: '12px', textAlign: 'center', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {apprenants.map((apprenant) => (\r\n                                <tr key={apprenant.id} style={{ borderTop: '1px solid #e5e7eb' }}>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <span style={{\r\n                                            padding: '4px 12px',\r\n                                            borderRadius: '20px',\r\n                                            fontSize: '12px',\r\n                                            fontWeight: '500',\r\n                                            backgroundColor: apprenant.archive ? '#f3f4f6' : '#d1fae5',\r\n                                            color: apprenant.archive ? '#6b7280' : '#065f46'\r\n                                        }}>\r\n                                            {apprenant.archive ? 'Archivé' : 'Actif'}\r\n                                        </span>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px', fontWeight: '500' }}>{apprenant.prenom}</td>\r\n                                    <td style={{ padding: '12px' }}>{apprenant.nom}</td>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <span style={{\r\n                                            padding: '4px 12px',\r\n                                            borderRadius: '20px',\r\n                                            fontSize: '12px',\r\n                                            fontWeight: '500',\r\n                                            backgroundColor: apprenant.dispositif === 'HSP' ? '#dbeafe' : '#fef3c7',\r\n                                            color: apprenant.dispositif === 'HSP' ? '#1e40af' : '#92400e'\r\n                                        }}>\r\n                                            {apprenant.dispositif || 'HSP'}\r\n                                        </span>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px', textAlign: 'center' }}>\r\n                                        {apprenant.archive ? (\r\n                                            <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>\r\n                                                <button\r\n                                                    onClick={() => initierAction(apprenant, 'desarchiver')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#10b981',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    Désarchiver\r\n                                                </button>\r\n                                                <button\r\n                                                    onClick={() => initierAction(apprenant, 'supprimer')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#ef4444',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    Supprimer\r\n                                                </button>\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>\r\n                                                <button\r\n                                                    onClick={() => initierModification(apprenant)}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#3b82f6',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    Modifier\r\n                                                </button>\r\n                                                <button\r\n                                                    onClick={() => initierAction(apprenant, 'archiver')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#6b7280',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    Archiver\r\n                                                </button>\r\n                                            </div>\r\n                                        )}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                ) : (\r\n                    <div style={{ padding: '60px', textAlign: 'center' }}>\r\n                        <p style={{ color: '#9ca3af', fontSize: '16px' }}>\r\n                            Aucun apprenant trouvé avec ces critères.\r\n                        </p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Modal de confirmation */}\r\n            {showConfirmation && actionEnCours && (\r\n                <div style={{\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    backgroundColor: 'rgba(0,0,0,0.5)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    zIndex: 1000\r\n                }}>\r\n                    <div style={{\r\n                        backgroundColor: 'white',\r\n                        borderRadius: '12px',\r\n                        padding: '25px',\r\n                        maxWidth: '400px',\r\n                        width: '90%',\r\n                        boxShadow: '0 20px 40px rgba(0,0,0,0.2)'\r\n                    }}>\r\n                        <h3 style={{ marginBottom: '15px', color: '#1f2937' }}>\r\n                            Confirmer l'action\r\n                        </h3>\r\n                        <p style={{ marginBottom: '20px', color: '#6b7280', whiteSpace: 'pre-line' }}>\r\n                            {actionEnCours.message}\r\n                        </p>\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                onClick={executerAction}\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    padding: '10px',\r\n                                    backgroundColor: actionEnCours.type === 'supprimer' ? '#ef4444' : '#3b82f6',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontWeight: '500',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                {isLoading ? 'En cours...' : 'Confirmer'}\r\n                            </button>\r\n                            <button\r\n                                onClick={() => {\r\n                                    setShowConfirmation(false)\r\n                                    setActionEnCours(null)\r\n                                }}\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    padding: '10px',\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontWeight: '500',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC - Page titre personnalisé\r\nexport default withAuthAdmin(GestionApprenants, \"Gestion Apprenants\")",
          "taille": 39181,
          "lignes": 804,
          "dateModif": "2025-08-28T19:00:40.456Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\nimport { withAuthAdmin } from '../components/withAuthAdmin'\r\n\r\nfunction GestionApprenants({ user, logout, inactivityTime }) {\r\n    const router = useRouter()\r\n    \r\n    // États\r\n    const [apprenants, setApprenants] = useState([])\r\n    const [filtreStatut, setFiltreStatut] = useState('actif')\r\n    const [filtreDispositif, setFiltreDispositif] = useState('tous')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [message, setMessage] = useState('')\r\n    \r\n    // États formulaire ajout\r\n    const [showAjouterForm, setShowAjouterForm] = useState(false)\r\n    const [prenom, setPrenom] = useState('')\r\n    const [nom, setNom] = useState('')\r\n    const [dispositif, setDispositif] = useState('HSP')\r\n    \r\n    // États formulaire modification\r\n    const [apprenantEnModification, setApprenantEnModification] = useState(null)\r\n    const [showModifierForm, setShowModifierForm] = useState(false)\r\n    \r\n    // États pour confirmation\r\n    const [showConfirmation, setShowConfirmation] = useState(false)\r\n    const [actionEnCours, setActionEnCours] = useState(null)\r\n\r\n    useEffect(() => {\r\n        fetchApprenants()\r\n    }, [filtreStatut, filtreDispositif])\r\n\r\n    // Fonction pour récupérer les apprenants\r\n    const fetchApprenants = async () => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('users')\r\n                .select('*')\r\n                .eq('role', 'apprenant')\r\n                .order('nom')\r\n\r\n            if (error) throw error\r\n\r\n            let apprenantsFiltres = data || []\r\n            \r\n            // Filtre par statut\r\n            if (filtreStatut === 'actif') {\r\n                apprenantsFiltres = apprenantsFiltres.filter(a => a.archive !== true)\r\n            } else if (filtreStatut === 'archive') {\r\n                apprenantsFiltres = apprenantsFiltres.filter(a => a.archive === true)\r\n            }\r\n            \r\n            // Filtre par dispositif\r\n            if (filtreDispositif === 'HSP') {\r\n                apprenantsFiltres = apprenantsFiltres.filter(a => a.dispositif === 'HSP')\r\n            } else if (filtreDispositif === 'OPCO') {\r\n                apprenantsFiltres = apprenantsFiltres.filter(a => a.dispositif === 'OPCO')\r\n            }\r\n\r\n            setApprenants(apprenantsFiltres)\r\n        } catch (error) {\r\n            setMessage('Erreur lors du chargement des apprenants')\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    // Fonction pour ajouter un apprenant\r\n    const handleSubmitAjout = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!prenom.trim() || !nom.trim()) {\r\n            setMessage('Le prénom et le nom sont obligatoires')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { error } = await supabase.from('users').insert([{\r\n                prenom: prenom.trim(),\r\n                nom: nom.trim(),\r\n                dispositif: dispositif,\r\n                role: 'apprenant',\r\n                archive: false\r\n            }])\r\n            \r\n            if (error) throw error\r\n            \r\n            setMessage('Apprenant ajouté avec succès !')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            \r\n            // Réinitialiser le formulaire\r\n            setPrenom('')\r\n            setNom('')\r\n            setDispositif('HSP')\r\n            setShowAjouterForm(false)\r\n            await fetchApprenants()\r\n            \r\n        } catch (error) {\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Fonction pour modifier un apprenant\r\n    const handleSubmitModification = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!apprenantEnModification || !apprenantEnModification.prenom.trim() || !apprenantEnModification.nom.trim()) {\r\n            setMessage('Le prénom et le nom sont obligatoires')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { error } = await supabase\r\n                .from('users')\r\n                .update({ \r\n                    prenom: apprenantEnModification.prenom.trim(),\r\n                    nom: apprenantEnModification.nom.trim(),\r\n                    dispositif: apprenantEnModification.dispositif\r\n                })\r\n                .eq('id', apprenantEnModification.id)\r\n            \r\n            if (error) throw error\r\n            \r\n            setMessage('Apprenant modifié avec succès !')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            setApprenantEnModification(null)\r\n            setShowModifierForm(false)\r\n            await fetchApprenants()\r\n            \r\n        } catch (error) {\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Initier la modification\r\n    const initierModification = (apprenant) => {\r\n        setApprenantEnModification({...apprenant})\r\n        setShowModifierForm(true)\r\n        setShowAjouterForm(false)\r\n    }\r\n\r\n    // Actions archiver/désarchiver/supprimer\r\n    const initierAction = (apprenant, typeAction) => {\r\n        setActionEnCours({\r\n            apprenant: apprenant,\r\n            type: typeAction,\r\n            message: getMessageConfirmation(apprenant, typeAction)\r\n        })\r\n        setShowConfirmation(true)\r\n    }\r\n\r\n    const getMessageConfirmation = (apprenant, typeAction) => {\r\n        switch (typeAction) {\r\n            case 'archiver':\r\n                return `Archiver l'apprenant \"${apprenant.prenom} ${apprenant.nom}\" ?`\r\n            case 'desarchiver':\r\n                return `Désarchiver l'apprenant \"${apprenant.prenom} ${apprenant.nom}\" ?`\r\n            case 'supprimer':\r\n                return `Supprimer définitivement l'apprenant \"${apprenant.prenom} ${apprenant.nom}\" ?\\n\\nATTENTION : Action irréversible !`\r\n            default:\r\n                return 'Confirmer cette action ?'\r\n        }\r\n    }\r\n\r\n    const executerAction = async () => {\r\n        if (!actionEnCours) return\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { apprenant, type } = actionEnCours\r\n\r\n            if (type === 'archiver') {\r\n                await supabase.from('users').update({ archive: true }).eq('id', apprenant.id)\r\n                setMessage('Apprenant archivé avec succès !')\r\n            } else if (type === 'desarchiver') {\r\n                await supabase.from('users').update({ archive: false }).eq('id', apprenant.id)\r\n                setMessage('Apprenant désarchivé avec succès !')\r\n            } else if (type === 'supprimer') {\r\n                await supabase.from('users').delete().eq('id', apprenant.id)\r\n                setMessage('Apprenant supprimé définitivement !')\r\n            }\r\n\r\n            setTimeout(() => setMessage(''), 4000)\r\n            await fetchApprenants()\r\n\r\n        } catch (error) {\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n            setActionEnCours(null)\r\n            setShowConfirmation(false)\r\n        }\r\n    }\r\n\r\n    // Compter les apprenants\r\n    const compterApprenants = () => {\r\n        const tous = apprenants.length\r\n        const actifs = apprenants.filter(a => !a.archive).length\r\n        const archives = apprenants.filter(a => a.archive).length\r\n        const hsp = apprenants.filter(a => a.dispositif === 'HSP' && !a.archive).length\r\n        const opco = apprenants.filter(a => a.dispositif === 'OPCO' && !a.archive).length\r\n        return { tous, actifs, archives, hsp, opco }\r\n    }\r\n\r\n    const stats = compterApprenants()\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            padding: '40px 60px'\r\n        }}>\r\n            {/* Header avec navigation */}\r\n            <div style={{\r\n                backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                borderRadius: '12px',\r\n                padding: '8px 20px',\r\n                marginBottom: '20px',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                backdropFilter: 'blur(10px)'\r\n            }}>\r\n                <nav style={{ fontSize: '14px' }}>\r\n                    <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                    <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                    <span style={{ color: '#3b82f6', fontWeight: '500' }}>Gestion des Apprenants</span>\r\n                </nav>\r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🏠 Accueil\r\n                    </button>\r\n                    \r\n                    <div style={{\r\n                        padding: '6px 12px',\r\n                        borderRadius: '8px',\r\n                        fontSize: '12px',\r\n                        fontWeight: '500',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: '6px',\r\n                        backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n                        color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#d97706' : '#059669',\r\n                        border: `1px solid ${inactivityTime >= 240 ? '#fca5a5' : inactivityTime >= 180 ? '#fcd34d' : '#6ee7b7'}`\r\n                    }}>\r\n                        Status : {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n                                 inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 `🟢 ACTIF`}\r\n                    </div>\r\n                    \r\n                    <button\r\n                        onClick={logout}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🚪 Déconnexion\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Titre principal */}\r\n            <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n                <h1 style={{\r\n                    fontSize: '36px',\r\n                    fontWeight: 'bold',\r\n                    color: 'white',\r\n                    marginBottom: '10px'\r\n                }}>\r\n                    Gestion des Apprenants\r\n                </h1>\r\n                <p style={{ color: 'rgba(255,255,255,0.8)', fontSize: '16px' }}>\r\n                    Gérez les apprenants et leur dispositif de financement\r\n                </p>\r\n            </div>\r\n\r\n            {/* Message de notification */}\r\n            {message && (\r\n                <div style={{\r\n                    backgroundColor: message.includes('succès') ? '#d1fae5' : '#fee2e2',\r\n                    color: message.includes('succès') ? '#065f46' : '#991b1b',\r\n                    padding: '15px',\r\n                    borderRadius: '8px',\r\n                    marginBottom: '20px',\r\n                    textAlign: 'center',\r\n                    fontWeight: '500'\r\n                }}>\r\n                    {message}\r\n                </div>\r\n            )}\r\n\r\n            {/* Bouton Ajouter */}\r\n            <div style={{ marginBottom: '20px' }}>\r\n                <button\r\n                    onClick={() => {\r\n                        setShowAjouterForm(!showAjouterForm)\r\n                        setShowModifierForm(false)\r\n                    }}\r\n                    style={{\r\n                        width: '100%',\r\n                        padding: '15px',\r\n                        background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '12px',\r\n                        fontSize: '16px',\r\n                        fontWeight: '600',\r\n                        cursor: 'pointer',\r\n                        transition: 'transform 0.2s'\r\n                    }}\r\n                    onMouseOver={(e) => e.target.style.transform = 'scale(1.02)'}\r\n                    onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\r\n                >\r\n                    Ajouter un nouvel apprenant\r\n                </button>\r\n            </div>\r\n\r\n            {/* Formulaire d'ajout */}\r\n            {showAjouterForm && (\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    marginBottom: '20px',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <h3 style={{ marginBottom: '15px', color: '#1f2937' }}>Nouvel apprenant</h3>\r\n                    <form onSubmit={handleSubmitAjout} style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 200px 150px', gap: '15px', alignItems: 'end' }}>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>Prénom *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={prenom}\r\n                                onChange={(e) => setPrenom(e.target.value)}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px'\r\n                                }}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>Nom *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={nom}\r\n                                onChange={(e) => setNom(e.target.value)}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px'\r\n                                }}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>Dispositif</label>\r\n                            <select\r\n                                value={dispositif}\r\n                                onChange={(e) => setDispositif(e.target.value)}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                <option value=\"HSP\">HSP</option>\r\n                                <option value=\"OPCO\">OPCO</option>\r\n                            </select>\r\n                        </div>\r\n                        <button\r\n                            type=\"submit\"\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '10px',\r\n                                backgroundColor: isLoading ? '#9ca3af' : '#10b981',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            {isLoading ? '...' : 'Ajouter'}\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            )}\r\n\r\n            {/* Formulaire de modification */}\r\n            {showModifierForm && apprenantEnModification && (\r\n                <div style={{\r\n                    backgroundColor: '#fef3c7',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    marginBottom: '20px',\r\n                    border: '2px solid #f59e0b'\r\n                }}>\r\n                    <h3 style={{ marginBottom: '15px', color: '#92400e' }}>\r\n                        Modifier : {apprenantEnModification.prenom} {apprenantEnModification.nom}\r\n                    </h3>\r\n                    <form onSubmit={handleSubmitModification} style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 200px 150px', gap: '15px', alignItems: 'end' }}>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>Prénom *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={apprenantEnModification.prenom}\r\n                                onChange={(e) => setApprenantEnModification({...apprenantEnModification, prenom: e.target.value})}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #fbbf24',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px'\r\n                                }}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>Nom *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={apprenantEnModification.nom}\r\n                                onChange={(e) => setApprenantEnModification({...apprenantEnModification, nom: e.target.value})}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #fbbf24',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px'\r\n                                }}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>Dispositif</label>\r\n                            <select\r\n                                value={apprenantEnModification.dispositif || 'HSP'}\r\n                                onChange={(e) => setApprenantEnModification({...apprenantEnModification, dispositif: e.target.value})}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #fbbf24',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                <option value=\"HSP\">HSP</option>\r\n                                <option value=\"OPCO\">OPCO</option>\r\n                            </select>\r\n                        </div>\r\n                        <button\r\n                            type=\"submit\"\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '10px',\r\n                                backgroundColor: isLoading ? '#9ca3af' : '#f59e0b',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            {isLoading ? '...' : 'Modifier'}\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            )}\r\n\r\n            {/* Tableau avec filtres */}\r\n            <div style={{\r\n                backgroundColor: 'white',\r\n                borderRadius: '12px',\r\n                overflow: 'hidden',\r\n                boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n            }}>\r\n                {/* Header avec double filtre et stats */}\r\n                <div style={{\r\n                    padding: '20px',\r\n                    backgroundColor: '#f9fafb',\r\n                    borderBottom: '1px solid #e5e7eb'\r\n                }}>\r\n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '15px' }}>\r\n                        <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>\r\n                            <label style={{ fontWeight: '500', color: '#374151' }}>Statut :</label>\r\n                            <select\r\n                                value={filtreStatut}\r\n                                onChange={(e) => setFiltreStatut(e.target.value)}\r\n                                style={{\r\n                                    padding: '8px 12px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                <option value=\"actif\">Apprenants actifs</option>\r\n                                <option value=\"archive\">Apprenants archivés</option>\r\n                                <option value=\"tous\">Tous les apprenants</option>\r\n                            </select>\r\n                        </div>\r\n                        \r\n                        <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>\r\n                            <label style={{ fontWeight: '500', color: '#374151' }}>Dispositif :</label>\r\n                            <select\r\n                                value={filtreDispositif}\r\n                                onChange={(e) => setFiltreDispositif(e.target.value)}\r\n                                style={{\r\n                                    padding: '8px 12px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                <option value=\"tous\">Tous</option>\r\n                                <option value=\"HSP\">HSP uniquement</option>\r\n                                <option value=\"OPCO\">OPCO uniquement</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    {/* Statistiques */}\r\n                    <div style={{ display: 'flex', gap: '20px', fontSize: '14px', justifyContent: 'center' }}>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#d1fae5', \r\n                            color: '#065f46',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Actifs: {stats.actifs}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#dbeafe', \r\n                            color: '#1e40af',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            HSP: {stats.hsp}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#fef3c7', \r\n                            color: '#92400e',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            OPCO: {stats.opco}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#f3f4f6', \r\n                            color: '#6b7280',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Archivés: {stats.archives}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#ede9fe', \r\n                            color: '#7c3aed',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Total: {stats.tous}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Tableau */}\r\n                {apprenants.length > 0 ? (\r\n                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                        <thead>\r\n                            <tr style={{ backgroundColor: '#f9fafb' }}>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Statut</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Prénom</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Nom</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Dispositif</th>\r\n                                <th style={{ padding: '12px', textAlign: 'center', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {apprenants.map((apprenant) => (\r\n                                <tr key={apprenant.id} style={{ borderTop: '1px solid #e5e7eb' }}>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <span style={{\r\n                                            padding: '4px 12px',\r\n                                            borderRadius: '20px',\r\n                                            fontSize: '12px',\r\n                                            fontWeight: '500',\r\n                                            backgroundColor: apprenant.archive ? '#f3f4f6' : '#d1fae5',\r\n                                            color: apprenant.archive ? '#6b7280' : '#065f46'\r\n                                        }}>\r\n                                            {apprenant.archive ? 'Archivé' : 'Actif'}\r\n                                        </span>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px', fontWeight: '500' }}>{apprenant.prenom}</td>\r\n                                    <td style={{ padding: '12px' }}>{apprenant.nom}</td>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <span style={{\r\n                                            padding: '4px 12px',\r\n                                            borderRadius: '20px',\r\n                                            fontSize: '12px',\r\n                                            fontWeight: '500',\r\n                                            backgroundColor: apprenant.dispositif === 'HSP' ? '#dbeafe' : '#fef3c7',\r\n                                            color: apprenant.dispositif === 'HSP' ? '#1e40af' : '#92400e'\r\n                                        }}>\r\n                                            {apprenant.dispositif || 'HSP'}\r\n                                        </span>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px', textAlign: 'center' }}>\r\n                                        {apprenant.archive ? (\r\n                                            <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>\r\n                                                <button\r\n                                                    onClick={() => initierAction(apprenant, 'desarchiver')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#10b981',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    Désarchiver\r\n                                                </button>\r\n                                                <button\r\n                                                    onClick={() => initierAction(apprenant, 'supprimer')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#ef4444',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    Supprimer\r\n                                                </button>\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>\r\n                                                <button\r\n                                                    onClick={() => initierModification(apprenant)}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#3b82f6',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    Modifier\r\n                                                </button>\r\n                                                <button\r\n                                                    onClick={() => initierAction(apprenant, 'archiver')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#6b7280',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    Archiver\r\n                                                </button>\r\n                                            </div>\r\n                                        )}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                ) : (\r\n                    <div style={{ padding: '60px', textAlign: 'center' }}>\r\n                        <p style={{ color: '#9ca3af', fontSize: '16px' }}>\r\n                            Aucun apprenant trouvé avec ces critères.\r\n                        </p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Modal de confirmation */}\r\n            {showConfirmation && actionEnCours && (\r\n                <div style={{\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    backgroundColor: 'rgba(0,0,0,0.5)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    zIndex: 1000\r\n                }}>\r\n                    <div style={{\r\n                        backgroundColor: 'white',\r\n                        borderRadius: '12px',\r\n                        padding: '25px',\r\n                        maxWidth: '400px',\r\n                        width: '90%',\r\n                        boxShadow: '0 20px 40px rgba(0,0,0,0.2)'\r\n                    }}>\r\n                        <h3 style={{ marginBottom: '15px', color: '#1f2937' }}>\r\n                            Confirmer l'action\r\n                        </h3>\r\n                        <p style={{ marginBottom: '20px', color: '#6b7280', whiteSpace: 'pre-line' }}>\r\n                            {actionEnCours.message}\r\n                        </p>\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                onClick={executerAction}\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    padding: '10px',\r\n                                    backgroundColor: actionEnCours.type === 'supprimer' ? '#ef4444' : '#3b82f6',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontWeight: '500',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                {isLoading ? 'En cours...' : 'Confirmer'}\r\n                            </button>\r\n                            <button\r\n                                onClick={() => {\r\n                                    setShowConfirmation(false)\r\n                                    setActionEnCours(null)\r\n                                }}\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    padding: '10px',\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontWeight: '500',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC - Page titre personnalisé\r\nexport default withAuthAdmin(GestionApprenants, \"Gestion Apprenants\")",
          "taille": 39181,
          "lignes": 804,
          "dateModif": "2025-08-28T18:19:16.625Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/gestion-formateurs.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\nimport { withAuthAdmin } from '../components/withAuthAdmin'\r\n\r\nfunction GestionFormateurs({ user, logout, inactivityTime }) {\r\n    const router = useRouter()\r\n    \r\n    // États\r\n    const [formateurs, setFormateurs] = useState([])\r\n    const [filtreStatut, setFiltreStatut] = useState('actif')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [message, setMessage] = useState('')\r\n    \r\n    // États formulaire ajout\r\n    const [showAjouterForm, setShowAjouterForm] = useState(false)\r\n    const [prenom, setPrenom] = useState('')\r\n    const [nom, setNom] = useState('')\r\n    \r\n    // États formulaire modification\r\n    const [formateurEnModification, setFormateurEnModification] = useState(null)\r\n    const [showModifierForm, setShowModifierForm] = useState(false)\r\n    \r\n    // États pour confirmation\r\n    const [showConfirmation, setShowConfirmation] = useState(false)\r\n    const [actionEnCours, setActionEnCours] = useState(null)\r\n\r\n    useEffect(() => {\r\n        fetchFormateurs()\r\n    }, [filtreStatut])\r\n\r\n    // Fonction pour récupérer les formateurs\r\n    const fetchFormateurs = async () => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('users')\r\n                .select('*')\r\n                .eq('role', 'formateur')\r\n                .order('nom')\r\n\r\n            if (error) throw error\r\n\r\n            let formateursFiltres = data || []\r\n            \r\n            if (filtreStatut === 'actif') {\r\n                formateursFiltres = data.filter(f => f.archive !== true)\r\n            } else if (filtreStatut === 'archive') {\r\n                formateursFiltres = data.filter(f => f.archive === true)\r\n            }\r\n\r\n            setFormateurs(formateursFiltres)\r\n        } catch (error) {\r\n            setMessage('Erreur lors du chargement des formateurs')\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    // Fonction pour générer l'email fictif\r\n    const genererEmailFictif = (prenom, nom) => {\r\n        const prenomClean = prenom.toLowerCase().replace(/[^a-z]/g, '')\r\n        const nomClean = nom.toLowerCase().replace(/[^a-z]/g, '')\r\n        return `${prenomClean}.${nomClean}@formateur.aclef`\r\n    }\r\n\r\n    // Fonction pour ajouter un formateur\r\n    const handleSubmitAjout = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!prenom.trim() || !nom.trim()) {\r\n            setMessage('Le prénom et le nom sont obligatoires')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            // Générer l'email fictif pour Supabase Auth\r\n            const emailFictif = genererEmailFictif(prenom.trim(), nom.trim())\r\n            \r\n            const { error } = await supabase.from('users').insert([{\r\n                prenom: prenom.trim(),\r\n                nom: nom.trim(),\r\n                email: emailFictif, // Email fictif pour l'authentification\r\n                role: 'formateur',\r\n                archive: false\r\n            }])\r\n            \r\n            if (error) throw error\r\n            \r\n            setMessage(`Formateur ajouté avec succès !\\n\\nEmail fictif généré : ${emailFictif}\\nIdentifiant: ${prenom} / Mot de passe: ${nom}\\n\\n⚠️ Le formateur devra changer son mot de passe lors de la première connexion.`)\r\n            setTimeout(() => setMessage(''), 8000)\r\n            \r\n            // Réinitialiser le formulaire\r\n            setPrenom('')\r\n            setNom('')\r\n            setShowAjouterForm(false)\r\n            await fetchFormateurs()\r\n            \r\n        } catch (error) {\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Fonction pour modifier un formateur\r\n    const handleSubmitModification = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!formateurEnModification || !formateurEnModification.prenom.trim() || !formateurEnModification.nom.trim()) {\r\n            setMessage('Le prénom et le nom sont obligatoires')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            // Générer le nouvel email fictif si nécessaire\r\n            const nouvelEmailFictif = genererEmailFictif(\r\n                formateurEnModification.prenom.trim(),\r\n                formateurEnModification.nom.trim()\r\n            )\r\n            \r\n            const { error } = await supabase\r\n                .from('users')\r\n                .update({ \r\n                    prenom: formateurEnModification.prenom.trim(),\r\n                    nom: formateurEnModification.nom.trim(),\r\n                    email: nouvelEmailFictif\r\n                })\r\n                .eq('id', formateurEnModification.id)\r\n            \r\n            if (error) throw error\r\n            \r\n            setMessage('Formateur modifié avec succès !\\n\\nNouveau email fictif : ' + nouvelEmailFictif)\r\n            setTimeout(() => setMessage(''), 6000)\r\n            setFormateurEnModification(null)\r\n            setShowModifierForm(false)\r\n            await fetchFormateurs()\r\n            \r\n        } catch (error) {\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Initier la modification\r\n    const initierModification = (formateur) => {\r\n        setFormateurEnModification({...formateur})\r\n        setShowModifierForm(true)\r\n        setShowAjouterForm(false)\r\n    }\r\n\r\n    // Actions archiver/désarchiver/supprimer\r\n    const initierAction = (formateur, typeAction) => {\r\n        setActionEnCours({\r\n            formateur: formateur,\r\n            type: typeAction,\r\n            message: getMessageConfirmation(formateur, typeAction)\r\n        })\r\n        setShowConfirmation(true)\r\n    }\r\n\r\n    const getMessageConfirmation = (formateur, typeAction) => {\r\n        switch (typeAction) {\r\n            case 'archiver':\r\n                return `Archiver le formateur \"${formateur.prenom} ${formateur.nom}\" ?`\r\n            case 'desarchiver':\r\n                return `Désarchiver le formateur \"${formateur.prenom} ${formateur.nom}\" ?`\r\n            case 'supprimer':\r\n                return `Supprimer définitivement le formateur \"${formateur.prenom} ${formateur.nom}\" ?\\n\\nATTENTION : Action irréversible !`\r\n            default:\r\n                return 'Confirmer cette action ?'\r\n        }\r\n    }\r\n\r\n    const executerAction = async () => {\r\n        if (!actionEnCours) return\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { formateur, type } = actionEnCours\r\n\r\n            if (type === 'archiver') {\r\n                await supabase.from('users').update({ archive: true }).eq('id', formateur.id)\r\n                setMessage('Formateur archivé avec succès !')\r\n            } else if (type === 'desarchiver') {\r\n                await supabase.from('users').update({ archive: false }).eq('id', formateur.id)\r\n                setMessage('Formateur désarchivé avec succès !')\r\n            } else if (type === 'supprimer') {\r\n                await supabase.from('users').delete().eq('id', formateur.id)\r\n                setMessage('Formateur supprimé définitivement !')\r\n            }\r\n\r\n            setTimeout(() => setMessage(''), 4000)\r\n            await fetchFormateurs()\r\n\r\n        } catch (error) {\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n            setActionEnCours(null)\r\n            setShowConfirmation(false)\r\n        }\r\n    }\r\n\r\n    // Compter les formateurs\r\n    const compterFormateurs = () => {\r\n        const actifs = formateurs.filter(f => !f.archive).length\r\n        const archives = formateurs.filter(f => f.archive).length\r\n        return { actifs, archives, total: formateurs.length }\r\n    }\r\n\r\n    const stats = compterFormateurs()\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            padding: '40px 60px'\r\n        }}>\r\n            {/* Header avec navigation */}\r\n            <div style={{\r\n                backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                borderRadius: '12px',\r\n                padding: '8px 20px',\r\n                marginBottom: '20px',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                backdropFilter: 'blur(10px)'\r\n            }}>\r\n                <nav style={{ fontSize: '14px' }}>\r\n                    <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                    <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                    <span style={{ color: '#8b5cf6', fontWeight: '500' }}>Gestion des Formateurs</span>\r\n                </nav>\r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🏠 Accueil\r\n                    </button>\r\n                    \r\n                    <div style={{\r\n                        padding: '6px 12px',\r\n                        borderRadius: '8px',\r\n                        fontSize: '12px',\r\n                        fontWeight: '500',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: '6px',\r\n                        backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n                        color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#d97706' : '#059669',\r\n                        border: `1px solid ${inactivityTime >= 240 ? '#fca5a5' : inactivityTime >= 180 ? '#fcd34d' : '#6ee7b7'}`\r\n                    }}>\r\n                        Status : {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n                                 inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 `🟢 ACTIF`}\r\n                    </div>\r\n                    \r\n                    <button\r\n                        onClick={logout}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🚪 Déconnexion\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Titre principal */}\r\n            <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n                <h1 style={{\r\n                    fontSize: '36px',\r\n                    fontWeight: 'bold',\r\n                    color: 'white',\r\n                    marginBottom: '10px'\r\n                }}>\r\n                    Gestion des Formateurs\r\n                </h1>\r\n                <p style={{ color: 'rgba(255,255,255,0.8)', fontSize: '16px' }}>\r\n                    Gérez les formateurs et leurs accès au système\r\n                </p>\r\n            </div>\r\n\r\n            {/* Message de notification */}\r\n            {message && (\r\n                <div style={{\r\n                    backgroundColor: message.includes('succès') ? '#d1fae5' : '#fee2e2',\r\n                    color: message.includes('succès') ? '#065f46' : '#991b1b',\r\n                    padding: '15px',\r\n                    borderRadius: '8px',\r\n                    marginBottom: '20px',\r\n                    textAlign: 'center',\r\n                    fontWeight: '500',\r\n                    whiteSpace: 'pre-line'\r\n                }}>\r\n                    {message}\r\n                </div>\r\n            )}\r\n\r\n            {/* Bouton Ajouter */}\r\n            <div style={{ marginBottom: '20px' }}>\r\n                <button\r\n                    onClick={() => {\r\n                        setShowAjouterForm(!showAjouterForm)\r\n                        setShowModifierForm(false)\r\n                    }}\r\n                    style={{\r\n                        width: '100%',\r\n                        padding: '15px',\r\n                        background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '12px',\r\n                        fontSize: '16px',\r\n                        fontWeight: '600',\r\n                        cursor: 'pointer',\r\n                        transition: 'transform 0.2s'\r\n                    }}\r\n                    onMouseOver={(e) => e.target.style.transform = 'scale(1.02)'}\r\n                    onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\r\n                >\r\n                    Ajouter un nouveau formateur\r\n                </button>\r\n            </div>\r\n\r\n            {/* Formulaire d'ajout */}\r\n            {showAjouterForm && (\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    marginBottom: '20px',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <h3 style={{ marginBottom: '15px', color: '#1f2937' }}>Nouveau formateur</h3>\r\n                    <div style={{\r\n                        backgroundColor: '#dbeafe',\r\n                        border: '1px solid #3b82f6',\r\n                        borderRadius: '8px',\r\n                        padding: '12px',\r\n                        marginBottom: '15px'\r\n                    }}>\r\n                        <p style={{ margin: 0, fontSize: '14px', color: '#1e40af' }}>\r\n                            <strong>🔐 Système d'authentification :</strong>\r\n                            <br />• Email fictif généré automatiquement : prenom.nom@formateur.aclef\r\n                            <br />• Connexion : Identifiant = Prénom / Mot de passe = Nom\r\n                            <br />• Changement de mot de passe obligatoire à la première connexion\r\n                        </p>\r\n                    </div>\r\n                    <form onSubmit={handleSubmitAjout}>\r\n                        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px', marginBottom: '15px' }}>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>\r\n                                    Prénom * (sera l'identifiant)\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={prenom}\r\n                                    onChange={(e) => setPrenom(e.target.value)}\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        padding: '10px',\r\n                                        border: '1px solid #d1d5db',\r\n                                        borderRadius: '8px',\r\n                                        fontSize: '14px'\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>\r\n                                    Nom * (sera le mot de passe initial)\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={nom}\r\n                                    onChange={(e) => setNom(e.target.value)}\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        padding: '10px',\r\n                                        border: '1px solid #d1d5db',\r\n                                        borderRadius: '8px',\r\n                                        fontSize: '14px'\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        {prenom && nom && (\r\n                            <div style={{\r\n                                backgroundColor: '#f3f4f6',\r\n                                padding: '10px',\r\n                                borderRadius: '6px',\r\n                                marginBottom: '15px',\r\n                                fontSize: '13px'\r\n                            }}>\r\n                                <strong>📧 Email fictif qui sera généré :</strong> {genererEmailFictif(prenom, nom)}\r\n                            </div>\r\n                        )}\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                type=\"submit\"\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: isLoading ? '#9ca3af' : '#10b981',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                {isLoading ? 'Création...' : 'Créer le formateur'}\r\n                            </button>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => {\r\n                                    setShowAjouterForm(false)\r\n                                    setPrenom('')\r\n                                    setNom('')\r\n                                }}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    cursor: 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )}\r\n\r\n            {/* Formulaire de modification */}\r\n            {showModifierForm && formateurEnModification && (\r\n                <div style={{\r\n                    backgroundColor: '#fef3c7',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    marginBottom: '20px',\r\n                    border: '2px solid #f59e0b'\r\n                }}>\r\n                    <h3 style={{ marginBottom: '15px', color: '#92400e' }}>\r\n                        Modifier : {formateurEnModification.prenom} {formateurEnModification.nom}\r\n                    </h3>\r\n                    <div style={{\r\n                        backgroundColor: '#fbbf24',\r\n                        color: '#92400e',\r\n                        padding: '10px',\r\n                        borderRadius: '6px',\r\n                        marginBottom: '15px',\r\n                        fontSize: '13px'\r\n                    }}>\r\n                        ⚠️ <strong>Attention :</strong> Modifier le prénom/nom changera l'email fictif et peut affecter la connexion du formateur.\r\n                    </div>\r\n                    <form onSubmit={handleSubmitModification}>\r\n                        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px', marginBottom: '15px' }}>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>\r\n                                    Prénom * (identifiant)\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={formateurEnModification.prenom}\r\n                                    onChange={(e) => setFormateurEnModification({\r\n                                        ...formateurEnModification,\r\n                                        prenom: e.target.value\r\n                                    })}\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        padding: '10px',\r\n                                        border: '1px solid #fbbf24',\r\n                                        borderRadius: '8px',\r\n                                        fontSize: '14px'\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>\r\n                                    Nom * (mot de passe)\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={formateurEnModification.nom}\r\n                                    onChange={(e) => setFormateurEnModification({\r\n                                        ...formateurEnModification,\r\n                                        nom: e.target.value\r\n                                    })}\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        padding: '10px',\r\n                                        border: '1px solid #fbbf24',\r\n                                        borderRadius: '8px',\r\n                                        fontSize: '14px'\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        {formateurEnModification.prenom && formateurEnModification.nom && (\r\n                            <div style={{\r\n                                backgroundColor: '#fbbf24',\r\n                                color: '#92400e',\r\n                                padding: '10px',\r\n                                borderRadius: '6px',\r\n                                marginBottom: '15px',\r\n                                fontSize: '13px'\r\n                            }}>\r\n                                <strong>📧 Nouvel email fictif :</strong> {genererEmailFictif(formateurEnModification.prenom, formateurEnModification.nom)}\r\n                            </div>\r\n                        )}\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                type=\"submit\"\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: isLoading ? '#9ca3af' : '#f59e0b',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                {isLoading ? 'Modification...' : 'Modifier'}\r\n                            </button>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => {\r\n                                    setShowModifierForm(false)\r\n                                    setFormateurEnModification(null)\r\n                                }}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    cursor: 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )}\r\n\r\n            {/* Tableau avec filtres */}\r\n            <div style={{\r\n                backgroundColor: 'white',\r\n                borderRadius: '12px',\r\n                overflow: 'hidden',\r\n                boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n            }}>\r\n                {/* Header avec filtres et stats */}\r\n                <div style={{\r\n                    padding: '20px',\r\n                    backgroundColor: '#f9fafb',\r\n                    borderBottom: '1px solid #e5e7eb',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center'\r\n                }}>\r\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>\r\n                        <label style={{ fontWeight: '500', color: '#374151' }}>Afficher :</label>\r\n                        <select\r\n                            value={filtreStatut}\r\n                            onChange={(e) => setFiltreStatut(e.target.value)}\r\n                            style={{\r\n                                padding: '8px 12px',\r\n                                border: '1px solid #d1d5db',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            <option value=\"actif\">Formateurs actifs</option>\r\n                            <option value=\"archive\">Formateurs archivés</option>\r\n                            <option value=\"tous\">Tous les formateurs</option>\r\n                        </select>\r\n                    </div>\r\n                    \r\n                    <div style={{ display: 'flex', gap: '20px', fontSize: '14px' }}>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#d1fae5', \r\n                            color: '#065f46',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Actifs: {stats.actifs}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#f3f4f6', \r\n                            color: '#6b7280',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Archivés: {stats.archives}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#ede9fe', \r\n                            color: '#7c3aed',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Total: {stats.total}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Tableau */}\r\n                {formateurs.length > 0 ? (\r\n                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                        <thead>\r\n                            <tr style={{ backgroundColor: '#f9fafb' }}>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Statut</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Nom et prénom</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Email fictif</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Connexion</th>\r\n                                <th style={{ padding: '12px', textAlign: 'center', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {formateurs.map((formateur) => (\r\n                                <tr key={formateur.id} style={{ borderTop: '1px solid #e5e7eb' }}>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <span style={{\r\n                                            padding: '4px 12px',\r\n                                            borderRadius: '20px',\r\n                                            fontSize: '12px',\r\n                                            fontWeight: '500',\r\n                                            backgroundColor: formateur.archive ? '#f3f4f6' : '#d1fae5',\r\n                                            color: formateur.archive ? '#6b7280' : '#065f46'\r\n                                        }}>\r\n                                            {formateur.archive ? 'Archivé' : 'Actif'}\r\n                                        </span>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <div>\r\n                                            <div style={{ fontWeight: '500' }}>{formateur.nom} {formateur.prenom}</div>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px', fontSize: '12px', color: '#6b7280', fontFamily: 'monospace' }}>\r\n                                        {formateur.email || genererEmailFictif(formateur.prenom, formateur.nom)}\r\n                                    </td>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <div style={{\r\n                                            backgroundColor: '#f3f4f6',\r\n                                            padding: '6px 10px',\r\n                                            borderRadius: '6px',\r\n                                            fontSize: '12px',\r\n                                            fontFamily: 'monospace'\r\n                                        }}>\r\n                                            <div>ID: <strong>{formateur.prenom}</strong></div>\r\n                                            <div>MDP: <strong>{formateur.nom}</strong></div>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px', textAlign: 'center' }}>\r\n                                        {formateur.archive ? (\r\n                                            <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>\r\n                                                <button\r\n                                                    onClick={() => initierAction(formateur, 'desarchiver')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#10b981',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    Désarchiver\r\n                                                </button>\r\n                                                <button\r\n                                                    onClick={() => initierAction(formateur, 'supprimer')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#ef4444',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    Supprimer\r\n                                                </button>\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>\r\n                                                <button\r\n                                                    onClick={() => initierModification(formateur)}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#3b82f6',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    Modifier\r\n                                                </button>\r\n                                                <button\r\n                                                    onClick={() => initierAction(formateur, 'archiver')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#6b7280',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    Archiver\r\n                                                </button>\r\n                                            </div>\r\n                                        )}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                ) : (\r\n                    <div style={{ padding: '60px', textAlign: 'center' }}>\r\n                        <p style={{ color: '#9ca3af', fontSize: '16px' }}>\r\n                            {filtreStatut === 'actif' && 'Aucun formateur actif trouvé.'}\r\n                            {filtreStatut === 'archive' && 'Aucun formateur archivé trouvé.'}\r\n                            {filtreStatut === 'tous' && 'Aucun formateur trouvé.'}\r\n                        </p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Modal de confirmation */}\r\n            {showConfirmation && actionEnCours && (\r\n                <div style={{\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    backgroundColor: 'rgba(0,0,0,0.5)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    zIndex: 1000\r\n                }}>\r\n                    <div style={{\r\n                        backgroundColor: 'white',\r\n                        borderRadius: '12px',\r\n                        padding: '25px',\r\n                        maxWidth: '400px',\r\n                        width: '90%',\r\n                        boxShadow: '0 20px 40px rgba(0,0,0,0.2)'\r\n                    }}>\r\n                        <h3 style={{ marginBottom: '15px', color: '#1f2937' }}>\r\n                            Confirmer l'action\r\n                        </h3>\r\n                        <p style={{ marginBottom: '20px', color: '#6b7280', whiteSpace: 'pre-line' }}>\r\n                            {actionEnCours.message}\r\n                        </p>\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                onClick={executerAction}\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    padding: '10px',\r\n                                    backgroundColor: actionEnCours.type === 'supprimer' ? '#ef4444' : '#3b82f6',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontWeight: '500',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                {isLoading ? 'En cours...' : 'Confirmer'}\r\n                            </button>\r\n                            <button\r\n                                onClick={() => {\r\n                                    setShowConfirmation(false)\r\n                                    setActionEnCours(null)\r\n                                }}\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    padding: '10px',\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontWeight: '500',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC - Page titre personnalisé\r\nexport default withAuthAdmin(GestionFormateurs, \"Gestion Formateurs\")",
          "taille": 41611,
          "lignes": 848,
          "dateModif": "2025-08-28T19:00:40.471Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\nimport { withAuthAdmin } from '../components/withAuthAdmin'\r\n\r\nfunction GestionFormateurs({ user, logout, inactivityTime }) {\r\n    const router = useRouter()\r\n    \r\n    // États\r\n    const [formateurs, setFormateurs] = useState([])\r\n    const [filtreStatut, setFiltreStatut] = useState('actif')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [message, setMessage] = useState('')\r\n    \r\n    // États formulaire ajout\r\n    const [showAjouterForm, setShowAjouterForm] = useState(false)\r\n    const [prenom, setPrenom] = useState('')\r\n    const [nom, setNom] = useState('')\r\n    \r\n    // États formulaire modification\r\n    const [formateurEnModification, setFormateurEnModification] = useState(null)\r\n    const [showModifierForm, setShowModifierForm] = useState(false)\r\n    \r\n    // États pour confirmation\r\n    const [showConfirmation, setShowConfirmation] = useState(false)\r\n    const [actionEnCours, setActionEnCours] = useState(null)\r\n\r\n    useEffect(() => {\r\n        fetchFormateurs()\r\n    }, [filtreStatut])\r\n\r\n    // Fonction pour récupérer les formateurs\r\n    const fetchFormateurs = async () => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('users')\r\n                .select('*')\r\n                .eq('role', 'formateur')\r\n                .order('nom')\r\n\r\n            if (error) throw error\r\n\r\n            let formateursFiltres = data || []\r\n            \r\n            if (filtreStatut === 'actif') {\r\n                formateursFiltres = data.filter(f => f.archive !== true)\r\n            } else if (filtreStatut === 'archive') {\r\n                formateursFiltres = data.filter(f => f.archive === true)\r\n            }\r\n\r\n            setFormateurs(formateursFiltres)\r\n        } catch (error) {\r\n            setMessage('Erreur lors du chargement des formateurs')\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    // Fonction pour générer l'email fictif\r\n    const genererEmailFictif = (prenom, nom) => {\r\n        const prenomClean = prenom.toLowerCase().replace(/[^a-z]/g, '')\r\n        const nomClean = nom.toLowerCase().replace(/[^a-z]/g, '')\r\n        return `${prenomClean}.${nomClean}@formateur.aclef`\r\n    }\r\n\r\n    // Fonction pour ajouter un formateur\r\n    const handleSubmitAjout = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!prenom.trim() || !nom.trim()) {\r\n            setMessage('Le prénom et le nom sont obligatoires')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            // Générer l'email fictif pour Supabase Auth\r\n            const emailFictif = genererEmailFictif(prenom.trim(), nom.trim())\r\n            \r\n            const { error } = await supabase.from('users').insert([{\r\n                prenom: prenom.trim(),\r\n                nom: nom.trim(),\r\n                email: emailFictif, // Email fictif pour l'authentification\r\n                role: 'formateur',\r\n                archive: false\r\n            }])\r\n            \r\n            if (error) throw error\r\n            \r\n            setMessage(`Formateur ajouté avec succès !\\n\\nEmail fictif généré : ${emailFictif}\\nIdentifiant: ${prenom} / Mot de passe: ${nom}\\n\\n⚠️ Le formateur devra changer son mot de passe lors de la première connexion.`)\r\n            setTimeout(() => setMessage(''), 8000)\r\n            \r\n            // Réinitialiser le formulaire\r\n            setPrenom('')\r\n            setNom('')\r\n            setShowAjouterForm(false)\r\n            await fetchFormateurs()\r\n            \r\n        } catch (error) {\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Fonction pour modifier un formateur\r\n    const handleSubmitModification = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!formateurEnModification || !formateurEnModification.prenom.trim() || !formateurEnModification.nom.trim()) {\r\n            setMessage('Le prénom et le nom sont obligatoires')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            // Générer le nouvel email fictif si nécessaire\r\n            const nouvelEmailFictif = genererEmailFictif(\r\n                formateurEnModification.prenom.trim(),\r\n                formateurEnModification.nom.trim()\r\n            )\r\n            \r\n            const { error } = await supabase\r\n                .from('users')\r\n                .update({ \r\n                    prenom: formateurEnModification.prenom.trim(),\r\n                    nom: formateurEnModification.nom.trim(),\r\n                    email: nouvelEmailFictif\r\n                })\r\n                .eq('id', formateurEnModification.id)\r\n            \r\n            if (error) throw error\r\n            \r\n            setMessage('Formateur modifié avec succès !\\n\\nNouveau email fictif : ' + nouvelEmailFictif)\r\n            setTimeout(() => setMessage(''), 6000)\r\n            setFormateurEnModification(null)\r\n            setShowModifierForm(false)\r\n            await fetchFormateurs()\r\n            \r\n        } catch (error) {\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Initier la modification\r\n    const initierModification = (formateur) => {\r\n        setFormateurEnModification({...formateur})\r\n        setShowModifierForm(true)\r\n        setShowAjouterForm(false)\r\n    }\r\n\r\n    // Actions archiver/désarchiver/supprimer\r\n    const initierAction = (formateur, typeAction) => {\r\n        setActionEnCours({\r\n            formateur: formateur,\r\n            type: typeAction,\r\n            message: getMessageConfirmation(formateur, typeAction)\r\n        })\r\n        setShowConfirmation(true)\r\n    }\r\n\r\n    const getMessageConfirmation = (formateur, typeAction) => {\r\n        switch (typeAction) {\r\n            case 'archiver':\r\n                return `Archiver le formateur \"${formateur.prenom} ${formateur.nom}\" ?`\r\n            case 'desarchiver':\r\n                return `Désarchiver le formateur \"${formateur.prenom} ${formateur.nom}\" ?`\r\n            case 'supprimer':\r\n                return `Supprimer définitivement le formateur \"${formateur.prenom} ${formateur.nom}\" ?\\n\\nATTENTION : Action irréversible !`\r\n            default:\r\n                return 'Confirmer cette action ?'\r\n        }\r\n    }\r\n\r\n    const executerAction = async () => {\r\n        if (!actionEnCours) return\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { formateur, type } = actionEnCours\r\n\r\n            if (type === 'archiver') {\r\n                await supabase.from('users').update({ archive: true }).eq('id', formateur.id)\r\n                setMessage('Formateur archivé avec succès !')\r\n            } else if (type === 'desarchiver') {\r\n                await supabase.from('users').update({ archive: false }).eq('id', formateur.id)\r\n                setMessage('Formateur désarchivé avec succès !')\r\n            } else if (type === 'supprimer') {\r\n                await supabase.from('users').delete().eq('id', formateur.id)\r\n                setMessage('Formateur supprimé définitivement !')\r\n            }\r\n\r\n            setTimeout(() => setMessage(''), 4000)\r\n            await fetchFormateurs()\r\n\r\n        } catch (error) {\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n            setActionEnCours(null)\r\n            setShowConfirmation(false)\r\n        }\r\n    }\r\n\r\n    // Compter les formateurs\r\n    const compterFormateurs = () => {\r\n        const actifs = formateurs.filter(f => !f.archive).length\r\n        const archives = formateurs.filter(f => f.archive).length\r\n        return { actifs, archives, total: formateurs.length }\r\n    }\r\n\r\n    const stats = compterFormateurs()\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            padding: '40px 60px'\r\n        }}>\r\n            {/* Header avec navigation */}\r\n            <div style={{\r\n                backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                borderRadius: '12px',\r\n                padding: '8px 20px',\r\n                marginBottom: '20px',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                backdropFilter: 'blur(10px)'\r\n            }}>\r\n                <nav style={{ fontSize: '14px' }}>\r\n                    <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                    <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                    <span style={{ color: '#8b5cf6', fontWeight: '500' }}>Gestion des Formateurs</span>\r\n                </nav>\r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🏠 Accueil\r\n                    </button>\r\n                    \r\n                    <div style={{\r\n                        padding: '6px 12px',\r\n                        borderRadius: '8px',\r\n                        fontSize: '12px',\r\n                        fontWeight: '500',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: '6px',\r\n                        backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n                        color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#d97706' : '#059669',\r\n                        border: `1px solid ${inactivityTime >= 240 ? '#fca5a5' : inactivityTime >= 180 ? '#fcd34d' : '#6ee7b7'}`\r\n                    }}>\r\n                        Status : {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n                                 inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 `🟢 ACTIF`}\r\n                    </div>\r\n                    \r\n                    <button\r\n                        onClick={logout}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🚪 Déconnexion\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Titre principal */}\r\n            <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n                <h1 style={{\r\n                    fontSize: '36px',\r\n                    fontWeight: 'bold',\r\n                    color: 'white',\r\n                    marginBottom: '10px'\r\n                }}>\r\n                    Gestion des Formateurs\r\n                </h1>\r\n                <p style={{ color: 'rgba(255,255,255,0.8)', fontSize: '16px' }}>\r\n                    Gérez les formateurs et leurs accès au système\r\n                </p>\r\n            </div>\r\n\r\n            {/* Message de notification */}\r\n            {message && (\r\n                <div style={{\r\n                    backgroundColor: message.includes('succès') ? '#d1fae5' : '#fee2e2',\r\n                    color: message.includes('succès') ? '#065f46' : '#991b1b',\r\n                    padding: '15px',\r\n                    borderRadius: '8px',\r\n                    marginBottom: '20px',\r\n                    textAlign: 'center',\r\n                    fontWeight: '500',\r\n                    whiteSpace: 'pre-line'\r\n                }}>\r\n                    {message}\r\n                </div>\r\n            )}\r\n\r\n            {/* Bouton Ajouter */}\r\n            <div style={{ marginBottom: '20px' }}>\r\n                <button\r\n                    onClick={() => {\r\n                        setShowAjouterForm(!showAjouterForm)\r\n                        setShowModifierForm(false)\r\n                    }}\r\n                    style={{\r\n                        width: '100%',\r\n                        padding: '15px',\r\n                        background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '12px',\r\n                        fontSize: '16px',\r\n                        fontWeight: '600',\r\n                        cursor: 'pointer',\r\n                        transition: 'transform 0.2s'\r\n                    }}\r\n                    onMouseOver={(e) => e.target.style.transform = 'scale(1.02)'}\r\n                    onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\r\n                >\r\n                    Ajouter un nouveau formateur\r\n                </button>\r\n            </div>\r\n\r\n            {/* Formulaire d'ajout */}\r\n            {showAjouterForm && (\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    marginBottom: '20px',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <h3 style={{ marginBottom: '15px', color: '#1f2937' }}>Nouveau formateur</h3>\r\n                    <div style={{\r\n                        backgroundColor: '#dbeafe',\r\n                        border: '1px solid #3b82f6',\r\n                        borderRadius: '8px',\r\n                        padding: '12px',\r\n                        marginBottom: '15px'\r\n                    }}>\r\n                        <p style={{ margin: 0, fontSize: '14px', color: '#1e40af' }}>\r\n                            <strong>🔐 Système d'authentification :</strong>\r\n                            <br />• Email fictif généré automatiquement : prenom.nom@formateur.aclef\r\n                            <br />• Connexion : Identifiant = Prénom / Mot de passe = Nom\r\n                            <br />• Changement de mot de passe obligatoire à la première connexion\r\n                        </p>\r\n                    </div>\r\n                    <form onSubmit={handleSubmitAjout}>\r\n                        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px', marginBottom: '15px' }}>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>\r\n                                    Prénom * (sera l'identifiant)\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={prenom}\r\n                                    onChange={(e) => setPrenom(e.target.value)}\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        padding: '10px',\r\n                                        border: '1px solid #d1d5db',\r\n                                        borderRadius: '8px',\r\n                                        fontSize: '14px'\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>\r\n                                    Nom * (sera le mot de passe initial)\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={nom}\r\n                                    onChange={(e) => setNom(e.target.value)}\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        padding: '10px',\r\n                                        border: '1px solid #d1d5db',\r\n                                        borderRadius: '8px',\r\n                                        fontSize: '14px'\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        {prenom && nom && (\r\n                            <div style={{\r\n                                backgroundColor: '#f3f4f6',\r\n                                padding: '10px',\r\n                                borderRadius: '6px',\r\n                                marginBottom: '15px',\r\n                                fontSize: '13px'\r\n                            }}>\r\n                                <strong>📧 Email fictif qui sera généré :</strong> {genererEmailFictif(prenom, nom)}\r\n                            </div>\r\n                        )}\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                type=\"submit\"\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: isLoading ? '#9ca3af' : '#10b981',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                {isLoading ? 'Création...' : 'Créer le formateur'}\r\n                            </button>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => {\r\n                                    setShowAjouterForm(false)\r\n                                    setPrenom('')\r\n                                    setNom('')\r\n                                }}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    cursor: 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )}\r\n\r\n            {/* Formulaire de modification */}\r\n            {showModifierForm && formateurEnModification && (\r\n                <div style={{\r\n                    backgroundColor: '#fef3c7',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    marginBottom: '20px',\r\n                    border: '2px solid #f59e0b'\r\n                }}>\r\n                    <h3 style={{ marginBottom: '15px', color: '#92400e' }}>\r\n                        Modifier : {formateurEnModification.prenom} {formateurEnModification.nom}\r\n                    </h3>\r\n                    <div style={{\r\n                        backgroundColor: '#fbbf24',\r\n                        color: '#92400e',\r\n                        padding: '10px',\r\n                        borderRadius: '6px',\r\n                        marginBottom: '15px',\r\n                        fontSize: '13px'\r\n                    }}>\r\n                        ⚠️ <strong>Attention :</strong> Modifier le prénom/nom changera l'email fictif et peut affecter la connexion du formateur.\r\n                    </div>\r\n                    <form onSubmit={handleSubmitModification}>\r\n                        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px', marginBottom: '15px' }}>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>\r\n                                    Prénom * (identifiant)\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={formateurEnModification.prenom}\r\n                                    onChange={(e) => setFormateurEnModification({\r\n                                        ...formateurEnModification,\r\n                                        prenom: e.target.value\r\n                                    })}\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        padding: '10px',\r\n                                        border: '1px solid #fbbf24',\r\n                                        borderRadius: '8px',\r\n                                        fontSize: '14px'\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>\r\n                                    Nom * (mot de passe)\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={formateurEnModification.nom}\r\n                                    onChange={(e) => setFormateurEnModification({\r\n                                        ...formateurEnModification,\r\n                                        nom: e.target.value\r\n                                    })}\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        padding: '10px',\r\n                                        border: '1px solid #fbbf24',\r\n                                        borderRadius: '8px',\r\n                                        fontSize: '14px'\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        {formateurEnModification.prenom && formateurEnModification.nom && (\r\n                            <div style={{\r\n                                backgroundColor: '#fbbf24',\r\n                                color: '#92400e',\r\n                                padding: '10px',\r\n                                borderRadius: '6px',\r\n                                marginBottom: '15px',\r\n                                fontSize: '13px'\r\n                            }}>\r\n                                <strong>📧 Nouvel email fictif :</strong> {genererEmailFictif(formateurEnModification.prenom, formateurEnModification.nom)}\r\n                            </div>\r\n                        )}\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                type=\"submit\"\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: isLoading ? '#9ca3af' : '#f59e0b',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                {isLoading ? 'Modification...' : 'Modifier'}\r\n                            </button>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => {\r\n                                    setShowModifierForm(false)\r\n                                    setFormateurEnModification(null)\r\n                                }}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    cursor: 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )}\r\n\r\n            {/* Tableau avec filtres */}\r\n            <div style={{\r\n                backgroundColor: 'white',\r\n                borderRadius: '12px',\r\n                overflow: 'hidden',\r\n                boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n            }}>\r\n                {/* Header avec filtres et stats */}\r\n                <div style={{\r\n                    padding: '20px',\r\n                    backgroundColor: '#f9fafb',\r\n                    borderBottom: '1px solid #e5e7eb',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center'\r\n                }}>\r\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>\r\n                        <label style={{ fontWeight: '500', color: '#374151' }}>Afficher :</label>\r\n                        <select\r\n                            value={filtreStatut}\r\n                            onChange={(e) => setFiltreStatut(e.target.value)}\r\n                            style={{\r\n                                padding: '8px 12px',\r\n                                border: '1px solid #d1d5db',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            <option value=\"actif\">Formateurs actifs</option>\r\n                            <option value=\"archive\">Formateurs archivés</option>\r\n                            <option value=\"tous\">Tous les formateurs</option>\r\n                        </select>\r\n                    </div>\r\n                    \r\n                    <div style={{ display: 'flex', gap: '20px', fontSize: '14px' }}>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#d1fae5', \r\n                            color: '#065f46',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Actifs: {stats.actifs}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#f3f4f6', \r\n                            color: '#6b7280',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Archivés: {stats.archives}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#ede9fe', \r\n                            color: '#7c3aed',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Total: {stats.total}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Tableau */}\r\n                {formateurs.length > 0 ? (\r\n                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                        <thead>\r\n                            <tr style={{ backgroundColor: '#f9fafb' }}>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Statut</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Nom et prénom</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Email fictif</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Connexion</th>\r\n                                <th style={{ padding: '12px', textAlign: 'center', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {formateurs.map((formateur) => (\r\n                                <tr key={formateur.id} style={{ borderTop: '1px solid #e5e7eb' }}>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <span style={{\r\n                                            padding: '4px 12px',\r\n                                            borderRadius: '20px',\r\n                                            fontSize: '12px',\r\n                                            fontWeight: '500',\r\n                                            backgroundColor: formateur.archive ? '#f3f4f6' : '#d1fae5',\r\n                                            color: formateur.archive ? '#6b7280' : '#065f46'\r\n                                        }}>\r\n                                            {formateur.archive ? 'Archivé' : 'Actif'}\r\n                                        </span>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <div>\r\n                                            <div style={{ fontWeight: '500' }}>{formateur.nom} {formateur.prenom}</div>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px', fontSize: '12px', color: '#6b7280', fontFamily: 'monospace' }}>\r\n                                        {formateur.email || genererEmailFictif(formateur.prenom, formateur.nom)}\r\n                                    </td>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <div style={{\r\n                                            backgroundColor: '#f3f4f6',\r\n                                            padding: '6px 10px',\r\n                                            borderRadius: '6px',\r\n                                            fontSize: '12px',\r\n                                            fontFamily: 'monospace'\r\n                                        }}>\r\n                                            <div>ID: <strong>{formateur.prenom}</strong></div>\r\n                                            <div>MDP: <strong>{formateur.nom}</strong></div>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px', textAlign: 'center' }}>\r\n                                        {formateur.archive ? (\r\n                                            <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>\r\n                                                <button\r\n                                                    onClick={() => initierAction(formateur, 'desarchiver')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#10b981',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    Désarchiver\r\n                                                </button>\r\n                                                <button\r\n                                                    onClick={() => initierAction(formateur, 'supprimer')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#ef4444',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    Supprimer\r\n                                                </button>\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>\r\n                                                <button\r\n                                                    onClick={() => initierModification(formateur)}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#3b82f6',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    Modifier\r\n                                                </button>\r\n                                                <button\r\n                                                    onClick={() => initierAction(formateur, 'archiver')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#6b7280',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    Archiver\r\n                                                </button>\r\n                                            </div>\r\n                                        )}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                ) : (\r\n                    <div style={{ padding: '60px', textAlign: 'center' }}>\r\n                        <p style={{ color: '#9ca3af', fontSize: '16px' }}>\r\n                            {filtreStatut === 'actif' && 'Aucun formateur actif trouvé.'}\r\n                            {filtreStatut === 'archive' && 'Aucun formateur archivé trouvé.'}\r\n                            {filtreStatut === 'tous' && 'Aucun formateur trouvé.'}\r\n                        </p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Modal de confirmation */}\r\n            {showConfirmation && actionEnCours && (\r\n                <div style={{\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    backgroundColor: 'rgba(0,0,0,0.5)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    zIndex: 1000\r\n                }}>\r\n                    <div style={{\r\n                        backgroundColor: 'white',\r\n                        borderRadius: '12px',\r\n                        padding: '25px',\r\n                        maxWidth: '400px',\r\n                        width: '90%',\r\n                        boxShadow: '0 20px 40px rgba(0,0,0,0.2)'\r\n                    }}>\r\n                        <h3 style={{ marginBottom: '15px', color: '#1f2937' }}>\r\n                            Confirmer l'action\r\n                        </h3>\r\n                        <p style={{ marginBottom: '20px', color: '#6b7280', whiteSpace: 'pre-line' }}>\r\n                            {actionEnCours.message}\r\n                        </p>\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                onClick={executerAction}\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    padding: '10px',\r\n                                    backgroundColor: actionEnCours.type === 'supprimer' ? '#ef4444' : '#3b82f6',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontWeight: '500',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                {isLoading ? 'En cours...' : 'Confirmer'}\r\n                            </button>\r\n                            <button\r\n                                onClick={() => {\r\n                                    setShowConfirmation(false)\r\n                                    setActionEnCours(null)\r\n                                }}\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    padding: '10px',\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontWeight: '500',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC - Page titre personnalisé\r\nexport default withAuthAdmin(GestionFormateurs, \"Gestion Formateurs\")",
          "taille": 41611,
          "lignes": 848,
          "dateModif": "2025-08-28T18:19:16.626Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/gestion-lieux.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\nimport { withAuthAdmin } from '../components/withAuthAdmin'\r\n\r\nfunction GestionLieux({ user, logout, inactivityTime }) {\r\n    const router = useRouter()\r\n    \r\n    // États\r\n    const [lieux, setLieux] = useState([])\r\n    const [filtreStatut, setFiltreStatut] = useState('actif')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [message, setMessage] = useState('')\r\n    \r\n    // États formulaire ajout\r\n    const [showAjouterForm, setShowAjouterForm] = useState(false)\r\n    const [nom, setNom] = useState('')\r\n    const [initiale, setInitiale] = useState('')\r\n    const [couleur, setCouleur] = useState('#3b82f6')\r\n    \r\n    // États formulaire modification\r\n    const [lieuEnModification, setLieuEnModification] = useState(null)\r\n    const [showModifierForm, setShowModifierForm] = useState(false)\r\n    \r\n    // États pour confirmation\r\n    const [showConfirmation, setShowConfirmation] = useState(false)\r\n    const [actionEnCours, setActionEnCours] = useState(null)\r\n\r\n    // Couleurs prédéfinies pour le sélecteur\r\n    const couleursPredefinies = [\r\n        '#ef4444', // Rouge\r\n        '#f97316', // Orange\r\n        '#f59e0b', // Ambre\r\n        '#eab308', // Jaune\r\n        '#84cc16', // Lime\r\n        '#22c55e', // Vert\r\n        '#10b981', // Emeraude\r\n        '#14b8a6', // Teal\r\n        '#06b6d4', // Cyan\r\n        '#0ea5e9', // Bleu ciel\r\n        '#3b82f6', // Bleu\r\n        '#6366f1', // Indigo\r\n        '#8b5cf6', // Violet\r\n        '#a855f7', // Purple\r\n        '#d946ef', // Fuchsia\r\n        '#ec4899', // Pink\r\n        '#f43f5e', // Rose\r\n        '#6b7280'  // Gris\r\n    ]\r\n\r\n    useEffect(() => {\r\n        fetchLieux()\r\n    }, [filtreStatut])\r\n\r\n    // Auto-génération de l'initiale\r\n    useEffect(() => {\r\n        if (nom) {\r\n            const words = nom.split(' ')\r\n            let initialeAuto = ''\r\n            \r\n            if (words.length >= 2) {\r\n                // Si plusieurs mots, prendre la première lettre de chaque (max 3)\r\n                initialeAuto = words.slice(0, 3).map(w => w.charAt(0)).join('').toUpperCase()\r\n            } else {\r\n                // Si un seul mot, prendre les 3 premières lettres\r\n                initialeAuto = nom.substring(0, 3).toUpperCase()\r\n            }\r\n            \r\n            setInitiale(initialeAuto)\r\n        }\r\n    }, [nom])\r\n\r\n    // Fonction pour récupérer les lieux\r\n    const fetchLieux = async () => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('lieux')\r\n                .select('*')\r\n                .order('nom')\r\n\r\n            if (error) throw error\r\n\r\n            let lieuxFiltres = data || []\r\n            \r\n            if (filtreStatut === 'actif') {\r\n                lieuxFiltres = data.filter(l => l.archive !== true)\r\n            } else if (filtreStatut === 'archive') {\r\n                lieuxFiltres = data.filter(l => l.archive === true)\r\n            }\r\n\r\n            setLieux(lieuxFiltres)\r\n        } catch (error) {\r\n            setMessage('Erreur lors du chargement des lieux')\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    // Fonction pour ajouter un lieu\r\n    const handleSubmitAjout = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!nom.trim() || !initiale.trim()) {\r\n            setMessage('Le nom et l\\'initiale sont obligatoires')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { error } = await supabase.from('lieux').insert([{\r\n                nom: nom.trim(),\r\n                initiale: initiale.trim().toUpperCase(),\r\n                couleur: couleur,\r\n                archive: false\r\n            }])\r\n            \r\n            if (error) throw error\r\n            \r\n            setMessage('Lieu ajouté avec succès !')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            \r\n            // Réinitialiser le formulaire\r\n            setNom('')\r\n            setInitiale('')\r\n            setCouleur('#3b82f6')\r\n            setShowAjouterForm(false)\r\n            await fetchLieux()\r\n            \r\n        } catch (error) {\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Fonction pour modifier un lieu\r\n    const handleSubmitModification = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!lieuEnModification || !lieuEnModification.nom.trim() || !lieuEnModification.initiale.trim()) {\r\n            setMessage('Le nom et l\\'initiale sont obligatoires')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { error } = await supabase\r\n                .from('lieux')\r\n                .update({ \r\n                    nom: lieuEnModification.nom.trim(),\r\n                    initiale: lieuEnModification.initiale.trim().toUpperCase(),\r\n                    couleur: lieuEnModification.couleur\r\n                })\r\n                .eq('id', lieuEnModification.id)\r\n            \r\n            if (error) throw error\r\n            \r\n            setMessage('Lieu modifié avec succès !')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            setLieuEnModification(null)\r\n            setShowModifierForm(false)\r\n            await fetchLieux()\r\n            \r\n        } catch (error) {\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Initier la modification\r\n    const initierModification = (lieu) => {\r\n        setLieuEnModification({...lieu})\r\n        setShowModifierForm(true)\r\n        setShowAjouterForm(false)\r\n    }\r\n\r\n    // Actions archiver/désarchiver/supprimer\r\n    const initierAction = (lieu, typeAction) => {\r\n        setActionEnCours({\r\n            lieu: lieu,\r\n            type: typeAction,\r\n            message: getMessageConfirmation(lieu, typeAction)\r\n        })\r\n        setShowConfirmation(true)\r\n    }\r\n\r\n    const getMessageConfirmation = (lieu, typeAction) => {\r\n        switch (typeAction) {\r\n            case 'archiver':\r\n                return `Archiver le lieu \"${lieu.nom}\" ?`\r\n            case 'desarchiver':\r\n                return `Désarchiver le lieu \"${lieu.nom}\" ?`\r\n            case 'supprimer':\r\n                return `Supprimer définitivement le lieu \"${lieu.nom}\" ?\\n\\nATTENTION : Action irréversible !`\r\n            default:\r\n                return 'Confirmer cette action ?'\r\n        }\r\n    }\r\n\r\n    const executerAction = async () => {\r\n        if (!actionEnCours) return\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { lieu, type } = actionEnCours\r\n\r\n            if (type === 'archiver') {\r\n                await supabase.from('lieux').update({ archive: true }).eq('id', lieu.id)\r\n                setMessage('Lieu archivé avec succès !')\r\n            } else if (type === 'desarchiver') {\r\n                await supabase.from('lieux').update({ archive: false }).eq('id', lieu.id)\r\n                setMessage('Lieu désarchivé avec succès !')\r\n            } else if (type === 'supprimer') {\r\n                await supabase.from('lieux').delete().eq('id', lieu.id)\r\n                setMessage('Lieu supprimé définitivement !')\r\n            }\r\n\r\n            setTimeout(() => setMessage(''), 4000)\r\n            await fetchLieux()\r\n\r\n        } catch (error) {\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n            setActionEnCours(null)\r\n            setShowConfirmation(false)\r\n        }\r\n    }\r\n\r\n    // Compter les lieux\r\n    const compterLieux = () => {\r\n        const actifs = lieux.filter(l => !l.archive).length\r\n        const archives = lieux.filter(l => l.archive).length\r\n        return { actifs, archives, total: lieux.length }\r\n    }\r\n\r\n    const stats = compterLieux()\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            padding: '40px 60px'\r\n        }}>\r\n            {/* Header avec navigation */}\r\n            <div style={{\r\n                backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                borderRadius: '12px',\r\n                padding: '8px 20px',\r\n                marginBottom: '20px',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                backdropFilter: 'blur(10px)'\r\n            }}>\r\n                <nav style={{ fontSize: '14px' }}>\r\n                    <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                    <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                    <span style={{ color: '#10b981', fontWeight: '500' }}>Gestion des Lieux</span>\r\n                </nav>\r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🏠 Accueil\r\n                    </button>\r\n                    \r\n                    <div style={{\r\n                        padding: '6px 12px',\r\n                        borderRadius: '8px',\r\n                        fontSize: '12px',\r\n                        fontWeight: '500',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: '6px',\r\n                        backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n                        color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#d97706' : '#059669',\r\n                        border: `1px solid ${inactivityTime >= 240 ? '#fca5a5' : inactivityTime >= 180 ? '#fcd34d' : '#6ee7b7'}`\r\n                    }}>\r\n                        Status : {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n                                 inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 `🟢 ACTIF`}\r\n                    </div>\r\n                    \r\n                    <button\r\n                        onClick={logout}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🚪 Déconnexion\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Titre principal */}\r\n            <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n                <h1 style={{\r\n                    fontSize: '36px',\r\n                    fontWeight: 'bold',\r\n                    color: 'white',\r\n                    marginBottom: '10px'\r\n                }}>\r\n                    Gestion des Lieux\r\n                </h1>\r\n                <p style={{ color: 'rgba(255,255,255,0.8)', fontSize: '16px' }}>\r\n                    Gérez les lieux de formation avec leurs couleurs distinctives\r\n                </p>\r\n            </div>\r\n\r\n            {/* Message de notification */}\r\n            {message && (\r\n                <div style={{\r\n                    backgroundColor: message.includes('succès') ? '#d1fae5' : '#fee2e2',\r\n                    color: message.includes('succès') ? '#065f46' : '#991b1b',\r\n                    padding: '15px',\r\n                    borderRadius: '8px',\r\n                    marginBottom: '20px',\r\n                    textAlign: 'center',\r\n                    fontWeight: '500'\r\n                }}>\r\n                    {message}\r\n                </div>\r\n            )}\r\n\r\n            {/* Bouton Ajouter */}\r\n            <div style={{ marginBottom: '20px' }}>\r\n                <button\r\n                    onClick={() => {\r\n                        setShowAjouterForm(!showAjouterForm)\r\n                        setShowModifierForm(false)\r\n                    }}\r\n                    style={{\r\n                        width: '100%',\r\n                        padding: '15px',\r\n                        background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '12px',\r\n                        fontSize: '16px',\r\n                        fontWeight: '600',\r\n                        cursor: 'pointer',\r\n                        transition: 'transform 0.2s'\r\n                    }}\r\n                    onMouseOver={(e) => e.target.style.transform = 'scale(1.02)'}\r\n                    onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\r\n                >\r\n                    📍 Ajouter un nouveau lieu\r\n                </button>\r\n            </div>\r\n\r\n            {/* Formulaire d'ajout */}\r\n            {showAjouterForm && (\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    marginBottom: '20px',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <h3 style={{ marginBottom: '15px', color: '#1f2937' }}>Nouveau lieu</h3>\r\n                    <div style={{\r\n                        backgroundColor: '#f0f9ff',\r\n                        border: '1px solid #0ea5e9',\r\n                        borderRadius: '8px',\r\n                        padding: '12px',\r\n                        marginBottom: '15px'\r\n                    }}>\r\n                        <p style={{ margin: 0, fontSize: '14px', color: '#0284c7' }}>\r\n                            <strong>🎨 Gestion couleurs et initiales :</strong> Les initiales se génèrent automatiquement selon le nom (3 premières lettres ou première lettre de chaque mot). Choisissez une couleur pour identifier facilement ce lieu dans les plannings.\r\n                        </p>\r\n                    </div>\r\n                    <form onSubmit={handleSubmitAjout}>\r\n                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 200px', gap: '15px', marginBottom: '15px' }}>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>\r\n                                    Nom du lieu *\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={nom}\r\n                                    onChange={(e) => setNom(e.target.value)}\r\n                                    placeholder=\"Ex: Centre Camille Pagé, Maison Pour Tous...\"\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        padding: '10px',\r\n                                        border: '1px solid #d1d5db',\r\n                                        borderRadius: '8px',\r\n                                        fontSize: '14px'\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>\r\n                                    Initiale (auto) *\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={initiale}\r\n                                    onChange={(e) => setInitiale(e.target.value.substring(0, 3))}\r\n                                    maxLength=\"3\"\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        padding: '10px',\r\n                                        border: '1px solid #d1d5db',\r\n                                        borderRadius: '8px',\r\n                                        fontSize: '14px',\r\n                                        fontWeight: 'bold',\r\n                                        textAlign: 'center',\r\n                                        textTransform: 'uppercase'\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>\r\n                                    Couleur\r\n                                </label>\r\n                                <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                    <input\r\n                                        type=\"color\"\r\n                                        value={couleur}\r\n                                        onChange={(e) => setCouleur(e.target.value)}\r\n                                        style={{\r\n                                            width: '50px',\r\n                                            height: '42px',\r\n                                            border: '1px solid #d1d5db',\r\n                                            borderRadius: '8px',\r\n                                            cursor: 'pointer'\r\n                                        }}\r\n                                    />\r\n                                    <div style={{\r\n                                        padding: '10px 15px',\r\n                                        backgroundColor: couleur,\r\n                                        color: 'white',\r\n                                        borderRadius: '8px',\r\n                                        fontWeight: 'bold',\r\n                                        flex: 1,\r\n                                        textAlign: 'center',\r\n                                        fontSize: '14px'\r\n                                    }}>\r\n                                        {initiale || 'ABC'}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        {/* Palette de couleurs prédéfinies */}\r\n                        <div style={{ marginBottom: '15px' }}>\r\n                            <label style={{ display: 'block', marginBottom: '8px', fontSize: '14px', color: '#6b7280' }}>\r\n                                Couleurs suggérées :\r\n                            </label>\r\n                            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>\r\n                                {couleursPredefinies.map((c) => (\r\n                                    <button\r\n                                        key={c}\r\n                                        type=\"button\"\r\n                                        onClick={() => setCouleur(c)}\r\n                                        style={{\r\n                                            width: '32px',\r\n                                            height: '32px',\r\n                                            backgroundColor: c,\r\n                                            border: couleur === c ? '3px solid #1f2937' : '1px solid #d1d5db',\r\n                                            borderRadius: '6px',\r\n                                            cursor: 'pointer',\r\n                                            transition: 'transform 0.2s'\r\n                                        }}\r\n                                        onMouseOver={(e) => e.target.style.transform = 'scale(1.2)'}\r\n                                        onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\r\n                                    />\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                type=\"submit\"\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: isLoading ? '#9ca3af' : '#10b981',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                {isLoading ? 'Ajout...' : 'Ajouter'}\r\n                            </button>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => {\r\n                                    setShowAjouterForm(false)\r\n                                    setNom('')\r\n                                    setInitiale('')\r\n                                    setCouleur('#3b82f6')\r\n                                }}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    cursor: 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )}\r\n\r\n            {/* Formulaire de modification */}\r\n            {showModifierForm && lieuEnModification && (\r\n                <div style={{\r\n                    backgroundColor: '#fef3c7',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    marginBottom: '20px',\r\n                    border: '2px solid #f59e0b'\r\n                }}>\r\n                    <h3 style={{ marginBottom: '15px', color: '#92400e' }}>\r\n                        🎨 Modifier : {lieuEnModification.nom}\r\n                    </h3>\r\n                    <div style={{\r\n                        backgroundColor: '#fbbf24',\r\n                        color: '#92400e',\r\n                        padding: '10px',\r\n                        borderRadius: '6px',\r\n                        marginBottom: '15px',\r\n                        fontSize: '13px'\r\n                    }}>\r\n                        🔄 <strong>Mise à jour intelligente :</strong> Les initiales se recalculent automatiquement selon le nouveau nom.\r\n                    </div>\r\n                    <form onSubmit={handleSubmitModification}>\r\n                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 200px', gap: '15px', marginBottom: '15px' }}>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>\r\n                                    Nom du lieu *\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={lieuEnModification.nom}\r\n                                    onChange={(e) => {\r\n                                        const newLieu = {...lieuEnModification, nom: e.target.value}\r\n                                        const words = e.target.value.split(' ')\r\n                                        let newInitiale = ''\r\n                                        \r\n                                        if (words.length >= 2) {\r\n                                            newInitiale = words.slice(0, 3).map(w => w.charAt(0)).join('').toUpperCase()\r\n                                        } else {\r\n                                            newInitiale = e.target.value.substring(0, 3).toUpperCase()\r\n                                        }\r\n                                        \r\n                                        setLieuEnModification({...newLieu, initiale: newInitiale})\r\n                                    }}\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        padding: '10px',\r\n                                        border: '1px solid #fbbf24',\r\n                                        borderRadius: '8px',\r\n                                        fontSize: '14px'\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>\r\n                                    Initiale *\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={lieuEnModification.initiale}\r\n                                    onChange={(e) => setLieuEnModification({\r\n                                        ...lieuEnModification, \r\n                                        initiale: e.target.value.substring(0, 3)\r\n                                    })}\r\n                                    maxLength=\"3\"\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        padding: '10px',\r\n                                        border: '1px solid #fbbf24',\r\n                                        borderRadius: '8px',\r\n                                        fontSize: '14px',\r\n                                        fontWeight: 'bold',\r\n                                        textAlign: 'center',\r\n                                        textTransform: 'uppercase'\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>\r\n                                    Couleur\r\n                                </label>\r\n                                <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                    <input\r\n                                        type=\"color\"\r\n                                        value={lieuEnModification.couleur}\r\n                                        onChange={(e) => setLieuEnModification({\r\n                                            ...lieuEnModification,\r\n                                            couleur: e.target.value\r\n                                        })}\r\n                                        style={{\r\n                                            width: '50px',\r\n                                            height: '42px',\r\n                                            border: '1px solid #fbbf24',\r\n                                            borderRadius: '8px',\r\n                                            cursor: 'pointer'\r\n                                        }}\r\n                                    />\r\n                                    <div style={{\r\n                                        padding: '10px 15px',\r\n                                        backgroundColor: lieuEnModification.couleur,\r\n                                        color: 'white',\r\n                                        borderRadius: '8px',\r\n                                        fontWeight: 'bold',\r\n                                        flex: 1,\r\n                                        textAlign: 'center',\r\n                                        fontSize: '14px'\r\n                                    }}>\r\n                                        {lieuEnModification.initiale}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Palette de couleurs pour modification */}\r\n                        <div style={{ marginBottom: '15px' }}>\r\n                            <label style={{ display: 'block', marginBottom: '8px', fontSize: '14px', color: '#92400e' }}>\r\n                                Couleurs suggérées :\r\n                            </label>\r\n                            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>\r\n                                {couleursPredefinies.map((c) => (\r\n                                    <button\r\n                                        key={c}\r\n                                        type=\"button\"\r\n                                        onClick={() => setLieuEnModification({\r\n                                            ...lieuEnModification,\r\n                                            couleur: c\r\n                                        })}\r\n                                        style={{\r\n                                            width: '32px',\r\n                                            height: '32px',\r\n                                            backgroundColor: c,\r\n                                            border: lieuEnModification.couleur === c ? '3px solid #92400e' : '1px solid #fbbf24',\r\n                                            borderRadius: '6px',\r\n                                            cursor: 'pointer',\r\n                                            transition: 'transform 0.2s'\r\n                                        }}\r\n                                        onMouseOver={(e) => e.target.style.transform = 'scale(1.2)'}\r\n                                        onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\r\n                                    />\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                type=\"submit\"\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: isLoading ? '#9ca3af' : '#f59e0b',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                {isLoading ? 'Modification...' : 'Modifier'}\r\n                            </button>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => {\r\n                                    setShowModifierForm(false)\r\n                                    setLieuEnModification(null)\r\n                                }}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    cursor: 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )}\r\n\r\n            {/* Tableau avec filtres */}\r\n            <div style={{\r\n                backgroundColor: 'white',\r\n                borderRadius: '12px',\r\n                overflow: 'hidden',\r\n                boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n            }}>\r\n                {/* Header avec filtres et stats */}\r\n                <div style={{\r\n                    padding: '20px',\r\n                    backgroundColor: '#f9fafb',\r\n                    borderBottom: '1px solid #e5e7eb',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center'\r\n                }}>\r\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>\r\n                        <label style={{ fontWeight: '500', color: '#374151' }}>Afficher :</label>\r\n                        <select\r\n                            value={filtreStatut}\r\n                            onChange={(e) => setFiltreStatut(e.target.value)}\r\n                            style={{\r\n                                padding: '8px 12px',\r\n                                border: '1px solid #d1d5db',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            <option value=\"actif\">Lieux actifs</option>\r\n                            <option value=\"archive\">Lieux archivés</option>\r\n                            <option value=\"tous\">Tous les lieux</option>\r\n                        </select>\r\n                    </div>\r\n                    \r\n                    <div style={{ display: 'flex', gap: '20px', fontSize: '14px' }}>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#d1fae5', \r\n                            color: '#065f46',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Actifs: {stats.actifs}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#f3f4f6', \r\n                            color: '#6b7280',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Archivés: {stats.archives}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#ede9fe', \r\n                            color: '#7c3aed',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Total: {stats.total}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Tableau */}\r\n                {lieux.length > 0 ? (\r\n                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                        <thead>\r\n                            <tr style={{ backgroundColor: '#f9fafb' }}>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Statut</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Nom</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Initiale</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Couleur</th>\r\n                                <th style={{ padding: '12px', textAlign: 'center', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {lieux.map((lieu) => (\r\n                                <tr key={lieu.id} style={{ borderTop: '1px solid #e5e7eb' }}>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <span style={{\r\n                                            padding: '4px 12px',\r\n                                            borderRadius: '20px',\r\n                                            fontSize: '12px',\r\n                                            fontWeight: '500',\r\n                                            backgroundColor: lieu.archive ? '#f3f4f6' : '#d1fae5',\r\n                                            color: lieu.archive ? '#6b7280' : '#065f46'\r\n                                        }}>\r\n                                            {lieu.archive ? '📦 Archivé' : '✅ Actif'}\r\n                                        </span>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px', fontWeight: '500' }}>{lieu.nom}</td>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <span style={{\r\n                                            padding: '6px 10px',\r\n                                            backgroundColor: lieu.couleur || '#3b82f6',\r\n                                            color: 'white',\r\n                                            borderRadius: '8px',\r\n                                            fontSize: '12px',\r\n                                            fontWeight: 'bold'\r\n                                        }}>\r\n                                            {lieu.initiale}\r\n                                        </span>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                            <div style={{\r\n                                                width: '30px',\r\n                                                height: '30px',\r\n                                                backgroundColor: lieu.couleur || '#3b82f6',\r\n                                                borderRadius: '6px',\r\n                                                border: '1px solid #d1d5db'\r\n                                            }} />\r\n                                            <span style={{ fontSize: '12px', color: '#6b7280', fontFamily: 'monospace' }}>\r\n                                                {lieu.couleur || '#3b82f6'}\r\n                                            </span>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px', textAlign: 'center' }}>\r\n                                        {lieu.archive ? (\r\n                                            <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>\r\n                                                <button\r\n                                                    onClick={() => initierAction(lieu, 'desarchiver')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#10b981',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    📤 Désarchiver\r\n                                                </button>\r\n                                                <button\r\n                                                    onClick={() => initierAction(lieu, 'supprimer')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#ef4444',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    🗑️ Supprimer\r\n                                                </button>\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>\r\n                                                <button\r\n                                                    onClick={() => initierModification(lieu)}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#3b82f6',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    🎨 Modifier\r\n                                                </button>\r\n                                                <button\r\n                                                    onClick={() => initierAction(lieu, 'archiver')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#6b7280',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    📦 Archiver\r\n                                                </button>\r\n                                            </div>\r\n                                        )}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                ) : (\r\n                    <div style={{ padding: '60px', textAlign: 'center' }}>\r\n                        <p style={{ color: '#9ca3af', fontSize: '16px' }}>\r\n                            {filtreStatut === 'actif' && 'Aucun lieu actif trouvé.'}\r\n                            {filtreStatut === 'archive' && 'Aucun lieu archivé trouvé.'}\r\n                            {filtreStatut === 'tous' && 'Aucun lieu trouvé.'}\r\n                        </p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Modal de confirmation */}\r\n            {showConfirmation && actionEnCours && (\r\n                <div style={{\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    backgroundColor: 'rgba(0,0,0,0.5)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    zIndex: 1000\r\n                }}>\r\n                    <div style={{\r\n                        backgroundColor: 'white',\r\n                        borderRadius: '12px',\r\n                        padding: '25px',\r\n                        maxWidth: '400px',\r\n                        width: '90%',\r\n                        boxShadow: '0 20px 40px rgba(0,0,0,0.2)'\r\n                    }}>\r\n                        <h3 style={{ marginBottom: '15px', color: '#1f2937' }}>\r\n                            Confirmer l'action\r\n                        </h3>\r\n                        <p style={{ marginBottom: '20px', color: '#6b7280', whiteSpace: 'pre-line' }}>\r\n                            {actionEnCours.message}\r\n                        </p>\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                onClick={executerAction}\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    padding: '10px',\r\n                                    backgroundColor: actionEnCours.type === 'supprimer' ? '#ef4444' : '#3b82f6',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontWeight: '500',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                {isLoading ? 'En cours...' : 'Confirmer'}\r\n                            </button>\r\n                            <button\r\n                                onClick={() => {\r\n                                    setShowConfirmation(false)\r\n                                    setActionEnCours(null)\r\n                                }}\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    padding: '10px',\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontWeight: '500',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC - Page titre personnalisé\r\nexport default withAuthAdmin(GestionLieux, \"Gestion Lieux\")",
          "taille": 49142,
          "lignes": 995,
          "dateModif": "2025-08-28T19:00:40.486Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\nimport { withAuthAdmin } from '../components/withAuthAdmin'\r\n\r\nfunction GestionLieux({ user, logout, inactivityTime }) {\r\n    const router = useRouter()\r\n    \r\n    // États\r\n    const [lieux, setLieux] = useState([])\r\n    const [filtreStatut, setFiltreStatut] = useState('actif')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [message, setMessage] = useState('')\r\n    \r\n    // États formulaire ajout\r\n    const [showAjouterForm, setShowAjouterForm] = useState(false)\r\n    const [nom, setNom] = useState('')\r\n    const [initiale, setInitiale] = useState('')\r\n    const [couleur, setCouleur] = useState('#3b82f6')\r\n    \r\n    // États formulaire modification\r\n    const [lieuEnModification, setLieuEnModification] = useState(null)\r\n    const [showModifierForm, setShowModifierForm] = useState(false)\r\n    \r\n    // États pour confirmation\r\n    const [showConfirmation, setShowConfirmation] = useState(false)\r\n    const [actionEnCours, setActionEnCours] = useState(null)\r\n\r\n    // Couleurs prédéfinies pour le sélecteur\r\n    const couleursPredefinies = [\r\n        '#ef4444', // Rouge\r\n        '#f97316', // Orange\r\n        '#f59e0b', // Ambre\r\n        '#eab308', // Jaune\r\n        '#84cc16', // Lime\r\n        '#22c55e', // Vert\r\n        '#10b981', // Emeraude\r\n        '#14b8a6', // Teal\r\n        '#06b6d4', // Cyan\r\n        '#0ea5e9', // Bleu ciel\r\n        '#3b82f6', // Bleu\r\n        '#6366f1', // Indigo\r\n        '#8b5cf6', // Violet\r\n        '#a855f7', // Purple\r\n        '#d946ef', // Fuchsia\r\n        '#ec4899', // Pink\r\n        '#f43f5e', // Rose\r\n        '#6b7280'  // Gris\r\n    ]\r\n\r\n    useEffect(() => {\r\n        fetchLieux()\r\n    }, [filtreStatut])\r\n\r\n    // Auto-génération de l'initiale\r\n    useEffect(() => {\r\n        if (nom) {\r\n            const words = nom.split(' ')\r\n            let initialeAuto = ''\r\n            \r\n            if (words.length >= 2) {\r\n                // Si plusieurs mots, prendre la première lettre de chaque (max 3)\r\n                initialeAuto = words.slice(0, 3).map(w => w.charAt(0)).join('').toUpperCase()\r\n            } else {\r\n                // Si un seul mot, prendre les 3 premières lettres\r\n                initialeAuto = nom.substring(0, 3).toUpperCase()\r\n            }\r\n            \r\n            setInitiale(initialeAuto)\r\n        }\r\n    }, [nom])\r\n\r\n    // Fonction pour récupérer les lieux\r\n    const fetchLieux = async () => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('lieux')\r\n                .select('*')\r\n                .order('nom')\r\n\r\n            if (error) throw error\r\n\r\n            let lieuxFiltres = data || []\r\n            \r\n            if (filtreStatut === 'actif') {\r\n                lieuxFiltres = data.filter(l => l.archive !== true)\r\n            } else if (filtreStatut === 'archive') {\r\n                lieuxFiltres = data.filter(l => l.archive === true)\r\n            }\r\n\r\n            setLieux(lieuxFiltres)\r\n        } catch (error) {\r\n            setMessage('Erreur lors du chargement des lieux')\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    // Fonction pour ajouter un lieu\r\n    const handleSubmitAjout = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!nom.trim() || !initiale.trim()) {\r\n            setMessage('Le nom et l\\'initiale sont obligatoires')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { error } = await supabase.from('lieux').insert([{\r\n                nom: nom.trim(),\r\n                initiale: initiale.trim().toUpperCase(),\r\n                couleur: couleur,\r\n                archive: false\r\n            }])\r\n            \r\n            if (error) throw error\r\n            \r\n            setMessage('Lieu ajouté avec succès !')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            \r\n            // Réinitialiser le formulaire\r\n            setNom('')\r\n            setInitiale('')\r\n            setCouleur('#3b82f6')\r\n            setShowAjouterForm(false)\r\n            await fetchLieux()\r\n            \r\n        } catch (error) {\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Fonction pour modifier un lieu\r\n    const handleSubmitModification = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!lieuEnModification || !lieuEnModification.nom.trim() || !lieuEnModification.initiale.trim()) {\r\n            setMessage('Le nom et l\\'initiale sont obligatoires')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { error } = await supabase\r\n                .from('lieux')\r\n                .update({ \r\n                    nom: lieuEnModification.nom.trim(),\r\n                    initiale: lieuEnModification.initiale.trim().toUpperCase(),\r\n                    couleur: lieuEnModification.couleur\r\n                })\r\n                .eq('id', lieuEnModification.id)\r\n            \r\n            if (error) throw error\r\n            \r\n            setMessage('Lieu modifié avec succès !')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            setLieuEnModification(null)\r\n            setShowModifierForm(false)\r\n            await fetchLieux()\r\n            \r\n        } catch (error) {\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Initier la modification\r\n    const initierModification = (lieu) => {\r\n        setLieuEnModification({...lieu})\r\n        setShowModifierForm(true)\r\n        setShowAjouterForm(false)\r\n    }\r\n\r\n    // Actions archiver/désarchiver/supprimer\r\n    const initierAction = (lieu, typeAction) => {\r\n        setActionEnCours({\r\n            lieu: lieu,\r\n            type: typeAction,\r\n            message: getMessageConfirmation(lieu, typeAction)\r\n        })\r\n        setShowConfirmation(true)\r\n    }\r\n\r\n    const getMessageConfirmation = (lieu, typeAction) => {\r\n        switch (typeAction) {\r\n            case 'archiver':\r\n                return `Archiver le lieu \"${lieu.nom}\" ?`\r\n            case 'desarchiver':\r\n                return `Désarchiver le lieu \"${lieu.nom}\" ?`\r\n            case 'supprimer':\r\n                return `Supprimer définitivement le lieu \"${lieu.nom}\" ?\\n\\nATTENTION : Action irréversible !`\r\n            default:\r\n                return 'Confirmer cette action ?'\r\n        }\r\n    }\r\n\r\n    const executerAction = async () => {\r\n        if (!actionEnCours) return\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { lieu, type } = actionEnCours\r\n\r\n            if (type === 'archiver') {\r\n                await supabase.from('lieux').update({ archive: true }).eq('id', lieu.id)\r\n                setMessage('Lieu archivé avec succès !')\r\n            } else if (type === 'desarchiver') {\r\n                await supabase.from('lieux').update({ archive: false }).eq('id', lieu.id)\r\n                setMessage('Lieu désarchivé avec succès !')\r\n            } else if (type === 'supprimer') {\r\n                await supabase.from('lieux').delete().eq('id', lieu.id)\r\n                setMessage('Lieu supprimé définitivement !')\r\n            }\r\n\r\n            setTimeout(() => setMessage(''), 4000)\r\n            await fetchLieux()\r\n\r\n        } catch (error) {\r\n            setMessage(`Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n            setActionEnCours(null)\r\n            setShowConfirmation(false)\r\n        }\r\n    }\r\n\r\n    // Compter les lieux\r\n    const compterLieux = () => {\r\n        const actifs = lieux.filter(l => !l.archive).length\r\n        const archives = lieux.filter(l => l.archive).length\r\n        return { actifs, archives, total: lieux.length }\r\n    }\r\n\r\n    const stats = compterLieux()\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            padding: '40px 60px'\r\n        }}>\r\n            {/* Header avec navigation */}\r\n            <div style={{\r\n                backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                borderRadius: '12px',\r\n                padding: '8px 20px',\r\n                marginBottom: '20px',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                backdropFilter: 'blur(10px)'\r\n            }}>\r\n                <nav style={{ fontSize: '14px' }}>\r\n                    <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                    <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                    <span style={{ color: '#10b981', fontWeight: '500' }}>Gestion des Lieux</span>\r\n                </nav>\r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🏠 Accueil\r\n                    </button>\r\n                    \r\n                    <div style={{\r\n                        padding: '6px 12px',\r\n                        borderRadius: '8px',\r\n                        fontSize: '12px',\r\n                        fontWeight: '500',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: '6px',\r\n                        backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n                        color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#d97706' : '#059669',\r\n                        border: `1px solid ${inactivityTime >= 240 ? '#fca5a5' : inactivityTime >= 180 ? '#fcd34d' : '#6ee7b7'}`\r\n                    }}>\r\n                        Status : {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n                                 inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 `🟢 ACTIF`}\r\n                    </div>\r\n                    \r\n                    <button\r\n                        onClick={logout}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🚪 Déconnexion\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Titre principal */}\r\n            <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n                <h1 style={{\r\n                    fontSize: '36px',\r\n                    fontWeight: 'bold',\r\n                    color: 'white',\r\n                    marginBottom: '10px'\r\n                }}>\r\n                    Gestion des Lieux\r\n                </h1>\r\n                <p style={{ color: 'rgba(255,255,255,0.8)', fontSize: '16px' }}>\r\n                    Gérez les lieux de formation avec leurs couleurs distinctives\r\n                </p>\r\n            </div>\r\n\r\n            {/* Message de notification */}\r\n            {message && (\r\n                <div style={{\r\n                    backgroundColor: message.includes('succès') ? '#d1fae5' : '#fee2e2',\r\n                    color: message.includes('succès') ? '#065f46' : '#991b1b',\r\n                    padding: '15px',\r\n                    borderRadius: '8px',\r\n                    marginBottom: '20px',\r\n                    textAlign: 'center',\r\n                    fontWeight: '500'\r\n                }}>\r\n                    {message}\r\n                </div>\r\n            )}\r\n\r\n            {/* Bouton Ajouter */}\r\n            <div style={{ marginBottom: '20px' }}>\r\n                <button\r\n                    onClick={() => {\r\n                        setShowAjouterForm(!showAjouterForm)\r\n                        setShowModifierForm(false)\r\n                    }}\r\n                    style={{\r\n                        width: '100%',\r\n                        padding: '15px',\r\n                        background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '12px',\r\n                        fontSize: '16px',\r\n                        fontWeight: '600',\r\n                        cursor: 'pointer',\r\n                        transition: 'transform 0.2s'\r\n                    }}\r\n                    onMouseOver={(e) => e.target.style.transform = 'scale(1.02)'}\r\n                    onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\r\n                >\r\n                    📍 Ajouter un nouveau lieu\r\n                </button>\r\n            </div>\r\n\r\n            {/* Formulaire d'ajout */}\r\n            {showAjouterForm && (\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    marginBottom: '20px',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <h3 style={{ marginBottom: '15px', color: '#1f2937' }}>Nouveau lieu</h3>\r\n                    <div style={{\r\n                        backgroundColor: '#f0f9ff',\r\n                        border: '1px solid #0ea5e9',\r\n                        borderRadius: '8px',\r\n                        padding: '12px',\r\n                        marginBottom: '15px'\r\n                    }}>\r\n                        <p style={{ margin: 0, fontSize: '14px', color: '#0284c7' }}>\r\n                            <strong>🎨 Gestion couleurs et initiales :</strong> Les initiales se génèrent automatiquement selon le nom (3 premières lettres ou première lettre de chaque mot). Choisissez une couleur pour identifier facilement ce lieu dans les plannings.\r\n                        </p>\r\n                    </div>\r\n                    <form onSubmit={handleSubmitAjout}>\r\n                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 200px', gap: '15px', marginBottom: '15px' }}>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>\r\n                                    Nom du lieu *\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={nom}\r\n                                    onChange={(e) => setNom(e.target.value)}\r\n                                    placeholder=\"Ex: Centre Camille Pagé, Maison Pour Tous...\"\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        padding: '10px',\r\n                                        border: '1px solid #d1d5db',\r\n                                        borderRadius: '8px',\r\n                                        fontSize: '14px'\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>\r\n                                    Initiale (auto) *\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={initiale}\r\n                                    onChange={(e) => setInitiale(e.target.value.substring(0, 3))}\r\n                                    maxLength=\"3\"\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        padding: '10px',\r\n                                        border: '1px solid #d1d5db',\r\n                                        borderRadius: '8px',\r\n                                        fontSize: '14px',\r\n                                        fontWeight: 'bold',\r\n                                        textAlign: 'center',\r\n                                        textTransform: 'uppercase'\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>\r\n                                    Couleur\r\n                                </label>\r\n                                <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                    <input\r\n                                        type=\"color\"\r\n                                        value={couleur}\r\n                                        onChange={(e) => setCouleur(e.target.value)}\r\n                                        style={{\r\n                                            width: '50px',\r\n                                            height: '42px',\r\n                                            border: '1px solid #d1d5db',\r\n                                            borderRadius: '8px',\r\n                                            cursor: 'pointer'\r\n                                        }}\r\n                                    />\r\n                                    <div style={{\r\n                                        padding: '10px 15px',\r\n                                        backgroundColor: couleur,\r\n                                        color: 'white',\r\n                                        borderRadius: '8px',\r\n                                        fontWeight: 'bold',\r\n                                        flex: 1,\r\n                                        textAlign: 'center',\r\n                                        fontSize: '14px'\r\n                                    }}>\r\n                                        {initiale || 'ABC'}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        {/* Palette de couleurs prédéfinies */}\r\n                        <div style={{ marginBottom: '15px' }}>\r\n                            <label style={{ display: 'block', marginBottom: '8px', fontSize: '14px', color: '#6b7280' }}>\r\n                                Couleurs suggérées :\r\n                            </label>\r\n                            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>\r\n                                {couleursPredefinies.map((c) => (\r\n                                    <button\r\n                                        key={c}\r\n                                        type=\"button\"\r\n                                        onClick={() => setCouleur(c)}\r\n                                        style={{\r\n                                            width: '32px',\r\n                                            height: '32px',\r\n                                            backgroundColor: c,\r\n                                            border: couleur === c ? '3px solid #1f2937' : '1px solid #d1d5db',\r\n                                            borderRadius: '6px',\r\n                                            cursor: 'pointer',\r\n                                            transition: 'transform 0.2s'\r\n                                        }}\r\n                                        onMouseOver={(e) => e.target.style.transform = 'scale(1.2)'}\r\n                                        onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\r\n                                    />\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                type=\"submit\"\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: isLoading ? '#9ca3af' : '#10b981',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                {isLoading ? 'Ajout...' : 'Ajouter'}\r\n                            </button>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => {\r\n                                    setShowAjouterForm(false)\r\n                                    setNom('')\r\n                                    setInitiale('')\r\n                                    setCouleur('#3b82f6')\r\n                                }}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    cursor: 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )}\r\n\r\n            {/* Formulaire de modification */}\r\n            {showModifierForm && lieuEnModification && (\r\n                <div style={{\r\n                    backgroundColor: '#fef3c7',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    marginBottom: '20px',\r\n                    border: '2px solid #f59e0b'\r\n                }}>\r\n                    <h3 style={{ marginBottom: '15px', color: '#92400e' }}>\r\n                        🎨 Modifier : {lieuEnModification.nom}\r\n                    </h3>\r\n                    <div style={{\r\n                        backgroundColor: '#fbbf24',\r\n                        color: '#92400e',\r\n                        padding: '10px',\r\n                        borderRadius: '6px',\r\n                        marginBottom: '15px',\r\n                        fontSize: '13px'\r\n                    }}>\r\n                        🔄 <strong>Mise à jour intelligente :</strong> Les initiales se recalculent automatiquement selon le nouveau nom.\r\n                    </div>\r\n                    <form onSubmit={handleSubmitModification}>\r\n                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 200px', gap: '15px', marginBottom: '15px' }}>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>\r\n                                    Nom du lieu *\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={lieuEnModification.nom}\r\n                                    onChange={(e) => {\r\n                                        const newLieu = {...lieuEnModification, nom: e.target.value}\r\n                                        const words = e.target.value.split(' ')\r\n                                        let newInitiale = ''\r\n                                        \r\n                                        if (words.length >= 2) {\r\n                                            newInitiale = words.slice(0, 3).map(w => w.charAt(0)).join('').toUpperCase()\r\n                                        } else {\r\n                                            newInitiale = e.target.value.substring(0, 3).toUpperCase()\r\n                                        }\r\n                                        \r\n                                        setLieuEnModification({...newLieu, initiale: newInitiale})\r\n                                    }}\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        padding: '10px',\r\n                                        border: '1px solid #fbbf24',\r\n                                        borderRadius: '8px',\r\n                                        fontSize: '14px'\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>\r\n                                    Initiale *\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={lieuEnModification.initiale}\r\n                                    onChange={(e) => setLieuEnModification({\r\n                                        ...lieuEnModification, \r\n                                        initiale: e.target.value.substring(0, 3)\r\n                                    })}\r\n                                    maxLength=\"3\"\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        padding: '10px',\r\n                                        border: '1px solid #fbbf24',\r\n                                        borderRadius: '8px',\r\n                                        fontSize: '14px',\r\n                                        fontWeight: 'bold',\r\n                                        textAlign: 'center',\r\n                                        textTransform: 'uppercase'\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>\r\n                                    Couleur\r\n                                </label>\r\n                                <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                    <input\r\n                                        type=\"color\"\r\n                                        value={lieuEnModification.couleur}\r\n                                        onChange={(e) => setLieuEnModification({\r\n                                            ...lieuEnModification,\r\n                                            couleur: e.target.value\r\n                                        })}\r\n                                        style={{\r\n                                            width: '50px',\r\n                                            height: '42px',\r\n                                            border: '1px solid #fbbf24',\r\n                                            borderRadius: '8px',\r\n                                            cursor: 'pointer'\r\n                                        }}\r\n                                    />\r\n                                    <div style={{\r\n                                        padding: '10px 15px',\r\n                                        backgroundColor: lieuEnModification.couleur,\r\n                                        color: 'white',\r\n                                        borderRadius: '8px',\r\n                                        fontWeight: 'bold',\r\n                                        flex: 1,\r\n                                        textAlign: 'center',\r\n                                        fontSize: '14px'\r\n                                    }}>\r\n                                        {lieuEnModification.initiale}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Palette de couleurs pour modification */}\r\n                        <div style={{ marginBottom: '15px' }}>\r\n                            <label style={{ display: 'block', marginBottom: '8px', fontSize: '14px', color: '#92400e' }}>\r\n                                Couleurs suggérées :\r\n                            </label>\r\n                            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>\r\n                                {couleursPredefinies.map((c) => (\r\n                                    <button\r\n                                        key={c}\r\n                                        type=\"button\"\r\n                                        onClick={() => setLieuEnModification({\r\n                                            ...lieuEnModification,\r\n                                            couleur: c\r\n                                        })}\r\n                                        style={{\r\n                                            width: '32px',\r\n                                            height: '32px',\r\n                                            backgroundColor: c,\r\n                                            border: lieuEnModification.couleur === c ? '3px solid #92400e' : '1px solid #fbbf24',\r\n                                            borderRadius: '6px',\r\n                                            cursor: 'pointer',\r\n                                            transition: 'transform 0.2s'\r\n                                        }}\r\n                                        onMouseOver={(e) => e.target.style.transform = 'scale(1.2)'}\r\n                                        onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\r\n                                    />\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                type=\"submit\"\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: isLoading ? '#9ca3af' : '#f59e0b',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                {isLoading ? 'Modification...' : 'Modifier'}\r\n                            </button>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => {\r\n                                    setShowModifierForm(false)\r\n                                    setLieuEnModification(null)\r\n                                }}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    cursor: 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )}\r\n\r\n            {/* Tableau avec filtres */}\r\n            <div style={{\r\n                backgroundColor: 'white',\r\n                borderRadius: '12px',\r\n                overflow: 'hidden',\r\n                boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n            }}>\r\n                {/* Header avec filtres et stats */}\r\n                <div style={{\r\n                    padding: '20px',\r\n                    backgroundColor: '#f9fafb',\r\n                    borderBottom: '1px solid #e5e7eb',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center'\r\n                }}>\r\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>\r\n                        <label style={{ fontWeight: '500', color: '#374151' }}>Afficher :</label>\r\n                        <select\r\n                            value={filtreStatut}\r\n                            onChange={(e) => setFiltreStatut(e.target.value)}\r\n                            style={{\r\n                                padding: '8px 12px',\r\n                                border: '1px solid #d1d5db',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            <option value=\"actif\">Lieux actifs</option>\r\n                            <option value=\"archive\">Lieux archivés</option>\r\n                            <option value=\"tous\">Tous les lieux</option>\r\n                        </select>\r\n                    </div>\r\n                    \r\n                    <div style={{ display: 'flex', gap: '20px', fontSize: '14px' }}>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#d1fae5', \r\n                            color: '#065f46',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Actifs: {stats.actifs}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#f3f4f6', \r\n                            color: '#6b7280',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Archivés: {stats.archives}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#ede9fe', \r\n                            color: '#7c3aed',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Total: {stats.total}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Tableau */}\r\n                {lieux.length > 0 ? (\r\n                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                        <thead>\r\n                            <tr style={{ backgroundColor: '#f9fafb' }}>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Statut</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Nom</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Initiale</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Couleur</th>\r\n                                <th style={{ padding: '12px', textAlign: 'center', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {lieux.map((lieu) => (\r\n                                <tr key={lieu.id} style={{ borderTop: '1px solid #e5e7eb' }}>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <span style={{\r\n                                            padding: '4px 12px',\r\n                                            borderRadius: '20px',\r\n                                            fontSize: '12px',\r\n                                            fontWeight: '500',\r\n                                            backgroundColor: lieu.archive ? '#f3f4f6' : '#d1fae5',\r\n                                            color: lieu.archive ? '#6b7280' : '#065f46'\r\n                                        }}>\r\n                                            {lieu.archive ? '📦 Archivé' : '✅ Actif'}\r\n                                        </span>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px', fontWeight: '500' }}>{lieu.nom}</td>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <span style={{\r\n                                            padding: '6px 10px',\r\n                                            backgroundColor: lieu.couleur || '#3b82f6',\r\n                                            color: 'white',\r\n                                            borderRadius: '8px',\r\n                                            fontSize: '12px',\r\n                                            fontWeight: 'bold'\r\n                                        }}>\r\n                                            {lieu.initiale}\r\n                                        </span>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                            <div style={{\r\n                                                width: '30px',\r\n                                                height: '30px',\r\n                                                backgroundColor: lieu.couleur || '#3b82f6',\r\n                                                borderRadius: '6px',\r\n                                                border: '1px solid #d1d5db'\r\n                                            }} />\r\n                                            <span style={{ fontSize: '12px', color: '#6b7280', fontFamily: 'monospace' }}>\r\n                                                {lieu.couleur || '#3b82f6'}\r\n                                            </span>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px', textAlign: 'center' }}>\r\n                                        {lieu.archive ? (\r\n                                            <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>\r\n                                                <button\r\n                                                    onClick={() => initierAction(lieu, 'desarchiver')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#10b981',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    📤 Désarchiver\r\n                                                </button>\r\n                                                <button\r\n                                                    onClick={() => initierAction(lieu, 'supprimer')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#ef4444',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    🗑️ Supprimer\r\n                                                </button>\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>\r\n                                                <button\r\n                                                    onClick={() => initierModification(lieu)}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#3b82f6',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    🎨 Modifier\r\n                                                </button>\r\n                                                <button\r\n                                                    onClick={() => initierAction(lieu, 'archiver')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#6b7280',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    📦 Archiver\r\n                                                </button>\r\n                                            </div>\r\n                                        )}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                ) : (\r\n                    <div style={{ padding: '60px', textAlign: 'center' }}>\r\n                        <p style={{ color: '#9ca3af', fontSize: '16px' }}>\r\n                            {filtreStatut === 'actif' && 'Aucun lieu actif trouvé.'}\r\n                            {filtreStatut === 'archive' && 'Aucun lieu archivé trouvé.'}\r\n                            {filtreStatut === 'tous' && 'Aucun lieu trouvé.'}\r\n                        </p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Modal de confirmation */}\r\n            {showConfirmation && actionEnCours && (\r\n                <div style={{\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    backgroundColor: 'rgba(0,0,0,0.5)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    zIndex: 1000\r\n                }}>\r\n                    <div style={{\r\n                        backgroundColor: 'white',\r\n                        borderRadius: '12px',\r\n                        padding: '25px',\r\n                        maxWidth: '400px',\r\n                        width: '90%',\r\n                        boxShadow: '0 20px 40px rgba(0,0,0,0.2)'\r\n                    }}>\r\n                        <h3 style={{ marginBottom: '15px', color: '#1f2937' }}>\r\n                            Confirmer l'action\r\n                        </h3>\r\n                        <p style={{ marginBottom: '20px', color: '#6b7280', whiteSpace: 'pre-line' }}>\r\n                            {actionEnCours.message}\r\n                        </p>\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                onClick={executerAction}\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    padding: '10px',\r\n                                    backgroundColor: actionEnCours.type === 'supprimer' ? '#ef4444' : '#3b82f6',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontWeight: '500',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                {isLoading ? 'En cours...' : 'Confirmer'}\r\n                            </button>\r\n                            <button\r\n                                onClick={() => {\r\n                                    setShowConfirmation(false)\r\n                                    setActionEnCours(null)\r\n                                }}\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    padding: '10px',\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontWeight: '500',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC - Page titre personnalisé\r\nexport default withAuthAdmin(GestionLieux, \"Gestion Lieux\")",
          "taille": 49142,
          "lignes": 995,
          "dateModif": "2025-08-22T06:23:17.559Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/gestion-salaries.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\nimport { withAuthAdmin } from '../components/withAuthAdmin'\r\n\r\nfunction GestionSalaries({ user, logout, inactivityTime }) {\r\n    const router = useRouter()\r\n    \r\n    // États\r\n    const [salaries, setSalaries] = useState([])\r\n    const [filtreStatut, setFiltreStatut] = useState('actif')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [message, setMessage] = useState('')\r\n    \r\n    // États formulaire ajout\r\n    const [showAjouterForm, setShowAjouterForm] = useState(false)\r\n    const [prenom, setPrenom] = useState('')\r\n    const [nom, setNom] = useState('')\r\n    const [initiales, setInitiales] = useState('')\r\n    \r\n    // États formulaire modification\r\n    const [salarieEnModification, setSalarieEnModification] = useState(null)\r\n    const [showModifierForm, setShowModifierForm] = useState(false)\r\n    \r\n    // États pour confirmation\r\n    const [showConfirmation, setShowConfirmation] = useState(false)\r\n    const [actionEnCours, setActionEnCours] = useState(null)\r\n\r\n    useEffect(() => {\r\n        fetchSalaries()\r\n    }, [filtreStatut])\r\n\r\n    // Auto-génération des initiales\r\n    useEffect(() => {\r\n        if (prenom && nom) {\r\n            const initialesAuto = (prenom.charAt(0) + nom.charAt(0)).toUpperCase()\r\n            setInitiales(initialesAuto)\r\n        }\r\n    }, [prenom, nom])\r\n\r\n    // Fonction pour récupérer les salariés\r\n    const fetchSalaries = async () => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('users')\r\n                .select('*')\r\n                .eq('role', 'salarié')\r\n                .order('nom')\r\n\r\n            if (error) throw error\r\n\r\n            let salariesFiltres = data || []\r\n            \r\n            if (filtreStatut === 'actif') {\r\n                salariesFiltres = data.filter(s => s.archive !== true)\r\n            } else if (filtreStatut === 'archive') {\r\n                salariesFiltres = data.filter(s => s.archive === true)\r\n            }\r\n\r\n            setSalaries(salariesFiltres)\r\n        } catch (error) {\r\n            setMessage('❌ Erreur lors du chargement des salariés')\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    // Fonction pour ajouter un salarié\r\n    const handleSubmitAjout = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!prenom.trim() || !nom.trim()) {\r\n            setMessage('❌ Le prénom et le nom sont obligatoires')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { error } = await supabase.from('users').insert([{\r\n                prenom: prenom.trim(),\r\n                nom: nom.trim(),\r\n                initiales: initiales.trim(),\r\n                role: 'salarié',\r\n                archive: false\r\n            }])\r\n            \r\n            if (error) throw error\r\n            \r\n            setMessage('✅ Salarié ajouté avec succès !')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            \r\n            // Réinitialiser le formulaire\r\n            setPrenom('')\r\n            setNom('')\r\n            setInitiales('')\r\n            setShowAjouterForm(false)\r\n            await fetchSalaries()\r\n            \r\n        } catch (error) {\r\n            setMessage(`❌ Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Fonction pour modifier un salarié\r\n    const handleSubmitModification = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!salarieEnModification || !salarieEnModification.prenom.trim() || !salarieEnModification.nom.trim()) {\r\n            setMessage('❌ Le prénom et le nom sont obligatoires')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { error } = await supabase\r\n                .from('users')\r\n                .update({ \r\n                    prenom: salarieEnModification.prenom.trim(),\r\n                    nom: salarieEnModification.nom.trim(),\r\n                    initiales: salarieEnModification.initiales.trim(),\r\n                })\r\n                .eq('id', salarieEnModification.id)\r\n            \r\n            if (error) throw error\r\n            \r\n            setMessage('✅ Salarié modifié avec succès !')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            setSalarieEnModification(null)\r\n            setShowModifierForm(false)\r\n            await fetchSalaries()\r\n            \r\n        } catch (error) {\r\n            setMessage(`❌ Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Initier la modification\r\n    const initierModification = (salarie) => {\r\n        setSalarieEnModification({...salarie})\r\n        setShowModifierForm(true)\r\n        setShowAjouterForm(false)\r\n    }\r\n\r\n    // Actions archiver/désarchiver/supprimer\r\n    const initierAction = (salarie, typeAction) => {\r\n        setActionEnCours({\r\n            salarie: salarie,\r\n            type: typeAction,\r\n            message: getMessageConfirmation(salarie, typeAction)\r\n        })\r\n        setShowConfirmation(true)\r\n    }\r\n\r\n    const getMessageConfirmation = (salarie, typeAction) => {\r\n        switch (typeAction) {\r\n            case 'archiver':\r\n                return `Archiver le salarié \"${salarie.prenom} ${salarie.nom}\" ?`\r\n            case 'desarchiver':\r\n                return `Désarchiver le salarié \"${salarie.prenom} ${salarie.nom}\" ?`\r\n            case 'supprimer':\r\n                return `Supprimer définitivement le salarié \"${salarie.prenom} ${salarie.nom}\" ?\\n\\n⚠️ ATTENTION : Action irréversible !`\r\n            default:\r\n                return 'Confirmer cette action ?'\r\n        }\r\n    }\r\n\r\n    const executerAction = async () => {\r\n        if (!actionEnCours) return\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { salarie, type } = actionEnCours\r\n\r\n            if (type === 'archiver') {\r\n                await supabase.from('users').update({ archive: true }).eq('id', salarie.id)\r\n                setMessage('✅ Salarié archivé avec succès !')\r\n            } else if (type === 'desarchiver') {\r\n                await supabase.from('users').update({ archive: false }).eq('id', salarie.id)\r\n                setMessage('✅ Salarié désarchivé avec succès !')\r\n            } else if (type === 'supprimer') {\r\n                await supabase.from('users').delete().eq('id', salarie.id)\r\n                setMessage('✅ Salarié supprimé définitivement !')\r\n            }\r\n\r\n            setTimeout(() => setMessage(''), 4000)\r\n            await fetchSalaries()\r\n\r\n        } catch (error) {\r\n            setMessage(`❌ Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n            setActionEnCours(null)\r\n            setShowConfirmation(false)\r\n        }\r\n    }\r\n\r\n    // Compter les salariés\r\n    const compterSalaries = () => {\r\n        const actifs = salaries.filter(s => !s.archive).length\r\n        const archives = salaries.filter(s => s.archive).length\r\n        return { actifs, archives, total: salaries.length }\r\n    }\r\n\r\n    const stats = compterSalaries()\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            padding: '40px 60px'\r\n        }}>\r\n            {/* Header avec navigation */}\r\n            <div style={{\r\n                backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                borderRadius: '12px',\r\n                padding: '8px 20px',\r\n                marginBottom: '20px',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                backdropFilter: 'blur(10px)'\r\n            }}>\r\n                <nav style={{ fontSize: '14px' }}>\r\n                    <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                    <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                    <span style={{ color: '#8b5cf6', fontWeight: '500' }}>Gestion des Salariés</span>\r\n                </nav>\r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🏠 Accueil\r\n                    </button>\r\n                    \r\n                    <div style={{\r\n                        padding: '6px 12px',\r\n                        borderRadius: '8px',\r\n                        fontSize: '12px',\r\n                        fontWeight: '500',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: '6px',\r\n                        backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n                        color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#d97706' : '#059669',\r\n                        border: `1px solid ${inactivityTime >= 240 ? '#fca5a5' : inactivityTime >= 180 ? '#fcd34d' : '#6ee7b7'}`\r\n                    }}>\r\n                        Status : {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n                                 inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 `🟢 ACTIF`}\r\n                    </div>\r\n                    \r\n                    <button\r\n                        onClick={logout}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🚪 Déconnexion\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Titre principal */}\r\n            <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n                <h1 style={{\r\n                    fontSize: '36px',\r\n                    fontWeight: 'bold',\r\n                    color: 'white',\r\n                    marginBottom: '10px'\r\n                }}>\r\n                    Gestion des Salariés\r\n                </h1>\r\n                <p style={{ color: 'rgba(255,255,255,0.8)', fontSize: '16px' }}>\r\n                    Ajoutez, modifiez et gérez les salariés de l'organisation\r\n                </p>\r\n            </div>\r\n\r\n            {/* Message de notification */}\r\n            {message && (\r\n                <div style={{\r\n                    backgroundColor: message.includes('✅') ? '#d1fae5' : '#fee2e2',\r\n                    color: message.includes('✅') ? '#065f46' : '#991b1b',\r\n                    padding: '15px',\r\n                    borderRadius: '8px',\r\n                    marginBottom: '20px',\r\n                    textAlign: 'center',\r\n                    fontWeight: '500'\r\n                }}>\r\n                    {message}\r\n                </div>\r\n            )}\r\n\r\n            {/* Bouton Ajouter */}\r\n            <div style={{ marginBottom: '20px' }}>\r\n                <button\r\n                    onClick={() => {\r\n                        setShowAjouterForm(!showAjouterForm)\r\n                        setShowModifierForm(false)\r\n                    }}\r\n                    style={{\r\n                        width: '100%',\r\n                        padding: '15px',\r\n                        background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '12px',\r\n                        fontSize: '16px',\r\n                        fontWeight: '600',\r\n                        cursor: 'pointer',\r\n                        transition: 'transform 0.2s'\r\n                    }}\r\n                    onMouseOver={(e) => e.target.style.transform = 'scale(1.02)'}\r\n                    onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\r\n                >\r\n                    ➕ Ajouter un nouveau salarié\r\n                </button>\r\n            </div>\r\n\r\n            {/* Formulaire d'ajout */}\r\n            {showAjouterForm && (\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    marginBottom: '20px',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <h3 style={{ marginBottom: '15px', color: '#1f2937' }}>Nouveau salarié</h3>\r\n                    <div style={{\r\n                        backgroundColor: '#e0f2fe',\r\n                        border: '1px solid #06b6d4',\r\n                        borderRadius: '8px',\r\n                        padding: '12px',\r\n                        marginBottom: '15px'\r\n                    }}>\r\n                        <p style={{ margin: 0, fontSize: '14px', color: '#0891b2' }}>\r\n                            <strong>🔤 Génération automatique d'initiales :</strong> Les initiales sont générées automatiquement à partir de la première lettre du prénom et du nom.\r\n                        </p>\r\n                    </div>\r\n                    <form onSubmit={handleSubmitAjout} style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 150px 150px', gap: '15px', alignItems: 'end' }}>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>Prénom *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={prenom}\r\n                                onChange={(e) => setPrenom(e.target.value)}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px'\r\n                                }}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>Nom *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={nom}\r\n                                onChange={(e) => setNom(e.target.value)}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px'\r\n                                }}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>\r\n                                Initiales (auto)\r\n                            </label>\r\n                            <div style={{\r\n                                padding: '10px',\r\n                                background: 'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)',\r\n                                color: 'white',\r\n                                borderRadius: '8px',\r\n                                textAlign: 'center',\r\n                                fontWeight: 'bold',\r\n                                fontSize: '16px'\r\n                            }}>\r\n                                {initiales || '--'}\r\n                            </div>\r\n                        </div>\r\n                        <button\r\n                            type=\"submit\"\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '10px',\r\n                                backgroundColor: isLoading ? '#9ca3af' : '#10b981',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            {isLoading ? '...' : 'Ajouter'}\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            )}\r\n\r\n            {/* Formulaire de modification */}\r\n            {showModifierForm && salarieEnModification && (\r\n                <div style={{\r\n                    backgroundColor: '#fef3c7',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    marginBottom: '20px',\r\n                    border: '2px solid #f59e0b'\r\n                }}>\r\n                    <h3 style={{ marginBottom: '15px', color: '#92400e' }}>\r\n                        ✏️ Modifier : {salarieEnModification.prenom} {salarieEnModification.nom}\r\n                    </h3>\r\n                    <div style={{\r\n                        backgroundColor: '#fbbf24',\r\n                        color: '#92400e',\r\n                        padding: '10px',\r\n                        borderRadius: '6px',\r\n                        marginBottom: '15px',\r\n                        fontSize: '13px'\r\n                    }}>\r\n                        🔄 <strong>Mise à jour automatique :</strong> Les initiales se mettent à jour automatiquement lors de la modification du prénom ou nom.\r\n                    </div>\r\n                    <form onSubmit={handleSubmitModification} style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 150px 150px', gap: '15px', alignItems: 'end' }}>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>Prénom *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={salarieEnModification.prenom}\r\n                                onChange={(e) => {\r\n                                    const newSalarie = {...salarieEnModification, prenom: e.target.value}\r\n                                    const newInitiales = (e.target.value.charAt(0) + newSalarie.nom.charAt(0)).toUpperCase()\r\n                                    setSalarieEnModification({...newSalarie, initiales: newInitiales})\r\n                                }}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #fbbf24',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px'\r\n                                }}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>Nom *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={salarieEnModification.nom}\r\n                                onChange={(e) => {\r\n                                    const newSalarie = {...salarieEnModification, nom: e.target.value}\r\n                                    const newInitiales = (newSalarie.prenom.charAt(0) + e.target.value.charAt(0)).toUpperCase()\r\n                                    setSalarieEnModification({...newSalarie, initiales: newInitiales})\r\n                                }}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #fbbf24',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px'\r\n                                }}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>\r\n                                Initiales\r\n                            </label>\r\n                            <div style={{\r\n                                padding: '10px',\r\n                                background: 'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)',\r\n                                color: 'white',\r\n                                borderRadius: '8px',\r\n                                textAlign: 'center',\r\n                                fontWeight: 'bold',\r\n                                fontSize: '16px'\r\n                            }}>\r\n                                {salarieEnModification.initiales || '--'}\r\n                            </div>\r\n                        </div>\r\n                        <button\r\n                            type=\"submit\"\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '10px',\r\n                                backgroundColor: isLoading ? '#9ca3af' : '#f59e0b',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            {isLoading ? '...' : 'Modifier'}\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            )}\r\n\r\n            {/* Tableau avec filtres */}\r\n            <div style={{\r\n                backgroundColor: 'white',\r\n                borderRadius: '12px',\r\n                overflow: 'hidden',\r\n                boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n            }}>\r\n                {/* Header avec filtres et stats */}\r\n                <div style={{\r\n                    padding: '20px',\r\n                    backgroundColor: '#f9fafb',\r\n                    borderBottom: '1px solid #e5e7eb',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center'\r\n                }}>\r\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>\r\n                        <label style={{ fontWeight: '500', color: '#374151' }}>Afficher :</label>\r\n                        <select\r\n                            value={filtreStatut}\r\n                            onChange={(e) => setFiltreStatut(e.target.value)}\r\n                            style={{\r\n                                padding: '8px 12px',\r\n                                border: '1px solid #d1d5db',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            <option value=\"actif\">Salariés actifs</option>\r\n                            <option value=\"archive\">Salariés archivés</option>\r\n                            <option value=\"tous\">Tous les salariés</option>\r\n                        </select>\r\n                    </div>\r\n                    \r\n                    <div style={{ display: 'flex', gap: '20px', fontSize: '14px' }}>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#d1fae5', \r\n                            color: '#065f46',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Actifs: {stats.actifs}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#f3f4f6', \r\n                            color: '#6b7280',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Archivés: {stats.archives}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#ede9fe', \r\n                            color: '#7c3aed',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Total: {stats.total}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Tableau */}\r\n                {salaries.length > 0 ? (\r\n                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                        <thead>\r\n                            <tr style={{ backgroundColor: '#f9fafb' }}>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Statut</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Prénom</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Nom</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Initiales</th>\r\n                                <th style={{ padding: '12px', textAlign: 'center', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {salaries.map((salarie) => (\r\n                                <tr key={salarie.id} style={{ borderTop: '1px solid #e5e7eb' }}>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <span style={{\r\n                                            padding: '4px 12px',\r\n                                            borderRadius: '20px',\r\n                                            fontSize: '12px',\r\n                                            fontWeight: '500',\r\n                                            backgroundColor: salarie.archive ? '#f3f4f6' : '#d1fae5',\r\n                                            color: salarie.archive ? '#6b7280' : '#065f46'\r\n                                        }}>\r\n                                            {salarie.archive ? '📦 Archivé' : '✅ Actif'}\r\n                                        </span>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px', fontWeight: '500' }}>{salarie.prenom}</td>\r\n                                    <td style={{ padding: '12px' }}>{salarie.nom}</td>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <span style={{\r\n                                            padding: '6px 10px',\r\n                                            background: 'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)',\r\n                                            color: 'white',\r\n                                            borderRadius: '8px',\r\n                                            fontSize: '12px',\r\n                                            fontWeight: 'bold'\r\n                                        }}>\r\n                                            {salarie.initiales || '--'}\r\n                                        </span>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px', textAlign: 'center' }}>\r\n                                        {salarie.archive ? (\r\n                                            <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>\r\n                                                <button\r\n                                                    onClick={() => initierAction(salarie, 'desarchiver')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#10b981',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    📤 Désarchiver\r\n                                                </button>\r\n                                                <button\r\n                                                    onClick={() => initierAction(salarie, 'supprimer')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#ef4444',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    🗑️ Supprimer\r\n                                                </button>\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>\r\n                                                <button\r\n                                                    onClick={() => initierModification(salarie)}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#3b82f6',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    ✏️ Modifier\r\n                                                </button>\r\n                                                <button\r\n                                                    onClick={() => initierAction(salarie, 'archiver')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#6b7280',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    📦 Archiver\r\n                                                </button>\r\n                                            </div>\r\n                                        )}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                ) : (\r\n                    <div style={{ padding: '60px', textAlign: 'center' }}>\r\n                        <p style={{ color: '#9ca3af', fontSize: '16px' }}>\r\n                            {filtreStatut === 'actif' && 'Aucun salarié actif trouvé.'}\r\n                            {filtreStatut === 'archive' && 'Aucun salarié archivé trouvé.'}\r\n                            {filtreStatut === 'tous' && 'Aucun salarié trouvé.'}\r\n                        </p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Modal de confirmation */}\r\n            {showConfirmation && actionEnCours && (\r\n                <div style={{\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    backgroundColor: 'rgba(0,0,0,0.5)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    zIndex: 1000\r\n                }}>\r\n                    <div style={{\r\n                        backgroundColor: 'white',\r\n                        borderRadius: '12px',\r\n                        padding: '25px',\r\n                        maxWidth: '400px',\r\n                        width: '90%',\r\n                        boxShadow: '0 20px 40px rgba(0,0,0,0.2)'\r\n                    }}>\r\n                        <h3 style={{ marginBottom: '15px', color: '#1f2937' }}>\r\n                            Confirmer l'action\r\n                        </h3>\r\n                        <p style={{ marginBottom: '20px', color: '#6b7280', whiteSpace: 'pre-line' }}>\r\n                            {actionEnCours.message}\r\n                        </p>\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                onClick={executerAction}\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    padding: '10px',\r\n                                    backgroundColor: actionEnCours.type === 'supprimer' ? '#ef4444' : '#3b82f6',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontWeight: '500',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                {isLoading ? 'En cours...' : 'Confirmer'}\r\n                            </button>\r\n                            <button\r\n                                onClick={() => {\r\n                                    setShowConfirmation(false)\r\n                                    setActionEnCours(null)\r\n                                }}\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    padding: '10px',\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontWeight: '500',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC - Page titre personnalisé\r\nexport default withAuthAdmin(GestionSalaries, \"Gestion Salariés\")",
          "taille": 38110,
          "lignes": 790,
          "dateModif": "2025-08-28T19:00:40.498Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\nimport { withAuthAdmin } from '../components/withAuthAdmin'\r\n\r\nfunction GestionSalaries({ user, logout, inactivityTime }) {\r\n    const router = useRouter()\r\n    \r\n    // États\r\n    const [salaries, setSalaries] = useState([])\r\n    const [filtreStatut, setFiltreStatut] = useState('actif')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [message, setMessage] = useState('')\r\n    \r\n    // États formulaire ajout\r\n    const [showAjouterForm, setShowAjouterForm] = useState(false)\r\n    const [prenom, setPrenom] = useState('')\r\n    const [nom, setNom] = useState('')\r\n    const [initiales, setInitiales] = useState('')\r\n    \r\n    // États formulaire modification\r\n    const [salarieEnModification, setSalarieEnModification] = useState(null)\r\n    const [showModifierForm, setShowModifierForm] = useState(false)\r\n    \r\n    // États pour confirmation\r\n    const [showConfirmation, setShowConfirmation] = useState(false)\r\n    const [actionEnCours, setActionEnCours] = useState(null)\r\n\r\n    useEffect(() => {\r\n        fetchSalaries()\r\n    }, [filtreStatut])\r\n\r\n    // Auto-génération des initiales\r\n    useEffect(() => {\r\n        if (prenom && nom) {\r\n            const initialesAuto = (prenom.charAt(0) + nom.charAt(0)).toUpperCase()\r\n            setInitiales(initialesAuto)\r\n        }\r\n    }, [prenom, nom])\r\n\r\n    // Fonction pour récupérer les salariés\r\n    const fetchSalaries = async () => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('users')\r\n                .select('*')\r\n                .eq('role', 'salarié')\r\n                .order('nom')\r\n\r\n            if (error) throw error\r\n\r\n            let salariesFiltres = data || []\r\n            \r\n            if (filtreStatut === 'actif') {\r\n                salariesFiltres = data.filter(s => s.archive !== true)\r\n            } else if (filtreStatut === 'archive') {\r\n                salariesFiltres = data.filter(s => s.archive === true)\r\n            }\r\n\r\n            setSalaries(salariesFiltres)\r\n        } catch (error) {\r\n            setMessage('❌ Erreur lors du chargement des salariés')\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    // Fonction pour ajouter un salarié\r\n    const handleSubmitAjout = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!prenom.trim() || !nom.trim()) {\r\n            setMessage('❌ Le prénom et le nom sont obligatoires')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { error } = await supabase.from('users').insert([{\r\n                prenom: prenom.trim(),\r\n                nom: nom.trim(),\r\n                initiales: initiales.trim(),\r\n                role: 'salarié',\r\n                archive: false\r\n            }])\r\n            \r\n            if (error) throw error\r\n            \r\n            setMessage('✅ Salarié ajouté avec succès !')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            \r\n            // Réinitialiser le formulaire\r\n            setPrenom('')\r\n            setNom('')\r\n            setInitiales('')\r\n            setShowAjouterForm(false)\r\n            await fetchSalaries()\r\n            \r\n        } catch (error) {\r\n            setMessage(`❌ Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Fonction pour modifier un salarié\r\n    const handleSubmitModification = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!salarieEnModification || !salarieEnModification.prenom.trim() || !salarieEnModification.nom.trim()) {\r\n            setMessage('❌ Le prénom et le nom sont obligatoires')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            return\r\n        }\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { error } = await supabase\r\n                .from('users')\r\n                .update({ \r\n                    prenom: salarieEnModification.prenom.trim(),\r\n                    nom: salarieEnModification.nom.trim(),\r\n                    initiales: salarieEnModification.initiales.trim(),\r\n                })\r\n                .eq('id', salarieEnModification.id)\r\n            \r\n            if (error) throw error\r\n            \r\n            setMessage('✅ Salarié modifié avec succès !')\r\n            setTimeout(() => setMessage(''), 4000)\r\n            setSalarieEnModification(null)\r\n            setShowModifierForm(false)\r\n            await fetchSalaries()\r\n            \r\n        } catch (error) {\r\n            setMessage(`❌ Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Initier la modification\r\n    const initierModification = (salarie) => {\r\n        setSalarieEnModification({...salarie})\r\n        setShowModifierForm(true)\r\n        setShowAjouterForm(false)\r\n    }\r\n\r\n    // Actions archiver/désarchiver/supprimer\r\n    const initierAction = (salarie, typeAction) => {\r\n        setActionEnCours({\r\n            salarie: salarie,\r\n            type: typeAction,\r\n            message: getMessageConfirmation(salarie, typeAction)\r\n        })\r\n        setShowConfirmation(true)\r\n    }\r\n\r\n    const getMessageConfirmation = (salarie, typeAction) => {\r\n        switch (typeAction) {\r\n            case 'archiver':\r\n                return `Archiver le salarié \"${salarie.prenom} ${salarie.nom}\" ?`\r\n            case 'desarchiver':\r\n                return `Désarchiver le salarié \"${salarie.prenom} ${salarie.nom}\" ?`\r\n            case 'supprimer':\r\n                return `Supprimer définitivement le salarié \"${salarie.prenom} ${salarie.nom}\" ?\\n\\n⚠️ ATTENTION : Action irréversible !`\r\n            default:\r\n                return 'Confirmer cette action ?'\r\n        }\r\n    }\r\n\r\n    const executerAction = async () => {\r\n        if (!actionEnCours) return\r\n\r\n        setIsLoading(true)\r\n        try {\r\n            const { salarie, type } = actionEnCours\r\n\r\n            if (type === 'archiver') {\r\n                await supabase.from('users').update({ archive: true }).eq('id', salarie.id)\r\n                setMessage('✅ Salarié archivé avec succès !')\r\n            } else if (type === 'desarchiver') {\r\n                await supabase.from('users').update({ archive: false }).eq('id', salarie.id)\r\n                setMessage('✅ Salarié désarchivé avec succès !')\r\n            } else if (type === 'supprimer') {\r\n                await supabase.from('users').delete().eq('id', salarie.id)\r\n                setMessage('✅ Salarié supprimé définitivement !')\r\n            }\r\n\r\n            setTimeout(() => setMessage(''), 4000)\r\n            await fetchSalaries()\r\n\r\n        } catch (error) {\r\n            setMessage(`❌ Erreur : ${error.message}`)\r\n            setTimeout(() => setMessage(''), 4000)\r\n        } finally {\r\n            setIsLoading(false)\r\n            setActionEnCours(null)\r\n            setShowConfirmation(false)\r\n        }\r\n    }\r\n\r\n    // Compter les salariés\r\n    const compterSalaries = () => {\r\n        const actifs = salaries.filter(s => !s.archive).length\r\n        const archives = salaries.filter(s => s.archive).length\r\n        return { actifs, archives, total: salaries.length }\r\n    }\r\n\r\n    const stats = compterSalaries()\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            padding: '40px 60px'\r\n        }}>\r\n            {/* Header avec navigation */}\r\n            <div style={{\r\n                backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                borderRadius: '12px',\r\n                padding: '8px 20px',\r\n                marginBottom: '20px',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                backdropFilter: 'blur(10px)'\r\n            }}>\r\n                <nav style={{ fontSize: '14px' }}>\r\n                    <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                    <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                    <span style={{ color: '#8b5cf6', fontWeight: '500' }}>Gestion des Salariés</span>\r\n                </nav>\r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🏠 Accueil\r\n                    </button>\r\n                    \r\n                    <div style={{\r\n                        padding: '6px 12px',\r\n                        borderRadius: '8px',\r\n                        fontSize: '12px',\r\n                        fontWeight: '500',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: '6px',\r\n                        backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n                        color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#d97706' : '#059669',\r\n                        border: `1px solid ${inactivityTime >= 240 ? '#fca5a5' : inactivityTime >= 180 ? '#fcd34d' : '#6ee7b7'}`\r\n                    }}>\r\n                        Status : {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n                                 inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 `🟢 ACTIF`}\r\n                    </div>\r\n                    \r\n                    <button\r\n                        onClick={logout}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🚪 Déconnexion\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Titre principal */}\r\n            <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n                <h1 style={{\r\n                    fontSize: '36px',\r\n                    fontWeight: 'bold',\r\n                    color: 'white',\r\n                    marginBottom: '10px'\r\n                }}>\r\n                    Gestion des Salariés\r\n                </h1>\r\n                <p style={{ color: 'rgba(255,255,255,0.8)', fontSize: '16px' }}>\r\n                    Ajoutez, modifiez et gérez les salariés de l'organisation\r\n                </p>\r\n            </div>\r\n\r\n            {/* Message de notification */}\r\n            {message && (\r\n                <div style={{\r\n                    backgroundColor: message.includes('✅') ? '#d1fae5' : '#fee2e2',\r\n                    color: message.includes('✅') ? '#065f46' : '#991b1b',\r\n                    padding: '15px',\r\n                    borderRadius: '8px',\r\n                    marginBottom: '20px',\r\n                    textAlign: 'center',\r\n                    fontWeight: '500'\r\n                }}>\r\n                    {message}\r\n                </div>\r\n            )}\r\n\r\n            {/* Bouton Ajouter */}\r\n            <div style={{ marginBottom: '20px' }}>\r\n                <button\r\n                    onClick={() => {\r\n                        setShowAjouterForm(!showAjouterForm)\r\n                        setShowModifierForm(false)\r\n                    }}\r\n                    style={{\r\n                        width: '100%',\r\n                        padding: '15px',\r\n                        background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '12px',\r\n                        fontSize: '16px',\r\n                        fontWeight: '600',\r\n                        cursor: 'pointer',\r\n                        transition: 'transform 0.2s'\r\n                    }}\r\n                    onMouseOver={(e) => e.target.style.transform = 'scale(1.02)'}\r\n                    onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\r\n                >\r\n                    ➕ Ajouter un nouveau salarié\r\n                </button>\r\n            </div>\r\n\r\n            {/* Formulaire d'ajout */}\r\n            {showAjouterForm && (\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    marginBottom: '20px',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <h3 style={{ marginBottom: '15px', color: '#1f2937' }}>Nouveau salarié</h3>\r\n                    <div style={{\r\n                        backgroundColor: '#e0f2fe',\r\n                        border: '1px solid #06b6d4',\r\n                        borderRadius: '8px',\r\n                        padding: '12px',\r\n                        marginBottom: '15px'\r\n                    }}>\r\n                        <p style={{ margin: 0, fontSize: '14px', color: '#0891b2' }}>\r\n                            <strong>🔤 Génération automatique d'initiales :</strong> Les initiales sont générées automatiquement à partir de la première lettre du prénom et du nom.\r\n                        </p>\r\n                    </div>\r\n                    <form onSubmit={handleSubmitAjout} style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 150px 150px', gap: '15px', alignItems: 'end' }}>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>Prénom *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={prenom}\r\n                                onChange={(e) => setPrenom(e.target.value)}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px'\r\n                                }}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>Nom *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={nom}\r\n                                onChange={(e) => setNom(e.target.value)}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px'\r\n                                }}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#6b7280' }}>\r\n                                Initiales (auto)\r\n                            </label>\r\n                            <div style={{\r\n                                padding: '10px',\r\n                                background: 'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)',\r\n                                color: 'white',\r\n                                borderRadius: '8px',\r\n                                textAlign: 'center',\r\n                                fontWeight: 'bold',\r\n                                fontSize: '16px'\r\n                            }}>\r\n                                {initiales || '--'}\r\n                            </div>\r\n                        </div>\r\n                        <button\r\n                            type=\"submit\"\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '10px',\r\n                                backgroundColor: isLoading ? '#9ca3af' : '#10b981',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            {isLoading ? '...' : 'Ajouter'}\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            )}\r\n\r\n            {/* Formulaire de modification */}\r\n            {showModifierForm && salarieEnModification && (\r\n                <div style={{\r\n                    backgroundColor: '#fef3c7',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    marginBottom: '20px',\r\n                    border: '2px solid #f59e0b'\r\n                }}>\r\n                    <h3 style={{ marginBottom: '15px', color: '#92400e' }}>\r\n                        ✏️ Modifier : {salarieEnModification.prenom} {salarieEnModification.nom}\r\n                    </h3>\r\n                    <div style={{\r\n                        backgroundColor: '#fbbf24',\r\n                        color: '#92400e',\r\n                        padding: '10px',\r\n                        borderRadius: '6px',\r\n                        marginBottom: '15px',\r\n                        fontSize: '13px'\r\n                    }}>\r\n                        🔄 <strong>Mise à jour automatique :</strong> Les initiales se mettent à jour automatiquement lors de la modification du prénom ou nom.\r\n                    </div>\r\n                    <form onSubmit={handleSubmitModification} style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 150px 150px', gap: '15px', alignItems: 'end' }}>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>Prénom *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={salarieEnModification.prenom}\r\n                                onChange={(e) => {\r\n                                    const newSalarie = {...salarieEnModification, prenom: e.target.value}\r\n                                    const newInitiales = (e.target.value.charAt(0) + newSalarie.nom.charAt(0)).toUpperCase()\r\n                                    setSalarieEnModification({...newSalarie, initiales: newInitiales})\r\n                                }}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #fbbf24',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px'\r\n                                }}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>Nom *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={salarieEnModification.nom}\r\n                                onChange={(e) => {\r\n                                    const newSalarie = {...salarieEnModification, nom: e.target.value}\r\n                                    const newInitiales = (newSalarie.prenom.charAt(0) + e.target.value.charAt(0)).toUpperCase()\r\n                                    setSalarieEnModification({...newSalarie, initiales: newInitiales})\r\n                                }}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '10px',\r\n                                    border: '1px solid #fbbf24',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px'\r\n                                }}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', color: '#92400e' }}>\r\n                                Initiales\r\n                            </label>\r\n                            <div style={{\r\n                                padding: '10px',\r\n                                background: 'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)',\r\n                                color: 'white',\r\n                                borderRadius: '8px',\r\n                                textAlign: 'center',\r\n                                fontWeight: 'bold',\r\n                                fontSize: '16px'\r\n                            }}>\r\n                                {salarieEnModification.initiales || '--'}\r\n                            </div>\r\n                        </div>\r\n                        <button\r\n                            type=\"submit\"\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '10px',\r\n                                backgroundColor: isLoading ? '#9ca3af' : '#f59e0b',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            {isLoading ? '...' : 'Modifier'}\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            )}\r\n\r\n            {/* Tableau avec filtres */}\r\n            <div style={{\r\n                backgroundColor: 'white',\r\n                borderRadius: '12px',\r\n                overflow: 'hidden',\r\n                boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n            }}>\r\n                {/* Header avec filtres et stats */}\r\n                <div style={{\r\n                    padding: '20px',\r\n                    backgroundColor: '#f9fafb',\r\n                    borderBottom: '1px solid #e5e7eb',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center'\r\n                }}>\r\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>\r\n                        <label style={{ fontWeight: '500', color: '#374151' }}>Afficher :</label>\r\n                        <select\r\n                            value={filtreStatut}\r\n                            onChange={(e) => setFiltreStatut(e.target.value)}\r\n                            style={{\r\n                                padding: '8px 12px',\r\n                                border: '1px solid #d1d5db',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            <option value=\"actif\">Salariés actifs</option>\r\n                            <option value=\"archive\">Salariés archivés</option>\r\n                            <option value=\"tous\">Tous les salariés</option>\r\n                        </select>\r\n                    </div>\r\n                    \r\n                    <div style={{ display: 'flex', gap: '20px', fontSize: '14px' }}>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#d1fae5', \r\n                            color: '#065f46',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Actifs: {stats.actifs}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#f3f4f6', \r\n                            color: '#6b7280',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Archivés: {stats.archives}\r\n                        </span>\r\n                        <span style={{ \r\n                            padding: '5px 12px', \r\n                            backgroundColor: '#ede9fe', \r\n                            color: '#7c3aed',\r\n                            borderRadius: '20px',\r\n                            fontWeight: '500'\r\n                        }}>\r\n                            Total: {stats.total}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Tableau */}\r\n                {salaries.length > 0 ? (\r\n                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                        <thead>\r\n                            <tr style={{ backgroundColor: '#f9fafb' }}>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Statut</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Prénom</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Nom</th>\r\n                                <th style={{ padding: '12px', textAlign: 'left', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Initiales</th>\r\n                                <th style={{ padding: '12px', textAlign: 'center', color: '#6b7280', fontWeight: '600', fontSize: '14px' }}>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {salaries.map((salarie) => (\r\n                                <tr key={salarie.id} style={{ borderTop: '1px solid #e5e7eb' }}>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <span style={{\r\n                                            padding: '4px 12px',\r\n                                            borderRadius: '20px',\r\n                                            fontSize: '12px',\r\n                                            fontWeight: '500',\r\n                                            backgroundColor: salarie.archive ? '#f3f4f6' : '#d1fae5',\r\n                                            color: salarie.archive ? '#6b7280' : '#065f46'\r\n                                        }}>\r\n                                            {salarie.archive ? '📦 Archivé' : '✅ Actif'}\r\n                                        </span>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px', fontWeight: '500' }}>{salarie.prenom}</td>\r\n                                    <td style={{ padding: '12px' }}>{salarie.nom}</td>\r\n                                    <td style={{ padding: '12px' }}>\r\n                                        <span style={{\r\n                                            padding: '6px 10px',\r\n                                            background: 'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)',\r\n                                            color: 'white',\r\n                                            borderRadius: '8px',\r\n                                            fontSize: '12px',\r\n                                            fontWeight: 'bold'\r\n                                        }}>\r\n                                            {salarie.initiales || '--'}\r\n                                        </span>\r\n                                    </td>\r\n                                    <td style={{ padding: '12px', textAlign: 'center' }}>\r\n                                        {salarie.archive ? (\r\n                                            <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>\r\n                                                <button\r\n                                                    onClick={() => initierAction(salarie, 'desarchiver')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#10b981',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    📤 Désarchiver\r\n                                                </button>\r\n                                                <button\r\n                                                    onClick={() => initierAction(salarie, 'supprimer')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#ef4444',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    🗑️ Supprimer\r\n                                                </button>\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>\r\n                                                <button\r\n                                                    onClick={() => initierModification(salarie)}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#3b82f6',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    ✏️ Modifier\r\n                                                </button>\r\n                                                <button\r\n                                                    onClick={() => initierAction(salarie, 'archiver')}\r\n                                                    style={{\r\n                                                        padding: '6px 12px',\r\n                                                        backgroundColor: '#6b7280',\r\n                                                        color: 'white',\r\n                                                        border: 'none',\r\n                                                        borderRadius: '6px',\r\n                                                        fontSize: '12px',\r\n                                                        cursor: 'pointer'\r\n                                                    }}\r\n                                                >\r\n                                                    📦 Archiver\r\n                                                </button>\r\n                                            </div>\r\n                                        )}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                ) : (\r\n                    <div style={{ padding: '60px', textAlign: 'center' }}>\r\n                        <p style={{ color: '#9ca3af', fontSize: '16px' }}>\r\n                            {filtreStatut === 'actif' && 'Aucun salarié actif trouvé.'}\r\n                            {filtreStatut === 'archive' && 'Aucun salarié archivé trouvé.'}\r\n                            {filtreStatut === 'tous' && 'Aucun salarié trouvé.'}\r\n                        </p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Modal de confirmation */}\r\n            {showConfirmation && actionEnCours && (\r\n                <div style={{\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    backgroundColor: 'rgba(0,0,0,0.5)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    zIndex: 1000\r\n                }}>\r\n                    <div style={{\r\n                        backgroundColor: 'white',\r\n                        borderRadius: '12px',\r\n                        padding: '25px',\r\n                        maxWidth: '400px',\r\n                        width: '90%',\r\n                        boxShadow: '0 20px 40px rgba(0,0,0,0.2)'\r\n                    }}>\r\n                        <h3 style={{ marginBottom: '15px', color: '#1f2937' }}>\r\n                            Confirmer l'action\r\n                        </h3>\r\n                        <p style={{ marginBottom: '20px', color: '#6b7280', whiteSpace: 'pre-line' }}>\r\n                            {actionEnCours.message}\r\n                        </p>\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                onClick={executerAction}\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    padding: '10px',\r\n                                    backgroundColor: actionEnCours.type === 'supprimer' ? '#ef4444' : '#3b82f6',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontWeight: '500',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                {isLoading ? 'En cours...' : 'Confirmer'}\r\n                            </button>\r\n                            <button\r\n                                onClick={() => {\r\n                                    setShowConfirmation(false)\r\n                                    setActionEnCours(null)\r\n                                }}\r\n                                disabled={isLoading}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    padding: '10px',\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontWeight: '500',\r\n                                    cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                                }}\r\n                            >\r\n                                Annuler\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC - Page titre personnalisé\r\nexport default withAuthAdmin(GestionSalaries, \"Gestion Salariés\")",
          "taille": 38110,
          "lignes": 790,
          "dateModif": "2025-08-22T06:19:39.602Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/index.js",
      "resultat": {
        "statut": "SIMILAIRE",
        "local": {
          "existe": true,
          "contenu": "import { useEffect, useState } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\nimport MessagerieSafeWrapper from '../components/MessagerieSafeWrapper'\r\n\r\n// Composant Skeleton Loading pour anti-flickering\r\nconst SkeletonLoader = () => {\r\n  const shimmer = {\r\n    background: 'linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%)',\r\n    backgroundSize: '200% 100%',\r\n    animation: 'shimmer 1.5s infinite'\r\n  }\r\n\r\n  return (\r\n    <div style={{\r\n      minHeight: '100vh',\r\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n      padding: '20px'\r\n    }}>\r\n      <style jsx>{`\r\n        @keyframes shimmer {\r\n          0% { background-position: -200% 0; }\r\n          100% { background-position: 200% 0; }\r\n        }\r\n      `}</style>\r\n      \r\n      {/* Header Skeleton */}\r\n      <div style={{\r\n        backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n        borderRadius: '12px',\r\n        padding: '20px',\r\n        marginBottom: '20px',\r\n        boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n      }}>\r\n        <div style={{ flex: 1 }}>\r\n          <div style={{ \r\n            height: '28px', \r\n            width: '300px', \r\n            borderRadius: '4px', \r\n            marginBottom: '10px',\r\n            ...shimmer \r\n          }} />\r\n          <div style={{ \r\n            height: '16px', \r\n            width: '200px', \r\n            borderRadius: '4px',\r\n            ...shimmer \r\n          }} />\r\n        </div>\r\n        <div style={{ \r\n          height: '40px', \r\n          width: '120px', \r\n          borderRadius: '8px',\r\n          ...shimmer \r\n        }} />\r\n      </div>\r\n\r\n      {/* Main Content Skeleton */}\r\n      <div style={{\r\n        display: 'grid',\r\n        gridTemplateColumns: '350px 1fr',\r\n        gap: '20px',\r\n        minHeight: 'calc(100vh - 200px)'\r\n      }}>\r\n        \r\n        {/* Left Column Skeleton */}\r\n        <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>\r\n          {[1, 2].map(section => (\r\n            <div key={section} style={{\r\n              backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n              borderRadius: '12px',\r\n              padding: '20px',\r\n              boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n              flex: 1\r\n            }}>\r\n              <div style={{ \r\n                height: '20px', \r\n                width: '120px', \r\n                borderRadius: '4px', \r\n                marginBottom: '15px',\r\n                ...shimmer \r\n              }} />\r\n              {[1, 2, 3, 4].map(item => (\r\n                <div key={item} style={{ \r\n                  height: '48px', \r\n                  borderRadius: '8px', \r\n                  marginBottom: '10px',\r\n                  ...shimmer \r\n                }} />\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Right Column Skeleton (Messagerie) */}\r\n        <div style={{\r\n          backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n          borderRadius: '12px',\r\n          boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n          padding: '20px'\r\n        }}>\r\n          <div style={{ \r\n            height: '20px', \r\n            width: '150px', \r\n            borderRadius: '4px', \r\n            marginBottom: '20px',\r\n            ...shimmer \r\n          }} />\r\n          <div style={{ \r\n            height: '300px', \r\n            borderRadius: '8px', \r\n            marginBottom: '15px',\r\n            ...shimmer \r\n          }} />\r\n          <div style={{ \r\n            height: '40px', \r\n            borderRadius: '8px',\r\n            ...shimmer \r\n          }} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Dashboard() {\r\n  const [user, setUser] = useState(null)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [sessionValid, setSessionValid] = useState(false)\r\n  const [inactivityTime, setInactivityTime] = useState(0) // Temps d'inactivité en secondes\r\n  const [lastHeartbeat, setLastHeartbeat] = useState(null) // Dernier heartbeat\r\n  const router = useRouter()\r\n\r\n  const verifyAdminSession = async (supabaseUser) => {\r\n    try {\r\n      // Vérifier la session dans la Table d'Émeraude\r\n      const { data: adminSession, error } = await supabase\r\n        .from('admin_sessions')\r\n        .select('*')\r\n        .eq('admin_user_id', supabaseUser.id)\r\n        .eq('is_active', true)\r\n        .single()\r\n\r\n      if (error || !adminSession) {\r\n        console.warn('❌ Session admin non trouvée dans la Table d\\'Émeraude')\r\n        return false\r\n      }\r\n\r\n      // Vérifier si la session n'est pas expirée (exemple: 24h)\r\n      const sessionStart = new Date(adminSession.session_start)\r\n      const now = new Date()\r\n      const hoursDiff = (now - sessionStart) / (1000 * 60 * 60)\r\n\r\n      if (hoursDiff > 24) {\r\n        console.warn('❌ Session expirée (plus de 24h)')\r\n        // Désactiver la session expirée\r\n        await supabase\r\n          .from('admin_sessions')\r\n          .update({ is_active: false })\r\n          .eq('id', adminSession.id)\r\n        return false\r\n      }\r\n\r\n      // Mettre à jour le heartbeat\r\n      await supabase\r\n        .from('admin_sessions')\r\n        .update({ heartbeat: new Date().toISOString() })\r\n        .eq('id', adminSession.id)\r\n\r\n      console.log('✅ Session admin valide dans la Table d\\'Émeraude')\r\n      return true\r\n\r\n    } catch (error) {\r\n      console.error('Erreur vérification session admin:', error)\r\n      return false\r\n    }\r\n  }\r\n\r\n  const checkAuthentication = async () => {\r\n    try {\r\n      setIsLoading(true)\r\n\r\n      // Attendre la restauration automatique de session Supabase (important lors du refresh)\r\n      await new Promise(resolve => setTimeout(resolve, 500))\r\n\r\n      // 1. Vérifier l'authentification Supabase\r\n      const { data: { user: supabaseUser }, error } = await supabase.auth.getUser()\r\n\r\n      if (error || !supabaseUser) {\r\n        console.warn('❌ Pas d\\'utilisateur Supabase authentifié après attente')\r\n        router.push('/login')\r\n        return\r\n      }\r\n\r\n      // 2. Vérifier la session admin dans la Table d'Émeraude\r\n      const sessionIsValid = await verifyAdminSession(supabaseUser)\r\n      \r\n      if (!sessionIsValid) {\r\n        console.warn('❌ Session admin invalide, redirection vers login')\r\n        router.push('/login')\r\n        return\r\n      }\r\n\r\n      // 3. Utilisateur valide - configurer l'état\r\n      setUser({\r\n        id: supabaseUser.id,\r\n        email: supabaseUser.email,\r\n        role: 'admin',\r\n        nom: 'Admin',\r\n        prenom: 'ACLEF',\r\n        dateConnexion: new Date().toISOString()\r\n      })\r\n\r\n      setSessionValid(true)\r\n      console.log('✅ Accès autorisé à la première salle pour:', supabaseUser.email)\r\n\r\n    } catch (error) {\r\n      console.error('Erreur vérification authentification:', error)\r\n      router.push('/login')\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkAuthentication()\r\n\r\n    // 💡 HEARTBEAT INTELLIGENT : Seulement sur activité réelle\r\n    let lastActivity = Date.now()\r\n    \r\n    // Détecter l'activité utilisateur\r\n    const resetActivity = () => {\r\n      lastActivity = Date.now()\r\n      setInactivityTime(0) // Reset du compteur\r\n      console.log('🟢 Activité détectée, gardien éveillé')\r\n    }\r\n    \r\n    // 🚪 DÉCONNEXION FORCÉE À LA FERMETURE (mais pas au refresh)\r\n    const handlePageUnload = async (e) => {\r\n      try {\r\n        // Distinguer refresh (F5) vs fermeture réelle de l'onglet\r\n        const isRefresh = e.persisted || (window.performance && window.performance.navigation.type === 1)\r\n        \r\n        if (isRefresh) {\r\n          console.log('🔄 Refresh détecté - Session préservée')\r\n          return // Ne pas désactiver la session sur refresh\r\n        }\r\n        \r\n        console.log('🚪 Fermeture réelle détectée - Déconnexion forcée...')\r\n        \r\n        const { data: { user: currentUser } } = await supabase.auth.getUser()\r\n        if (currentUser) {\r\n          // Désactiver la session seulement en cas de fermeture réelle\r\n          await supabase\r\n            .from('admin_sessions')\r\n            .update({ is_active: false })\r\n            .eq('admin_user_id', currentUser.id)\r\n            .eq('is_active', true)\r\n          \r\n          console.log('✅ Session désactivée à la fermeture réelle')\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur déconnexion fermeture:', error)\r\n      }\r\n    }\r\n\r\n    // Écouter seulement la fermeture réelle (pas beforeunload qui se déclenche au refresh)\r\n    window.addEventListener('unload', handlePageUnload)\r\n\r\n    // Événements d'activité\r\n    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click']\r\n    activityEvents.forEach(event => {\r\n      document.addEventListener(event, resetActivity, true)\r\n    })\r\n\r\n    // COMPTEUR D'INACTIVITÉ (toutes les secondes)\r\n    const inactivityCounter = setInterval(() => {\r\n      const inactiveSeconds = Math.floor((Date.now() - lastActivity) / 1000)\r\n      setInactivityTime(inactiveSeconds)\r\n      \r\n      if (inactiveSeconds >= 240) { // 240 secondes = 4 minutes (alerte avant 5min)\r\n        console.log('😴 GARDIEN ENDORMI DÉTECTÉ ! Expulsion imminente...')\r\n      }\r\n    }, 1000)\r\n\r\n    // HEARTBEAT seulement si activité récente\r\n    const heartbeatInterval = setInterval(async () => {\r\n      try {\r\n        const { data: { user: currentUser } } = await supabase.auth.getUser()\r\n        if (currentUser && sessionValid) {\r\n          const inactiveTime = (Date.now() - lastActivity) / 1000 / 60 // minutes\r\n          \r\n          if (inactiveTime < 1) { // Actif dans la dernière minute\r\n            const now = new Date().toISOString()\r\n            await supabase\r\n              .from('admin_sessions')\r\n              .update({ heartbeat: now })\r\n              .eq('admin_user_id', currentUser.id)\r\n              .eq('is_active', true)\r\n            \r\n            setLastHeartbeat(now)\r\n            console.log('💡 Heartbeat gardien actif envoyé')\r\n          } else {\r\n            console.log('😴 Pas de heartbeat - gardien inactif depuis', inactiveTime.toFixed(1), 'minutes')\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur heartbeat:', error)\r\n      }\r\n    }, 30000) // 30 secondes\r\n\r\n    // 😴 EXPULSION DIRECTE : Basée sur l'inactivité locale (toutes les 5 secondes)\r\n    const surveillantInterval = setInterval(async () => {\r\n      try {\r\n        const { data: { user: currentUser } } = await supabase.auth.getUser()\r\n        if (currentUser && sessionValid) {\r\n          // VÉRIFICATION DIRECTE de l'inactivité locale (pas la DB !)\r\n          const inactiveTime = (Date.now() - lastActivity) / 1000 / 60 // minutes\r\n          \r\n          if (inactiveTime > 5) { // 🎯 5 MINUTES\r\n            console.log('😴 INACTIVITÉ LOCALE DÉTECTÉE ! Auto-expulsion en cours...')\r\n            \r\n            // Auto-expulsion\r\n            await supabase\r\n              .from('admin_sessions')\r\n              .update({ is_active: false })\r\n              .eq('admin_user_id', currentUser.id)\r\n            \r\n            // Déconnexion forcée\r\n            await supabase.auth.signOut()\r\n            \r\n            alert('⚔️ EXPULSION : Vous avez été déconnecté pour inactivité (5 minutes) !')\r\n            router.push('/login')\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur surveillant:', error)\r\n      }\r\n    }, 5000) // 5 secondes\r\n\r\n    // Écouter les changements d'état d'authentification\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\r\n      async (event, session) => {\r\n        if (event === 'SIGNED_OUT' || !session) {\r\n          console.log('🚪 Déconnexion détectée')\r\n          clearInterval(heartbeatInterval)\r\n          clearInterval(surveillantInterval)\r\n          router.push('/login')\r\n        }\r\n      }\r\n    )\r\n\r\n    return () => {\r\n      subscription.unsubscribe()\r\n      clearInterval(heartbeatInterval)\r\n      clearInterval(surveillantInterval)\r\n      clearInterval(inactivityCounter)\r\n      \r\n      // Nettoyer les événements d'activité\r\n      activityEvents.forEach(event => {\r\n        document.removeEventListener(event, resetActivity, true)\r\n      })\r\n      \r\n      // Nettoyer les événements de fermeture\r\n      window.removeEventListener('unload', handlePageUnload)\r\n    }\r\n  }, [router, sessionValid])\r\n\r\n  const logout = async () => {\r\n    try {\r\n      // 1. Désactiver la session admin\r\n      const { data: { user: currentUser } } = await supabase.auth.getUser()\r\n      if (currentUser) {\r\n        await supabase\r\n          .from('admin_sessions')\r\n          .update({ is_active: false })\r\n          .eq('admin_user_id', currentUser.id)\r\n          .eq('is_active', true)\r\n      }\r\n\r\n      // 2. Déconnexion Supabase\r\n      await supabase.auth.signOut()\r\n\r\n      // 3. Nettoyage localStorage (compatibility)\r\n      localStorage.removeItem('admin_connecte')\r\n      localStorage.removeItem('admin_session_token')\r\n\r\n      console.log('✅ Déconnexion complète')\r\n\r\n      // 4. Redirection\r\n      router.push('/login')\r\n\r\n    } catch (error) {\r\n      console.error('Erreur déconnexion:', error)\r\n      // Forcer la redirection même en cas d'erreur\r\n      router.push('/login')\r\n    }\r\n  }\r\n\r\n  // État de chargement avec skeleton anti-flickering\r\n  if (isLoading) {\r\n    return <SkeletonLoader />\r\n  }\r\n\r\n  // État de redirection avec skeleton pour éviter flickering\r\n  if (!user || !sessionValid) {\r\n    return <SkeletonLoader />\r\n  }\r\n\r\n  const planningItems = [\r\n    { title: \"Planning Coordonnateur\", icon: \"📅\", href: \"/planning-coordo\" },\r\n    { title: \"Valider Changements\", icon: \"✅\", href: \"/valider-changements\" },\r\n    { title: \"Prise Contrôle Formateur\", icon: \"🎮\", href: \"/prise-controle-formateur\" },\r\n    { title: \"Valider Planning Type\", icon: \"👨‍🏫\", href: \"/planning-type-formateurs\" },\r\n    { title: \"Planning Type Apprenants\", icon: \"👨‍🎓\", href: \"/planning-type-apprenants\" }\r\n  ]\r\n\r\n  const prototypesItems = [\r\n    { \r\n      title: \"🧪 Test V1 - Composant Séparé\", \r\n      icon: \"🎯\", \r\n      href: \"/planning-test-v1\",\r\n      description: \"MenuApprenants externe • Séparation responsabilités\"\r\n    },\r\n    { \r\n      title: \"🧪 Test V2 - Intégration Directe\", \r\n      icon: \"⚡\", \r\n      href: \"/planning-test-v2\",\r\n      description: \"Logique intégrée • Contrôle direct\"\r\n    },\r\n    { \r\n      title: \"🧪 Test V3 - Mixte Optimisé\", \r\n      icon: \"🚀\", \r\n      href: \"/planning-test-v3\",\r\n      description: \"Cache intelligent • Performance maximale\"\r\n    },\r\n    { \r\n      title: \"🧪 Test Algorithme Filtrage\", \r\n      icon: \"🔍\", \r\n      href: \"/planning-test\",\r\n      description: \"Interface test triple filtrage\"\r\n    }\r\n  ]\r\n\r\n  const gestionItems = [\r\n    { title: \"Gestion Formateurs\", icon: \"👨‍🏫\", href: \"/gestion-formateurs\" },\r\n    { title: \"Gestion Apprenants\", icon: \"👨‍🎓\", href: \"/gestion-apprenants\" },\r\n    { title: \"Gestion Salariés\", icon: \"👷‍♂️\", href: \"/gestion-salaries\" },\r\n    { title: \"Gestion Lieux\", icon: \"📍\", href: \"/gestion-lieux\" }\r\n  ]\r\n\r\n\r\n  return (\r\n    <div style={{\r\n      minHeight: '100vh',\r\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n      padding: '20px',\r\n      opacity: 1,\r\n      transition: 'opacity 0.3s ease-in-out'\r\n    }}>\r\n      <div style={{\r\n        backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n        borderRadius: '12px',\r\n        padding: '20px',\r\n        marginBottom: '20px',\r\n        boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n      }}>\r\n        <div>\r\n          <h1 style={{\r\n            fontSize: '28px',\r\n            fontWeight: 'bold',\r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            WebkitBackgroundClip: 'text',\r\n            WebkitTextFillColor: 'transparent',\r\n            margin: 0\r\n          }}>\r\n            ACLEF Planning Administration\r\n          </h1>\r\n          <p style={{ color: '#6b7280', marginTop: '5px' }}>\r\n            Bienvenue {user?.email ? user.email.split('@')[0].charAt(0).toUpperCase() + user.email.split('@')[0].slice(1) : 'ACLEF Admin'}\r\n            <span style={{ \r\n              marginLeft: '5px', \r\n              fontSize: '12px', \r\n              color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#f59e0b' : '#10b981',\r\n              backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n              padding: '2px 6px',\r\n              borderRadius: '4px',\r\n              fontWeight: 'bold'\r\n            }}>\r\n              {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n               inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n               inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n               `🟢 Actif`}\r\n            </span>\r\n          </p>\r\n        </div>\r\n        <button\r\n          onClick={logout}\r\n          style={{\r\n            padding: '10px 20px',\r\n            background: 'linear-gradient(135deg, #dc2626 0%, #991b1b 100%)',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '8px',\r\n            fontSize: '14px',\r\n            fontWeight: '600',\r\n            cursor: 'pointer',\r\n            transition: 'transform 0.2s'\r\n          }}\r\n          onMouseOver={(e) => e.target.style.transform = 'scale(1.05)'}\r\n          onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\r\n        >\r\n          🚪 Déconnexion\r\n        </button>\r\n      </div>\r\n\r\n      {/* Layout Principal : Planning + Gestion | Messagerie */}\r\n      <div style={{\r\n        display: 'grid',\r\n        gridTemplateColumns: '350px 1fr',\r\n        gap: '20px',\r\n        minHeight: 'calc(100vh - 200px)'\r\n      }}>\r\n        \r\n        {/* Colonne 1 : Planning + Gestion */}\r\n        <div style={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          gap: '20px'\r\n        }}>\r\n          \r\n          {/* Bloc Planning */}\r\n          <div style={{\r\n            backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n            borderRadius: '12px',\r\n            padding: '20px',\r\n            boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n            flex: 1\r\n          }}>\r\n            <h2 style={{\r\n              fontSize: '18px',\r\n              fontWeight: 'bold',\r\n              color: '#3b82f6',\r\n              marginBottom: '15px',\r\n              paddingBottom: '10px',\r\n              borderBottom: '2px solid #3b82f620'\r\n            }}>\r\n              📅 Planning\r\n            </h2>\r\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n              {planningItems.map((item, idx) => (\r\n                <button\r\n                  key={idx}\r\n                  onClick={() => router.push(item.href)}\r\n                  style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    gap: '10px',\r\n                    padding: '12px',\r\n                    backgroundColor: 'white',\r\n                    border: '1px solid #3b82f630',\r\n                    borderRadius: '8px',\r\n                    cursor: 'pointer',\r\n                    transition: 'all 0.2s',\r\n                    textAlign: 'left'\r\n                  }}\r\n                  onMouseOver={(e) => {\r\n                    e.currentTarget.style.backgroundColor = '#3b82f610'\r\n                    e.currentTarget.style.transform = 'translateX(5px)'\r\n                  }}\r\n                  onMouseOut={(e) => {\r\n                    e.currentTarget.style.backgroundColor = 'white'\r\n                    e.currentTarget.style.transform = 'translateX(0)'\r\n                  }}\r\n                >\r\n                  <span style={{ fontSize: '20px' }}>{item.icon}</span>\r\n                  <span style={{ \r\n                    fontSize: '14px', \r\n                    fontWeight: '500',\r\n                    color: '#374151'\r\n                  }}>\r\n                    {item.title}\r\n                  </span>\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Bloc Gestion */}\r\n          <div style={{\r\n            backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n            borderRadius: '12px',\r\n            padding: '20px',\r\n            boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n            flex: 1\r\n          }}>\r\n            <h2 style={{\r\n              fontSize: '18px',\r\n              fontWeight: 'bold',\r\n              color: '#10b981',\r\n              marginBottom: '15px',\r\n              paddingBottom: '10px',\r\n              borderBottom: '2px solid #10b98120'\r\n            }}>\r\n              👥 Gestion\r\n            </h2>\r\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n              {gestionItems.map((item, idx) => (\r\n                <button\r\n                  key={idx}\r\n                  onClick={() => router.push(item.href)}\r\n                  style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    gap: '10px',\r\n                    padding: '12px',\r\n                    backgroundColor: 'white',\r\n                    border: '1px solid #10b98130',\r\n                    borderRadius: '8px',\r\n                    cursor: 'pointer',\r\n                    transition: 'all 0.2s',\r\n                    textAlign: 'left'\r\n                  }}\r\n                  onMouseOver={(e) => {\r\n                    e.currentTarget.style.backgroundColor = '#10b98110'\r\n                    e.currentTarget.style.transform = 'translateX(5px)'\r\n                  }}\r\n                  onMouseOut={(e) => {\r\n                    e.currentTarget.style.backgroundColor = 'white'\r\n                    e.currentTarget.style.transform = 'translateX(0)'\r\n                  }}\r\n                >\r\n                  <span style={{ fontSize: '20px' }}>{item.icon}</span>\r\n                  <span style={{ \r\n                    fontSize: '14px', \r\n                    fontWeight: '500',\r\n                    color: '#374151'\r\n                  }}>\r\n                    {item.title}\r\n                  </span>\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Bloc Prototypes Tests */}\r\n          <div style={{\r\n            backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n            borderRadius: '12px',\r\n            padding: '20px',\r\n            boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n            flex: 1\r\n          }}>\r\n            <h2 style={{\r\n              fontSize: '18px',\r\n              fontWeight: 'bold',\r\n              color: '#7c3aed',\r\n              marginBottom: '15px',\r\n              paddingBottom: '10px',\r\n              borderBottom: '2px solid #7c3aed20'\r\n            }}>\r\n              🧪 Tests Prototypes Apprenants\r\n            </h2>\r\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\r\n              {prototypesItems.map((item, idx) => (\r\n                <button\r\n                  key={idx}\r\n                  onClick={() => router.push(item.href)}\r\n                  style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    gap: '4px',\r\n                    padding: '12px',\r\n                    backgroundColor: 'white',\r\n                    border: '1px solid #7c3aed30',\r\n                    borderRadius: '8px',\r\n                    cursor: 'pointer',\r\n                    transition: 'all 0.2s',\r\n                    textAlign: 'left'\r\n                  }}\r\n                  onMouseOver={(e) => {\r\n                    e.currentTarget.style.backgroundColor = '#7c3aed10'\r\n                    e.currentTarget.style.transform = 'translateX(3px)'\r\n                    e.currentTarget.style.borderColor = '#7c3aed60'\r\n                  }}\r\n                  onMouseOut={(e) => {\r\n                    e.currentTarget.style.backgroundColor = 'white'\r\n                    e.currentTarget.style.transform = 'translateX(0)'\r\n                    e.currentTarget.style.borderColor = '#7c3aed30'\r\n                  }}\r\n                >\r\n                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                    <span style={{ fontSize: '16px' }}>{item.icon}</span>\r\n                    <span style={{ \r\n                      fontSize: '12px', \r\n                      fontWeight: '600',\r\n                      color: '#374151'\r\n                    }}>\r\n                      {item.title}\r\n                    </span>\r\n                  </div>\r\n                  {item.description && (\r\n                    <span style={{\r\n                      fontSize: '10px',\r\n                      color: '#6b7280',\r\n                      marginLeft: '24px',\r\n                      fontStyle: 'italic'\r\n                    }}>\r\n                      {item.description}\r\n                    </span>\r\n                  )}\r\n                </button>\r\n              ))}\r\n            </div>\r\n            <div style={{\r\n              marginTop: '15px',\r\n              padding: '10px',\r\n              backgroundColor: 'rgba(124, 58, 237, 0.05)',\r\n              borderRadius: '6px',\r\n              border: '1px solid rgba(124, 58, 237, 0.1)'\r\n            }}>\r\n              <div style={{\r\n                fontSize: '11px',\r\n                fontWeight: '600',\r\n                color: '#7c3aed',\r\n                marginBottom: '4px'\r\n              }}>\r\n                📊 Phase de Test Comparatif\r\n              </div>\r\n              <div style={{\r\n                fontSize: '10px',\r\n                color: '#6b7280',\r\n                lineHeight: '1.4'\r\n              }}>\r\n                Comparaison de 3 approches d'intégration des apprenants dans le planning coordinator pour choisir la meilleure architecture.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Colonne 2 : Messagerie - MessagerieSafeWrapper */}\r\n        <div style={{\r\n          backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n          borderRadius: '12px',\r\n          boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n          overflow: 'hidden'\r\n        }}>\r\n          <MessagerieSafeWrapper \r\n            user={user}\r\n            logout={logout}\r\n            inactivityTime={inactivityTime}\r\n            router={router}\r\n          />\r\n        </div>\r\n\r\n      </div>\r\n\r\n      {/* Footer */}\r\n      <div style={{\r\n        textAlign: 'center',\r\n        marginTop: '20px',\r\n        color: 'white',\r\n        fontSize: '14px',\r\n        opacity: 0.8\r\n      }}>\r\n        ACLEF Planning v8.0\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard",
          "taille": 27063,
          "lignes": 778,
          "dateModif": "2025-08-29T18:27:54.314Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useEffect, useState } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\nimport MessagerieSafeWrapper from '../components/MessagerieSafeWrapper'\r\n\r\n// Composant Skeleton Loading pour anti-flickering\r\nconst SkeletonLoader = () => {\r\n  const shimmer = {\r\n    background: 'linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%)',\r\n    backgroundSize: '200% 100%',\r\n    animation: 'shimmer 1.5s infinite'\r\n  }\r\n\r\n  return (\r\n    <div style={{\r\n      minHeight: '100vh',\r\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n      padding: '20px'\r\n    }}>\r\n      <style jsx>{`\r\n        @keyframes shimmer {\r\n          0% { background-position: -200% 0; }\r\n          100% { background-position: 200% 0; }\r\n        }\r\n      `}</style>\r\n      \r\n      {/* Header Skeleton */}\r\n      <div style={{\r\n        backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n        borderRadius: '12px',\r\n        padding: '20px',\r\n        marginBottom: '20px',\r\n        boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n      }}>\r\n        <div style={{ flex: 1 }}>\r\n          <div style={{ \r\n            height: '28px', \r\n            width: '300px', \r\n            borderRadius: '4px', \r\n            marginBottom: '10px',\r\n            ...shimmer \r\n          }} />\r\n          <div style={{ \r\n            height: '16px', \r\n            width: '200px', \r\n            borderRadius: '4px',\r\n            ...shimmer \r\n          }} />\r\n        </div>\r\n        <div style={{ \r\n          height: '40px', \r\n          width: '120px', \r\n          borderRadius: '8px',\r\n          ...shimmer \r\n        }} />\r\n      </div>\r\n\r\n      {/* Main Content Skeleton */}\r\n      <div style={{\r\n        display: 'grid',\r\n        gridTemplateColumns: '350px 1fr',\r\n        gap: '20px',\r\n        minHeight: 'calc(100vh - 200px)'\r\n      }}>\r\n        \r\n        {/* Left Column Skeleton */}\r\n        <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>\r\n          {[1, 2].map(section => (\r\n            <div key={section} style={{\r\n              backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n              borderRadius: '12px',\r\n              padding: '20px',\r\n              boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n              flex: 1\r\n            }}>\r\n              <div style={{ \r\n                height: '20px', \r\n                width: '120px', \r\n                borderRadius: '4px', \r\n                marginBottom: '15px',\r\n                ...shimmer \r\n              }} />\r\n              {[1, 2, 3, 4].map(item => (\r\n                <div key={item} style={{ \r\n                  height: '48px', \r\n                  borderRadius: '8px', \r\n                  marginBottom: '10px',\r\n                  ...shimmer \r\n                }} />\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Right Column Skeleton (Messagerie) */}\r\n        <div style={{\r\n          backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n          borderRadius: '12px',\r\n          boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n          padding: '20px'\r\n        }}>\r\n          <div style={{ \r\n            height: '20px', \r\n            width: '150px', \r\n            borderRadius: '4px', \r\n            marginBottom: '20px',\r\n            ...shimmer \r\n          }} />\r\n          <div style={{ \r\n            height: '300px', \r\n            borderRadius: '8px', \r\n            marginBottom: '15px',\r\n            ...shimmer \r\n          }} />\r\n          <div style={{ \r\n            height: '40px', \r\n            borderRadius: '8px',\r\n            ...shimmer \r\n          }} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Dashboard() {\r\n  const [user, setUser] = useState(null)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [sessionValid, setSessionValid] = useState(false)\r\n  const [inactivityTime, setInactivityTime] = useState(0) // Temps d'inactivité en secondes\r\n  const [lastHeartbeat, setLastHeartbeat] = useState(null) // Dernier heartbeat\r\n  const router = useRouter()\r\n\r\n  const verifyAdminSession = async (supabaseUser) => {\r\n    try {\r\n      // Vérifier la session dans la Table d'Émeraude\r\n      const { data: adminSession, error } = await supabase\r\n        .from('admin_sessions')\r\n        .select('*')\r\n        .eq('admin_user_id', supabaseUser.id)\r\n        .eq('is_active', true)\r\n        .single()\r\n\r\n      if (error || !adminSession) {\r\n        console.warn('❌ Session admin non trouvée dans la Table d\\'Émeraude')\r\n        return false\r\n      }\r\n\r\n      // Vérifier si la session n'est pas expirée (exemple: 24h)\r\n      const sessionStart = new Date(adminSession.session_start)\r\n      const now = new Date()\r\n      const hoursDiff = (now - sessionStart) / (1000 * 60 * 60)\r\n\r\n      if (hoursDiff > 24) {\r\n        console.warn('❌ Session expirée (plus de 24h)')\r\n        // Désactiver la session expirée\r\n        await supabase\r\n          .from('admin_sessions')\r\n          .update({ is_active: false })\r\n          .eq('id', adminSession.id)\r\n        return false\r\n      }\r\n\r\n      // Mettre à jour le heartbeat\r\n      await supabase\r\n        .from('admin_sessions')\r\n        .update({ heartbeat: new Date().toISOString() })\r\n        .eq('id', adminSession.id)\r\n\r\n      console.log('✅ Session admin valide dans la Table d\\'Émeraude')\r\n      return true\r\n\r\n    } catch (error) {\r\n      console.error('Erreur vérification session admin:', error)\r\n      return false\r\n    }\r\n  }\r\n\r\n  const checkAuthentication = async () => {\r\n    try {\r\n      setIsLoading(true)\r\n\r\n      // Attendre la restauration automatique de session Supabase (important lors du refresh)\r\n      await new Promise(resolve => setTimeout(resolve, 500))\r\n\r\n      // 1. Vérifier l'authentification Supabase\r\n      const { data: { user: supabaseUser }, error } = await supabase.auth.getUser()\r\n\r\n      if (error || !supabaseUser) {\r\n        console.warn('❌ Pas d\\'utilisateur Supabase authentifié après attente')\r\n        router.push('/login')\r\n        return\r\n      }\r\n\r\n      // 2. Vérifier la session admin dans la Table d'Émeraude\r\n      const sessionIsValid = await verifyAdminSession(supabaseUser)\r\n      \r\n      if (!sessionIsValid) {\r\n        console.warn('❌ Session admin invalide, redirection vers login')\r\n        router.push('/login')\r\n        return\r\n      }\r\n\r\n      // 3. Utilisateur valide - configurer l'état\r\n      setUser({\r\n        id: supabaseUser.id,\r\n        email: supabaseUser.email,\r\n        role: 'admin',\r\n        nom: 'Admin',\r\n        prenom: 'ACLEF',\r\n        dateConnexion: new Date().toISOString()\r\n      })\r\n\r\n      setSessionValid(true)\r\n      console.log('✅ Accès autorisé à la première salle pour:', supabaseUser.email)\r\n\r\n    } catch (error) {\r\n      console.error('Erreur vérification authentification:', error)\r\n      router.push('/login')\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkAuthentication()\r\n\r\n    // 💡 HEARTBEAT INTELLIGENT : Seulement sur activité réelle\r\n    let lastActivity = Date.now()\r\n    \r\n    // Détecter l'activité utilisateur\r\n    const resetActivity = () => {\r\n      lastActivity = Date.now()\r\n      setInactivityTime(0) // Reset du compteur\r\n      console.log('🟢 Activité détectée, gardien éveillé')\r\n    }\r\n    \r\n    // 🚪 DÉCONNEXION FORCÉE À LA FERMETURE (mais pas au refresh)\r\n    const handlePageUnload = async (e) => {\r\n      try {\r\n        // Distinguer refresh (F5) vs fermeture réelle de l'onglet\r\n        const isRefresh = e.persisted || (window.performance && window.performance.navigation.type === 1)\r\n        \r\n        if (isRefresh) {\r\n          console.log('🔄 Refresh détecté - Session préservée')\r\n          return // Ne pas désactiver la session sur refresh\r\n        }\r\n        \r\n        console.log('🚪 Fermeture réelle détectée - Déconnexion forcée...')\r\n        \r\n        const { data: { user: currentUser } } = await supabase.auth.getUser()\r\n        if (currentUser) {\r\n          // Désactiver la session seulement en cas de fermeture réelle\r\n          await supabase\r\n            .from('admin_sessions')\r\n            .update({ is_active: false })\r\n            .eq('admin_user_id', currentUser.id)\r\n            .eq('is_active', true)\r\n          \r\n          console.log('✅ Session désactivée à la fermeture réelle')\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur déconnexion fermeture:', error)\r\n      }\r\n    }\r\n\r\n    // Écouter seulement la fermeture réelle (pas beforeunload qui se déclenche au refresh)\r\n    window.addEventListener('unload', handlePageUnload)\r\n\r\n    // Événements d'activité\r\n    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click']\r\n    activityEvents.forEach(event => {\r\n      document.addEventListener(event, resetActivity, true)\r\n    })\r\n\r\n    // COMPTEUR D'INACTIVITÉ (toutes les secondes)\r\n    const inactivityCounter = setInterval(() => {\r\n      const inactiveSeconds = Math.floor((Date.now() - lastActivity) / 1000)\r\n      setInactivityTime(inactiveSeconds)\r\n      \r\n      if (inactiveSeconds >= 240) { // 240 secondes = 4 minutes (alerte avant 5min)\r\n        console.log('😴 GARDIEN ENDORMI DÉTECTÉ ! Expulsion imminente...')\r\n      }\r\n    }, 1000)\r\n\r\n    // HEARTBEAT seulement si activité récente\r\n    const heartbeatInterval = setInterval(async () => {\r\n      try {\r\n        const { data: { user: currentUser } } = await supabase.auth.getUser()\r\n        if (currentUser && sessionValid) {\r\n          const inactiveTime = (Date.now() - lastActivity) / 1000 / 60 // minutes\r\n          \r\n          if (inactiveTime < 1) { // Actif dans la dernière minute\r\n            const now = new Date().toISOString()\r\n            await supabase\r\n              .from('admin_sessions')\r\n              .update({ heartbeat: now })\r\n              .eq('admin_user_id', currentUser.id)\r\n              .eq('is_active', true)\r\n            \r\n            setLastHeartbeat(now)\r\n            console.log('💡 Heartbeat gardien actif envoyé')\r\n          } else {\r\n            console.log('😴 Pas de heartbeat - gardien inactif depuis', inactiveTime.toFixed(1), 'minutes')\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur heartbeat:', error)\r\n      }\r\n    }, 30000) // 30 secondes\r\n\r\n    // 😴 EXPULSION DIRECTE : Basée sur l'inactivité locale (toutes les 5 secondes)\r\n    const surveillantInterval = setInterval(async () => {\r\n      try {\r\n        const { data: { user: currentUser } } = await supabase.auth.getUser()\r\n        if (currentUser && sessionValid) {\r\n          // VÉRIFICATION DIRECTE de l'inactivité locale (pas la DB !)\r\n          const inactiveTime = (Date.now() - lastActivity) / 1000 / 60 // minutes\r\n          \r\n          if (inactiveTime > 5) { // 🎯 5 MINUTES\r\n            console.log('😴 INACTIVITÉ LOCALE DÉTECTÉE ! Auto-expulsion en cours...')\r\n            \r\n            // Auto-expulsion\r\n            await supabase\r\n              .from('admin_sessions')\r\n              .update({ is_active: false })\r\n              .eq('admin_user_id', currentUser.id)\r\n            \r\n            // Déconnexion forcée\r\n            await supabase.auth.signOut()\r\n            \r\n            alert('⚔️ EXPULSION : Vous avez été déconnecté pour inactivité (5 minutes) !')\r\n            router.push('/login')\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur surveillant:', error)\r\n      }\r\n    }, 5000) // 5 secondes\r\n\r\n    // Écouter les changements d'état d'authentification\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\r\n      async (event, session) => {\r\n        if (event === 'SIGNED_OUT' || !session) {\r\n          console.log('🚪 Déconnexion détectée')\r\n          clearInterval(heartbeatInterval)\r\n          clearInterval(surveillantInterval)\r\n          router.push('/login')\r\n        }\r\n      }\r\n    )\r\n\r\n    return () => {\r\n      subscription.unsubscribe()\r\n      clearInterval(heartbeatInterval)\r\n      clearInterval(surveillantInterval)\r\n      clearInterval(inactivityCounter)\r\n      \r\n      // Nettoyer les événements d'activité\r\n      activityEvents.forEach(event => {\r\n        document.removeEventListener(event, resetActivity, true)\r\n      })\r\n      \r\n      // Nettoyer les événements de fermeture\r\n      window.removeEventListener('unload', handlePageUnload)\r\n    }\r\n  }, [router, sessionValid])\r\n\r\n  const logout = async () => {\r\n    try {\r\n      // 1. Désactiver la session admin\r\n      const { data: { user: currentUser } } = await supabase.auth.getUser()\r\n      if (currentUser) {\r\n        await supabase\r\n          .from('admin_sessions')\r\n          .update({ is_active: false })\r\n          .eq('admin_user_id', currentUser.id)\r\n          .eq('is_active', true)\r\n      }\r\n\r\n      // 2. Déconnexion Supabase\r\n      await supabase.auth.signOut()\r\n\r\n      // 3. Nettoyage localStorage (compatibility)\r\n      localStorage.removeItem('admin_connecte')\r\n      localStorage.removeItem('admin_session_token')\r\n\r\n      console.log('✅ Déconnexion complète')\r\n\r\n      // 4. Redirection\r\n      router.push('/login')\r\n\r\n    } catch (error) {\r\n      console.error('Erreur déconnexion:', error)\r\n      // Forcer la redirection même en cas d'erreur\r\n      router.push('/login')\r\n    }\r\n  }\r\n\r\n  // État de chargement avec skeleton anti-flickering\r\n  if (isLoading) {\r\n    return <SkeletonLoader />\r\n  }\r\n\r\n  // État de redirection avec skeleton pour éviter flickering\r\n  if (!user || !sessionValid) {\r\n    return <SkeletonLoader />\r\n  }\r\n\r\n  const planningItems = [\r\n    { title: \"Planning Coordonnateur\", icon: \"📅\", href: \"/planning-coordo\" },\r\n    { title: \"Valider Changements\", icon: \"✅\", href: \"/valider-changements\" },\r\n    { title: \"Prise Contrôle Formateur\", icon: \"🎮\", href: \"/prise-controle-formateur\" },\r\n    { title: \"Valider Planning Type\", icon: \"👨‍🏫\", href: \"/planning-type-formateurs\" }\r\n  ]\r\n\r\n  const gestionItems = [\r\n    { title: \"Gestion Formateurs\", icon: \"👨‍🏫\", href: \"/gestion-formateurs\" },\r\n    { title: \"Gestion Apprenants\", icon: \"👨‍🎓\", href: \"/gestion-apprenants\" },\r\n    { title: \"Gestion Salariés\", icon: \"👷‍♂️\", href: \"/gestion-salaries\" },\r\n    { title: \"Gestion Lieux\", icon: \"📍\", href: \"/gestion-lieux\" }\r\n  ]\r\n\r\n\r\n  return (\r\n    <div style={{\r\n      minHeight: '100vh',\r\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n      padding: '20px',\r\n      opacity: 1,\r\n      transition: 'opacity 0.3s ease-in-out'\r\n    }}>\r\n      <div style={{\r\n        backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n        borderRadius: '12px',\r\n        padding: '20px',\r\n        marginBottom: '20px',\r\n        boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n      }}>\r\n        <div>\r\n          <h1 style={{\r\n            fontSize: '28px',\r\n            fontWeight: 'bold',\r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            WebkitBackgroundClip: 'text',\r\n            WebkitTextFillColor: 'transparent',\r\n            margin: 0\r\n          }}>\r\n            ACLEF Planning Administration\r\n          </h1>\r\n          <p style={{ color: '#6b7280', marginTop: '5px' }}>\r\n            Bienvenue {user?.email ? user.email.split('@')[0].charAt(0).toUpperCase() + user.email.split('@')[0].slice(1) : 'ACLEF Admin'}\r\n            <span style={{ \r\n              marginLeft: '5px', \r\n              fontSize: '12px', \r\n              color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#f59e0b' : '#10b981',\r\n              backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n              padding: '2px 6px',\r\n              borderRadius: '4px',\r\n              fontWeight: 'bold'\r\n            }}>\r\n              {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n               inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n               inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n               `🟢 Actif`}\r\n            </span>\r\n          </p>\r\n        </div>\r\n        <button\r\n          onClick={logout}\r\n          style={{\r\n            padding: '10px 20px',\r\n            background: 'linear-gradient(135deg, #dc2626 0%, #991b1b 100%)',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '8px',\r\n            fontSize: '14px',\r\n            fontWeight: '600',\r\n            cursor: 'pointer',\r\n            transition: 'transform 0.2s'\r\n          }}\r\n          onMouseOver={(e) => e.target.style.transform = 'scale(1.05)'}\r\n          onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\r\n        >\r\n          🚪 Déconnexion\r\n        </button>\r\n      </div>\r\n\r\n      {/* Layout Principal : Planning + Gestion | Messagerie */}\r\n      <div style={{\r\n        display: 'grid',\r\n        gridTemplateColumns: '350px 1fr',\r\n        gap: '20px',\r\n        minHeight: 'calc(100vh - 200px)'\r\n      }}>\r\n        \r\n        {/* Colonne 1 : Planning + Gestion */}\r\n        <div style={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          gap: '20px'\r\n        }}>\r\n          \r\n          {/* Bloc Planning */}\r\n          <div style={{\r\n            backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n            borderRadius: '12px',\r\n            padding: '20px',\r\n            boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n            flex: 1\r\n          }}>\r\n            <h2 style={{\r\n              fontSize: '18px',\r\n              fontWeight: 'bold',\r\n              color: '#3b82f6',\r\n              marginBottom: '15px',\r\n              paddingBottom: '10px',\r\n              borderBottom: '2px solid #3b82f620'\r\n            }}>\r\n              📅 Planning\r\n            </h2>\r\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n              {planningItems.map((item, idx) => (\r\n                <button\r\n                  key={idx}\r\n                  onClick={() => router.push(item.href)}\r\n                  style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    gap: '10px',\r\n                    padding: '12px',\r\n                    backgroundColor: 'white',\r\n                    border: '1px solid #3b82f630',\r\n                    borderRadius: '8px',\r\n                    cursor: 'pointer',\r\n                    transition: 'all 0.2s',\r\n                    textAlign: 'left'\r\n                  }}\r\n                  onMouseOver={(e) => {\r\n                    e.currentTarget.style.backgroundColor = '#3b82f610'\r\n                    e.currentTarget.style.transform = 'translateX(5px)'\r\n                  }}\r\n                  onMouseOut={(e) => {\r\n                    e.currentTarget.style.backgroundColor = 'white'\r\n                    e.currentTarget.style.transform = 'translateX(0)'\r\n                  }}\r\n                >\r\n                  <span style={{ fontSize: '20px' }}>{item.icon}</span>\r\n                  <span style={{ \r\n                    fontSize: '14px', \r\n                    fontWeight: '500',\r\n                    color: '#374151'\r\n                  }}>\r\n                    {item.title}\r\n                  </span>\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Bloc Gestion */}\r\n          <div style={{\r\n            backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n            borderRadius: '12px',\r\n            padding: '20px',\r\n            boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n            flex: 1\r\n          }}>\r\n            <h2 style={{\r\n              fontSize: '18px',\r\n              fontWeight: 'bold',\r\n              color: '#10b981',\r\n              marginBottom: '15px',\r\n              paddingBottom: '10px',\r\n              borderBottom: '2px solid #10b98120'\r\n            }}>\r\n              👥 Gestion\r\n            </h2>\r\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n              {gestionItems.map((item, idx) => (\r\n                <button\r\n                  key={idx}\r\n                  onClick={() => router.push(item.href)}\r\n                  style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    gap: '10px',\r\n                    padding: '12px',\r\n                    backgroundColor: 'white',\r\n                    border: '1px solid #10b98130',\r\n                    borderRadius: '8px',\r\n                    cursor: 'pointer',\r\n                    transition: 'all 0.2s',\r\n                    textAlign: 'left'\r\n                  }}\r\n                  onMouseOver={(e) => {\r\n                    e.currentTarget.style.backgroundColor = '#10b98110'\r\n                    e.currentTarget.style.transform = 'translateX(5px)'\r\n                  }}\r\n                  onMouseOut={(e) => {\r\n                    e.currentTarget.style.backgroundColor = 'white'\r\n                    e.currentTarget.style.transform = 'translateX(0)'\r\n                  }}\r\n                >\r\n                  <span style={{ fontSize: '20px' }}>{item.icon}</span>\r\n                  <span style={{ \r\n                    fontSize: '14px', \r\n                    fontWeight: '500',\r\n                    color: '#374151'\r\n                  }}>\r\n                    {item.title}\r\n                  </span>\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Colonne 2 : Messagerie - MessagerieSafeWrapper */}\r\n        <div style={{\r\n          backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n          borderRadius: '12px',\r\n          boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n          overflow: 'hidden'\r\n        }}>\r\n          <MessagerieSafeWrapper \r\n            user={user}\r\n            logout={logout}\r\n            inactivityTime={inactivityTime}\r\n            router={router}\r\n          />\r\n        </div>\r\n\r\n      </div>\r\n\r\n      {/* Footer */}\r\n      <div style={{\r\n        textAlign: 'center',\r\n        marginTop: '20px',\r\n        color: 'white',\r\n        fontSize: '14px',\r\n        opacity: 0.8\r\n      }}>\r\n        ACLEF Planning v8.0\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard",
          "taille": 22526,
          "lignes": 656,
          "dateModif": "2025-08-28T18:19:16.628Z",
          "erreur": null
        },
        "identique": false,
        "diffTaille": 4537,
        "diffLignes": 122,
        "pourcentageSimilarite": 83,
        "message": "🟡 SIMILAIRE - Similarité: 83% (±4537 bytes, ±122 lignes)"
      }
    },
    {
      "fichier": "pages/login-temporaire.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\n\r\nexport default function LoginTemporaire() {\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [gardienActuel, setGardienActuel] = useState('')\r\n    const router = useRouter()\r\n\r\n    useEffect(() => {\r\n        // Récupérer le nom du gardien depuis l'URL\r\n        const { gardien } = router.query\r\n        if (gardien) {\r\n            setGardienActuel(gardien)\r\n        }\r\n    }, [router.query])\r\n\r\n    const handleReessayer = () => {\r\n        setIsLoading(true)\r\n        \r\n        // Simulation d'attente pour faire \"naturel\"\r\n        setTimeout(() => {\r\n            setIsLoading(false)\r\n            router.push('/login')\r\n        }, 1500)\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            backgroundColor: '#f3f4f6',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            padding: '20px'\r\n        }}>\r\n            <div style={{\r\n                backgroundColor: 'white',\r\n                padding: '40px',\r\n                borderRadius: '8px',\r\n                boxShadow: '0 4px 12px rgba(0,0,0,0.1)',\r\n                width: '100%',\r\n                maxWidth: '450px',\r\n                textAlign: 'center'\r\n            }}>\r\n                {/* Icône de maintenance */}\r\n                <div style={{\r\n                    fontSize: '64px',\r\n                    marginBottom: '20px'\r\n                }}>\r\n                    🔧\r\n                </div>\r\n\r\n                <h1 style={{\r\n                    fontSize: '24px',\r\n                    fontWeight: 'bold',\r\n                    color: '#374151',\r\n                    marginBottom: '15px'\r\n                }}>\r\n                    Service temporairement indisponible\r\n                </h1>\r\n\r\n                <p style={{\r\n                    color: '#6b7280',\r\n                    fontSize: '16px',\r\n                    lineHeight: '1.5',\r\n                    marginBottom: '25px'\r\n                }}>\r\n                    {gardienActuel ? (\r\n                        <>\r\n                            Notre système est actuellement utilisé par <strong>\"{gardienActuel}\"</strong>.\r\n                            <br />\r\n                            Veuillez patienter quelques instants puis réessayer.\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            Notre système est actuellement utilisé par un autre utilisateur.\r\n                            <br />\r\n                            Veuillez patienter quelques instants puis réessayer.\r\n                        </>\r\n                    )}\r\n                </p>\r\n\r\n                <div style={{\r\n                    backgroundColor: '#fef3c7',\r\n                    border: '1px solid #f59e0b',\r\n                    borderRadius: '6px',\r\n                    padding: '15px',\r\n                    marginBottom: '25px'\r\n                }}>\r\n                    <div style={{\r\n                        fontSize: '14px',\r\n                        color: '#92400e',\r\n                        fontWeight: '500'\r\n                    }}>\r\n                        💡 Information\r\n                    </div>\r\n                    <div style={{\r\n                        fontSize: '13px',\r\n                        color: '#92400e',\r\n                        marginTop: '5px'\r\n                    }}>\r\n                        Un seul utilisateur peut être connecté à la fois pour des raisons de sécurité.\r\n                    </div>\r\n                </div>\r\n\r\n                <button\r\n                    onClick={handleReessayer}\r\n                    disabled={isLoading}\r\n                    style={{\r\n                        width: '100%',\r\n                        padding: '12px 20px',\r\n                        backgroundColor: isLoading ? '#d1d5db' : '#3b82f6',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '6px',\r\n                        fontSize: '16px',\r\n                        fontWeight: '600',\r\n                        cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                        transition: 'background-color 0.2s',\r\n                        marginBottom: '15px'\r\n                    }}\r\n                >\r\n                    {isLoading ? 'Redirection...' : 'Réessayer la connexion'}\r\n                </button>\r\n\r\n                <div style={{\r\n                    fontSize: '12px',\r\n                    color: '#9ca3af'\r\n                }}>\r\n                    Si le problème persiste, contactez votre administrateur\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}",
          "taille": 4755,
          "lignes": 135,
          "dateModif": "2025-08-28T19:00:40.525Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\n\r\nexport default function LoginTemporaire() {\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [gardienActuel, setGardienActuel] = useState('')\r\n    const router = useRouter()\r\n\r\n    useEffect(() => {\r\n        // Récupérer le nom du gardien depuis l'URL\r\n        const { gardien } = router.query\r\n        if (gardien) {\r\n            setGardienActuel(gardien)\r\n        }\r\n    }, [router.query])\r\n\r\n    const handleReessayer = () => {\r\n        setIsLoading(true)\r\n        \r\n        // Simulation d'attente pour faire \"naturel\"\r\n        setTimeout(() => {\r\n            setIsLoading(false)\r\n            router.push('/login')\r\n        }, 1500)\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            backgroundColor: '#f3f4f6',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            padding: '20px'\r\n        }}>\r\n            <div style={{\r\n                backgroundColor: 'white',\r\n                padding: '40px',\r\n                borderRadius: '8px',\r\n                boxShadow: '0 4px 12px rgba(0,0,0,0.1)',\r\n                width: '100%',\r\n                maxWidth: '450px',\r\n                textAlign: 'center'\r\n            }}>\r\n                {/* Icône de maintenance */}\r\n                <div style={{\r\n                    fontSize: '64px',\r\n                    marginBottom: '20px'\r\n                }}>\r\n                    🔧\r\n                </div>\r\n\r\n                <h1 style={{\r\n                    fontSize: '24px',\r\n                    fontWeight: 'bold',\r\n                    color: '#374151',\r\n                    marginBottom: '15px'\r\n                }}>\r\n                    Service temporairement indisponible\r\n                </h1>\r\n\r\n                <p style={{\r\n                    color: '#6b7280',\r\n                    fontSize: '16px',\r\n                    lineHeight: '1.5',\r\n                    marginBottom: '25px'\r\n                }}>\r\n                    {gardienActuel ? (\r\n                        <>\r\n                            Notre système est actuellement utilisé par <strong>\"{gardienActuel}\"</strong>.\r\n                            <br />\r\n                            Veuillez patienter quelques instants puis réessayer.\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            Notre système est actuellement utilisé par un autre utilisateur.\r\n                            <br />\r\n                            Veuillez patienter quelques instants puis réessayer.\r\n                        </>\r\n                    )}\r\n                </p>\r\n\r\n                <div style={{\r\n                    backgroundColor: '#fef3c7',\r\n                    border: '1px solid #f59e0b',\r\n                    borderRadius: '6px',\r\n                    padding: '15px',\r\n                    marginBottom: '25px'\r\n                }}>\r\n                    <div style={{\r\n                        fontSize: '14px',\r\n                        color: '#92400e',\r\n                        fontWeight: '500'\r\n                    }}>\r\n                        💡 Information\r\n                    </div>\r\n                    <div style={{\r\n                        fontSize: '13px',\r\n                        color: '#92400e',\r\n                        marginTop: '5px'\r\n                    }}>\r\n                        Un seul utilisateur peut être connecté à la fois pour des raisons de sécurité.\r\n                    </div>\r\n                </div>\r\n\r\n                <button\r\n                    onClick={handleReessayer}\r\n                    disabled={isLoading}\r\n                    style={{\r\n                        width: '100%',\r\n                        padding: '12px 20px',\r\n                        backgroundColor: isLoading ? '#d1d5db' : '#3b82f6',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '6px',\r\n                        fontSize: '16px',\r\n                        fontWeight: '600',\r\n                        cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                        transition: 'background-color 0.2s',\r\n                        marginBottom: '15px'\r\n                    }}\r\n                >\r\n                    {isLoading ? 'Redirection...' : 'Réessayer la connexion'}\r\n                </button>\r\n\r\n                <div style={{\r\n                    fontSize: '12px',\r\n                    color: '#9ca3af'\r\n                }}>\r\n                    Si le problème persiste, contactez votre administrateur\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}",
          "taille": 4755,
          "lignes": 135,
          "dateModif": "2025-08-18T13:10:01.917Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/login.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\n\r\nexport default function LoginAdmin() {\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const router = useRouter()\r\n\r\n    const generateSessionToken = () => {\r\n        const timestamp = Date.now()\r\n        const randomString = Math.random().toString(36).substring(2, 15)\r\n        return `session_${timestamp}_${randomString}`\r\n    }\r\n\r\n    const createAdminSession = async (user) => {\r\n        try {\r\n            const sessionToken = generateSessionToken()\r\n            \r\n            // 🛡️ VERROU SACRÉ : Vérifier qu'AUCUN AUTRE gardien n'est connecté\r\n            const { data: otherActiveSessions, error: checkError } = await supabase\r\n                .from('admin_sessions')\r\n                .select('*')\r\n                .neq('admin_user_id', user.id)  // ← DIFFÉRENT de l'utilisateur actuel\r\n                .eq('is_active', true)\r\n\r\n            if (checkError) {\r\n                console.error('Erreur vérification sessions:', checkError)\r\n                throw new Error('Erreur de vérification des accès')\r\n            }\r\n\r\n            // 🚨 SI UN AUTRE GARDIEN EST DÉJÀ CONNECTÉ → VÉRIFIER S'IL DORT\r\n            if (otherActiveSessions && otherActiveSessions.length > 0) {\r\n                const autreGardien = otherActiveSessions[0]\r\n                const nomAutreGardien = autreGardien.email_admin\r\n                \r\n                // ⏰ Vérifier si le gardien dort (inactif depuis plus de 1 minute - TEST)\r\n                const dernierHeartbeat = new Date(autreGardien.heartbeat)\r\n                const maintenant = new Date()\r\n                const minutesInactif = (maintenant - dernierHeartbeat) / (1000 * 60)\r\n                \r\n                console.log(`🕐 Gardien ${nomAutreGardien} inactif depuis ${minutesInactif.toFixed(1)} minutes`)\r\n                \r\n                if (minutesInactif > 1) { // TEST : 1 minute\r\n                    console.log('😴 Gardien endormi détecté, expulsion en cours...')\r\n                    \r\n                    // 🚪 EXPULSION DOUCE du gardien endormi\r\n                    await supabase\r\n                        .from('admin_sessions')\r\n                        .update({ is_active: false })\r\n                        .eq('id', autreGardien.id)\r\n                    \r\n                    console.log('✅ Gardien endormi expulsé, accès autorisé')\r\n                    // Continuer l'authentification normalement\r\n                } else {\r\n                    console.warn('🚨 ACCÈS REFUSÉ : Un autre gardien est déjà dans le temple:', nomAutreGardien)\r\n                    console.log('🚪 Redirection vers la fausse porte...')\r\n                    \r\n                    // 🚪 REDIRECTION SILENCIEUSE vers la fausse porte avec info gardien\r\n                    router.push(`/login-temporaire?gardien=${encodeURIComponent(nomAutreGardien)}`)\r\n                    return null  // Arrêter l'exécution sans erreur\r\n                }\r\n            }\r\n\r\n            // ✅ AUCUN AUTRE GARDIEN → Vérifier les sessions de CET utilisateur\r\n            const { data: existingSessions } = await supabase\r\n                .from('admin_sessions')\r\n                .select('*')\r\n                .eq('admin_user_id', user.id)\r\n                .eq('is_active', true)\r\n\r\n            if (existingSessions && existingSessions.length > 0) {\r\n                // Mettre à jour la session existante de ce gardien\r\n                const { error: updateError } = await supabase\r\n                    .from('admin_sessions')\r\n                    .update({\r\n                        heartbeat: new Date().toISOString(),\r\n                        session_token: sessionToken\r\n                    })\r\n                    .eq('admin_user_id', user.id)\r\n                    .eq('is_active', true)\r\n\r\n                if (updateError) {\r\n                    console.error('Erreur mise à jour session:', updateError)\r\n                    throw new Error('Erreur de mise à jour de session')\r\n                }\r\n\r\n                console.log('✅ Session gardien mise à jour:', user.email)\r\n            } else {\r\n                // Créer une nouvelle session pour ce gardien\r\n                const { error: insertError } = await supabase\r\n                    .from('admin_sessions')\r\n                    .insert({\r\n                        admin_user_id: user.id,\r\n                        email_admin: user.email,\r\n                        session_token: sessionToken,\r\n                        session_start: new Date().toISOString(),\r\n                        heartbeat: new Date().toISOString(),\r\n                        is_active: true\r\n                    })\r\n\r\n                if (insertError) {\r\n                    console.error('Erreur création session:', insertError)\r\n                    throw new Error('Erreur de création de session')\r\n                }\r\n\r\n                console.log('✅ Nouvelle session gardien créée:', user.email)\r\n            }\r\n\r\n            // Stocker dans localStorage (compatibility)\r\n            localStorage.setItem('admin_connecte', JSON.stringify({\r\n                id: user.id,\r\n                email: user.email,\r\n                role: 'admin',\r\n                nom: 'Admin',\r\n                prenom: 'ACLEF',\r\n                dateConnexion: new Date().toISOString(),\r\n                sessionToken: sessionToken\r\n            }))\r\n\r\n            // Stocker le token de session\r\n            localStorage.setItem('admin_session_token', sessionToken)\r\n\r\n            return sessionToken\r\n\r\n        } catch (error) {\r\n            console.error('Erreur gestion session:', error)\r\n            throw error\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setIsLoading(true)\r\n        setErrorMessage('')\r\n\r\n        try {\r\n            // Authentification Supabase\r\n            const { data, error } = await supabase.auth.signInWithPassword({\r\n                email: email,\r\n                password: password\r\n            })\r\n\r\n            if (error) {\r\n                throw new Error(error.message)\r\n            }\r\n\r\n            if (!data.user) {\r\n                throw new Error('Échec de l\\'authentification')\r\n            }\r\n\r\n            // 🛡️ CRÉER/VÉRIFIER SESSION AVEC VERROU SACRÉ\r\n            const sessionResult = await createAdminSession(data.user)\r\n            \r\n            // Si redirection vers fausse porte, arrêter ici\r\n            if (sessionResult === null) {\r\n                return // Redirection en cours, ne pas continuer\r\n            }\r\n\r\n            console.log('✅ Authentification réussie et accès autorisé pour:', data.user.email)\r\n\r\n            // Redirection vers dashboard admin\r\n            router.push('/')\r\n\r\n        } catch (error) {\r\n            console.error('Erreur authentification:', error)\r\n            \r\n            // Messages d'erreur plus conviviaux\r\n            let errorMsg = 'Erreur de connexion'\r\n            if (error.message.includes('Invalid login credentials')) {\r\n                errorMsg = 'Email ou mot de passe incorrect'\r\n            } else if (error.message.includes('Email not confirmed')) {\r\n                errorMsg = 'Email non confirmé'\r\n            } else if (error.message.includes('Too many requests')) {\r\n                errorMsg = 'Trop de tentatives. Attendez quelques minutes.'\r\n            } else {\r\n                errorMsg = 'Erreur de connexion. Veuillez réessayer.'\r\n            }\r\n            \r\n            // Afficher seulement dans la zone d'erreur, pas en popup\r\n            setErrorMessage(errorMsg)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            backgroundColor: '#f3f4f6',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            padding: '20px'\r\n        }}>\r\n            <div style={{\r\n                backgroundColor: 'white',\r\n                padding: '40px',\r\n                borderRadius: '8px',\r\n                boxShadow: '0 4px 12px rgba(0,0,0,0.1)',\r\n                width: '100%',\r\n                maxWidth: '400px'\r\n            }}>\r\n                <h1 style={{\r\n                    textAlign: 'center',\r\n                    marginBottom: '30px',\r\n                    color: '#333',\r\n                    fontSize: '24px'\r\n                }}>\r\n                    ACLEF Planning - Admin\r\n                </h1>\r\n\r\n                <form onSubmit={handleSubmit}>\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            marginBottom: '5px',\r\n                            fontWeight: 'bold',\r\n                            color: '#555'\r\n                        }}>\r\n                            Email\r\n                        </label>\r\n                        <input\r\n                            type=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            required\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '10px',\r\n                                border: '1px solid #ddd',\r\n                                borderRadius: '4px',\r\n                                fontSize: '16px',\r\n                                backgroundColor: isLoading ? '#f3f4f6' : 'white'\r\n                            }}\r\n                            placeholder=\"\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            marginBottom: '5px',\r\n                            fontWeight: 'bold',\r\n                            color: '#555'\r\n                        }}>\r\n                            Mot de passe\r\n                        </label>\r\n                        <input\r\n                            type=\"password\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            required\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '10px',\r\n                                border: '1px solid #ddd',\r\n                                borderRadius: '4px',\r\n                                fontSize: '16px',\r\n                                backgroundColor: isLoading ? '#f3f4f6' : 'white'\r\n                            }}\r\n                            placeholder=\"••••••••\"\r\n                        />\r\n                    </div>\r\n\r\n                    {errorMessage && (\r\n                        <div style={{\r\n                            backgroundColor: '#fee2e2',\r\n                            color: '#991b1b',\r\n                            padding: '15px',\r\n                            borderRadius: '4px',\r\n                            marginBottom: '20px',\r\n                            fontSize: '13px',\r\n                            lineHeight: '1.4',\r\n                            border: '1px solid #fecaca',\r\n                            whiteSpace: 'pre-line'\r\n                        }}>\r\n                            {errorMessage}\r\n                        </div>\r\n                    )}\r\n\r\n                    <button\r\n                        type=\"submit\"\r\n                        disabled={isLoading}\r\n                        style={{\r\n                            width: '100%',\r\n                            padding: '12px',\r\n                            backgroundColor: isLoading ? '#ccc' : '#3b82f6',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '4px',\r\n                            fontSize: '16px',\r\n                            cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                            transition: 'background-color 0.2s'\r\n                        }}\r\n                    >\r\n                        {isLoading ? 'Connexion...' : 'CONNEXION'}\r\n                    </button>\r\n                </form>\r\n\r\n                <div style={{\r\n                    marginTop: '20px',\r\n                    padding: '10px',\r\n                    backgroundColor: '#f0f9ff',\r\n                    borderRadius: '4px',\r\n                    fontSize: '12px',\r\n                    color: '#0369a1',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    <strong>Administrateurs autorisés :</strong><br />\r\n                    albena@aclef.fr, fanny@aclef.fr,<br />\r\n                    mathieu@aclef.fr, sarah@aclef.fr\r\n                    <br />\r\n                    <small style={{ color: '#dc2626', fontSize: '10px', fontWeight: 'bold' }}>\r\n                        UN SEUL ADMINISTRATEUR À LA FOIS !\r\n                    </small>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}",
          "taille": 13485,
          "lignes": 325,
          "dateModif": "2025-08-28T19:00:40.539Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\n\r\nexport default function LoginAdmin() {\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const router = useRouter()\r\n\r\n    const generateSessionToken = () => {\r\n        const timestamp = Date.now()\r\n        const randomString = Math.random().toString(36).substring(2, 15)\r\n        return `session_${timestamp}_${randomString}`\r\n    }\r\n\r\n    const createAdminSession = async (user) => {\r\n        try {\r\n            const sessionToken = generateSessionToken()\r\n            \r\n            // 🛡️ VERROU SACRÉ : Vérifier qu'AUCUN AUTRE gardien n'est connecté\r\n            const { data: otherActiveSessions, error: checkError } = await supabase\r\n                .from('admin_sessions')\r\n                .select('*')\r\n                .neq('admin_user_id', user.id)  // ← DIFFÉRENT de l'utilisateur actuel\r\n                .eq('is_active', true)\r\n\r\n            if (checkError) {\r\n                console.error('Erreur vérification sessions:', checkError)\r\n                throw new Error('Erreur de vérification des accès')\r\n            }\r\n\r\n            // 🚨 SI UN AUTRE GARDIEN EST DÉJÀ CONNECTÉ → VÉRIFIER S'IL DORT\r\n            if (otherActiveSessions && otherActiveSessions.length > 0) {\r\n                const autreGardien = otherActiveSessions[0]\r\n                const nomAutreGardien = autreGardien.email_admin\r\n                \r\n                // ⏰ Vérifier si le gardien dort (inactif depuis plus de 1 minute - TEST)\r\n                const dernierHeartbeat = new Date(autreGardien.heartbeat)\r\n                const maintenant = new Date()\r\n                const minutesInactif = (maintenant - dernierHeartbeat) / (1000 * 60)\r\n                \r\n                console.log(`🕐 Gardien ${nomAutreGardien} inactif depuis ${minutesInactif.toFixed(1)} minutes`)\r\n                \r\n                if (minutesInactif > 1) { // TEST : 1 minute\r\n                    console.log('😴 Gardien endormi détecté, expulsion en cours...')\r\n                    \r\n                    // 🚪 EXPULSION DOUCE du gardien endormi\r\n                    await supabase\r\n                        .from('admin_sessions')\r\n                        .update({ is_active: false })\r\n                        .eq('id', autreGardien.id)\r\n                    \r\n                    console.log('✅ Gardien endormi expulsé, accès autorisé')\r\n                    // Continuer l'authentification normalement\r\n                } else {\r\n                    console.warn('🚨 ACCÈS REFUSÉ : Un autre gardien est déjà dans le temple:', nomAutreGardien)\r\n                    console.log('🚪 Redirection vers la fausse porte...')\r\n                    \r\n                    // 🚪 REDIRECTION SILENCIEUSE vers la fausse porte avec info gardien\r\n                    router.push(`/login-temporaire?gardien=${encodeURIComponent(nomAutreGardien)}`)\r\n                    return null  // Arrêter l'exécution sans erreur\r\n                }\r\n            }\r\n\r\n            // ✅ AUCUN AUTRE GARDIEN → Vérifier les sessions de CET utilisateur\r\n            const { data: existingSessions } = await supabase\r\n                .from('admin_sessions')\r\n                .select('*')\r\n                .eq('admin_user_id', user.id)\r\n                .eq('is_active', true)\r\n\r\n            if (existingSessions && existingSessions.length > 0) {\r\n                // Mettre à jour la session existante de ce gardien\r\n                const { error: updateError } = await supabase\r\n                    .from('admin_sessions')\r\n                    .update({\r\n                        heartbeat: new Date().toISOString(),\r\n                        session_token: sessionToken\r\n                    })\r\n                    .eq('admin_user_id', user.id)\r\n                    .eq('is_active', true)\r\n\r\n                if (updateError) {\r\n                    console.error('Erreur mise à jour session:', updateError)\r\n                    throw new Error('Erreur de mise à jour de session')\r\n                }\r\n\r\n                console.log('✅ Session gardien mise à jour:', user.email)\r\n            } else {\r\n                // Créer une nouvelle session pour ce gardien\r\n                const { error: insertError } = await supabase\r\n                    .from('admin_sessions')\r\n                    .insert({\r\n                        admin_user_id: user.id,\r\n                        email_admin: user.email,\r\n                        session_token: sessionToken,\r\n                        session_start: new Date().toISOString(),\r\n                        heartbeat: new Date().toISOString(),\r\n                        is_active: true\r\n                    })\r\n\r\n                if (insertError) {\r\n                    console.error('Erreur création session:', insertError)\r\n                    throw new Error('Erreur de création de session')\r\n                }\r\n\r\n                console.log('✅ Nouvelle session gardien créée:', user.email)\r\n            }\r\n\r\n            // Stocker dans localStorage (compatibility)\r\n            localStorage.setItem('admin_connecte', JSON.stringify({\r\n                id: user.id,\r\n                email: user.email,\r\n                role: 'admin',\r\n                nom: 'Admin',\r\n                prenom: 'ACLEF',\r\n                dateConnexion: new Date().toISOString(),\r\n                sessionToken: sessionToken\r\n            }))\r\n\r\n            // Stocker le token de session\r\n            localStorage.setItem('admin_session_token', sessionToken)\r\n\r\n            return sessionToken\r\n\r\n        } catch (error) {\r\n            console.error('Erreur gestion session:', error)\r\n            throw error\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        setIsLoading(true)\r\n        setErrorMessage('')\r\n\r\n        try {\r\n            // Authentification Supabase\r\n            const { data, error } = await supabase.auth.signInWithPassword({\r\n                email: email,\r\n                password: password\r\n            })\r\n\r\n            if (error) {\r\n                throw new Error(error.message)\r\n            }\r\n\r\n            if (!data.user) {\r\n                throw new Error('Échec de l\\'authentification')\r\n            }\r\n\r\n            // 🛡️ CRÉER/VÉRIFIER SESSION AVEC VERROU SACRÉ\r\n            const sessionResult = await createAdminSession(data.user)\r\n            \r\n            // Si redirection vers fausse porte, arrêter ici\r\n            if (sessionResult === null) {\r\n                return // Redirection en cours, ne pas continuer\r\n            }\r\n\r\n            console.log('✅ Authentification réussie et accès autorisé pour:', data.user.email)\r\n\r\n            // Redirection vers dashboard admin\r\n            router.push('/')\r\n\r\n        } catch (error) {\r\n            console.error('Erreur authentification:', error)\r\n            \r\n            // Messages d'erreur plus conviviaux\r\n            let errorMsg = 'Erreur de connexion'\r\n            if (error.message.includes('Invalid login credentials')) {\r\n                errorMsg = 'Email ou mot de passe incorrect'\r\n            } else if (error.message.includes('Email not confirmed')) {\r\n                errorMsg = 'Email non confirmé'\r\n            } else if (error.message.includes('Too many requests')) {\r\n                errorMsg = 'Trop de tentatives. Attendez quelques minutes.'\r\n            } else {\r\n                errorMsg = 'Erreur de connexion. Veuillez réessayer.'\r\n            }\r\n            \r\n            // Afficher seulement dans la zone d'erreur, pas en popup\r\n            setErrorMessage(errorMsg)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            backgroundColor: '#f3f4f6',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            padding: '20px'\r\n        }}>\r\n            <div style={{\r\n                backgroundColor: 'white',\r\n                padding: '40px',\r\n                borderRadius: '8px',\r\n                boxShadow: '0 4px 12px rgba(0,0,0,0.1)',\r\n                width: '100%',\r\n                maxWidth: '400px'\r\n            }}>\r\n                <h1 style={{\r\n                    textAlign: 'center',\r\n                    marginBottom: '30px',\r\n                    color: '#333',\r\n                    fontSize: '24px'\r\n                }}>\r\n                    ACLEF Planning - Admin\r\n                </h1>\r\n\r\n                <form onSubmit={handleSubmit}>\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            marginBottom: '5px',\r\n                            fontWeight: 'bold',\r\n                            color: '#555'\r\n                        }}>\r\n                            Email\r\n                        </label>\r\n                        <input\r\n                            type=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            required\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '10px',\r\n                                border: '1px solid #ddd',\r\n                                borderRadius: '4px',\r\n                                fontSize: '16px',\r\n                                backgroundColor: isLoading ? '#f3f4f6' : 'white'\r\n                            }}\r\n                            placeholder=\"\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            marginBottom: '5px',\r\n                            fontWeight: 'bold',\r\n                            color: '#555'\r\n                        }}>\r\n                            Mot de passe\r\n                        </label>\r\n                        <input\r\n                            type=\"password\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            required\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '10px',\r\n                                border: '1px solid #ddd',\r\n                                borderRadius: '4px',\r\n                                fontSize: '16px',\r\n                                backgroundColor: isLoading ? '#f3f4f6' : 'white'\r\n                            }}\r\n                            placeholder=\"••••••••\"\r\n                        />\r\n                    </div>\r\n\r\n                    {errorMessage && (\r\n                        <div style={{\r\n                            backgroundColor: '#fee2e2',\r\n                            color: '#991b1b',\r\n                            padding: '15px',\r\n                            borderRadius: '4px',\r\n                            marginBottom: '20px',\r\n                            fontSize: '13px',\r\n                            lineHeight: '1.4',\r\n                            border: '1px solid #fecaca',\r\n                            whiteSpace: 'pre-line'\r\n                        }}>\r\n                            {errorMessage}\r\n                        </div>\r\n                    )}\r\n\r\n                    <button\r\n                        type=\"submit\"\r\n                        disabled={isLoading}\r\n                        style={{\r\n                            width: '100%',\r\n                            padding: '12px',\r\n                            backgroundColor: isLoading ? '#ccc' : '#3b82f6',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '4px',\r\n                            fontSize: '16px',\r\n                            cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                            transition: 'background-color 0.2s'\r\n                        }}\r\n                    >\r\n                        {isLoading ? 'Connexion...' : 'CONNEXION'}\r\n                    </button>\r\n                </form>\r\n\r\n                <div style={{\r\n                    marginTop: '20px',\r\n                    padding: '10px',\r\n                    backgroundColor: '#f0f9ff',\r\n                    borderRadius: '4px',\r\n                    fontSize: '12px',\r\n                    color: '#0369a1',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    <strong>Administrateurs autorisés :</strong><br />\r\n                    albena@aclef.fr, fanny@aclef.fr,<br />\r\n                    mathieu@aclef.fr, sarah@aclef.fr\r\n                    <br />\r\n                    <small style={{ color: '#dc2626', fontSize: '10px', fontWeight: 'bold' }}>\r\n                        UN SEUL ADMINISTRATEUR À LA FOIS !\r\n                    </small>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}",
          "taille": 13485,
          "lignes": 325,
          "dateModif": "2025-08-21T16:18:58.889Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/planning-coordo-BACKUP-20250829-200221.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useEffect, useState } from 'react';\r\nimport { supabase } from '../lib/supabaseClient';\r\nimport { useRouter } from 'next/router';\r\nimport { withAuthAdmin } from '../components/withAuthAdmin';\r\n\r\nconst jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi'];\r\n\r\n// Skeleton Loader spécifique au Planning Coordinateur\r\nconst SkeletonPlanningLoader = () => {\r\n  const shimmer = {\r\n    background: 'linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%)',\r\n    backgroundSize: '200% 100%',\r\n    animation: 'shimmer 1.5s infinite'\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <style jsx>{`\r\n        @keyframes shimmer {\r\n          0% { background-position: -200% 0; }\r\n          100% { background-position: 200% 0; }\r\n        }\r\n        @media print {\r\n          .no-print { display: none !important; }\r\n          body { \r\n            background: white !important; \r\n            margin: 0 !important;\r\n            padding: 0 !important;\r\n            font-size: 6px !important;\r\n          }\r\n          .print-title { \r\n            display: block !important; \r\n            text-align: center; \r\n            font-size: 12px !important; \r\n            font-weight: bold; \r\n            margin: 2px 0 !important; \r\n            color: black !important; \r\n          }\r\n          /* Optimisation globale pour A4 paysage */\r\n          * {\r\n            box-sizing: border-box !important;\r\n            margin: 0 !important;\r\n            padding: 0 !important;\r\n          }\r\n          /* Container principal */\r\n          .planning-container {\r\n            width: 100% !important;\r\n            max-width: none !important;\r\n            margin: 0 !important;\r\n            padding: 5px !important;\r\n            overflow: visible !important;\r\n          }\r\n          /* Tableau planning */\r\n          table {\r\n            width: 100% !important;\r\n            border-collapse: collapse !important;\r\n            font-size: 5px !important;\r\n            margin: 0 !important;\r\n          }\r\n          th, td {\r\n            border: 1px solid #333 !important;\r\n            padding: 1px !important;\r\n            font-size: 5px !important;\r\n            vertical-align: top !important;\r\n            overflow: hidden !important;\r\n          }\r\n          /* Headers colonnes */\r\n          th {\r\n            background: #f0f0f0 !important;\r\n            font-weight: bold !important;\r\n            font-size: 6px !important;\r\n            text-align: center !important;\r\n          }\r\n          /* Selects formateurs - unification avec apprenants */\r\n          select {\r\n            width: 100% !important;\r\n            padding: 0 !important;\r\n            border: 1px solid #ccc !important;\r\n            border-radius: 1px !important;\r\n            font-size: 4px !important;\r\n            margin: 0 !important;\r\n            background: white !important;\r\n            color: #333 !important;\r\n          }\r\n          /* Titres sections dans cellules */\r\n          .formateur-header, .apprenant-header {\r\n            font-size: 5px !important;\r\n            font-weight: bold !important;\r\n            text-align: center !important;\r\n            margin: 0 !important;\r\n            padding: 1px !important;\r\n            background: #f8f9fa !important;\r\n          }\r\n          /* Uniformisation apprenants/formateurs */\r\n          .apprenants-print-display {\r\n            display: block !important;\r\n            font-size: 4px !important;\r\n            padding: 0 !important;\r\n            background: white !important;\r\n            border: 1px solid #ccc !important;\r\n            border-radius: 1px !important;\r\n            margin: 0 !important;\r\n            color: #333 !important;\r\n          }\r\n          /* Suppression des espaces inutiles */\r\n          br { display: none !important; }\r\n          .skeleton, .shimmer { display: none !important; }\r\n        }\r\n        .print-title { display: none; }\r\n      `}</style>\r\n\r\n      <div style={{\r\n        minHeight: '100vh',\r\n        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n        padding: '0'\r\n      }}>\r\n        {/* Header Navigation Skeleton */}\r\n        <div className=\"no-print\" style={{\r\n          backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n          borderRadius: '0 0 12px 12px',\r\n          padding: '8px 20px',\r\n          marginBottom: '10px',\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          backdropFilter: 'blur(10px)',\r\n          position: 'relative'\r\n        }}>\r\n          <div style={{ \r\n            height: '16px', \r\n            width: '250px', \r\n            borderRadius: '4px',\r\n            ...shimmer \r\n          }} />\r\n          \r\n          <div style={{\r\n            position: 'absolute',\r\n            left: '50%',\r\n            top: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center'\r\n          }}>\r\n            <div style={{ \r\n              height: '20px', \r\n              width: '180px', \r\n              borderRadius: '4px',\r\n              marginBottom: '4px',\r\n              ...shimmer \r\n            }} />\r\n          </div>\r\n\r\n          <div style={{ \r\n            height: '32px', \r\n            width: '80px', \r\n            borderRadius: '8px',\r\n            ...shimmer \r\n          }} />\r\n        </div>\r\n\r\n        <div className=\"print-title\">\r\n          <div style={{ \r\n            height: '18px', \r\n            width: '150px', \r\n            borderRadius: '4px',\r\n            margin: '0 auto',\r\n            ...shimmer \r\n          }} />\r\n        </div>\r\n\r\n        {/* Toolbar Skeleton */}\r\n        <div style={{\r\n          backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n          borderRadius: '8px',\r\n          padding: '8px 20px',\r\n          marginBottom: '10px',\r\n          marginLeft: '20px',\r\n          marginRight: '20px',\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\r\n        }}>\r\n          <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n            <div style={{ \r\n              height: '30px', \r\n              width: '140px', \r\n              borderRadius: '6px',\r\n              ...shimmer \r\n            }} />\r\n            <div style={{ \r\n              height: '30px', \r\n              width: '180px', \r\n              borderRadius: '6px',\r\n              ...shimmer \r\n            }} />\r\n          </div>\r\n\r\n          <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\r\n            <div style={{ \r\n              height: '24px', \r\n              width: '200px', \r\n              borderRadius: '4px',\r\n              ...shimmer \r\n            }} />\r\n            {[1, 2, 3, 4].map(i => (\r\n              <div key={i} style={{ \r\n                height: '30px', \r\n                width: '120px', \r\n                borderRadius: '6px',\r\n                ...shimmer \r\n              }} />\r\n            ))}\r\n          </div>\r\n\r\n          <div style={{ display: 'flex', gap: '8px' }}>\r\n            {[1, 2, 3].map(i => (\r\n              <div key={i} style={{ \r\n                height: '30px', \r\n                width: '110px', \r\n                borderRadius: '6px',\r\n                ...shimmer \r\n              }} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Planning Table Skeleton */}\r\n        <div style={{\r\n          backgroundColor: 'white',\r\n          borderRadius: '12px',\r\n          margin: '0 20px 20px 20px',\r\n          padding: '15px',\r\n          overflow: 'auto',\r\n          boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n        }}>\r\n          {/* Table Header Skeleton */}\r\n          <div style={{\r\n            display: 'grid',\r\n            gridTemplateColumns: '40px repeat(5, 1fr)',\r\n            gap: '1px',\r\n            marginBottom: '1px'\r\n          }}>\r\n            <div style={{\r\n              height: '60px',\r\n              backgroundColor: '#f9fafb',\r\n              border: '1px solid #e5e7eb',\r\n              borderRadius: '4px'\r\n            }} />\r\n            {jours.map((jour, i) => (\r\n              <div key={jour} style={{\r\n                height: '60px',\r\n                backgroundColor: '#f9fafb',\r\n                border: '1px solid #e5e7eb',\r\n                borderRadius: '4px',\r\n                padding: '8px',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n              }}>\r\n                <div style={{ \r\n                  height: '14px', \r\n                  width: '60px', \r\n                  borderRadius: '4px',\r\n                  marginBottom: '4px',\r\n                  ...shimmer \r\n                }} />\r\n                <div style={{ \r\n                  height: '12px', \r\n                  width: '80px', \r\n                  borderRadius: '4px',\r\n                  marginBottom: '6px',\r\n                  ...shimmer \r\n                }} />\r\n                <div style={{ display: 'flex', gap: '3px' }}>\r\n                  <div style={{ \r\n                    height: '20px', \r\n                    width: '25px', \r\n                    borderRadius: '3px',\r\n                    ...shimmer \r\n                  }} />\r\n                  <div style={{ \r\n                    height: '20px', \r\n                    width: '25px', \r\n                    borderRadius: '3px',\r\n                    ...shimmer \r\n                  }} />\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Table Rows Skeleton */}\r\n          {['M', 'AM'].map((creneau, creneauIndex) => (\r\n            <div key={creneau} style={{\r\n              display: 'grid',\r\n              gridTemplateColumns: '40px repeat(5, 1fr)',\r\n              gap: '1px',\r\n              marginBottom: '1px'\r\n            }}>\r\n              <div style={{\r\n                height: '200px',\r\n                backgroundColor: creneauIndex === 0 ? '#fef3c7' : '#dbeafe',\r\n                border: '1px solid #e5e7eb',\r\n                borderRadius: '4px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                fontWeight: 'bold',\r\n                fontSize: '11px'\r\n              }}>\r\n                {creneau}\r\n              </div>\r\n              \r\n              {jours.map((jour, dayIndex) => (\r\n                <div key={`${creneau}-${dayIndex}`} style={{\r\n                  height: '200px',\r\n                  backgroundColor: 'white',\r\n                  border: '1px solid #e5e7eb',\r\n                  borderRadius: '4px',\r\n                  padding: '8px',\r\n                  display: 'flex',\r\n                  flexDirection: 'column',\r\n                  gap: '6px'\r\n                }}>\r\n                  {/* Lieu Select Skeleton */}\r\n                  <div style={{ \r\n                    height: '28px', \r\n                    width: '100%', \r\n                    borderRadius: '4px',\r\n                    ...shimmer \r\n                  }} />\r\n                  \r\n                  {/* Salarié Select Skeleton */}\r\n                  <div style={{ \r\n                    height: '28px', \r\n                    width: '100%', \r\n                    borderRadius: '4px',\r\n                    ...shimmer \r\n                  }} />\r\n                  \r\n                  {/* Formateurs Block Skeleton */}\r\n                  <div style={{\r\n                    padding: '6px',\r\n                    background: 'rgba(255, 255, 255, 0.2)',\r\n                    borderRadius: '4px',\r\n                    border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                  }}>\r\n                    <div style={{ \r\n                      height: '14px', \r\n                      width: '80px', \r\n                      borderRadius: '4px',\r\n                      margin: '0 auto 4px',\r\n                      ...shimmer \r\n                    }} />\r\n                    {[1, 2].map(i => (\r\n                      <div key={i} style={{ \r\n                        height: '24px', \r\n                        width: '100%', \r\n                        borderRadius: '3px',\r\n                        marginBottom: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                    ))}\r\n                    <div style={{ display: 'flex', gap: '3px', justifyContent: 'center', marginTop: '4px' }}>\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {/* Apprenants Block Skeleton */}\r\n                  <div style={{\r\n                    padding: '6px',\r\n                    background: 'rgba(255, 255, 255, 0.2)',\r\n                    borderRadius: '4px',\r\n                    border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                  }}>\r\n                    <div style={{ \r\n                      height: '14px', \r\n                      width: '80px', \r\n                      borderRadius: '4px',\r\n                      margin: '0 auto 4px',\r\n                      ...shimmer \r\n                    }} />\r\n                    <div style={{ \r\n                      height: '24px', \r\n                      width: '100%', \r\n                      borderRadius: '3px',\r\n                      marginBottom: '3px',\r\n                      ...shimmer \r\n                    }} />\r\n                    <div style={{ display: 'flex', gap: '3px', justifyContent: 'center', marginTop: '4px' }}>\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n// Fonction pour calculer la date d'un jour spécifique dans la semaine courante\r\nfunction getDateOfWeek(dayIndex, currentDate) {\r\n    const startOfWeek = new Date(currentDate);\r\n    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1);\r\n    const resultDate = new Date(startOfWeek);\r\n    resultDate.setDate(startOfWeek.getDate() + dayIndex);\r\n    return resultDate.toLocaleDateString('fr-FR');\r\n}\r\n\r\n// Fonction pour revenir à la semaine courante\r\nfunction getCurrentWeekStart() {\r\n    const now = new Date();\r\n    const startOfWeek = new Date(now);\r\n    startOfWeek.setDate(now.getDate() - now.getDay() + 1);\r\n    return startOfWeek;\r\n}\r\n\r\n// Fonction dates UTC pour éviter décalages timezone\r\nfunction getWeekDates(currentDate) {\r\n    const startOfWeek = new Date(currentDate);\r\n    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1);\r\n    \r\n    const weekDates = [];\r\n    for (let i = 0; i < 5; i++) {\r\n        const date = new Date(startOfWeek);\r\n        date.setDate(startOfWeek.getDate() + i);\r\n        const year = date.getFullYear();\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        const day = String(date.getDate()).padStart(2, '0');\r\n        weekDates.push(`${year}-${month}-${day}`);\r\n    }\r\n    return weekDates;\r\n}\r\n\r\nfunction PlanningCoordo({ user, logout, inactivityTime }) {\r\n    const router = useRouter();\r\n    \r\n    // États pour les données de base\r\n    const [salaries, setSalaries] = useState([]);\r\n    const [formateurs, setFormateurs] = useState([]);\r\n    const [apprenants, setApprenants] = useState([]);\r\n    const [currentDate, setCurrentDate] = useState(new Date());\r\n    const [lieux, setLieux] = useState([]);\r\n    const [planningTypes, setPlanningTypes] = useState([]);\r\n    const [absencesValidees, setAbsencesValidees] = useState([]);\r\n    \r\n    // États pour les données du planning\r\n    const [apprenantsParCase, setApprenantsParCase] = useState({});\r\n    const [formateursParCase, setFormateursParCase] = useState({});\r\n    const [lieuxParJour, setLieuxParJour] = useState({});\r\n    const [lieuxSelectionnes, setLieuxSelectionnes] = useState({});\r\n    const [salariesSelectionnes, setSalariesSelectionnes] = useState({});\r\n    \r\n    // États de contrôle\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [dataLoaded, setDataLoaded] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [filtreDisponibilite, setFiltreDisponibilite] = useState('toutes');\r\n\r\n    // ☆☆☆ NOUVEAUX ÉTATS POUR CONTRÔLE ROI ABSOLU - ÉTAPE 3.1 ☆☆☆\r\n    const [derniereCommande, setDerniereCommande] = useState(null);\r\n    const [commandesTraitees, setCommandesTraitees] = useState(new Set());\r\n    const [statsEcoute, setStatsEcoute] = useState({\r\n        commandesRecues: 0,\r\n        refreshEffectues: 0,\r\n        derniereActivite: null\r\n    });\r\n\r\n    // ☆☆☆ FONCTION ROI AMÉLIORÉE - ÉCOUTE ACTIVE COMPLÈTE ☆☆☆\r\n    const ecouterCommandesRoi = () => {\r\n        const interval = setInterval(() => {\r\n            const commande = localStorage.getItem('roiCommande');\r\n            if (commande) {\r\n                try {\r\n                    const parsed = JSON.parse(commande);\r\n                    \r\n                    // Éviter de traiter la même commande plusieurs fois\r\n                    if (!commandesTraitees.has(parsed.timestamp)) {\r\n                        console.log('🤴 PRINCE COORDO reçoit ordre du ROI:', parsed);\r\n                        \r\n                        setDerniereCommande(parsed);\r\n                        setCommandesTraitees(prev => new Set([...prev, parsed.timestamp]));\r\n                        \r\n                        // Traiter immédiatement la commande ROI\r\n                        executerOrdreRoi(parsed);\r\n                        \r\n                        // Mettre à jour stats écoute\r\n                        setStatsEcoute(prev => ({\r\n                            ...prev,\r\n                            commandesRecues: prev.commandesRecues + 1,\r\n                            derniereActivite: new Date().toLocaleTimeString()\r\n                        }));\r\n                    }\r\n                } catch (error) {\r\n                    console.error('❌ Erreur parsing commande ROI:', error);\r\n                }\r\n            }\r\n        }, 500); // Check plus fréquent pour réactivité\r\n\r\n        return interval;\r\n    };\r\n\r\n    // ☆☆☆ FONCTION ROI PRINCIPALE - EXÉCUTION ORDRES ☆☆☆\r\n    const executerOrdreRoi = async (commande) => {\r\n        try {\r\n            console.log(`🤴 PRINCE exécute ordre: ${commande.action}`);\r\n            \r\n            switch (commande.action) {\r\n                case 'retirer_formateur':\r\n                    await traiterRetirerFormateur(commande);\r\n                    break;\r\n                    \r\n                case 'ajouter_formateur':\r\n                    await traiterAjouterFormateur(commande);\r\n                    break;\r\n                    \r\n                case 'remettre_disponible':\r\n                    await traiterRemettreDisponible(commande);\r\n                    break;\r\n                    \r\n                case 'changer_statut':\r\n                    await traiterChangerStatut(commande);\r\n                    break;\r\n                    \r\n                case 'refresh_complet':\r\n                    await traiterRefreshComplet(commande);\r\n                    break;\r\n                    \r\n                default:\r\n                    console.log(`⚠️ Ordre ROI non reconnu: ${commande.action}`);\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur exécution ordre ROI:', error);\r\n        }\r\n    };\r\n\r\n    // ☆☆☆ TRAITEMENTS SPÉCIFIQUES DES ORDRES ROI ☆☆☆\r\n    \r\n    const traiterRetirerFormateur = async (commande) => {\r\n        console.log(`🚫 PRINCE retire formateur ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Retirer formateur le ${commande.date}\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterAjouterFormateur = async (commande) => {\r\n        console.log(`✅ PRINCE ajoute formateur ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        const typeAjout = commande.details?.transformation || 'ajout_standard';\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Ajouter formateur ${\r\n            typeAjout.includes('dispo_except') ? '(DISPO EXCEPT)' : ''\r\n        } le ${commande.date}\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterRemettreDisponible = async (commande) => {\r\n        console.log(`🔄 PRINCE remet disponible ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Formateur remis disponible le ${commande.date}\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterChangerStatut = async (commande) => {\r\n        console.log(`🔄 PRINCE change statut ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        const transformation = commande.details?.transformation || 'changement_type';\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Changement statut (${transformation})\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterRefreshComplet = async (commande) => {\r\n        console.log('🔄 PRINCE effectue refresh complet sur ordre ROI');\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Refresh complet des données\r\n🔄 Rechargement total en cours...`);\r\n        \r\n        // Refresh complet de toutes les données\r\n        await rechargerToutesDonnees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    // ☆☆☆ FONCTIONS DE RECHARGEMENT OPTIMISÉES ☆☆☆\r\n    \r\n    const rechargerAbsencesValidees = async () => {\r\n        try {\r\n            console.log('🔄 Rechargement absences validées...');\r\n            \r\n            const { data: absencesRes, error } = await supabase\r\n                .from('absences_formateurs')\r\n                .select('id, formateur_id, date_debut, date_fin, type, statut')\r\n                .eq('statut', 'validé');\r\n                \r\n            if (error) throw error;\r\n                \r\n            if (absencesRes) {\r\n                console.log(`✅ ${absencesRes.length} absences validées rechargées`);\r\n                setAbsencesValidees(absencesRes);\r\n                \r\n                // Mettre à jour stats\r\n                setStatsEcoute(prev => ({\r\n                    ...prev,\r\n                    refreshEffectues: prev.refreshEffectues + 1\r\n                }));\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur rechargement absences:', error);\r\n        }\r\n    };\r\n\r\n    const rechargerToutesDonnees = async () => {\r\n        try {\r\n            console.log('🔄 Rechargement complet données...');\r\n            \r\n            const [absencesRes, planningTypesRes] = await Promise.all([\r\n                supabase.from('absences_formateurs').select('id, formateur_id, date_debut, date_fin, type, statut').eq('statut', 'validé'),\r\n                supabase.from('planning_type_formateurs').select('id, formateur_id, jour, creneau, statut, lieu_id, valide').eq('valide', true)\r\n            ]);\r\n\r\n            if (absencesRes.data) setAbsencesValidees(absencesRes.data);\r\n            if (planningTypesRes.data) setPlanningTypes(planningTypesRes.data);\r\n            \r\n            console.log('✅ Rechargement complet terminé');\r\n            \r\n            // Mettre à jour stats\r\n            setStatsEcoute(prev => ({\r\n                ...prev,\r\n                refreshEffectues: prev.refreshEffectues + 1\r\n            }));\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur rechargement complet:', error);\r\n        }\r\n    };\r\n\r\n    // RÉCUPÉRATION DES DONNÉES DE BASE\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const [salariesRes, formateursRes, apprenantsRes, lieuxRes, planningTypesRes, absencesRes] = await Promise.all([\r\n                    supabase.from('users').select('id, prenom, nom, role, initiales').eq('role', 'salarié').eq('archive', false),\r\n                    supabase.from('users').select('id, prenom, nom, role').eq('role', 'formateur').eq('archive', false),\r\n                    supabase.from('users').select('id, prenom, nom, role').eq('role', 'apprenant').eq('archive', false),\r\n                    supabase.from('lieux').select('id, nom, couleur, initiale').eq('archive', false),\r\n                    supabase.from('planning_type_formateurs').select('id, formateur_id, jour, creneau, statut, lieu_id, valide').eq('valide', true),\r\n                    supabase.from('absences_formateurs').select('id, formateur_id, date_debut, date_fin, type, statut').eq('statut', 'validé')\r\n                ]);\r\n\r\n                if (salariesRes.data) setSalaries(salariesRes.data);\r\n                if (formateursRes.data) setFormateurs(formateursRes.data);\r\n                if (apprenantsRes.data) setApprenants(apprenantsRes.data);\r\n                if (lieuxRes.data) setLieux(lieuxRes.data);\r\n                if (planningTypesRes.data) setPlanningTypes(planningTypesRes.data);\r\n                if (absencesRes.data) setAbsencesValidees(absencesRes.data);\r\n            } catch (error) {\r\n                console.error('Erreur lors du chargement des données:', error);\r\n            }\r\n        };\r\n        \r\n        fetchData();\r\n    }, []);\r\n\r\n    // ☆☆☆ EFFET POUR DÉMARRER L'ÉCOUTE ROI AMÉLIORÉE ☆☆☆\r\n    useEffect(() => {\r\n        console.log('🎧 PRINCE démarre écoute active des ordres du ROI...');\r\n        const interval = ecouterCommandesRoi();\r\n        \r\n        return () => {\r\n            console.log('🔇 PRINCE arrête écoute des ordres ROI');\r\n            clearInterval(interval);\r\n        };\r\n    }, []); // Pas de dépendances pour écoute continue\r\n\r\n    // ☆☆☆ FONCTION CORRIGÉE - PRIORITÉ DISPO EXCEPTIONNELLE ☆☆☆\r\n    const isFormateurAbsent = (formateurId, dateStr) => {\r\n        // D'ABORD vérifier s'il a une dispo exceptionnelle (priorité absolue)\r\n        const dispoExcept = absencesValidees.find(absence => {\r\n            if (absence.formateur_id !== formateurId) return false;\r\n            if (absence.type !== 'formation') return false;\r\n            \r\n            const estDansIntervalle = dateStr >= absence.date_debut && dateStr <= absence.date_fin;\r\n            return estDansIntervalle;\r\n        });\r\n        \r\n        // Si dispo exceptionnelle trouvée = PAS absent !\r\n        if (dispoExcept) {\r\n            console.log(`✅ PRIORITÉ DISPO EXCEPT: formateur ${formateurId} disponible le ${dateStr} !`);\r\n            return false;\r\n        }\r\n        \r\n        // ENSUITE chercher les vraies absences\r\n        const absenceJour = absencesValidees.find(absence => {\r\n            if (absence.formateur_id !== formateurId) return false;\r\n            if (absence.type === 'formation') return false; // Dispo except n'est pas absence\r\n            \r\n            const estDansIntervalle = dateStr >= absence.date_debut && dateStr <= absence.date_fin;\r\n            return estDansIntervalle;\r\n        });\r\n\r\n        if (absenceJour) {\r\n            console.log(`🚫 ${formateurId} absent le ${dateStr} - retiré par ROI`);\r\n        }\r\n\r\n        return !!absenceJour;\r\n    };\r\n\r\n    // Fonction dispo exceptionnelle corrigée\r\n    const hasDispoExceptionnelle = (formateurId, dateStr) => {\r\n        const dispoJour = absencesValidees.find(absence => {\r\n            if (absence.formateur_id !== formateurId) return false;\r\n            if (absence.type !== 'formation') return false;\r\n            \r\n            const estDansIntervalle = dateStr >= absence.date_debut && dateStr <= absence.date_fin;\r\n            return estDansIntervalle;\r\n        });\r\n\r\n        return !!dispoJour;\r\n    };\r\n\r\n    // Fonction de filtrage des formateurs disponibles\r\n    const getFormateursDisponibles = (jour, creneau, lieuId) => {\r\n        const creneauDB = creneau === 'Matin' ? 'Matin' : 'AM';\r\n        \r\n        if (!jour || !creneau) {\r\n            return formateurs.map(f => ({ ...f, statut: null }));\r\n        }\r\n\r\n        const dayIndex = jours.indexOf(jour);\r\n        const weekDates = getWeekDates(currentDate);\r\n        const dateStr = weekDates[dayIndex];\r\n\r\n        const formateursAvecPlanningType = planningTypes.filter(pt => {\r\n            const jourMatch = pt.jour === jour;\r\n            const creneauMatch = pt.creneau === creneauDB;\r\n            \r\n            let statutValide = false;\r\n            if (filtreDisponibilite === 'disponible') {\r\n                statutValide = pt.statut === 'disponible';\r\n            } else if (filtreDisponibilite === 'exceptionnelles') {\r\n                statutValide = pt.statut === 'dispo_except';\r\n            } else if (filtreDisponibilite === 'toutes') {\r\n                statutValide = pt.statut === 'disponible' || pt.statut === 'dispo_except';\r\n            }\r\n            \r\n            if (!jourMatch || !creneauMatch || !statutValide) {\r\n                return false;\r\n            }\r\n            \r\n            if (pt.lieu_id === null) {\r\n                return true;\r\n            } else if (lieuId) {\r\n                return pt.lieu_id === lieuId;\r\n            } else {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        const formateursAvecPlanningTypeIds = formateursAvecPlanningType.map(pt => pt.formateur_id);\r\n        \r\n        const formateursAvecPlanningTypeTotal = planningTypes.map(pt => pt.formateur_id);\r\n        const formateursSansPlanningType = formateurs.filter(f => \r\n            !formateursAvecPlanningTypeTotal.includes(f.id)\r\n        );\r\n\r\n        const formateursDisponiblesPlanningType = formateurs.filter(f => \r\n            formateursAvecPlanningTypeIds.includes(f.id)\r\n        ).map(f => {\r\n            const planningType = formateursAvecPlanningType.find(pt => pt.formateur_id === f.id);\r\n            \r\n            // ☆☆☆ LOGIQUE ROI - ABSENCE GAGNE TOUJOURS ☆☆☆\r\n            if (isFormateurAbsent(f.id, dateStr)) {\r\n                console.log(`🚫 ${f.prenom} absent le ${dateStr} - retiré par ROI`);\r\n                return null;\r\n            }\r\n            \r\n            // ☆☆☆ LOGIQUE ROI - DISPO EXCEPT PRIORITAIRE ☆☆☆\r\n            if (hasDispoExceptionnelle(f.id, dateStr)) {\r\n                console.log(`✅ ${f.prenom} dispo exceptionnelle le ${dateStr} - ajouté par ROI`);\r\n                return { \r\n                    ...f, \r\n                    statut: 'dispo_except',\r\n                    lieuSpecifique: false,\r\n                    source: 'exception_validee_roi'\r\n                };\r\n            }\r\n            \r\n            return { \r\n                ...f, \r\n                statut: planningType ? planningType.statut : null,\r\n                lieuSpecifique: planningType && planningType.lieu_id ? true : false,\r\n                source: 'planning_type'\r\n            };\r\n        }).filter(f => f !== null);\r\n\r\n        const formateursSansPlanningAvecStatut = filtreDisponibilite === 'toutes' \r\n            ? formateursSansPlanningType.filter(f => !isFormateurAbsent(f.id, dateStr))\r\n                .map(f => {\r\n                    // ☆☆☆ LOGIQUE ROI - DISPO EXCEPT MÊME SANS PLANNING TYPE ☆☆☆\r\n                    if (hasDispoExceptionnelle(f.id, dateStr)) {\r\n                        console.log(`✅ ${f.prenom} dispo exceptionnelle le ${dateStr} (sans planning) - ajouté par ROI`);\r\n                        return { \r\n                            ...f, \r\n                            statut: 'dispo_except',\r\n                            lieuSpecifique: false,\r\n                            source: 'exception_validee_roi'\r\n                        };\r\n                    }\r\n                    \r\n                    return { \r\n                        ...f, \r\n                        statut: null,\r\n                        lieuSpecifique: false,\r\n                        source: 'aucun_planning'\r\n                    };\r\n                })\r\n            : [];\r\n\r\n        return [...formateursDisponiblesPlanningType, ...formateursSansPlanningAvecStatut];\r\n    };\r\n\r\n    // CHARGEMENT DU PLANNING\r\n    const loadWeekPlanning = async (targetDate) => {\r\n        try {\r\n            const weekDates = getWeekDates(targetDate);\r\n            \r\n            const { data: planningData, error } = await supabase\r\n                .from('planning_hebdomadaire')\r\n                .select('*')\r\n                .in('date', weekDates)\r\n                .order('created_at', { ascending: false });\r\n\r\n            if (error) {\r\n                console.error('Erreur lors du chargement:', error);\r\n                return;\r\n            }\r\n\r\n            const newApprenantsParCase = {};\r\n            const newFormateursParCase = {};\r\n            const newLieuxSelectionnes = {};\r\n            const newSalariesSelectionnes = {};\r\n            const newLieuxParJour = {};\r\n\r\n            jours.forEach((_, dayIndex) => {\r\n                newLieuxParJour[dayIndex] = [0];\r\n                ['Matin', 'AM'].forEach((creneau) => {\r\n                    const key = `${dayIndex}-0-${creneau}`;\r\n                    newApprenantsParCase[key] = [\"\"];\r\n                    newFormateursParCase[key] = [\"\"];\r\n                    newLieuxSelectionnes[key] = \"\";\r\n                    newSalariesSelectionnes[key] = \"\";\r\n                });\r\n            });\r\n\r\n            if (planningData && planningData.length > 0) {\r\n                planningData.forEach(item => {\r\n                    const dayIndex = jours.indexOf(item.jour);\r\n                    if (dayIndex !== -1) {\r\n                        const creneau = item.creneau === 'matin' ? 'Matin' : 'AM';\r\n                        const lieuIndex = item.lieu_index || 0;\r\n                        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n\r\n                        if (item.formateurs_ids && item.formateurs_ids.length > 0) {\r\n                            newFormateursParCase[key] = [...item.formateurs_ids.filter(id => id), \"\"];\r\n                        }\r\n                        if (item.apprenants_ids && item.apprenants_ids.length > 0) {\r\n                            newApprenantsParCase[key] = [...item.apprenants_ids.filter(id => id), \"\"];\r\n                        }\r\n                        if (item.lieu_id) {\r\n                            newLieuxSelectionnes[key] = item.lieu_id;\r\n                        }\r\n                        if (item.salarie_id) {\r\n                            newSalariesSelectionnes[key] = item.salarie_id;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            setApprenantsParCase(newApprenantsParCase);\r\n            setFormateursParCase(newFormateursParCase);\r\n            setLieuxSelectionnes(newLieuxSelectionnes);\r\n            setSalariesSelectionnes(newSalariesSelectionnes);\r\n            setLieuxParJour(newLieuxParJour);\r\n            setDataLoaded(true);\r\n\r\n        } catch (error) {\r\n            console.error('Erreur lors du chargement du planning:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (lieux.length >= 0 && salaries.length > 0 && formateurs.length > 0 && apprenants.length > 0) {\r\n            setDataLoaded(false);\r\n            loadWeekPlanning(currentDate);\r\n        }\r\n    }, [currentDate, lieux, salaries, formateurs, apprenants]);\r\n\r\n    // FONCTIONS DE SAUVEGARDE\r\n    const handleEnregistrerBrouillon = async () => {\r\n        setIsLoading(true);\r\n        \r\n        try {\r\n            const weekDates = getWeekDates(currentDate);\r\n            const stats = await sauvegarderPlanning('brouillon', weekDates);\r\n\r\n            setMessage(`📝 Brouillon semaine ${semaine} enregistré !\r\n${stats.creneaux} créneaux • ${stats.formateursAfectes} formateurs`);\r\n            setTimeout(() => setMessage(''), 5000);\r\n\r\n        } catch (error) {\r\n            console.error('Erreur lors de l\\'enregistrement:', error);\r\n            setMessage(`⚠️ Erreur: ${error.message}`);\r\n            setTimeout(() => setMessage(''), 5000);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleValiderTransmettre = async () => {\r\n        if (!window.confirm('Valider et transmettre le planning ? Les formateurs recevront des notifications.')) return;\r\n        \r\n        setIsLoading(true);\r\n        \r\n        try {\r\n            const weekDates = getWeekDates(currentDate);\r\n            const stats = await sauvegarderPlanning('validé', weekDates);\r\n\r\n            await envoyerMessagesValidation(stats, semaine, weekDates);\r\n\r\n            setMessage(`✅ Planning semaine ${semaine} validé et transmis !\r\n${stats.creneaux} créneaux • ${stats.formateursAfectes} formateurs affectés\r\n📧 Messages envoyés aux formateurs`);\r\n            setTimeout(() => setMessage(''), 8000);\r\n\r\n        } catch (error) {\r\n            console.error('Erreur lors de la validation:', error);\r\n            setMessage(`⚠️ Erreur: ${error.message}`);\r\n            setTimeout(() => setMessage(''), 5000);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Fonction envoi messages validation\r\n    const envoyerMessagesValidation = async (stats, semaine, weekDates) => {\r\n        try {\r\n            const { data: affectations } = await supabase\r\n                .from('planning_formateurs_hebdo')\r\n                .select('formateur_id, date, creneau, lieu_nom')\r\n                .in('date', weekDates)\r\n                .eq('statut', 'attribue');\r\n\r\n            if (affectations && affectations.length > 0) {\r\n                const affectationsParFormateur = {};\r\n                affectations.forEach(aff => {\r\n                    if (!affectationsParFormateur[aff.formateur_id]) {\r\n                        affectationsParFormateur[aff.formateur_id] = [];\r\n                    }\r\n                    affectationsParFormateur[aff.formateur_id].push(aff);\r\n                });\r\n\r\n                for (const [formateurId, affectationsFormateur] of Object.entries(affectationsParFormateur)) {\r\n                    const formateur = formateurs.find(f => f.id === formateurId);\r\n                    if (formateur) {\r\n                        const creneauxDetail = affectationsFormateur.map(aff => \r\n                            `${aff.date} ${aff.creneau} à ${aff.lieu_nom}`\r\n                        ).join('\\n');\r\n\r\n                        await supabase.from('messages').insert({\r\n                            expediteur: 'Coordination ACLEF',\r\n                            destinataire_id: formateurId,\r\n                            objet: `Planning semaine ${semaine} validé`,\r\n                            contenu: `Bonjour ${formateur.prenom},\\n\\nVotre planning pour la semaine ${semaine} a été validé.\\n\\nVos interventions :\\n${creneauxDetail}\\n\\nMerci de votre engagement !\\n\\nCordialement,\\nL'équipe ACLEF`,\r\n                            statut: 'envoye',\r\n                            type: 'planning_valide'\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Erreur envoi messages validation:', error);\r\n        }\r\n    };\r\n\r\n    // FONCTION DE SAUVEGARDE\r\n    const sauvegarderPlanning = async (statut, weekDates) => {\r\n        const planningsToSave = [];\r\n        const planningFormateursToSave = [];\r\n        const formateursAfectes = new Set();\r\n\r\n        jours.forEach((jour, dayIndex) => {\r\n            const currentDateStr = weekDates[dayIndex];\r\n            \r\n            (lieuxParJour[dayIndex] || []).forEach((lieuIndex) => {\r\n                ['Matin', 'AM'].forEach((creneau) => {\r\n                    const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                    \r\n                    const formateursIds = (formateursParCase[key] || []).filter(id => id !== \"\");\r\n                    const apprenantsIds = (apprenantsParCase[key] || []).filter(id => id !== \"\");\r\n                    const lieuId = lieuxSelectionnes[key] || null;\r\n                    const salarieId = salariesSelectionnes[key] || null;\r\n                    \r\n                    if (formateursIds.length > 0 || apprenantsIds.length > 0 || lieuId || salarieId) {\r\n                        let creneauDB = creneau === 'Matin' ? 'matin' : 'AM';\r\n\r\n                        planningsToSave.push({\r\n                            date: currentDateStr,\r\n                            jour: jour,\r\n                            creneau: creneauDB,\r\n                            lieu_index: lieuIndex,\r\n                            lieu_id: lieuId,\r\n                            salarie_id: salarieId || null,\r\n                            formateurs_ids: formateursIds,\r\n                            apprenants_ids: apprenantsIds,\r\n                            statut_planning: statut\r\n                        });\r\n\r\n                        formateursIds.forEach(formateurId => {\r\n                            formateursAfectes.add(formateurId);\r\n                            const lieuInfo = lieux.find(l => l.id === lieuId);\r\n                            \r\n                            planningFormateursToSave.push({\r\n                                formateur_id: formateurId,\r\n                                date: currentDateStr,\r\n                                creneau: creneauDB,\r\n                                lieu_nom: lieuInfo ? lieuInfo.nom : '',\r\n                                lieu_initiales: lieuInfo ? lieuInfo.initiale : '',\r\n                                statut: statut === 'brouillon' ? 'brouillon' : 'attribue'\r\n                            });\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n        if (planningsToSave.length > 0) {\r\n            const { error: insertError } = await supabase\r\n                .from('planning_hebdomadaire')\r\n                .insert(planningsToSave);\r\n\r\n            if (insertError) {\r\n                console.error('Erreur insertion planning:', insertError);\r\n                throw insertError;\r\n            }\r\n        }\r\n\r\n        if (planningFormateursToSave.length > 0) {\r\n            const { error: insertFormateursError } = await supabase\r\n                .from('planning_formateurs_hebdo')\r\n                .insert(planningFormateursToSave);\r\n\r\n            if (insertFormateursError) {\r\n                console.error('Erreur insertion planning formateurs:', insertFormateursError);\r\n                throw insertFormateursError;\r\n            }\r\n        }\r\n\r\n        return {\r\n            creneaux: planningsToSave.length,\r\n            formateursAfectes: formateursAfectes.size\r\n        };\r\n    };\r\n\r\n    // FONCTIONS UTILITAIRES\r\n    const getLieuCouleur = (lieuId) => {\r\n        if (!lieuId) return '#ffffff';\r\n        const lieu = lieux.find(l => l.id === lieuId);\r\n        return lieu?.couleur || '#ffffff';\r\n    };\r\n\r\n    const getTextColor = (backgroundColor) => {\r\n        if (!backgroundColor || backgroundColor === '#ffffff') return '#000000';\r\n        \r\n        const hex = backgroundColor.replace('#', '');\r\n        const r = parseInt(hex.substr(0, 2), 16);\r\n        const g = parseInt(hex.substr(2, 2), 16);\r\n        const b = parseInt(hex.substr(4, 2), 16);\r\n        \r\n        const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\r\n        return luminance > 0.5 ? '#000000' : '#ffffff';\r\n    };\r\n\r\n    const getInitiales = (prenom, nom) => {\r\n        return `${prenom?.[0] ?? ''}${nom?.[0] ?? ''}`.toUpperCase();\r\n    };\r\n\r\n    const semaine = Math.ceil(((currentDate - new Date(currentDate.getFullYear(), 0, 1)) / 86400000 + new Date(currentDate.getFullYear(), 0, 1).getDay() + 1) / 7);\r\n\r\n    // NAVIGATION\r\n    const changeWeek = (direction) => {\r\n        const newDate = new Date(currentDate);\r\n        newDate.setDate(currentDate.getDate() + (direction * 7));\r\n        setCurrentDate(newDate);\r\n    };\r\n\r\n    const goToCurrentWeek = () => {\r\n        const currentWeekStart = getCurrentWeekStart();\r\n        setCurrentDate(currentWeekStart);\r\n    };\r\n\r\n    // GESTION DES DONNÉES\r\n    const handleLieuChange = (dayIndex, lieuIndex, creneau, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setLieuxSelectionnes(prev => ({ ...prev, [key]: value }));\r\n    };\r\n\r\n    const handleSalarieChange = (dayIndex, lieuIndex, creneau, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setSalariesSelectionnes(prev => ({ ...prev, [key]: value }));\r\n    };\r\n\r\n    const handleFormateurChange = (dayIndex, lieuIndex, creneau, selectIndex, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const newList = [...(formateursParCase[key] || [])];\r\n        newList[selectIndex] = value;\r\n        setFormateursParCase(prev => ({ ...prev, [key]: newList }));\r\n    };\r\n\r\n    const handleAddFormateur = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setFormateursParCase(prev => ({\r\n            ...prev,\r\n            [key]: [...(prev[key] || []), \"\"]\r\n        }));\r\n    };\r\n\r\n    const handleRemoveFormateur = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const currentList = formateursParCase[key] || [];\r\n        if (currentList.length > 1) {\r\n            setFormateursParCase(prev => ({\r\n                ...prev,\r\n                [key]: prev[key].slice(0, -1)\r\n            }));\r\n        }\r\n    };\r\n\r\n    const handleApprenantChange = (dayIndex, lieuIndex, creneau, selectIndex, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const newList = [...(apprenantsParCase[key] || [])];\r\n        newList[selectIndex] = value;\r\n        setApprenantsParCase(prev => ({ ...prev, [key]: newList }));\r\n    };\r\n\r\n    const handleAddApprenant = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setApprenantsParCase(prev => ({\r\n            ...prev,\r\n            [key]: [...(prev[key] || []), \"\"]\r\n        }));\r\n    };\r\n\r\n    const handleRemoveApprenant = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const currentList = apprenantsParCase[key] || [];\r\n        if (currentList.length > 1) {\r\n            setApprenantsParCase(prev => ({\r\n                ...prev,\r\n                [key]: prev[key].slice(0, -1)\r\n            }));\r\n        }\r\n    };\r\n\r\n    const handleAddLieu = (dayIndex) => {\r\n        const currentLieux = lieuxParJour[dayIndex] || [];\r\n        const newLieuIndex = Math.max(...currentLieux) + 1;\r\n        \r\n        setLieuxParJour(prev => ({\r\n            ...prev,\r\n            [dayIndex]: [...currentLieux, newLieuIndex]\r\n        }));\r\n\r\n        ['Matin', 'AM'].forEach((creneau) => {\r\n            const key = `${dayIndex}-${newLieuIndex}-${creneau}`;\r\n            setApprenantsParCase(prev => ({ ...prev, [key]: [\"\"] }));\r\n            setFormateursParCase(prev => ({ ...prev, [key]: [\"\"] }));\r\n            setLieuxSelectionnes(prev => ({ ...prev, [key]: \"\" }));\r\n            setSalariesSelectionnes(prev => ({ ...prev, [key]: \"\" }));\r\n        });\r\n    };\r\n\r\n    const handleRemoveLieu = (dayIndex, lieuIndex) => {\r\n        const currentLieux = lieuxParJour[dayIndex] || [];\r\n        if (currentLieux.length > 1) {\r\n            setLieuxParJour(prev => ({\r\n                ...prev,\r\n                [dayIndex]: currentLieux.filter(l => l !== lieuIndex)\r\n            }));\r\n\r\n            ['Matin', 'AM'].forEach((creneau) => {\r\n                const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                setApprenantsParCase(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n                setFormateursParCase(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n                setLieuxSelectionnes(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n                setSalariesSelectionnes(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    if (!dataLoaded) {\r\n        return <SkeletonPlanningLoader />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <style jsx>{`\r\n                @media print {\r\n                    .no-print { display: none !important; }\r\n                    body { background: white !important; }\r\n                    .print-title { display: block !important; text-align: center; font-size: 18px; font-weight: bold; margin-bottom: 20px; color: black !important; }\r\n                }\r\n                .print-title { display: none; }\r\n            `}</style>\r\n\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                padding: '0',\r\n                opacity: 1,\r\n                transition: 'opacity 0.3s ease-in-out'\r\n            }}>\r\n                <div className=\"no-print\" style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                    borderRadius: '0 0 12px 12px',\r\n                    padding: '8px 20px',\r\n                    marginBottom: '10px',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    backdropFilter: 'blur(10px)',\r\n                    position: 'relative'\r\n                }}>\r\n                    <nav style={{ fontSize: '14px' }}>\r\n                        <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                        <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                        <span style={{ color: '#3b82f6', fontWeight: '500' }}>Planning Coordonnateur</span>\r\n                    </nav>\r\n                    \r\n                    <div style={{\r\n                        position: 'absolute',\r\n                        left: '50%',\r\n                        top: '50%',\r\n                        transform: 'translate(-50%, -50%)',\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center'\r\n                    }}>\r\n                        <h1 style={{\r\n                            fontSize: '18px',\r\n                            fontWeight: 'bold',\r\n                            color: '#1f2937',\r\n                            margin: '0'\r\n                        }}>\r\n                            Planning semaine {semaine}\r\n                        </h1>\r\n                        \r\n                    </div>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        Accueil\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"print-title\">\r\n                    Planning semaine {semaine}\r\n                </div>\r\n\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n                    borderRadius: '8px',\r\n                    padding: '8px 20px',\r\n                    marginBottom: '10px',\r\n                    marginLeft: '20px',\r\n                    marginRight: '20px',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n                        <button\r\n                            className=\"no-print\"\r\n                            onClick={() => window.print()}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#8b5cf6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            Impression planning\r\n                        </button>\r\n\r\n                        <div className=\"no-print\" style={{\r\n                            padding: '4px 8px',\r\n                            fontSize: '12px',\r\n                            fontWeight: '600',\r\n                            borderRadius: '6px',\r\n                            backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n                            color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#f59e0b' : '#10b981',\r\n                            border: '1px solid',\r\n                            borderColor: inactivityTime >= 240 ? '#fecaca' : inactivityTime >= 180 ? '#fde68a' : '#bbf7d0'\r\n                        }}>\r\n                            Status : {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n                                     inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                     inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                     `🟢 ACTIF`}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"no-print\" style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\r\n                        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                            <label style={{ fontSize: '12px', fontWeight: '500', color: '#374151' }}>\r\n                                Afficher :\r\n                            </label>\r\n                            <select\r\n                                value={filtreDisponibilite}\r\n                                onChange={(e) => setFiltreDisponibilite(e.target.value)}\r\n                                style={{\r\n                                    padding: '4px 8px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '4px',\r\n                                    fontSize: '12px',\r\n                                    cursor: 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                <option value=\"toutes\">Toutes les disponibilités</option>\r\n                                <option value=\"disponible\">Disponible uniquement</option>\r\n                                <option value=\"exceptionnelles\">Dispo exceptionnelles</option>\r\n                            </select>\r\n                        </div>\r\n                        \r\n                        <button\r\n                            onClick={() => changeWeek(-1)}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            ← Semaine précédente\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={goToCurrentWeek}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#10b981',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '600'\r\n                            }}\r\n                        >\r\n                            Aujourd'hui\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={() => changeWeek(1)}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            Semaine suivante →\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div className=\"no-print\" style={{ display: 'flex', gap: '8px' }}>\r\n                        <button\r\n                            onClick={handleEnregistrerBrouillon}\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: isLoading ? '#94a3b8' : '#6b7280',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                            }}\r\n                        >\r\n                            {isLoading ? 'Sauvegarde...' : 'Enregistrer'}\r\n                        </button>\r\n\r\n                        <button\r\n                            onClick={logout}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: '#dc2626',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            🚪 Déconnexion\r\n                        </button>\r\n\r\n                        <button\r\n                            onClick={handleValiderTransmettre}\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: isLoading ? '#94a3b8' : '#10b981',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                            }}\r\n                        >\r\n                            {isLoading ? 'Validation...' : 'Valider & Transmettre'}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {message && (\r\n                    <div className=\"no-print\" style={{\r\n                        backgroundColor: message.includes('🤴') ? '#dbeafe' : \r\n                                         message.includes('✅') ? '#d1fae5' :\r\n                                         message.includes('📝') ? '#fef3c7' : '#fee2e2',\r\n                        color: message.includes('🤴') ? '#1e40af' : \r\n                               message.includes('✅') ? '#065f46' :\r\n                               message.includes('📝') ? '#92400e' : '#991b1b',\r\n                        padding: '8px 15px',\r\n                        borderRadius: '6px',\r\n                        marginBottom: '10px',\r\n                        marginLeft: '20px',\r\n                        marginRight: '20px',\r\n                        textAlign: 'center',\r\n                        fontSize: '14px',\r\n                        whiteSpace: 'pre-line'\r\n                    }}>\r\n                        {message}\r\n                    </div>\r\n                )}\r\n\r\n                <div className=\"planning-container\" style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    margin: '0 20px 20px 20px',\r\n                    padding: '15px',\r\n                    overflow: 'auto',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                        <thead>\r\n                            <tr style={{ backgroundColor: '#f9fafb' }}>\r\n                                <th style={{ \r\n                                    padding: '10px', \r\n                                    border: '1px solid #e5e7eb',\r\n                                    fontWeight: '600',\r\n                                    fontSize: '13px',\r\n                                    textAlign: 'center',\r\n                                    minWidth: '40px',\r\n                                    maxWidth: '40px'\r\n                                }}>\r\n                                </th>\r\n                                {jours.map((jour, dayIndex) => \r\n                                    (lieuxParJour[dayIndex] || []).map((lieuIndex, lieuPos) => (\r\n                                        <th key={`${dayIndex}-${lieuIndex}`} style={{ \r\n                                            padding: '10px',\r\n                                            border: '1px solid #e5e7eb',\r\n                                            minWidth: '180px',\r\n                                            textAlign: 'center',\r\n                                            fontSize: '11px',\r\n                                            backgroundColor: '#f9fafb'\r\n                                        }}>\r\n                                            <div>\r\n                                                <div style={{ fontWeight: '600', fontSize: '13px', marginBottom: '3px' }}>\r\n                                                    {jour}\r\n                                                </div>\r\n                                                <div style={{ fontSize: '10px', color: '#6b7280', marginBottom: '6px' }}>\r\n                                                    {getDateOfWeek(dayIndex, currentDate)}\r\n                                                </div>\r\n                                                <div className=\"no-print\" style={{ display: 'flex', gap: '3px', justifyContent: 'center' }}>\r\n                                                    <button \r\n                                                        onClick={() => handleAddLieu(dayIndex)}\r\n                                                        style={{\r\n                                                            padding: '3px 6px',\r\n                                                            background: '#10b981',\r\n                                                            color: 'white',\r\n                                                            border: 'none',\r\n                                                            borderRadius: '3px',\r\n                                                            fontSize: '11px',\r\n                                                            cursor: 'pointer',\r\n                                                            fontWeight: 'bold'\r\n                                                        }}\r\n                                                    >\r\n                                                        +\r\n                                                    </button>\r\n                                                    {(lieuxParJour[dayIndex] || []).length > 1 && (\r\n                                                        <button \r\n                                                            onClick={() => handleRemoveLieu(dayIndex, lieuIndex)}\r\n                                                            style={{\r\n                                                                padding: '3px 6px',\r\n                                                                background: '#ef4444',\r\n                                                                color: 'white',\r\n                                                                border: 'none',\r\n                                                                borderRadius: '3px',\r\n                                                                fontSize: '11px',\r\n                                                                cursor: 'pointer',\r\n                                                                fontWeight: 'bold'\r\n                                                            }}\r\n                                                        >\r\n                                                            −\r\n                                                        </button>\r\n                                                    )}\r\n                                                </div>\r\n                                            </div>\r\n                                        </th>\r\n                                    ))\r\n                                )}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {['Matin', 'AM'].map((creneau, creneauIndex) => (\r\n                                <tr key={creneau}>\r\n                                    <td style={{ \r\n                                        padding: '8px', \r\n                                        border: '1px solid #e5e7eb',\r\n                                        backgroundColor: creneauIndex === 0 ? '#fef3c7' : '#dbeafe',\r\n                                        fontWeight: 'bold',\r\n                                        textAlign: 'center',\r\n                                        fontSize: '11px',\r\n                                        minWidth: '40px',\r\n                                        maxWidth: '40px'\r\n                                    }}>\r\n                                        {creneau === 'Matin' ? 'M' : 'AM'}\r\n                                    </td>\r\n                                    {jours.map((jour, dayIndex) => \r\n                                        (lieuxParJour[dayIndex] || []).map((lieuIndex) => {\r\n                                            const cellKey = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                                            const selectedLieuId = lieuxSelectionnes[cellKey];\r\n                                            const backgroundColor = getLieuCouleur(selectedLieuId);\r\n                                            const textColor = getTextColor(backgroundColor);\r\n                                            \r\n                                            return (\r\n                                                <td \r\n                                                    key={cellKey} \r\n                                                    style={{\r\n                                                        padding: '8px',\r\n                                                        border: '1px solid #e5e7eb',\r\n                                                        backgroundColor: backgroundColor,\r\n                                                        color: textColor,\r\n                                                        verticalAlign: 'top',\r\n                                                        minWidth: '180px'\r\n                                                    }}\r\n                                                >\r\n                                                    <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>\r\n                                                        <select \r\n                                                            style={{\r\n                                                                width: '100%',\r\n                                                                padding: '4px',\r\n                                                                border: '1px solid #d1d5db',\r\n                                                                borderRadius: '4px',\r\n                                                                fontSize: '11px',\r\n                                                                fontWeight: '500',\r\n                                                                background: 'rgba(255,255,255,0.9)',\r\n                                                                color: '#374151'\r\n                                                            }}\r\n                                                            value={selectedLieuId || \"\"}\r\n                                                            onChange={(e) => handleLieuChange(dayIndex, lieuIndex, creneau, e.target.value)}\r\n                                                        >\r\n                                                            <option value=\"\">Choisir lieu</option>\r\n                                                            {lieux.map((lieu) => (\r\n                                                                <option key={lieu.id} value={lieu.id}>{lieu.nom}</option>\r\n                                                            ))}\r\n                                                        </select>\r\n\r\n                                                        <select \r\n                                                            style={{\r\n                                                                width: '100%',\r\n                                                                padding: '4px',\r\n                                                                border: '1px solid #d1d5db',\r\n                                                                borderRadius: '4px',\r\n                                                                fontSize: '11px',\r\n                                                                background: 'rgba(255,255,255,0.9)',\r\n                                                                color: '#374151'\r\n                                                            }}\r\n                                                            value={salariesSelectionnes[cellKey] || \"\"}\r\n                                                            onChange={(e) => handleSalarieChange(dayIndex, lieuIndex, creneau, e.target.value)}\r\n                                                        >\r\n                                                            <option value=\"\">Choisir salarié</option>\r\n                                                            {salaries.map((s) => (\r\n                                                                <option key={s.id} value={s.id}>\r\n                                                                    {s.initiales || getInitiales(s.prenom, s.nom)}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </select>\r\n\r\n                                                        <div style={{\r\n                                                            padding: '6px',\r\n                                                            background: 'rgba(255, 255, 255, 0.2)',\r\n                                                            borderRadius: '4px',\r\n                                                            border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                                                        }}>\r\n                                                            <div className=\"formateur-header\" style={{ \r\n                                                                fontSize: '10px', \r\n                                                                fontWeight: '600', \r\n                                                                marginBottom: '4px',\r\n                                                                textAlign: 'center'\r\n                                                            }}>\r\n                                                                FORMATEURS\r\n                                                            </div>\r\n                                                            {(formateursParCase[cellKey] || [\"\"]).map((selectedId, i) => {\r\n                                                                const formateursDisponibles = getFormateursDisponibles(jour, creneau, selectedLieuId);\r\n                                                                \r\n                                                                return (\r\n                                                                    <select\r\n                                                                        key={i}\r\n                                                                        style={{\r\n                                                                            width: '100%',\r\n                                                                            padding: '3px',\r\n                                                                            border: '1px solid #d1d5db',\r\n                                                                            borderRadius: '3px',\r\n                                                                            fontSize: '10px',\r\n                                                                            background: 'rgba(255,255,255,0.9)',\r\n                                                                            color: '#374151',\r\n                                                                            marginBottom: '3px'\r\n                                                                        }}\r\n                                                                        value={selectedId}\r\n                                                                        onChange={(e) => handleFormateurChange(dayIndex, lieuIndex, creneau, i, e.target.value)}\r\n                                                                    >\r\n                                                                        <option value=\"\">Formateur</option>\r\n                                                                        {formateursDisponibles\r\n                                                                            .filter(f => {\r\n                                                                                const currentSelections = formateursParCase[cellKey] || [];\r\n                                                                                return !currentSelections.includes(f.id) || currentSelections[i] === f.id;\r\n                                                                            })\r\n                                                                            .map(f => (\r\n                                                                                <option \r\n                                                                                    key={f.id} \r\n                                                                                    value={f.id}\r\n                                                                                    style={{\r\n                                                                                        backgroundColor: f.statut === 'disponible' ? '#dbeafe' : \r\n                                                                                                      f.statut === 'dispo_except' ? '#fef3c7' : 'white',\r\n                                                                                        color: f.statut === 'disponible' ? '#1e40af' : \r\n                                                                                               f.statut === 'dispo_except' ? '#92400e' : '#374151'\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    {f.prenom} {f.nom}\r\n                                                                                    {f.statut === 'dispo_except' ? ' (EXCEPT)' : \r\n                                                                                     f.statut === 'disponible' ? \r\n                                                                                        (f.lieuSpecifique ? ' (LIEU)' : ' (S/P)') : ''}\r\n                                                                                    {f.source === 'exception_validee_roi' ? ' [ROI]' : ''}\r\n                                                                                </option>\r\n                                                                            ))}\r\n                                                                    </select>\r\n                                                                );\r\n                                                            })}\r\n\r\n                                                            <div className=\"no-print\" style={{ display: 'flex', gap: '3px', justifyContent: 'center' }}>\r\n                                                                <button\r\n                                                                    onClick={() => handleAddFormateur(dayIndex, lieuIndex, creneau)}\r\n                                                                    style={{\r\n                                                                        padding: '3px 6px',\r\n                                                                        background: '#3b82f6',\r\n                                                                        color: 'white',\r\n                                                                        border: 'none',\r\n                                                                        borderRadius: '3px',\r\n                                                                        fontSize: '10px',\r\n                                                                        cursor: 'pointer',\r\n                                                                        fontWeight: 'bold'\r\n                                                                    }}\r\n                                                                >\r\n                                                                    +\r\n                                                                </button>\r\n                                                                {(formateursParCase[cellKey] || []).length > 1 && (\r\n                                                                    <button\r\n                                                                        onClick={() => handleRemoveFormateur(dayIndex, lieuIndex, creneau)}\r\n                                                                        style={{\r\n                                                                            padding: '3px 6px',\r\n                                                                            background: '#ef4444',\r\n                                                                            color: 'white',\r\n                                                                            border: 'none',\r\n                                                                            borderRadius: '3px',\r\n                                                                            fontSize: '10px',\r\n                                                                            cursor: 'pointer',\r\n                                                                            fontWeight: 'bold'\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        −\r\n                                                                    </button>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                        <div style={{\r\n                                                            padding: '6px',\r\n                                                            background: 'rgba(255, 255, 255, 0.2)',\r\n                                                            borderRadius: '4px',\r\n                                                            border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                                                        }}>\r\n                                                            <div style={{ \r\n                                                                fontSize: '10px', \r\n                                                                fontWeight: '600', \r\n                                                                marginBottom: '4px',\r\n                                                                textAlign: 'center'\r\n                                                            }}>\r\n                                                                APPRENANTS\r\n                                                            </div>\r\n                                                            {(apprenantsParCase[cellKey] || [\"\"]).map((selectedId, i) => (\r\n                                                                <select\r\n                                                                    key={i}\r\n                                                                    style={{\r\n                                                                        width: '100%',\r\n                                                                        padding: '3px',\r\n                                                                        border: '1px solid #d1d5db',\r\n                                                                        borderRadius: '3px',\r\n                                                                        fontSize: '10px',\r\n                                                                        background: 'rgba(255,255,255,0.9)',\r\n                                                                        color: '#374151',\r\n                                                                        marginBottom: '3px'\r\n                                                                    }}\r\n                                                                    value={selectedId}\r\n                                                                    onChange={(e) => handleApprenantChange(dayIndex, lieuIndex, creneau, i, e.target.value)}\r\n                                                                >\r\n                                                                    <option value=\"\">Apprenant</option>\r\n                                                                    {apprenants\r\n                                                                        .filter(a => {\r\n                                                                            const currentSelections = apprenantsParCase[cellKey] || [];\r\n                                                                            return !currentSelections.includes(a.id) || currentSelections[i] === a.id;\r\n                                                                        })\r\n                                                                        .map(a => (\r\n                                                                            <option key={a.id} value={a.id}>\r\n                                                                                {a.prenom} {a.nom}\r\n                                                                            </option>\r\n                                                                        ))}\r\n                                                                </select>\r\n                                                            ))}\r\n\r\n                                                            <div className=\"no-print\" style={{ display: 'flex', gap: '3px', justifyContent: 'center' }}>\r\n                                                                <button\r\n                                                                    onClick={() => handleAddApprenant(dayIndex, lieuIndex, creneau)}\r\n                                                                    style={{\r\n                                                                        padding: '3px 6px',\r\n                                                                        background: '#3b82f6',\r\n                                                                        color: 'white',\r\n                                                                        border: 'none',\r\n                                                                        borderRadius: '3px',\r\n                                                                        fontSize: '10px',\r\n                                                                        cursor: 'pointer',\r\n                                                                        fontWeight: 'bold'\r\n                                                                    }}\r\n                                                                >\r\n                                                                    +\r\n                                                                </button>\r\n                                                                {(apprenantsParCase[cellKey] || []).length > 1 && (\r\n                                                                    <button\r\n                                                                        onClick={() => handleRemoveApprenant(dayIndex, lieuIndex, creneau)}\r\n                                                                        style={{\r\n                                                                            padding: '3px 6px',\r\n                                                                            background: '#ef4444',\r\n                                                                            color: 'white',\r\n                                                                            border: 'none',\r\n                                                                            borderRadius: '3px',\r\n                                                                            fontSize: '10px',\r\n                                                                            cursor: 'pointer',\r\n                                                                            fontWeight: 'bold'\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        −\r\n                                                                    </button>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </td>\r\n                                            );\r\n                                        })\r\n                                    )}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC - Page titre personnalisé\r\nexport default withAuthAdmin(PlanningCoordo, \"Planning Coordinateur\");",
          "taille": 90307,
          "lignes": 1885,
          "dateModif": "2025-08-29T18:02:21.085Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "pages/planning-coordo-BACKUP-20250829-200913.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useEffect, useState } from 'react';\r\nimport { supabase } from '../lib/supabaseClient';\r\nimport { useRouter } from 'next/router';\r\nimport { withAuthAdmin } from '../components/withAuthAdmin';\r\n\r\nconst jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi'];\r\n\r\n// Skeleton Loader spécifique au Planning Coordinateur\r\nconst SkeletonPlanningLoader = () => {\r\n  const shimmer = {\r\n    background: 'linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%)',\r\n    backgroundSize: '200% 100%',\r\n    animation: 'shimmer 1.5s infinite'\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <style jsx>{`\r\n        @keyframes shimmer {\r\n          0% { background-position: -200% 0; }\r\n          100% { background-position: 200% 0; }\r\n        }\r\n        @media print {\r\n          .no-print { display: none !important; }\r\n          body { \r\n            background: white !important; \r\n            margin: 0 !important;\r\n            padding: 0 !important;\r\n            font-size: 6px !important;\r\n          }\r\n          .print-title { \r\n            display: block !important; \r\n            text-align: center; \r\n            font-size: 12px !important; \r\n            font-weight: bold; \r\n            margin: 2px 0 !important; \r\n            color: black !important; \r\n          }\r\n          /* Optimisation globale pour A4 paysage */\r\n          * {\r\n            box-sizing: border-box !important;\r\n            margin: 0 !important;\r\n            padding: 0 !important;\r\n          }\r\n          /* Container principal */\r\n          .planning-container {\r\n            width: 100% !important;\r\n            max-width: none !important;\r\n            margin: 0 !important;\r\n            padding: 5px !important;\r\n            overflow: visible !important;\r\n          }\r\n          /* Tableau planning */\r\n          table {\r\n            width: 100% !important;\r\n            border-collapse: collapse !important;\r\n            font-size: 5px !important;\r\n            margin: 0 !important;\r\n          }\r\n          th, td {\r\n            border: 1px solid #333 !important;\r\n            padding: 1px !important;\r\n            font-size: 5px !important;\r\n            vertical-align: top !important;\r\n            overflow: hidden !important;\r\n          }\r\n          /* Headers colonnes */\r\n          th {\r\n            background: #f0f0f0 !important;\r\n            font-weight: bold !important;\r\n            font-size: 6px !important;\r\n            text-align: center !important;\r\n          }\r\n          /* Selects formateurs - unification avec apprenants */\r\n          select {\r\n            width: 100% !important;\r\n            padding: 0 !important;\r\n            border: 1px solid #ccc !important;\r\n            border-radius: 1px !important;\r\n            font-size: 4px !important;\r\n            margin: 0 !important;\r\n            background: white !important;\r\n            color: #333 !important;\r\n          }\r\n          /* Titres sections dans cellules */\r\n          .formateur-header, .apprenant-header {\r\n            font-size: 5px !important;\r\n            font-weight: bold !important;\r\n            text-align: center !important;\r\n            margin: 0 !important;\r\n            padding: 1px !important;\r\n            background: #f8f9fa !important;\r\n          }\r\n          /* Uniformisation apprenants/formateurs */\r\n          .apprenants-print-display {\r\n            display: block !important;\r\n            font-size: 4px !important;\r\n            padding: 0 !important;\r\n            background: white !important;\r\n            border: 1px solid #ccc !important;\r\n            border-radius: 1px !important;\r\n            margin: 0 !important;\r\n            color: #333 !important;\r\n          }\r\n          /* Suppression des espaces inutiles */\r\n          br { display: none !important; }\r\n          .skeleton, .shimmer { display: none !important; }\r\n        }\r\n        .print-title { display: none; }\r\n      `}</style>\r\n\r\n      <div style={{\r\n        minHeight: '100vh',\r\n        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n        padding: '0'\r\n      }}>\r\n        {/* Header Navigation Skeleton */}\r\n        <div className=\"no-print\" style={{\r\n          backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n          borderRadius: '0 0 12px 12px',\r\n          padding: '8px 20px',\r\n          marginBottom: '10px',\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          backdropFilter: 'blur(10px)',\r\n          position: 'relative'\r\n        }}>\r\n          <div style={{ \r\n            height: '16px', \r\n            width: '250px', \r\n            borderRadius: '4px',\r\n            ...shimmer \r\n          }} />\r\n          \r\n          <div style={{\r\n            position: 'absolute',\r\n            left: '50%',\r\n            top: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center'\r\n          }}>\r\n            <div style={{ \r\n              height: '20px', \r\n              width: '180px', \r\n              borderRadius: '4px',\r\n              marginBottom: '4px',\r\n              ...shimmer \r\n            }} />\r\n          </div>\r\n\r\n          <div style={{ \r\n            height: '32px', \r\n            width: '80px', \r\n            borderRadius: '8px',\r\n            ...shimmer \r\n          }} />\r\n        </div>\r\n\r\n        <div className=\"print-title\">\r\n          <div style={{ \r\n            height: '18px', \r\n            width: '150px', \r\n            borderRadius: '4px',\r\n            margin: '0 auto',\r\n            ...shimmer \r\n          }} />\r\n        </div>\r\n\r\n        {/* Toolbar Skeleton */}\r\n        <div style={{\r\n          backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n          borderRadius: '8px',\r\n          padding: '8px 20px',\r\n          marginBottom: '10px',\r\n          marginLeft: '20px',\r\n          marginRight: '20px',\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\r\n        }}>\r\n          <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n            <div style={{ \r\n              height: '30px', \r\n              width: '140px', \r\n              borderRadius: '6px',\r\n              ...shimmer \r\n            }} />\r\n            <div style={{ \r\n              height: '30px', \r\n              width: '180px', \r\n              borderRadius: '6px',\r\n              ...shimmer \r\n            }} />\r\n          </div>\r\n\r\n          <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\r\n            <div style={{ \r\n              height: '24px', \r\n              width: '200px', \r\n              borderRadius: '4px',\r\n              ...shimmer \r\n            }} />\r\n            {[1, 2, 3, 4].map(i => (\r\n              <div key={i} style={{ \r\n                height: '30px', \r\n                width: '120px', \r\n                borderRadius: '6px',\r\n                ...shimmer \r\n              }} />\r\n            ))}\r\n          </div>\r\n\r\n          <div style={{ display: 'flex', gap: '8px' }}>\r\n            {[1, 2, 3].map(i => (\r\n              <div key={i} style={{ \r\n                height: '30px', \r\n                width: '110px', \r\n                borderRadius: '6px',\r\n                ...shimmer \r\n              }} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Planning Table Skeleton */}\r\n        <div style={{\r\n          backgroundColor: 'white',\r\n          borderRadius: '12px',\r\n          margin: '0 20px 20px 20px',\r\n          padding: '15px',\r\n          overflow: 'auto',\r\n          boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n        }}>\r\n          {/* Table Header Skeleton */}\r\n          <div style={{\r\n            display: 'grid',\r\n            gridTemplateColumns: '40px repeat(5, 1fr)',\r\n            gap: '1px',\r\n            marginBottom: '1px'\r\n          }}>\r\n            <div style={{\r\n              height: '60px',\r\n              backgroundColor: '#f9fafb',\r\n              border: '1px solid #e5e7eb',\r\n              borderRadius: '4px'\r\n            }} />\r\n            {jours.map((jour, i) => (\r\n              <div key={jour} style={{\r\n                height: '60px',\r\n                backgroundColor: '#f9fafb',\r\n                border: '1px solid #e5e7eb',\r\n                borderRadius: '4px',\r\n                padding: '8px',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n              }}>\r\n                <div style={{ \r\n                  height: '14px', \r\n                  width: '60px', \r\n                  borderRadius: '4px',\r\n                  marginBottom: '4px',\r\n                  ...shimmer \r\n                }} />\r\n                <div style={{ \r\n                  height: '12px', \r\n                  width: '80px', \r\n                  borderRadius: '4px',\r\n                  marginBottom: '6px',\r\n                  ...shimmer \r\n                }} />\r\n                <div style={{ display: 'flex', gap: '3px' }}>\r\n                  <div style={{ \r\n                    height: '20px', \r\n                    width: '25px', \r\n                    borderRadius: '3px',\r\n                    ...shimmer \r\n                  }} />\r\n                  <div style={{ \r\n                    height: '20px', \r\n                    width: '25px', \r\n                    borderRadius: '3px',\r\n                    ...shimmer \r\n                  }} />\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Table Rows Skeleton */}\r\n          {['M', 'AM'].map((creneau, creneauIndex) => (\r\n            <div key={creneau} style={{\r\n              display: 'grid',\r\n              gridTemplateColumns: '40px repeat(5, 1fr)',\r\n              gap: '1px',\r\n              marginBottom: '1px'\r\n            }}>\r\n              <div style={{\r\n                height: '200px',\r\n                backgroundColor: creneauIndex === 0 ? '#fef3c7' : '#dbeafe',\r\n                border: '1px solid #e5e7eb',\r\n                borderRadius: '4px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                fontWeight: 'bold',\r\n                fontSize: '11px'\r\n              }}>\r\n                {creneau}\r\n              </div>\r\n              \r\n              {jours.map((jour, dayIndex) => (\r\n                <div key={`${creneau}-${dayIndex}`} style={{\r\n                  height: '200px',\r\n                  backgroundColor: 'white',\r\n                  border: '1px solid #e5e7eb',\r\n                  borderRadius: '4px',\r\n                  padding: '8px',\r\n                  display: 'flex',\r\n                  flexDirection: 'column',\r\n                  gap: '6px'\r\n                }}>\r\n                  {/* Lieu Select Skeleton */}\r\n                  <div style={{ \r\n                    height: '28px', \r\n                    width: '100%', \r\n                    borderRadius: '4px',\r\n                    ...shimmer \r\n                  }} />\r\n                  \r\n                  {/* Salarié Select Skeleton */}\r\n                  <div style={{ \r\n                    height: '28px', \r\n                    width: '100%', \r\n                    borderRadius: '4px',\r\n                    ...shimmer \r\n                  }} />\r\n                  \r\n                  {/* Formateurs Block Skeleton */}\r\n                  <div style={{\r\n                    padding: '6px',\r\n                    background: 'rgba(255, 255, 255, 0.2)',\r\n                    borderRadius: '4px',\r\n                    border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                  }}>\r\n                    <div style={{ \r\n                      height: '14px', \r\n                      width: '80px', \r\n                      borderRadius: '4px',\r\n                      margin: '0 auto 4px',\r\n                      ...shimmer \r\n                    }} />\r\n                    {[1, 2].map(i => (\r\n                      <div key={i} style={{ \r\n                        height: '24px', \r\n                        width: '100%', \r\n                        borderRadius: '3px',\r\n                        marginBottom: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                    ))}\r\n                    <div style={{ display: 'flex', gap: '3px', justifyContent: 'center', marginTop: '4px' }}>\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {/* Apprenants Block Skeleton */}\r\n                  <div style={{\r\n                    padding: '6px',\r\n                    background: 'rgba(255, 255, 255, 0.2)',\r\n                    borderRadius: '4px',\r\n                    border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                  }}>\r\n                    <div style={{ \r\n                      height: '14px', \r\n                      width: '80px', \r\n                      borderRadius: '4px',\r\n                      margin: '0 auto 4px',\r\n                      ...shimmer \r\n                    }} />\r\n                    <div style={{ \r\n                      height: '24px', \r\n                      width: '100%', \r\n                      borderRadius: '3px',\r\n                      marginBottom: '3px',\r\n                      ...shimmer \r\n                    }} />\r\n                    <div style={{ display: 'flex', gap: '3px', justifyContent: 'center', marginTop: '4px' }}>\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n// Fonction pour calculer la date d'un jour spécifique dans la semaine courante\r\nfunction getDateOfWeek(dayIndex, currentDate) {\r\n    const startOfWeek = new Date(currentDate);\r\n    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1);\r\n    const resultDate = new Date(startOfWeek);\r\n    resultDate.setDate(startOfWeek.getDate() + dayIndex);\r\n    return resultDate.toLocaleDateString('fr-FR');\r\n}\r\n\r\n// Fonction pour revenir à la semaine courante\r\nfunction getCurrentWeekStart() {\r\n    const now = new Date();\r\n    const startOfWeek = new Date(now);\r\n    startOfWeek.setDate(now.getDate() - now.getDay() + 1);\r\n    return startOfWeek;\r\n}\r\n\r\n// Fonction dates UTC pour éviter décalages timezone\r\nfunction getWeekDates(currentDate) {\r\n    const startOfWeek = new Date(currentDate);\r\n    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1);\r\n    \r\n    const weekDates = [];\r\n    for (let i = 0; i < 5; i++) {\r\n        const date = new Date(startOfWeek);\r\n        date.setDate(startOfWeek.getDate() + i);\r\n        const year = date.getFullYear();\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        const day = String(date.getDate()).padStart(2, '0');\r\n        weekDates.push(`${year}-${month}-${day}`);\r\n    }\r\n    return weekDates;\r\n}\r\n\r\nfunction PlanningCoordo({ user, logout, inactivityTime }) {\r\n    const router = useRouter();\r\n    \r\n    // États pour les données de base\r\n    const [salaries, setSalaries] = useState([]);\r\n    const [formateurs, setFormateurs] = useState([]);\r\n    const [apprenants, setApprenants] = useState([]);\r\n    const [currentDate, setCurrentDate] = useState(new Date());\r\n    const [lieux, setLieux] = useState([]);\r\n    const [planningTypes, setPlanningTypes] = useState([]);\r\n    const [absencesValidees, setAbsencesValidees] = useState([]);\r\n    \r\n    // États pour les données du planning\r\n    const [apprenantsParCase, setApprenantsParCase] = useState({});\r\n    const [formateursParCase, setFormateursParCase] = useState({});\r\n    const [lieuxParJour, setLieuxParJour] = useState({});\r\n    const [lieuxSelectionnes, setLieuxSelectionnes] = useState({});\r\n    const [salariesSelectionnes, setSalariesSelectionnes] = useState({});\r\n    \r\n    // États de contrôle\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [dataLoaded, setDataLoaded] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [filtreDisponibilite, setFiltreDisponibilite] = useState('toutes');\r\n\r\n    // ☆☆☆ NOUVEAUX ÉTATS POUR CONTRÔLE ROI ABSOLU - ÉTAPE 3.1 ☆☆☆\r\n    const [derniereCommande, setDerniereCommande] = useState(null);\r\n    const [commandesTraitees, setCommandesTraitees] = useState(new Set());\r\n    const [statsEcoute, setStatsEcoute] = useState({\r\n        commandesRecues: 0,\r\n        refreshEffectues: 0,\r\n        derniereActivite: null\r\n    });\r\n\r\n    // ☆☆☆ FONCTION ROI AMÉLIORÉE - ÉCOUTE ACTIVE COMPLÈTE ☆☆☆\r\n    const ecouterCommandesRoi = () => {\r\n        const interval = setInterval(() => {\r\n            const commande = localStorage.getItem('roiCommande');\r\n            if (commande) {\r\n                try {\r\n                    const parsed = JSON.parse(commande);\r\n                    \r\n                    // Éviter de traiter la même commande plusieurs fois\r\n                    if (!commandesTraitees.has(parsed.timestamp)) {\r\n                        console.log('🤴 PRINCE COORDO reçoit ordre du ROI:', parsed);\r\n                        \r\n                        setDerniereCommande(parsed);\r\n                        setCommandesTraitees(prev => new Set([...prev, parsed.timestamp]));\r\n                        \r\n                        // Traiter immédiatement la commande ROI\r\n                        executerOrdreRoi(parsed);\r\n                        \r\n                        // Mettre à jour stats écoute\r\n                        setStatsEcoute(prev => ({\r\n                            ...prev,\r\n                            commandesRecues: prev.commandesRecues + 1,\r\n                            derniereActivite: new Date().toLocaleTimeString()\r\n                        }));\r\n                    }\r\n                } catch (error) {\r\n                    console.error('❌ Erreur parsing commande ROI:', error);\r\n                }\r\n            }\r\n        }, 500); // Check plus fréquent pour réactivité\r\n\r\n        return interval;\r\n    };\r\n\r\n    // ☆☆☆ FONCTION ROI PRINCIPALE - EXÉCUTION ORDRES ☆☆☆\r\n    const executerOrdreRoi = async (commande) => {\r\n        try {\r\n            console.log(`🤴 PRINCE exécute ordre: ${commande.action}`);\r\n            \r\n            switch (commande.action) {\r\n                case 'retirer_formateur':\r\n                    await traiterRetirerFormateur(commande);\r\n                    break;\r\n                    \r\n                case 'ajouter_formateur':\r\n                    await traiterAjouterFormateur(commande);\r\n                    break;\r\n                    \r\n                case 'remettre_disponible':\r\n                    await traiterRemettreDisponible(commande);\r\n                    break;\r\n                    \r\n                case 'changer_statut':\r\n                    await traiterChangerStatut(commande);\r\n                    break;\r\n                    \r\n                case 'refresh_complet':\r\n                    await traiterRefreshComplet(commande);\r\n                    break;\r\n                    \r\n                default:\r\n                    console.log(`⚠️ Ordre ROI non reconnu: ${commande.action}`);\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur exécution ordre ROI:', error);\r\n        }\r\n    };\r\n\r\n    // ☆☆☆ TRAITEMENTS SPÉCIFIQUES DES ORDRES ROI ☆☆☆\r\n    \r\n    const traiterRetirerFormateur = async (commande) => {\r\n        console.log(`🚫 PRINCE retire formateur ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Retirer formateur le ${commande.date}\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterAjouterFormateur = async (commande) => {\r\n        console.log(`✅ PRINCE ajoute formateur ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        const typeAjout = commande.details?.transformation || 'ajout_standard';\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Ajouter formateur ${\r\n            typeAjout.includes('dispo_except') ? '(DISPO EXCEPT)' : ''\r\n        } le ${commande.date}\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterRemettreDisponible = async (commande) => {\r\n        console.log(`🔄 PRINCE remet disponible ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Formateur remis disponible le ${commande.date}\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterChangerStatut = async (commande) => {\r\n        console.log(`🔄 PRINCE change statut ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        const transformation = commande.details?.transformation || 'changement_type';\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Changement statut (${transformation})\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterRefreshComplet = async (commande) => {\r\n        console.log('🔄 PRINCE effectue refresh complet sur ordre ROI');\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Refresh complet des données\r\n🔄 Rechargement total en cours...`);\r\n        \r\n        // Refresh complet de toutes les données\r\n        await rechargerToutesDonnees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    // ☆☆☆ FONCTIONS DE RECHARGEMENT OPTIMISÉES ☆☆☆\r\n    \r\n    const rechargerAbsencesValidees = async () => {\r\n        try {\r\n            console.log('🔄 Rechargement absences validées...');\r\n            \r\n            const { data: absencesRes, error } = await supabase\r\n                .from('absences_formateurs')\r\n                .select('id, formateur_id, date_debut, date_fin, type, statut')\r\n                .eq('statut', 'validé');\r\n                \r\n            if (error) throw error;\r\n                \r\n            if (absencesRes) {\r\n                console.log(`✅ ${absencesRes.length} absences validées rechargées`);\r\n                setAbsencesValidees(absencesRes);\r\n                \r\n                // Mettre à jour stats\r\n                setStatsEcoute(prev => ({\r\n                    ...prev,\r\n                    refreshEffectues: prev.refreshEffectues + 1\r\n                }));\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur rechargement absences:', error);\r\n        }\r\n    };\r\n\r\n    const rechargerToutesDonnees = async () => {\r\n        try {\r\n            console.log('🔄 Rechargement complet données...');\r\n            \r\n            const [absencesRes, planningTypesRes] = await Promise.all([\r\n                supabase.from('absences_formateurs').select('id, formateur_id, date_debut, date_fin, type, statut').eq('statut', 'validé'),\r\n                supabase.from('planning_type_formateurs').select('id, formateur_id, jour, creneau, statut, lieu_id, valide').eq('valide', true)\r\n            ]);\r\n\r\n            if (absencesRes.data) setAbsencesValidees(absencesRes.data);\r\n            if (planningTypesRes.data) setPlanningTypes(planningTypesRes.data);\r\n            \r\n            console.log('✅ Rechargement complet terminé');\r\n            \r\n            // Mettre à jour stats\r\n            setStatsEcoute(prev => ({\r\n                ...prev,\r\n                refreshEffectues: prev.refreshEffectues + 1\r\n            }));\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur rechargement complet:', error);\r\n        }\r\n    };\r\n\r\n    // RÉCUPÉRATION DES DONNÉES DE BASE\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const [salariesRes, formateursRes, apprenantsRes, lieuxRes, planningTypesRes, absencesRes] = await Promise.all([\r\n                    supabase.from('users').select('id, prenom, nom, role, initiales').eq('role', 'salarié').eq('archive', false),\r\n                    supabase.from('users').select('id, prenom, nom, role').eq('role', 'formateur').eq('archive', false),\r\n                    supabase.from('users').select('id, prenom, nom, role').eq('role', 'apprenant').eq('archive', false),\r\n                    supabase.from('lieux').select('id, nom, couleur, initiale').eq('archive', false),\r\n                    supabase.from('planning_type_formateurs').select('id, formateur_id, jour, creneau, statut, lieu_id, valide').eq('valide', true),\r\n                    supabase.from('absences_formateurs').select('id, formateur_id, date_debut, date_fin, type, statut').eq('statut', 'validé')\r\n                ]);\r\n\r\n                if (salariesRes.data) setSalaries(salariesRes.data);\r\n                if (formateursRes.data) setFormateurs(formateursRes.data);\r\n                if (apprenantsRes.data) setApprenants(apprenantsRes.data);\r\n                if (lieuxRes.data) setLieux(lieuxRes.data);\r\n                if (planningTypesRes.data) setPlanningTypes(planningTypesRes.data);\r\n                if (absencesRes.data) setAbsencesValidees(absencesRes.data);\r\n            } catch (error) {\r\n                console.error('Erreur lors du chargement des données:', error);\r\n            }\r\n        };\r\n        \r\n        fetchData();\r\n    }, []);\r\n\r\n    // ☆☆☆ EFFET POUR DÉMARRER L'ÉCOUTE ROI AMÉLIORÉE ☆☆☆\r\n    useEffect(() => {\r\n        console.log('🎧 PRINCE démarre écoute active des ordres du ROI...');\r\n        const interval = ecouterCommandesRoi();\r\n        \r\n        return () => {\r\n            console.log('🔇 PRINCE arrête écoute des ordres ROI');\r\n            clearInterval(interval);\r\n        };\r\n    }, []); // Pas de dépendances pour écoute continue\r\n\r\n    // ☆☆☆ FONCTION CORRIGÉE - PRIORITÉ DISPO EXCEPTIONNELLE ☆☆☆\r\n    const isFormateurAbsent = (formateurId, dateStr) => {\r\n        // D'ABORD vérifier s'il a une dispo exceptionnelle (priorité absolue)\r\n        const dispoExcept = absencesValidees.find(absence => {\r\n            if (absence.formateur_id !== formateurId) return false;\r\n            if (absence.type !== 'formation') return false;\r\n            \r\n            const estDansIntervalle = dateStr >= absence.date_debut && dateStr <= absence.date_fin;\r\n            return estDansIntervalle;\r\n        });\r\n        \r\n        // Si dispo exceptionnelle trouvée = PAS absent !\r\n        if (dispoExcept) {\r\n            console.log(`✅ PRIORITÉ DISPO EXCEPT: formateur ${formateurId} disponible le ${dateStr} !`);\r\n            return false;\r\n        }\r\n        \r\n        // ENSUITE chercher les vraies absences\r\n        const absenceJour = absencesValidees.find(absence => {\r\n            if (absence.formateur_id !== formateurId) return false;\r\n            if (absence.type === 'formation') return false; // Dispo except n'est pas absence\r\n            \r\n            const estDansIntervalle = dateStr >= absence.date_debut && dateStr <= absence.date_fin;\r\n            return estDansIntervalle;\r\n        });\r\n\r\n        if (absenceJour) {\r\n            console.log(`🚫 ${formateurId} absent le ${dateStr} - retiré par ROI`);\r\n        }\r\n\r\n        return !!absenceJour;\r\n    };\r\n\r\n    // Fonction dispo exceptionnelle corrigée\r\n    const hasDispoExceptionnelle = (formateurId, dateStr) => {\r\n        const dispoJour = absencesValidees.find(absence => {\r\n            if (absence.formateur_id !== formateurId) return false;\r\n            if (absence.type !== 'formation') return false;\r\n            \r\n            const estDansIntervalle = dateStr >= absence.date_debut && dateStr <= absence.date_fin;\r\n            return estDansIntervalle;\r\n        });\r\n\r\n        return !!dispoJour;\r\n    };\r\n\r\n    // Fonction de filtrage des formateurs disponibles\r\n    const getFormateursDisponibles = (jour, creneau, lieuId) => {\r\n        const creneauDB = creneau === 'Matin' ? 'Matin' : 'AM';\r\n        \r\n        if (!jour || !creneau) {\r\n            return formateurs.map(f => ({ ...f, statut: null }));\r\n        }\r\n\r\n        const dayIndex = jours.indexOf(jour);\r\n        const weekDates = getWeekDates(currentDate);\r\n        const dateStr = weekDates[dayIndex];\r\n\r\n        const formateursAvecPlanningType = planningTypes.filter(pt => {\r\n            const jourMatch = pt.jour === jour;\r\n            const creneauMatch = pt.creneau === creneauDB;\r\n            \r\n            let statutValide = false;\r\n            if (filtreDisponibilite === 'disponible') {\r\n                statutValide = pt.statut === 'disponible';\r\n            } else if (filtreDisponibilite === 'exceptionnelles') {\r\n                statutValide = pt.statut === 'dispo_except';\r\n            } else if (filtreDisponibilite === 'toutes') {\r\n                statutValide = pt.statut === 'disponible' || pt.statut === 'dispo_except';\r\n            }\r\n            \r\n            if (!jourMatch || !creneauMatch || !statutValide) {\r\n                return false;\r\n            }\r\n            \r\n            if (pt.lieu_id === null) {\r\n                return true;\r\n            } else if (lieuId) {\r\n                return pt.lieu_id === lieuId;\r\n            } else {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        const formateursAvecPlanningTypeIds = formateursAvecPlanningType.map(pt => pt.formateur_id);\r\n        \r\n        const formateursAvecPlanningTypeTotal = planningTypes.map(pt => pt.formateur_id);\r\n        const formateursSansPlanningType = formateurs.filter(f => \r\n            !formateursAvecPlanningTypeTotal.includes(f.id)\r\n        );\r\n\r\n        const formateursDisponiblesPlanningType = formateurs.filter(f => \r\n            formateursAvecPlanningTypeIds.includes(f.id)\r\n        ).map(f => {\r\n            const planningType = formateursAvecPlanningType.find(pt => pt.formateur_id === f.id);\r\n            \r\n            // ☆☆☆ LOGIQUE ROI - ABSENCE GAGNE TOUJOURS ☆☆☆\r\n            if (isFormateurAbsent(f.id, dateStr)) {\r\n                console.log(`🚫 ${f.prenom} absent le ${dateStr} - retiré par ROI`);\r\n                return null;\r\n            }\r\n            \r\n            // ☆☆☆ LOGIQUE ROI - DISPO EXCEPT PRIORITAIRE ☆☆☆\r\n            if (hasDispoExceptionnelle(f.id, dateStr)) {\r\n                console.log(`✅ ${f.prenom} dispo exceptionnelle le ${dateStr} - ajouté par ROI`);\r\n                return { \r\n                    ...f, \r\n                    statut: 'dispo_except',\r\n                    lieuSpecifique: false,\r\n                    source: 'exception_validee_roi'\r\n                };\r\n            }\r\n            \r\n            return { \r\n                ...f, \r\n                statut: planningType ? planningType.statut : null,\r\n                lieuSpecifique: planningType && planningType.lieu_id ? true : false,\r\n                source: 'planning_type'\r\n            };\r\n        }).filter(f => f !== null);\r\n\r\n        const formateursSansPlanningAvecStatut = filtreDisponibilite === 'toutes' \r\n            ? formateursSansPlanningType.filter(f => !isFormateurAbsent(f.id, dateStr))\r\n                .map(f => {\r\n                    // ☆☆☆ LOGIQUE ROI - DISPO EXCEPT MÊME SANS PLANNING TYPE ☆☆☆\r\n                    if (hasDispoExceptionnelle(f.id, dateStr)) {\r\n                        console.log(`✅ ${f.prenom} dispo exceptionnelle le ${dateStr} (sans planning) - ajouté par ROI`);\r\n                        return { \r\n                            ...f, \r\n                            statut: 'dispo_except',\r\n                            lieuSpecifique: false,\r\n                            source: 'exception_validee_roi'\r\n                        };\r\n                    }\r\n                    \r\n                    return { \r\n                        ...f, \r\n                        statut: null,\r\n                        lieuSpecifique: false,\r\n                        source: 'aucun_planning'\r\n                    };\r\n                })\r\n            : [];\r\n\r\n        return [...formateursDisponiblesPlanningType, ...formateursSansPlanningAvecStatut];\r\n    };\r\n\r\n    // CHARGEMENT DU PLANNING\r\n    const loadWeekPlanning = async (targetDate) => {\r\n        try {\r\n            const weekDates = getWeekDates(targetDate);\r\n            \r\n            const { data: planningData, error } = await supabase\r\n                .from('planning_hebdomadaire')\r\n                .select('*')\r\n                .in('date', weekDates)\r\n                .order('created_at', { ascending: false });\r\n\r\n            if (error) {\r\n                console.error('Erreur lors du chargement:', error);\r\n                return;\r\n            }\r\n\r\n            const newApprenantsParCase = {};\r\n            const newFormateursParCase = {};\r\n            const newLieuxSelectionnes = {};\r\n            const newSalariesSelectionnes = {};\r\n            const newLieuxParJour = {};\r\n\r\n            jours.forEach((_, dayIndex) => {\r\n                newLieuxParJour[dayIndex] = [0];\r\n                ['Matin', 'AM'].forEach((creneau) => {\r\n                    const key = `${dayIndex}-0-${creneau}`;\r\n                    newApprenantsParCase[key] = [\"\"];\r\n                    newFormateursParCase[key] = [\"\"];\r\n                    newLieuxSelectionnes[key] = \"\";\r\n                    newSalariesSelectionnes[key] = \"\";\r\n                });\r\n            });\r\n\r\n            if (planningData && planningData.length > 0) {\r\n                planningData.forEach(item => {\r\n                    const dayIndex = jours.indexOf(item.jour);\r\n                    if (dayIndex !== -1) {\r\n                        const creneau = item.creneau === 'matin' ? 'Matin' : 'AM';\r\n                        const lieuIndex = item.lieu_index || 0;\r\n                        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n\r\n                        if (item.formateurs_ids && item.formateurs_ids.length > 0) {\r\n                            newFormateursParCase[key] = [...item.formateurs_ids.filter(id => id), \"\"];\r\n                        }\r\n                        if (item.apprenants_ids && item.apprenants_ids.length > 0) {\r\n                            newApprenantsParCase[key] = [...item.apprenants_ids.filter(id => id), \"\"];\r\n                        }\r\n                        if (item.lieu_id) {\r\n                            newLieuxSelectionnes[key] = item.lieu_id;\r\n                        }\r\n                        if (item.salarie_id) {\r\n                            newSalariesSelectionnes[key] = item.salarie_id;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            setApprenantsParCase(newApprenantsParCase);\r\n            setFormateursParCase(newFormateursParCase);\r\n            setLieuxSelectionnes(newLieuxSelectionnes);\r\n            setSalariesSelectionnes(newSalariesSelectionnes);\r\n            setLieuxParJour(newLieuxParJour);\r\n            setDataLoaded(true);\r\n\r\n        } catch (error) {\r\n            console.error('Erreur lors du chargement du planning:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (lieux.length >= 0 && salaries.length > 0 && formateurs.length > 0 && apprenants.length > 0) {\r\n            setDataLoaded(false);\r\n            loadWeekPlanning(currentDate);\r\n        }\r\n    }, [currentDate, lieux, salaries, formateurs, apprenants]);\r\n\r\n    // FONCTIONS DE SAUVEGARDE\r\n    const handleEnregistrerBrouillon = async () => {\r\n        setIsLoading(true);\r\n        \r\n        try {\r\n            const weekDates = getWeekDates(currentDate);\r\n            const stats = await sauvegarderPlanning('brouillon', weekDates);\r\n\r\n            setMessage(`📝 Brouillon semaine ${semaine} enregistré !\r\n${stats.creneaux} créneaux • ${stats.formateursAfectes} formateurs`);\r\n            setTimeout(() => setMessage(''), 5000);\r\n\r\n        } catch (error) {\r\n            console.error('Erreur lors de l\\'enregistrement:', error);\r\n            setMessage(`⚠️ Erreur: ${error.message}`);\r\n            setTimeout(() => setMessage(''), 5000);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleValiderTransmettre = async () => {\r\n        if (!window.confirm('Valider et transmettre le planning ? Les formateurs recevront des notifications.')) return;\r\n        \r\n        setIsLoading(true);\r\n        \r\n        try {\r\n            const weekDates = getWeekDates(currentDate);\r\n            const stats = await sauvegarderPlanning('validé', weekDates);\r\n\r\n            await envoyerMessagesValidation(stats, semaine, weekDates);\r\n\r\n            setMessage(`✅ Planning semaine ${semaine} validé et transmis !\r\n${stats.creneaux} créneaux • ${stats.formateursAfectes} formateurs affectés\r\n📧 Messages envoyés aux formateurs`);\r\n            setTimeout(() => setMessage(''), 8000);\r\n\r\n        } catch (error) {\r\n            console.error('Erreur lors de la validation:', error);\r\n            setMessage(`⚠️ Erreur: ${error.message}`);\r\n            setTimeout(() => setMessage(''), 5000);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Fonction envoi messages validation\r\n    const envoyerMessagesValidation = async (stats, semaine, weekDates) => {\r\n        try {\r\n            const { data: affectations } = await supabase\r\n                .from('planning_formateurs_hebdo')\r\n                .select('formateur_id, date, creneau, lieu_nom')\r\n                .in('date', weekDates)\r\n                .eq('statut', 'attribue');\r\n\r\n            if (affectations && affectations.length > 0) {\r\n                const affectationsParFormateur = {};\r\n                affectations.forEach(aff => {\r\n                    if (!affectationsParFormateur[aff.formateur_id]) {\r\n                        affectationsParFormateur[aff.formateur_id] = [];\r\n                    }\r\n                    affectationsParFormateur[aff.formateur_id].push(aff);\r\n                });\r\n\r\n                for (const [formateurId, affectationsFormateur] of Object.entries(affectationsParFormateur)) {\r\n                    const formateur = formateurs.find(f => f.id === formateurId);\r\n                    if (formateur) {\r\n                        const creneauxDetail = affectationsFormateur.map(aff => \r\n                            `${aff.date} ${aff.creneau} à ${aff.lieu_nom}`\r\n                        ).join('\\n');\r\n\r\n                        await supabase.from('messages').insert({\r\n                            expediteur: 'Coordination ACLEF',\r\n                            destinataire_id: formateurId,\r\n                            objet: `Planning semaine ${semaine} validé`,\r\n                            contenu: `Bonjour ${formateur.prenom},\\n\\nVotre planning pour la semaine ${semaine} a été validé.\\n\\nVos interventions :\\n${creneauxDetail}\\n\\nMerci de votre engagement !\\n\\nCordialement,\\nL'équipe ACLEF`,\r\n                            statut: 'envoye',\r\n                            type: 'planning_valide'\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Erreur envoi messages validation:', error);\r\n        }\r\n    };\r\n\r\n    // FONCTION DE SAUVEGARDE\r\n    const sauvegarderPlanning = async (statut, weekDates) => {\r\n        const planningsToSave = [];\r\n        const planningFormateursToSave = [];\r\n        const formateursAfectes = new Set();\r\n\r\n        jours.forEach((jour, dayIndex) => {\r\n            const currentDateStr = weekDates[dayIndex];\r\n            \r\n            (lieuxParJour[dayIndex] || []).forEach((lieuIndex) => {\r\n                ['Matin', 'AM'].forEach((creneau) => {\r\n                    const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                    \r\n                    const formateursIds = (formateursParCase[key] || []).filter(id => id !== \"\");\r\n                    const apprenantsIds = (apprenantsParCase[key] || []).filter(id => id !== \"\");\r\n                    const lieuId = lieuxSelectionnes[key] || null;\r\n                    const salarieId = salariesSelectionnes[key] || null;\r\n                    \r\n                    if (formateursIds.length > 0 || apprenantsIds.length > 0 || lieuId || salarieId) {\r\n                        let creneauDB = creneau === 'Matin' ? 'matin' : 'AM';\r\n\r\n                        planningsToSave.push({\r\n                            date: currentDateStr,\r\n                            jour: jour,\r\n                            creneau: creneauDB,\r\n                            lieu_index: lieuIndex,\r\n                            lieu_id: lieuId,\r\n                            salarie_id: salarieId || null,\r\n                            formateurs_ids: formateursIds,\r\n                            apprenants_ids: apprenantsIds,\r\n                            statut_planning: statut\r\n                        });\r\n\r\n                        formateursIds.forEach(formateurId => {\r\n                            formateursAfectes.add(formateurId);\r\n                            const lieuInfo = lieux.find(l => l.id === lieuId);\r\n                            \r\n                            planningFormateursToSave.push({\r\n                                formateur_id: formateurId,\r\n                                date: currentDateStr,\r\n                                creneau: creneauDB,\r\n                                lieu_nom: lieuInfo ? lieuInfo.nom : '',\r\n                                lieu_initiales: lieuInfo ? lieuInfo.initiale : '',\r\n                                statut: statut === 'brouillon' ? 'brouillon' : 'attribue'\r\n                            });\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n        if (planningsToSave.length > 0) {\r\n            const { error: insertError } = await supabase\r\n                .from('planning_hebdomadaire')\r\n                .insert(planningsToSave);\r\n\r\n            if (insertError) {\r\n                console.error('Erreur insertion planning:', insertError);\r\n                throw insertError;\r\n            }\r\n        }\r\n\r\n        if (planningFormateursToSave.length > 0) {\r\n            const { error: insertFormateursError } = await supabase\r\n                .from('planning_formateurs_hebdo')\r\n                .insert(planningFormateursToSave);\r\n\r\n            if (insertFormateursError) {\r\n                console.error('Erreur insertion planning formateurs:', insertFormateursError);\r\n                throw insertFormateursError;\r\n            }\r\n        }\r\n\r\n        return {\r\n            creneaux: planningsToSave.length,\r\n            formateursAfectes: formateursAfectes.size\r\n        };\r\n    };\r\n\r\n    // FONCTIONS UTILITAIRES\r\n    const getLieuCouleur = (lieuId) => {\r\n        if (!lieuId) return '#ffffff';\r\n        const lieu = lieux.find(l => l.id === lieuId);\r\n        return lieu?.couleur || '#ffffff';\r\n    };\r\n\r\n    const getTextColor = (backgroundColor) => {\r\n        if (!backgroundColor || backgroundColor === '#ffffff') return '#000000';\r\n        \r\n        const hex = backgroundColor.replace('#', '');\r\n        const r = parseInt(hex.substr(0, 2), 16);\r\n        const g = parseInt(hex.substr(2, 2), 16);\r\n        const b = parseInt(hex.substr(4, 2), 16);\r\n        \r\n        const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\r\n        return luminance > 0.5 ? '#000000' : '#ffffff';\r\n    };\r\n\r\n    const getInitiales = (prenom, nom) => {\r\n        return `${prenom?.[0] ?? ''}${nom?.[0] ?? ''}`.toUpperCase();\r\n    };\r\n\r\n    const semaine = Math.ceil(((currentDate - new Date(currentDate.getFullYear(), 0, 1)) / 86400000 + new Date(currentDate.getFullYear(), 0, 1).getDay() + 1) / 7);\r\n\r\n    // NAVIGATION\r\n    const changeWeek = (direction) => {\r\n        const newDate = new Date(currentDate);\r\n        newDate.setDate(currentDate.getDate() + (direction * 7));\r\n        setCurrentDate(newDate);\r\n    };\r\n\r\n    const goToCurrentWeek = () => {\r\n        const currentWeekStart = getCurrentWeekStart();\r\n        setCurrentDate(currentWeekStart);\r\n    };\r\n\r\n    // GESTION DES DONNÉES\r\n    const handleLieuChange = (dayIndex, lieuIndex, creneau, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setLieuxSelectionnes(prev => ({ ...prev, [key]: value }));\r\n    };\r\n\r\n    const handleSalarieChange = (dayIndex, lieuIndex, creneau, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setSalariesSelectionnes(prev => ({ ...prev, [key]: value }));\r\n    };\r\n\r\n    const handleFormateurChange = (dayIndex, lieuIndex, creneau, selectIndex, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const newList = [...(formateursParCase[key] || [])];\r\n        newList[selectIndex] = value;\r\n        setFormateursParCase(prev => ({ ...prev, [key]: newList }));\r\n    };\r\n\r\n    const handleAddFormateur = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setFormateursParCase(prev => ({\r\n            ...prev,\r\n            [key]: [...(prev[key] || []), \"\"]\r\n        }));\r\n    };\r\n\r\n    const handleRemoveFormateur = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const currentList = formateursParCase[key] || [];\r\n        if (currentList.length > 1) {\r\n            setFormateursParCase(prev => ({\r\n                ...prev,\r\n                [key]: prev[key].slice(0, -1)\r\n            }));\r\n        }\r\n    };\r\n\r\n    const handleApprenantChange = (dayIndex, lieuIndex, creneau, selectIndex, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const newList = [...(apprenantsParCase[key] || [])];\r\n        newList[selectIndex] = value;\r\n        setApprenantsParCase(prev => ({ ...prev, [key]: newList }));\r\n    };\r\n\r\n    const handleAddApprenant = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setApprenantsParCase(prev => ({\r\n            ...prev,\r\n            [key]: [...(prev[key] || []), \"\"]\r\n        }));\r\n    };\r\n\r\n    const handleRemoveApprenant = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const currentList = apprenantsParCase[key] || [];\r\n        if (currentList.length > 1) {\r\n            setApprenantsParCase(prev => ({\r\n                ...prev,\r\n                [key]: prev[key].slice(0, -1)\r\n            }));\r\n        }\r\n    };\r\n\r\n    const handleAddLieu = (dayIndex) => {\r\n        const currentLieux = lieuxParJour[dayIndex] || [];\r\n        const newLieuIndex = Math.max(...currentLieux) + 1;\r\n        \r\n        setLieuxParJour(prev => ({\r\n            ...prev,\r\n            [dayIndex]: [...currentLieux, newLieuIndex]\r\n        }));\r\n\r\n        ['Matin', 'AM'].forEach((creneau) => {\r\n            const key = `${dayIndex}-${newLieuIndex}-${creneau}`;\r\n            setApprenantsParCase(prev => ({ ...prev, [key]: [\"\"] }));\r\n            setFormateursParCase(prev => ({ ...prev, [key]: [\"\"] }));\r\n            setLieuxSelectionnes(prev => ({ ...prev, [key]: \"\" }));\r\n            setSalariesSelectionnes(prev => ({ ...prev, [key]: \"\" }));\r\n        });\r\n    };\r\n\r\n    const handleRemoveLieu = (dayIndex, lieuIndex) => {\r\n        const currentLieux = lieuxParJour[dayIndex] || [];\r\n        if (currentLieux.length > 1) {\r\n            setLieuxParJour(prev => ({\r\n                ...prev,\r\n                [dayIndex]: currentLieux.filter(l => l !== lieuIndex)\r\n            }));\r\n\r\n            ['Matin', 'AM'].forEach((creneau) => {\r\n                const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                setApprenantsParCase(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n                setFormateursParCase(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n                setLieuxSelectionnes(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n                setSalariesSelectionnes(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    if (!dataLoaded) {\r\n        return <SkeletonPlanningLoader />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <style jsx>{`\r\n                @media print {\r\n                    .no-print { display: none !important; }\r\n                    body { background: white !important; }\r\n                    .print-title { display: block !important; text-align: center; font-size: 18px; font-weight: bold; margin-bottom: 20px; color: black !important; }\r\n                }\r\n                .print-title { display: none; }\r\n            `}</style>\r\n\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                padding: '0',\r\n                opacity: 1,\r\n                transition: 'opacity 0.3s ease-in-out'\r\n            }}>\r\n                <div className=\"no-print\" style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                    borderRadius: '0 0 12px 12px',\r\n                    padding: '8px 20px',\r\n                    marginBottom: '10px',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    backdropFilter: 'blur(10px)',\r\n                    position: 'relative'\r\n                }}>\r\n                    <nav style={{ fontSize: '14px' }}>\r\n                        <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                        <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                        <span style={{ color: '#3b82f6', fontWeight: '500' }}>Planning Coordonnateur</span>\r\n                    </nav>\r\n                    \r\n                    <div style={{\r\n                        position: 'absolute',\r\n                        left: '50%',\r\n                        top: '50%',\r\n                        transform: 'translate(-50%, -50%)',\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center'\r\n                    }}>\r\n                        <h1 style={{\r\n                            fontSize: '18px',\r\n                            fontWeight: 'bold',\r\n                            color: '#1f2937',\r\n                            margin: '0'\r\n                        }}>\r\n                            Planning semaine {semaine}\r\n                        </h1>\r\n                        \r\n                    </div>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        Accueil\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"print-title\">\r\n                    Planning semaine {semaine}\r\n                </div>\r\n\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n                    borderRadius: '8px',\r\n                    padding: '8px 20px',\r\n                    marginBottom: '10px',\r\n                    marginLeft: '20px',\r\n                    marginRight: '20px',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n                        <button\r\n                            className=\"no-print\"\r\n                            onClick={() => window.print()}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#8b5cf6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            Impression planning\r\n                        </button>\r\n\r\n                        <div className=\"no-print\" style={{\r\n                            padding: '4px 8px',\r\n                            fontSize: '12px',\r\n                            fontWeight: '600',\r\n                            borderRadius: '6px',\r\n                            backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n                            color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#f59e0b' : '#10b981',\r\n                            border: '1px solid',\r\n                            borderColor: inactivityTime >= 240 ? '#fecaca' : inactivityTime >= 180 ? '#fde68a' : '#bbf7d0'\r\n                        }}>\r\n                            Status : {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n                                     inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                     inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                     `🟢 ACTIF`}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"no-print\" style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\r\n                        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                            <label style={{ fontSize: '12px', fontWeight: '500', color: '#374151' }}>\r\n                                Afficher :\r\n                            </label>\r\n                            <select\r\n                                value={filtreDisponibilite}\r\n                                onChange={(e) => setFiltreDisponibilite(e.target.value)}\r\n                                style={{\r\n                                    padding: '4px 8px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '4px',\r\n                                    fontSize: '12px',\r\n                                    cursor: 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                <option value=\"toutes\">Toutes les disponibilités</option>\r\n                                <option value=\"disponible\">Disponible uniquement</option>\r\n                                <option value=\"exceptionnelles\">Dispo exceptionnelles</option>\r\n                            </select>\r\n                        </div>\r\n                        \r\n                        <button\r\n                            onClick={() => changeWeek(-1)}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            ← Semaine précédente\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={goToCurrentWeek}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#10b981',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '600'\r\n                            }}\r\n                        >\r\n                            Aujourd'hui\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={() => changeWeek(1)}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            Semaine suivante →\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div className=\"no-print\" style={{ display: 'flex', gap: '8px' }}>\r\n                        <button\r\n                            onClick={handleEnregistrerBrouillon}\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: isLoading ? '#94a3b8' : '#6b7280',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                            }}\r\n                        >\r\n                            {isLoading ? 'Sauvegarde...' : 'Enregistrer'}\r\n                        </button>\r\n\r\n                        <button\r\n                            onClick={logout}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: '#dc2626',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            🚪 Déconnexion\r\n                        </button>\r\n\r\n                        <button\r\n                            onClick={handleValiderTransmettre}\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: isLoading ? '#94a3b8' : '#10b981',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                            }}\r\n                        >\r\n                            {isLoading ? 'Validation...' : 'Valider & Transmettre'}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {message && (\r\n                    <div className=\"no-print\" style={{\r\n                        backgroundColor: message.includes('🤴') ? '#dbeafe' : \r\n                                         message.includes('✅') ? '#d1fae5' :\r\n                                         message.includes('📝') ? '#fef3c7' : '#fee2e2',\r\n                        color: message.includes('🤴') ? '#1e40af' : \r\n                               message.includes('✅') ? '#065f46' :\r\n                               message.includes('📝') ? '#92400e' : '#991b1b',\r\n                        padding: '8px 15px',\r\n                        borderRadius: '6px',\r\n                        marginBottom: '10px',\r\n                        marginLeft: '20px',\r\n                        marginRight: '20px',\r\n                        textAlign: 'center',\r\n                        fontSize: '14px',\r\n                        whiteSpace: 'pre-line'\r\n                    }}>\r\n                        {message}\r\n                    </div>\r\n                )}\r\n\r\n                <div className=\"planning-container\" style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    margin: '0 20px 20px 20px',\r\n                    padding: '15px',\r\n                    overflow: 'auto',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                        <thead>\r\n                            <tr style={{ backgroundColor: '#f9fafb' }}>\r\n                                <th style={{ \r\n                                    padding: '10px', \r\n                                    border: '1px solid #e5e7eb',\r\n                                    fontWeight: '600',\r\n                                    fontSize: '13px',\r\n                                    textAlign: 'center',\r\n                                    minWidth: '40px',\r\n                                    maxWidth: '40px'\r\n                                }}>\r\n                                </th>\r\n                                {jours.map((jour, dayIndex) => \r\n                                    (lieuxParJour[dayIndex] || []).map((lieuIndex, lieuPos) => (\r\n                                        <th key={`${dayIndex}-${lieuIndex}`} style={{ \r\n                                            padding: '10px',\r\n                                            border: '1px solid #e5e7eb',\r\n                                            minWidth: '180px',\r\n                                            textAlign: 'center',\r\n                                            fontSize: '11px',\r\n                                            backgroundColor: '#f9fafb'\r\n                                        }}>\r\n                                            <div>\r\n                                                <div style={{ fontWeight: '600', fontSize: '13px', marginBottom: '3px' }}>\r\n                                                    {jour}\r\n                                                </div>\r\n                                                <div style={{ fontSize: '10px', color: '#6b7280', marginBottom: '6px' }}>\r\n                                                    {getDateOfWeek(dayIndex, currentDate)}\r\n                                                </div>\r\n                                                <div className=\"no-print\" style={{ display: 'flex', gap: '3px', justifyContent: 'center' }}>\r\n                                                    <button \r\n                                                        onClick={() => handleAddLieu(dayIndex)}\r\n                                                        style={{\r\n                                                            padding: '3px 6px',\r\n                                                            background: '#10b981',\r\n                                                            color: 'white',\r\n                                                            border: 'none',\r\n                                                            borderRadius: '3px',\r\n                                                            fontSize: '11px',\r\n                                                            cursor: 'pointer',\r\n                                                            fontWeight: 'bold'\r\n                                                        }}\r\n                                                    >\r\n                                                        +\r\n                                                    </button>\r\n                                                    {(lieuxParJour[dayIndex] || []).length > 1 && (\r\n                                                        <button \r\n                                                            onClick={() => handleRemoveLieu(dayIndex, lieuIndex)}\r\n                                                            style={{\r\n                                                                padding: '3px 6px',\r\n                                                                background: '#ef4444',\r\n                                                                color: 'white',\r\n                                                                border: 'none',\r\n                                                                borderRadius: '3px',\r\n                                                                fontSize: '11px',\r\n                                                                cursor: 'pointer',\r\n                                                                fontWeight: 'bold'\r\n                                                            }}\r\n                                                        >\r\n                                                            −\r\n                                                        </button>\r\n                                                    )}\r\n                                                </div>\r\n                                            </div>\r\n                                        </th>\r\n                                    ))\r\n                                )}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {['Matin', 'AM'].map((creneau, creneauIndex) => (\r\n                                <tr key={creneau}>\r\n                                    <td style={{ \r\n                                        padding: '8px', \r\n                                        border: '1px solid #e5e7eb',\r\n                                        backgroundColor: creneauIndex === 0 ? '#fef3c7' : '#dbeafe',\r\n                                        fontWeight: 'bold',\r\n                                        textAlign: 'center',\r\n                                        fontSize: '11px',\r\n                                        minWidth: '40px',\r\n                                        maxWidth: '40px'\r\n                                    }}>\r\n                                        {creneau === 'Matin' ? 'M' : 'AM'}\r\n                                    </td>\r\n                                    {jours.map((jour, dayIndex) => \r\n                                        (lieuxParJour[dayIndex] || []).map((lieuIndex) => {\r\n                                            const cellKey = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                                            const selectedLieuId = lieuxSelectionnes[cellKey];\r\n                                            const backgroundColor = getLieuCouleur(selectedLieuId);\r\n                                            const textColor = getTextColor(backgroundColor);\r\n                                            \r\n                                            return (\r\n                                                <td \r\n                                                    key={cellKey} \r\n                                                    style={{\r\n                                                        padding: '8px',\r\n                                                        border: '1px solid #e5e7eb',\r\n                                                        backgroundColor: backgroundColor,\r\n                                                        color: textColor,\r\n                                                        verticalAlign: 'top',\r\n                                                        minWidth: '180px'\r\n                                                    }}\r\n                                                >\r\n                                                    <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>\r\n                                                        <select \r\n                                                            style={{\r\n                                                                width: '100%',\r\n                                                                padding: '4px',\r\n                                                                border: '1px solid #d1d5db',\r\n                                                                borderRadius: '4px',\r\n                                                                fontSize: '11px',\r\n                                                                fontWeight: '500',\r\n                                                                background: 'rgba(255,255,255,0.9)',\r\n                                                                color: '#374151'\r\n                                                            }}\r\n                                                            value={selectedLieuId || \"\"}\r\n                                                            onChange={(e) => handleLieuChange(dayIndex, lieuIndex, creneau, e.target.value)}\r\n                                                        >\r\n                                                            <option value=\"\">Choisir lieu</option>\r\n                                                            {lieux.map((lieu) => (\r\n                                                                <option key={lieu.id} value={lieu.id}>{lieu.nom}</option>\r\n                                                            ))}\r\n                                                        </select>\r\n\r\n                                                        <select \r\n                                                            style={{\r\n                                                                width: '100%',\r\n                                                                padding: '4px',\r\n                                                                border: '1px solid #d1d5db',\r\n                                                                borderRadius: '4px',\r\n                                                                fontSize: '11px',\r\n                                                                background: 'rgba(255,255,255,0.9)',\r\n                                                                color: '#374151'\r\n                                                            }}\r\n                                                            value={salariesSelectionnes[cellKey] || \"\"}\r\n                                                            onChange={(e) => handleSalarieChange(dayIndex, lieuIndex, creneau, e.target.value)}\r\n                                                        >\r\n                                                            <option value=\"\">Choisir salarié</option>\r\n                                                            {salaries.map((s) => (\r\n                                                                <option key={s.id} value={s.id}>\r\n                                                                    {s.initiales || getInitiales(s.prenom, s.nom)}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </select>\r\n\r\n                                                        <div style={{\r\n                                                            padding: '6px',\r\n                                                            background: 'rgba(255, 255, 255, 0.2)',\r\n                                                            borderRadius: '4px',\r\n                                                            border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                                                        }}>\r\n                                                            <div className=\"formateur-header\" style={{ \r\n                                                                fontSize: '10px', \r\n                                                                fontWeight: '600', \r\n                                                                marginBottom: '4px',\r\n                                                                textAlign: 'center'\r\n                                                            }}>\r\n                                                                FORMATEURS\r\n                                                            </div>\r\n                                                            {(formateursParCase[cellKey] || [\"\"]).map((selectedId, i) => {\r\n                                                                const formateursDisponibles = getFormateursDisponibles(jour, creneau, selectedLieuId);\r\n                                                                \r\n                                                                return (\r\n                                                                    <select\r\n                                                                        key={i}\r\n                                                                        style={{\r\n                                                                            width: '100%',\r\n                                                                            padding: '3px',\r\n                                                                            border: '1px solid #d1d5db',\r\n                                                                            borderRadius: '3px',\r\n                                                                            fontSize: '10px',\r\n                                                                            background: 'rgba(255,255,255,0.9)',\r\n                                                                            color: '#374151',\r\n                                                                            marginBottom: '3px'\r\n                                                                        }}\r\n                                                                        value={selectedId}\r\n                                                                        onChange={(e) => handleFormateurChange(dayIndex, lieuIndex, creneau, i, e.target.value)}\r\n                                                                    >\r\n                                                                        <option value=\"\">Formateur</option>\r\n                                                                        {formateursDisponibles\r\n                                                                            .filter(f => {\r\n                                                                                const currentSelections = formateursParCase[cellKey] || [];\r\n                                                                                return !currentSelections.includes(f.id) || currentSelections[i] === f.id;\r\n                                                                            })\r\n                                                                            .map(f => (\r\n                                                                                <option \r\n                                                                                    key={f.id} \r\n                                                                                    value={f.id}\r\n                                                                                    style={{\r\n                                                                                        backgroundColor: f.statut === 'disponible' ? '#dbeafe' : \r\n                                                                                                      f.statut === 'dispo_except' ? '#fef3c7' : 'white',\r\n                                                                                        color: f.statut === 'disponible' ? '#1e40af' : \r\n                                                                                               f.statut === 'dispo_except' ? '#92400e' : '#374151'\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    {f.prenom} {f.nom}\r\n                                                                                    {f.statut === 'dispo_except' ? ' (EXCEPT)' : \r\n                                                                                     f.statut === 'disponible' ? \r\n                                                                                        (f.lieuSpecifique ? ' (LIEU)' : ' (S/P)') : ''}\r\n                                                                                    {f.source === 'exception_validee_roi' ? ' [ROI]' : ''}\r\n                                                                                </option>\r\n                                                                            ))}\r\n                                                                    </select>\r\n                                                                );\r\n                                                            })}\r\n\r\n                                                            <div className=\"no-print\" style={{ display: 'flex', gap: '3px', justifyContent: 'center' }}>\r\n                                                                <button\r\n                                                                    onClick={() => handleAddFormateur(dayIndex, lieuIndex, creneau)}\r\n                                                                    style={{\r\n                                                                        padding: '3px 6px',\r\n                                                                        background: '#3b82f6',\r\n                                                                        color: 'white',\r\n                                                                        border: 'none',\r\n                                                                        borderRadius: '3px',\r\n                                                                        fontSize: '10px',\r\n                                                                        cursor: 'pointer',\r\n                                                                        fontWeight: 'bold'\r\n                                                                    }}\r\n                                                                >\r\n                                                                    +\r\n                                                                </button>\r\n                                                                {(formateursParCase[cellKey] || []).length > 1 && (\r\n                                                                    <button\r\n                                                                        onClick={() => handleRemoveFormateur(dayIndex, lieuIndex, creneau)}\r\n                                                                        style={{\r\n                                                                            padding: '3px 6px',\r\n                                                                            background: '#ef4444',\r\n                                                                            color: 'white',\r\n                                                                            border: 'none',\r\n                                                                            borderRadius: '3px',\r\n                                                                            fontSize: '10px',\r\n                                                                            cursor: 'pointer',\r\n                                                                            fontWeight: 'bold'\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        −\r\n                                                                    </button>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                        <div style={{\r\n                                                            padding: '6px',\r\n                                                            background: 'rgba(255, 255, 255, 0.2)',\r\n                                                            borderRadius: '4px',\r\n                                                            border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                                                        }}>\r\n                                                            <div style={{ \r\n                                                                fontSize: '10px', \r\n                                                                fontWeight: '600', \r\n                                                                marginBottom: '4px',\r\n                                                                textAlign: 'center'\r\n                                                            }}>\r\n                                                                APPRENANTS\r\n                                                            </div>\r\n                                                            {(apprenantsParCase[cellKey] || [\"\"]).map((selectedId, i) => (\r\n                                                                <select\r\n                                                                    key={i}\r\n                                                                    style={{\r\n                                                                        width: '100%',\r\n                                                                        padding: '3px',\r\n                                                                        border: '1px solid #d1d5db',\r\n                                                                        borderRadius: '3px',\r\n                                                                        fontSize: '10px',\r\n                                                                        background: 'rgba(255,255,255,0.9)',\r\n                                                                        color: '#374151',\r\n                                                                        marginBottom: '3px'\r\n                                                                    }}\r\n                                                                    value={selectedId}\r\n                                                                    onChange={(e) => handleApprenantChange(dayIndex, lieuIndex, creneau, i, e.target.value)}\r\n                                                                >\r\n                                                                    <option value=\"\">Apprenant</option>\r\n                                                                    {apprenants\r\n                                                                        .filter(a => {\r\n                                                                            const currentSelections = apprenantsParCase[cellKey] || [];\r\n                                                                            return !currentSelections.includes(a.id) || currentSelections[i] === a.id;\r\n                                                                        })\r\n                                                                        .map(a => (\r\n                                                                            <option key={a.id} value={a.id}>\r\n                                                                                {a.prenom} {a.nom}\r\n                                                                            </option>\r\n                                                                        ))}\r\n                                                                </select>\r\n                                                            ))}\r\n\r\n                                                            <div className=\"no-print\" style={{ display: 'flex', gap: '3px', justifyContent: 'center' }}>\r\n                                                                <button\r\n                                                                    onClick={() => handleAddApprenant(dayIndex, lieuIndex, creneau)}\r\n                                                                    style={{\r\n                                                                        padding: '3px 6px',\r\n                                                                        background: '#3b82f6',\r\n                                                                        color: 'white',\r\n                                                                        border: 'none',\r\n                                                                        borderRadius: '3px',\r\n                                                                        fontSize: '10px',\r\n                                                                        cursor: 'pointer',\r\n                                                                        fontWeight: 'bold'\r\n                                                                    }}\r\n                                                                >\r\n                                                                    +\r\n                                                                </button>\r\n                                                                {(apprenantsParCase[cellKey] || []).length > 1 && (\r\n                                                                    <button\r\n                                                                        onClick={() => handleRemoveApprenant(dayIndex, lieuIndex, creneau)}\r\n                                                                        style={{\r\n                                                                            padding: '3px 6px',\r\n                                                                            background: '#ef4444',\r\n                                                                            color: 'white',\r\n                                                                            border: 'none',\r\n                                                                            borderRadius: '3px',\r\n                                                                            fontSize: '10px',\r\n                                                                            cursor: 'pointer',\r\n                                                                            fontWeight: 'bold'\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        −\r\n                                                                    </button>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </td>\r\n                                            );\r\n                                        })\r\n                                    )}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC - Page titre personnalisé\r\nexport default withAuthAdmin(PlanningCoordo, \"Planning Coordinateur\");",
          "taille": 90307,
          "lignes": 1885,
          "dateModif": "2025-08-29T18:09:13.940Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "pages/planning-coordo-BACKUP-20250829-201153.js",
      "resultat": {
        "statut": "LOCAL_SEULEMENT",
        "local": {
          "existe": true,
          "contenu": "import React, { useEffect, useState } from 'react';\r\nimport { supabase } from '../lib/supabaseClient';\r\nimport { useRouter } from 'next/router';\r\nimport { withAuthAdmin } from '../components/withAuthAdmin';\r\nimport MenuApprenants from '../components/MenuApprenants';\r\n\r\nconst jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi'];\r\n\r\n// Skeleton Loader spécifique au Planning Coordinateur\r\nconst SkeletonPlanningLoader = () => {\r\n  const shimmer = {\r\n    background: 'linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%)',\r\n    backgroundSize: '200% 100%',\r\n    animation: 'shimmer 1.5s infinite'\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <style jsx>{`\r\n        @keyframes shimmer {\r\n          0% { background-position: -200% 0; }\r\n          100% { background-position: 200% 0; }\r\n        }\r\n        @media print {\r\n          .no-print { display: none !important; }\r\n          body { background: white !important; }\r\n          .print-title { display: block !important; text-align: center; font-size: 18px; font-weight: bold; margin-bottom: 20px; color: black !important; }\r\n        }\r\n        .print-title { display: none; }\r\n      `}</style>\r\n\r\n      <div style={{\r\n        minHeight: '100vh',\r\n        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n        padding: '0'\r\n      }}>\r\n        {/* Header Navigation Skeleton */}\r\n        <div className=\"no-print\" style={{\r\n          backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n          borderRadius: '0 0 12px 12px',\r\n          padding: '8px 20px',\r\n          marginBottom: '10px',\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          backdropFilter: 'blur(10px)',\r\n          position: 'relative'\r\n        }}>\r\n          <div style={{ \r\n            height: '16px', \r\n            width: '250px', \r\n            borderRadius: '4px',\r\n            ...shimmer \r\n          }} />\r\n          \r\n          <div style={{\r\n            position: 'absolute',\r\n            left: '50%',\r\n            top: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center'\r\n          }}>\r\n            <div style={{ \r\n              height: '20px', \r\n              width: '180px', \r\n              borderRadius: '4px',\r\n              marginBottom: '4px',\r\n              ...shimmer \r\n            }} />\r\n          </div>\r\n\r\n          <div style={{ \r\n            height: '32px', \r\n            width: '80px', \r\n            borderRadius: '8px',\r\n            ...shimmer \r\n          }} />\r\n        </div>\r\n\r\n        <div className=\"print-title\">\r\n          <div style={{ \r\n            height: '18px', \r\n            width: '150px', \r\n            borderRadius: '4px',\r\n            margin: '0 auto',\r\n            ...shimmer \r\n          }} />\r\n        </div>\r\n\r\n        {/* Toolbar Skeleton */}\r\n        <div style={{\r\n          backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n          borderRadius: '8px',\r\n          padding: '8px 20px',\r\n          marginBottom: '10px',\r\n          marginLeft: '20px',\r\n          marginRight: '20px',\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\r\n        }}>\r\n          <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n            <div style={{ \r\n              height: '30px', \r\n              width: '140px', \r\n              borderRadius: '6px',\r\n              ...shimmer \r\n            }} />\r\n            <div style={{ \r\n              height: '30px', \r\n              width: '180px', \r\n              borderRadius: '6px',\r\n              ...shimmer \r\n            }} />\r\n          </div>\r\n\r\n          <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\r\n            <div style={{ \r\n              height: '24px', \r\n              width: '200px', \r\n              borderRadius: '4px',\r\n              ...shimmer \r\n            }} />\r\n            {[1, 2, 3, 4].map(i => (\r\n              <div key={i} style={{ \r\n                height: '30px', \r\n                width: '120px', \r\n                borderRadius: '6px',\r\n                ...shimmer \r\n              }} />\r\n            ))}\r\n          </div>\r\n\r\n          <div style={{ display: 'flex', gap: '8px' }}>\r\n            {[1, 2, 3].map(i => (\r\n              <div key={i} style={{ \r\n                height: '30px', \r\n                width: '110px', \r\n                borderRadius: '6px',\r\n                ...shimmer \r\n              }} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Planning Table Skeleton */}\r\n        <div style={{\r\n          backgroundColor: 'white',\r\n          borderRadius: '12px',\r\n          margin: '0 20px 20px 20px',\r\n          padding: '15px',\r\n          overflow: 'auto',\r\n          boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n        }}>\r\n          {/* Table Header Skeleton */}\r\n          <div style={{\r\n            display: 'grid',\r\n            gridTemplateColumns: '40px repeat(5, 1fr)',\r\n            gap: '1px',\r\n            marginBottom: '1px'\r\n          }}>\r\n            <div style={{\r\n              height: '60px',\r\n              backgroundColor: '#f9fafb',\r\n              border: '1px solid #e5e7eb',\r\n              borderRadius: '4px'\r\n            }} />\r\n            {jours.map((jour, i) => (\r\n              <div key={jour} style={{\r\n                height: '60px',\r\n                backgroundColor: '#f9fafb',\r\n                border: '1px solid #e5e7eb',\r\n                borderRadius: '4px',\r\n                padding: '8px',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n              }}>\r\n                <div style={{ \r\n                  height: '14px', \r\n                  width: '60px', \r\n                  borderRadius: '4px',\r\n                  marginBottom: '4px',\r\n                  ...shimmer \r\n                }} />\r\n                <div style={{ \r\n                  height: '12px', \r\n                  width: '80px', \r\n                  borderRadius: '4px',\r\n                  marginBottom: '6px',\r\n                  ...shimmer \r\n                }} />\r\n                <div style={{ display: 'flex', gap: '3px' }}>\r\n                  <div style={{ \r\n                    height: '20px', \r\n                    width: '25px', \r\n                    borderRadius: '3px',\r\n                    ...shimmer \r\n                  }} />\r\n                  <div style={{ \r\n                    height: '20px', \r\n                    width: '25px', \r\n                    borderRadius: '3px',\r\n                    ...shimmer \r\n                  }} />\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Table Rows Skeleton */}\r\n          {['M', 'AM'].map((creneau, creneauIndex) => (\r\n            <div key={creneau} style={{\r\n              display: 'grid',\r\n              gridTemplateColumns: '40px repeat(5, 1fr)',\r\n              gap: '1px',\r\n              marginBottom: '1px'\r\n            }}>\r\n              <div style={{\r\n                height: '200px',\r\n                backgroundColor: creneauIndex === 0 ? '#fef3c7' : '#dbeafe',\r\n                border: '1px solid #e5e7eb',\r\n                borderRadius: '4px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                fontWeight: 'bold',\r\n                fontSize: '11px'\r\n              }}>\r\n                {creneau}\r\n              </div>\r\n              \r\n              {jours.map((jour, dayIndex) => (\r\n                <div key={`${creneau}-${dayIndex}`} style={{\r\n                  height: '200px',\r\n                  backgroundColor: 'white',\r\n                  border: '1px solid #e5e7eb',\r\n                  borderRadius: '4px',\r\n                  padding: '8px',\r\n                  display: 'flex',\r\n                  flexDirection: 'column',\r\n                  gap: '6px'\r\n                }}>\r\n                  {/* Lieu Select Skeleton */}\r\n                  <div style={{ \r\n                    height: '28px', \r\n                    width: '100%', \r\n                    borderRadius: '4px',\r\n                    ...shimmer \r\n                  }} />\r\n                  \r\n                  {/* Salarié Select Skeleton */}\r\n                  <div style={{ \r\n                    height: '28px', \r\n                    width: '100%', \r\n                    borderRadius: '4px',\r\n                    ...shimmer \r\n                  }} />\r\n                  \r\n                  {/* Formateurs Block Skeleton */}\r\n                  <div style={{\r\n                    padding: '6px',\r\n                    background: 'rgba(255, 255, 255, 0.2)',\r\n                    borderRadius: '4px',\r\n                    border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                  }}>\r\n                    <div style={{ \r\n                      height: '14px', \r\n                      width: '80px', \r\n                      borderRadius: '4px',\r\n                      margin: '0 auto 4px',\r\n                      ...shimmer \r\n                    }} />\r\n                    {[1, 2].map(i => (\r\n                      <div key={i} style={{ \r\n                        height: '24px', \r\n                        width: '100%', \r\n                        borderRadius: '3px',\r\n                        marginBottom: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                    ))}\r\n                    <div style={{ display: 'flex', gap: '3px', justifyContent: 'center', marginTop: '4px' }}>\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {/* Apprenants Block Skeleton */}\r\n                  <div style={{\r\n                    padding: '6px',\r\n                    background: 'rgba(255, 255, 255, 0.2)',\r\n                    borderRadius: '4px',\r\n                    border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                  }}>\r\n                    <div style={{ \r\n                      height: '14px', \r\n                      width: '80px', \r\n                      borderRadius: '4px',\r\n                      margin: '0 auto 4px',\r\n                      ...shimmer \r\n                    }} />\r\n                    <div style={{ \r\n                      height: '24px', \r\n                      width: '100%', \r\n                      borderRadius: '3px',\r\n                      marginBottom: '3px',\r\n                      ...shimmer \r\n                    }} />\r\n                    <div style={{ display: 'flex', gap: '3px', justifyContent: 'center', marginTop: '4px' }}>\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n// Fonction pour calculer la date d'un jour spécifique dans la semaine courante\r\nfunction getDateOfWeek(dayIndex, currentDate) {\r\n    const startOfWeek = new Date(currentDate);\r\n    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1);\r\n    const resultDate = new Date(startOfWeek);\r\n    resultDate.setDate(startOfWeek.getDate() + dayIndex);\r\n    return resultDate.toLocaleDateString('fr-FR');\r\n}\r\n\r\n// Fonction pour revenir à la semaine courante\r\nfunction getCurrentWeekStart() {\r\n    const now = new Date();\r\n    const startOfWeek = new Date(now);\r\n    startOfWeek.setDate(now.getDate() - now.getDay() + 1);\r\n    return startOfWeek;\r\n}\r\n\r\n// Fonction dates UTC pour éviter décalages timezone\r\nfunction getWeekDates(currentDate) {\r\n    const startOfWeek = new Date(currentDate);\r\n    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1);\r\n    \r\n    const weekDates = [];\r\n    for (let i = 0; i < 5; i++) {\r\n        const date = new Date(startOfWeek);\r\n        date.setDate(startOfWeek.getDate() + i);\r\n        const year = date.getFullYear();\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        const day = String(date.getDate()).padStart(2, '0');\r\n        weekDates.push(`${year}-${month}-${day}`);\r\n    }\r\n    return weekDates;\r\n}\r\n\r\nfunction PlanningCoordo({ user, logout, inactivityTime }) {\r\n    const router = useRouter();\r\n    \r\n    // États pour les données de base\r\n    const [salaries, setSalaries] = useState([]);\r\n    const [formateurs, setFormateurs] = useState([]);\r\n    const [apprenants, setApprenants] = useState([]);\r\n    const [currentDate, setCurrentDate] = useState(new Date());\r\n    const [lieux, setLieux] = useState([]);\r\n    const [planningTypes, setPlanningTypes] = useState([]);\r\n    const [absencesValidees, setAbsencesValidees] = useState([]);\r\n    \r\n    // États pour les données du planning\r\n    const [apprenantsParCase, setApprenantsParCase] = useState({});\r\n    const [formateursParCase, setFormateursParCase] = useState({});\r\n    const [lieuxParJour, setLieuxParJour] = useState({});\r\n    const [lieuxSelectionnes, setLieuxSelectionnes] = useState({});\r\n    const [salariesSelectionnes, setSalariesSelectionnes] = useState({});\r\n    \r\n    // États pour coloration persistante post-enregistrement\r\n    const [couleursEnregistrees, setCouleursEnregistrees] = useState({});\r\n    \r\n    // États de contrôle\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [dataLoaded, setDataLoaded] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [filtreDisponibilite, setFiltreDisponibilite] = useState('toutes');\r\n\r\n    // ☆☆☆ NOUVEAUX ÉTATS POUR CONTRÔLE ROI ABSOLU - ÉTAPE 3.1 ☆☆☆\r\n    const [derniereCommande, setDerniereCommande] = useState(null);\r\n    const [commandesTraitees, setCommandesTraitees] = useState(new Set());\r\n    const [statsEcoute, setStatsEcoute] = useState({\r\n        commandesRecues: 0,\r\n        refreshEffectues: 0,\r\n        derniereActivite: null\r\n    });\r\n\r\n    // ☆☆☆ HELPER FUNCTIONS POUR IMPRESSION - RÉCUPÉRATION DES NOMS ☆☆☆\r\n    // Helper pour récupérer le nom du lieu\r\n    const getNomLieu = (lieuId) => {\r\n        if (!lieuId) return '';\r\n        const lieu = lieux.find(l => l.id === lieuId);\r\n        return lieu ? lieu.nom : '';\r\n    };\r\n\r\n    // Helper pour récupérer le nom du salarié  \r\n    const getNomSalarie = (salarieId) => {\r\n        if (!salarieId) return '';\r\n        const salarie = salaries.find(s => s.id === salarieId);\r\n        return salarie ? (salarie.initiales || getInitiales(salarie.prenom, salarie.nom)) : '';\r\n    };\r\n\r\n    // Helper pour récupérer le nom du formateur\r\n    const getNomFormateur = (formateurId) => {\r\n        if (!formateurId) return '';\r\n        const formateur = formateurs.find(f => f.id === formateurId);\r\n        return formateur ? `${formateur.prenom} ${formateur.nom}` : '';\r\n    };\r\n\r\n    // Helper pour récupérer le nom de l'apprenant\r\n    const getNomApprenant = (apprenantId) => {\r\n        if (!apprenantId) return '';\r\n        const apprenant = apprenants.find(a => a.id === apprenantId);\r\n        return apprenant ? `${apprenant.prenom} ${apprenant.nom}` : '';\r\n    };\r\n\r\n    // ☆☆☆ FONCTION ROI AMÉLIORÉE - ÉCOUTE ACTIVE COMPLÈTE ☆☆☆\r\n    const ecouterCommandesRoi = () => {\r\n        const interval = setInterval(() => {\r\n            const commande = localStorage.getItem('roiCommande');\r\n            if (commande) {\r\n                try {\r\n                    const parsed = JSON.parse(commande);\r\n                    \r\n                    // Éviter de traiter la même commande plusieurs fois\r\n                    if (!commandesTraitees.has(parsed.timestamp)) {\r\n                        console.log('🤴 PRINCE COORDO reçoit ordre du ROI:', parsed);\r\n                        \r\n                        setDerniereCommande(parsed);\r\n                        setCommandesTraitees(prev => new Set([...prev, parsed.timestamp]));\r\n                        \r\n                        // Traiter immédiatement la commande ROI\r\n                        executerOrdreRoi(parsed);\r\n                        \r\n                        // Mettre à jour stats écoute\r\n                        setStatsEcoute(prev => ({\r\n                            ...prev,\r\n                            commandesRecues: prev.commandesRecues + 1,\r\n                            derniereActivite: new Date().toLocaleTimeString()\r\n                        }));\r\n                    }\r\n                } catch (error) {\r\n                    console.error('❌ Erreur parsing commande ROI:', error);\r\n                }\r\n            }\r\n        }, 500); // Check plus fréquent pour réactivité\r\n\r\n        return interval;\r\n    };\r\n\r\n    // ☆☆☆ FONCTION ROI PRINCIPALE - EXÉCUTION ORDRES ☆☆☆\r\n    const executerOrdreRoi = async (commande) => {\r\n        try {\r\n            console.log(`🤴 PRINCE exécute ordre: ${commande.action}`);\r\n            \r\n            switch (commande.action) {\r\n                case 'retirer_formateur':\r\n                    await traiterRetirerFormateur(commande);\r\n                    break;\r\n                    \r\n                case 'ajouter_formateur':\r\n                    await traiterAjouterFormateur(commande);\r\n                    break;\r\n                    \r\n                case 'remettre_disponible':\r\n                    await traiterRemettreDisponible(commande);\r\n                    break;\r\n                    \r\n                case 'changer_statut':\r\n                    await traiterChangerStatut(commande);\r\n                    break;\r\n                    \r\n                case 'refresh_complet':\r\n                    await traiterRefreshComplet(commande);\r\n                    break;\r\n                    \r\n                default:\r\n                    console.log(`⚠️ Ordre ROI non reconnu: ${commande.action}`);\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur exécution ordre ROI:', error);\r\n        }\r\n    };\r\n\r\n    // ☆☆☆ TRAITEMENTS SPÉCIFIQUES DES ORDRES ROI ☆☆☆\r\n    \r\n    const traiterRetirerFormateur = async (commande) => {\r\n        console.log(`🚫 PRINCE retire formateur ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Retirer formateur le ${commande.date}\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterAjouterFormateur = async (commande) => {\r\n        console.log(`✅ PRINCE ajoute formateur ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        const typeAjout = commande.details?.transformation || 'ajout_standard';\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Ajouter formateur ${\r\n            typeAjout.includes('dispo_except') ? '(DISPO EXCEPT)' : ''\r\n        } le ${commande.date}\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterRemettreDisponible = async (commande) => {\r\n        console.log(`🔄 PRINCE remet disponible ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Formateur remis disponible le ${commande.date}\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterChangerStatut = async (commande) => {\r\n        console.log(`🔄 PRINCE change statut ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        const transformation = commande.details?.transformation || 'changement_type';\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Changement statut (${transformation})\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterRefreshComplet = async (commande) => {\r\n        console.log('🔄 PRINCE effectue refresh complet sur ordre ROI');\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Refresh complet des données\r\n🔄 Rechargement total en cours...`);\r\n        \r\n        // Refresh complet de toutes les données\r\n        await rechargerToutesDonnees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    // ☆☆☆ FONCTIONS DE RECHARGEMENT OPTIMISÉES ☆☆☆\r\n    \r\n    const rechargerAbsencesValidees = async () => {\r\n        try {\r\n            console.log('🔄 Rechargement absences validées...');\r\n            \r\n            const { data: absencesRes, error } = await supabase\r\n                .from('absences_formateurs')\r\n                .select('id, formateur_id, date_debut, date_fin, type, statut')\r\n                .eq('statut', 'validé');\r\n                \r\n            if (error) throw error;\r\n                \r\n            if (absencesRes) {\r\n                console.log(`✅ ${absencesRes.length} absences validées rechargées`);\r\n                setAbsencesValidees(absencesRes);\r\n                \r\n                // Mettre à jour stats\r\n                setStatsEcoute(prev => ({\r\n                    ...prev,\r\n                    refreshEffectues: prev.refreshEffectues + 1\r\n                }));\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur rechargement absences:', error);\r\n        }\r\n    };\r\n\r\n    const rechargerToutesDonnees = async () => {\r\n        try {\r\n            console.log('🔄 Rechargement complet données...');\r\n            \r\n            const [absencesRes, planningTypesRes] = await Promise.all([\r\n                supabase.from('absences_formateurs').select('id, formateur_id, date_debut, date_fin, type, statut').eq('statut', 'validé'),\r\n                supabase.from('planning_type_formateurs').select('id, formateur_id, jour, creneau, statut, lieu_id, valide').eq('valide', true)\r\n            ]);\r\n\r\n            if (absencesRes.data) setAbsencesValidees(absencesRes.data);\r\n            if (planningTypesRes.data) setPlanningTypes(planningTypesRes.data);\r\n            \r\n            console.log('✅ Rechargement complet terminé');\r\n            \r\n            // Mettre à jour stats\r\n            setStatsEcoute(prev => ({\r\n                ...prev,\r\n                refreshEffectues: prev.refreshEffectues + 1\r\n            }));\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur rechargement complet:', error);\r\n        }\r\n    };\r\n\r\n    // RÉCUPÉRATION DES DONNÉES DE BASE\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const [salariesRes, formateursRes, apprenantsRes, lieuxRes, planningTypesRes, absencesRes] = await Promise.all([\r\n                    supabase.from('users').select('id, prenom, nom, role, initiales').eq('role', 'salarié').eq('archive', false),\r\n                    supabase.from('users').select('id, prenom, nom, role').eq('role', 'formateur').eq('archive', false),\r\n                    supabase.from('users').select('id, prenom, nom, role').eq('role', 'apprenant').eq('archive', false),\r\n                    supabase.from('lieux').select('id, nom, couleur, initiale').eq('archive', false),\r\n                    supabase.from('planning_type_formateurs').select('id, formateur_id, jour, creneau, statut, lieu_id, valide').eq('valide', true),\r\n                    supabase.from('absences_formateurs').select('id, formateur_id, date_debut, date_fin, type, statut').eq('statut', 'validé')\r\n                ]);\r\n\r\n                if (salariesRes.data) setSalaries(salariesRes.data);\r\n                if (formateursRes.data) setFormateurs(formateursRes.data);\r\n                if (apprenantsRes.data) setApprenants(apprenantsRes.data);\r\n                if (lieuxRes.data) setLieux(lieuxRes.data);\r\n                if (planningTypesRes.data) setPlanningTypes(planningTypesRes.data);\r\n                if (absencesRes.data) setAbsencesValidees(absencesRes.data);\r\n            } catch (error) {\r\n                console.error('Erreur lors du chargement des données:', error);\r\n            }\r\n        };\r\n        \r\n        fetchData();\r\n    }, []);\r\n\r\n    // ☆☆☆ EFFET POUR DÉMARRER L'ÉCOUTE ROI AMÉLIORÉE ☆☆☆\r\n    useEffect(() => {\r\n        console.log('🎧 PRINCE démarre écoute active des ordres du ROI...');\r\n        const interval = ecouterCommandesRoi();\r\n        \r\n        return () => {\r\n            console.log('🔇 PRINCE arrête écoute des ordres ROI');\r\n            clearInterval(interval);\r\n        };\r\n    }, []); // Pas de dépendances pour écoute continue\r\n\r\n    // ☆☆☆ FONCTION CORRIGÉE - PRIORITÉ DISPO EXCEPTIONNELLE ☆☆☆\r\n    const isFormateurAbsent = (formateurId, dateStr) => {\r\n        // D'ABORD vérifier s'il a une dispo exceptionnelle (priorité absolue)\r\n        const dispoExcept = absencesValidees.find(absence => {\r\n            if (absence.formateur_id !== formateurId) return false;\r\n            if (absence.type !== 'formation') return false;\r\n            \r\n            const estDansIntervalle = dateStr >= absence.date_debut && dateStr <= absence.date_fin;\r\n            return estDansIntervalle;\r\n        });\r\n        \r\n        // Si dispo exceptionnelle trouvée = PAS absent !\r\n        if (dispoExcept) {\r\n            console.log(`✅ PRIORITÉ DISPO EXCEPT: formateur ${formateurId} disponible le ${dateStr} !`);\r\n            return false;\r\n        }\r\n        \r\n        // ENSUITE chercher les vraies absences\r\n        const absenceJour = absencesValidees.find(absence => {\r\n            if (absence.formateur_id !== formateurId) return false;\r\n            if (absence.type === 'formation') return false; // Dispo except n'est pas absence\r\n            \r\n            const estDansIntervalle = dateStr >= absence.date_debut && dateStr <= absence.date_fin;\r\n            return estDansIntervalle;\r\n        });\r\n\r\n        if (absenceJour) {\r\n            console.log(`🚫 ${formateurId} absent le ${dateStr} - retiré par ROI`);\r\n        }\r\n\r\n        return !!absenceJour;\r\n    };\r\n\r\n    // Fonction dispo exceptionnelle corrigée\r\n    const hasDispoExceptionnelle = (formateurId, dateStr) => {\r\n        const dispoJour = absencesValidees.find(absence => {\r\n            if (absence.formateur_id !== formateurId) return false;\r\n            if (absence.type !== 'formation') return false;\r\n            \r\n            const estDansIntervalle = dateStr >= absence.date_debut && dateStr <= absence.date_fin;\r\n            return estDansIntervalle;\r\n        });\r\n\r\n        return !!dispoJour;\r\n    };\r\n\r\n    // Fonction de filtrage des formateurs disponibles\r\n    const getFormateursDisponibles = (jour, creneau, lieuId) => {\r\n        const creneauDB = creneau === 'Matin' ? 'Matin' : 'AM';\r\n        \r\n        if (!jour || !creneau) {\r\n            return formateurs.map(f => ({ ...f, statut: null }));\r\n        }\r\n\r\n        const dayIndex = jours.indexOf(jour);\r\n        const weekDates = getWeekDates(currentDate);\r\n        const dateStr = weekDates[dayIndex];\r\n\r\n        const formateursAvecPlanningType = planningTypes.filter(pt => {\r\n            const jourMatch = pt.jour === jour;\r\n            const creneauMatch = pt.creneau === creneauDB;\r\n            \r\n            let statutValide = false;\r\n            if (filtreDisponibilite === 'disponible') {\r\n                statutValide = pt.statut === 'disponible';\r\n            } else if (filtreDisponibilite === 'exceptionnelles') {\r\n                statutValide = pt.statut === 'dispo_except';\r\n            } else if (filtreDisponibilite === 'toutes') {\r\n                statutValide = pt.statut === 'disponible' || pt.statut === 'dispo_except';\r\n            }\r\n            \r\n            if (!jourMatch || !creneauMatch || !statutValide) {\r\n                return false;\r\n            }\r\n            \r\n            if (pt.lieu_id === null) {\r\n                return true;\r\n            } else if (lieuId) {\r\n                return pt.lieu_id === lieuId;\r\n            } else {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        const formateursAvecPlanningTypeIds = formateursAvecPlanningType.map(pt => pt.formateur_id);\r\n        \r\n        const formateursAvecPlanningTypeTotal = planningTypes.map(pt => pt.formateur_id);\r\n        const formateursSansPlanningType = formateurs.filter(f => \r\n            !formateursAvecPlanningTypeTotal.includes(f.id)\r\n        );\r\n\r\n        const formateursDisponiblesPlanningType = formateurs.filter(f => \r\n            formateursAvecPlanningTypeIds.includes(f.id)\r\n        ).map(f => {\r\n            const planningType = formateursAvecPlanningType.find(pt => pt.formateur_id === f.id);\r\n            \r\n            // ☆☆☆ LOGIQUE ROI - ABSENCE GAGNE TOUJOURS ☆☆☆\r\n            if (isFormateurAbsent(f.id, dateStr)) {\r\n                console.log(`🚫 ${f.prenom} absent le ${dateStr} - retiré par ROI`);\r\n                return null;\r\n            }\r\n            \r\n            // ☆☆☆ LOGIQUE ROI - DISPO EXCEPT PRIORITAIRE ☆☆☆\r\n            if (hasDispoExceptionnelle(f.id, dateStr)) {\r\n                console.log(`✅ ${f.prenom} dispo exceptionnelle le ${dateStr} - ajouté par ROI`);\r\n                return { \r\n                    ...f, \r\n                    statut: 'dispo_except',\r\n                    lieuSpecifique: false,\r\n                    source: 'exception_validee_roi'\r\n                };\r\n            }\r\n            \r\n            return { \r\n                ...f, \r\n                statut: planningType ? planningType.statut : null,\r\n                lieuSpecifique: planningType && planningType.lieu_id ? true : false,\r\n                source: 'planning_type'\r\n            };\r\n        }).filter(f => f !== null);\r\n\r\n        const formateursSansPlanningAvecStatut = filtreDisponibilite === 'toutes' \r\n            ? formateursSansPlanningType.filter(f => !isFormateurAbsent(f.id, dateStr))\r\n                .map(f => {\r\n                    // ☆☆☆ LOGIQUE ROI - DISPO EXCEPT MÊME SANS PLANNING TYPE ☆☆☆\r\n                    if (hasDispoExceptionnelle(f.id, dateStr)) {\r\n                        console.log(`✅ ${f.prenom} dispo exceptionnelle le ${dateStr} (sans planning) - ajouté par ROI`);\r\n                        return { \r\n                            ...f, \r\n                            statut: 'dispo_except',\r\n                            lieuSpecifique: false,\r\n                            source: 'exception_validee_roi'\r\n                        };\r\n                    }\r\n                    \r\n                    return { \r\n                        ...f, \r\n                        statut: null,\r\n                        lieuSpecifique: false,\r\n                        source: 'aucun_planning'\r\n                    };\r\n                })\r\n            : [];\r\n\r\n        // 🆕 NOUVELLE LOGIQUE : Exclusion formateurs déjà assignés sur le même créneau\r\n        const formateursAvecExclusion = [...formateursDisponiblesPlanningType, ...formateursSansPlanningAvecStatut]\r\n            .filter(formateur => {\r\n                // Vérifier si ce formateur est déjà assigné sur le même jour/créneau dans un autre lieu\r\n                const estDejaAssigne = Object.keys(formateursParCase).some(cellKey => {\r\n                    // Décomposer la cellKey: \"dayIndex-lieuIndex-creneau\"\r\n                    const [dayIdx, lieuIdx, creneauKey] = cellKey.split('-');\r\n                    const cellDayIndex = parseInt(dayIdx);\r\n                    const cellCreneau = creneauKey;\r\n                    \r\n                    // Vérifier si c'est le même jour et créneau\r\n                    const currentDayIndex = jours.indexOf(jour);\r\n                    const memeJour = cellDayIndex === currentDayIndex;\r\n                    const memeCreneau = cellCreneau === creneau;\r\n                    \r\n                    if (memeJour && memeCreneau) {\r\n                        // Vérifier si le formateur est assigné dans cette case\r\n                        const formateursAssignes = formateursParCase[cellKey] || [];\r\n                        const estAssigneDansCetteCase = formateursAssignes.includes(formateur.id);\r\n                        \r\n                        // Si assigné dans cette case, on doit vérifier si c'est pour le même lieu\r\n                        if (estAssigneDansCetteCase) {\r\n                            // Récupérer le lieu_id de la cellule où le formateur est assigné\r\n                            const cellLieuId = lieuxSelectionnes[cellKey];\r\n                            \r\n                            // Si c'est un lieu différent, alors c'est une exclusion\r\n                            // On compare les lieu_id directement, pas les indices\r\n                            return cellLieuId !== lieuId;\r\n                        }\r\n                    }\r\n                    \r\n                    return false;\r\n                });\r\n                \r\n                if (estDejaAssigne) {\r\n                    console.log(`🚫 ${formateur.prenom} exclu - déjà assigné ${jour} ${creneau} ailleurs`);\r\n                }\r\n                \r\n                return !estDejaAssigne;\r\n            });\r\n\r\n        return formateursAvecExclusion;\r\n    };\r\n\r\n    // CHARGEMENT DU PLANNING\r\n    const loadWeekPlanning = async (targetDate) => {\r\n        try {\r\n            const weekDates = getWeekDates(targetDate);\r\n            \r\n            const { data: planningData, error } = await supabase\r\n                .from('planning_hebdomadaire')\r\n                .select('*')\r\n                .in('date', weekDates)\r\n                .order('created_at', { ascending: false });\r\n\r\n            if (error) {\r\n                console.error('Erreur lors du chargement:', error);\r\n                return;\r\n            }\r\n\r\n            const newApprenantsParCase = {};\r\n            const newFormateursParCase = {};\r\n            const newLieuxSelectionnes = {};\r\n            const newSalariesSelectionnes = {};\r\n            const newLieuxParJour = {};\r\n\r\n            // ⭐ CORRECTION : Reconstruction des indices depuis les données BDD\r\n            jours.forEach((jour, dayIndex) => {\r\n                // Extraire tous les lieu_index uniques pour ce jour\r\n                const indicesUtilises = new Set();\r\n                \r\n                if (planningData && planningData.length > 0) {\r\n                    planningData.forEach(item => {\r\n                        if (item.jour === jour) {\r\n                            const lieuIndex = item.lieu_index || 0;\r\n                            indicesUtilises.add(lieuIndex);\r\n                        }\r\n                    });\r\n                }\r\n                \r\n                // Si aucune donnée, initialiser avec [0] par défaut\r\n                if (indicesUtilises.size === 0) {\r\n                    newLieuxParJour[dayIndex] = [0];\r\n                } else {\r\n                    // Convertir en array trié\r\n                    newLieuxParJour[dayIndex] = Array.from(indicesUtilises).sort((a, b) => a - b);\r\n                }\r\n            });\r\n\r\n            // Initialiser les structures pour TOUS les indices trouvés\r\n            jours.forEach((_, dayIndex) => {\r\n                newLieuxParJour[dayIndex].forEach(lieuIndex => {\r\n                    ['Matin', 'AM'].forEach((creneau) => {\r\n                        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                        newApprenantsParCase[key] = [\"\"];\r\n                        newFormateursParCase[key] = [\"\"];\r\n                        newLieuxSelectionnes[key] = \"\";\r\n                        newSalariesSelectionnes[key] = \"\";\r\n                    });\r\n                });\r\n            });\r\n\r\n            if (planningData && planningData.length > 0) {\r\n                planningData.forEach(item => {\r\n                    const dayIndex = jours.indexOf(item.jour);\r\n                    if (dayIndex !== -1) {\r\n                        const creneau = item.creneau === 'matin' ? 'Matin' : 'AM';\r\n                        const lieuIndex = item.lieu_index || 0;\r\n                        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n\r\n                        if (item.formateurs_ids && item.formateurs_ids.length > 0) {\r\n                            newFormateursParCase[key] = [...item.formateurs_ids.filter(id => id), \"\"];\r\n                        }\r\n                        if (item.apprenants_ids && item.apprenants_ids.length > 0) {\r\n                            newApprenantsParCase[key] = [...item.apprenants_ids.filter(id => id), \"\"];\r\n                        }\r\n                        if (item.lieu_id) {\r\n                            newLieuxSelectionnes[key] = item.lieu_id;\r\n                        }\r\n                        if (item.salarie_id) {\r\n                            newSalariesSelectionnes[key] = item.salarie_id;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            setApprenantsParCase(newApprenantsParCase);\r\n            setFormateursParCase(newFormateursParCase);\r\n            setLieuxSelectionnes(newLieuxSelectionnes);\r\n            setSalariesSelectionnes(newSalariesSelectionnes);\r\n            setLieuxParJour(newLieuxParJour);\r\n            setDataLoaded(true);\r\n\r\n        } catch (error) {\r\n            console.error('Erreur lors du chargement du planning:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (lieux.length >= 0 && salaries.length > 0 && formateurs.length > 0 && apprenants.length > 0) {\r\n            setDataLoaded(false);\r\n            loadWeekPlanning(currentDate);\r\n        }\r\n    }, [currentDate, lieux, salaries, formateurs, apprenants]);\r\n\r\n    // NOUVEAU : Recalculer couleurs enregistrées après chargement des données\r\n    useEffect(() => {\r\n        if (dataLoaded && lieux.length > 0) {\r\n            const couleursRestaurees = calculerCouleursEnregistrees();\r\n            setCouleursEnregistrees(couleursRestaurees);\r\n        }\r\n    }, [dataLoaded, formateursParCase, apprenantsParCase, lieuxSelectionnes, lieuxParJour, lieux]);\r\n\r\n    // FONCTIONS DE SAUVEGARDE\r\n    const handleEnregistrerBrouillon = async () => {\r\n        setIsLoading(true);\r\n        \r\n        try {\r\n            const weekDates = getWeekDates(currentDate);\r\n            const stats = await sauvegarderPlanning('brouillon', weekDates);\r\n\r\n            // NOUVEAU : Appliquer coloration persistante après sauvegarde réussie\r\n            const nouvellesCouleursEnregistrees = calculerCouleursEnregistrees();\r\n            setCouleursEnregistrees(nouvellesCouleursEnregistrees);\r\n\r\n            setMessage(`📝 Brouillon semaine ${semaine} enregistré !\r\n${stats.creneaux} créneaux • ${stats.formateursAfectes} formateurs`);\r\n            setTimeout(() => setMessage(''), 5000);\r\n\r\n        } catch (error) {\r\n            console.error('Erreur lors de l\\'enregistrement:', error);\r\n            setMessage(`⚠️ Erreur: ${error.message}`);\r\n            setTimeout(() => setMessage(''), 5000);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleValiderTransmettre = async () => {\r\n        if (!window.confirm('Valider et transmettre le planning ? Les formateurs recevront des notifications.')) return;\r\n        \r\n        setIsLoading(true);\r\n        \r\n        try {\r\n            const weekDates = getWeekDates(currentDate);\r\n            const stats = await sauvegarderPlanning('validé', weekDates);\r\n\r\n            // NOUVEAU : Appliquer coloration persistante après sauvegarde réussie\r\n            const nouvellesCouleursEnregistrees = calculerCouleursEnregistrees();\r\n            setCouleursEnregistrees(nouvellesCouleursEnregistrees);\r\n\r\n            await envoyerMessagesValidation(stats, semaine, weekDates);\r\n\r\n            setMessage(`✅ Planning semaine ${semaine} validé et transmis !\r\n${stats.creneaux} créneaux • ${stats.formateursAfectes} formateurs affectés\r\n📧 Messages envoyés aux formateurs`);\r\n            setTimeout(() => setMessage(''), 8000);\r\n\r\n        } catch (error) {\r\n            console.error('Erreur lors de la validation:', error);\r\n            setMessage(`⚠️ Erreur: ${error.message}`);\r\n            setTimeout(() => setMessage(''), 5000);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Fonction envoi messages validation\r\n    const envoyerMessagesValidation = async (stats, semaine, weekDates) => {\r\n        try {\r\n            const { data: affectations } = await supabase\r\n                .from('planning_formateurs_hebdo')\r\n                .select('formateur_id, date, creneau, lieu_nom')\r\n                .in('date', weekDates)\r\n                .eq('statut', 'attribue');\r\n\r\n            if (affectations && affectations.length > 0) {\r\n                const affectationsParFormateur = {};\r\n                affectations.forEach(aff => {\r\n                    if (!affectationsParFormateur[aff.formateur_id]) {\r\n                        affectationsParFormateur[aff.formateur_id] = [];\r\n                    }\r\n                    affectationsParFormateur[aff.formateur_id].push(aff);\r\n                });\r\n\r\n                for (const [formateurId, affectationsFormateur] of Object.entries(affectationsParFormateur)) {\r\n                    const formateur = formateurs.find(f => f.id === formateurId);\r\n                    if (formateur) {\r\n                        const creneauxDetail = affectationsFormateur.map(aff => \r\n                            `${aff.date} ${aff.creneau} à ${aff.lieu_nom}`\r\n                        ).join('\\n');\r\n\r\n                        await supabase.from('messages').insert({\r\n                            expediteur: 'Coordination ACLEF',\r\n                            destinataire_id: formateurId,\r\n                            objet: `Planning semaine ${semaine} validé`,\r\n                            contenu: `Bonjour ${formateur.prenom},\\n\\nVotre planning pour la semaine ${semaine} a été validé.\\n\\nVos interventions :\\n${creneauxDetail}\\n\\nMerci de votre engagement !\\n\\nCordialement,\\nL'équipe ACLEF`,\r\n                            statut: 'envoye',\r\n                            type: 'planning_valide'\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Erreur envoi messages validation:', error);\r\n        }\r\n    };\r\n\r\n    // FONCTION DE SAUVEGARDE\r\n    const sauvegarderPlanning = async (statut, weekDates) => {\r\n        const planningsToSave = [];\r\n        const planningFormateursToSave = [];\r\n        const formateursAfectes = new Set();\r\n\r\n        jours.forEach((jour, dayIndex) => {\r\n            const currentDateStr = weekDates[dayIndex];\r\n            \r\n            (lieuxParJour[dayIndex] || []).forEach((lieuIndex) => {\r\n                ['Matin', 'AM'].forEach((creneau) => {\r\n                    const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                    \r\n                    const formateursIds = (formateursParCase[key] || []).filter(id => id !== \"\");\r\n                    const apprenantsIds = (apprenantsParCase[key] || []).filter(id => id !== \"\");\r\n                    const lieuId = lieuxSelectionnes[key] || null;\r\n                    const salarieId = salariesSelectionnes[key] || null;\r\n                    \r\n                    if (formateursIds.length > 0 || apprenantsIds.length > 0 || lieuId || salarieId) {\r\n                        let creneauDB = creneau === 'Matin' ? 'matin' : 'AM';\r\n\r\n                        planningsToSave.push({\r\n                            date: currentDateStr,\r\n                            jour: jour,\r\n                            creneau: creneauDB,\r\n                            lieu_index: lieuIndex,\r\n                            lieu_id: lieuId,\r\n                            salarie_id: salarieId || null,\r\n                            formateurs_ids: formateursIds,\r\n                            apprenants_ids: apprenantsIds,\r\n                            statut_planning: statut\r\n                        });\r\n\r\n                        formateursIds.forEach(formateurId => {\r\n                            formateursAfectes.add(formateurId);\r\n                            const lieuInfo = lieux.find(l => l.id === lieuId);\r\n                            \r\n                            planningFormateursToSave.push({\r\n                                formateur_id: formateurId,\r\n                                date: currentDateStr,\r\n                                creneau: creneauDB,\r\n                                lieu_nom: lieuInfo ? lieuInfo.nom : '',\r\n                                lieu_initiales: lieuInfo ? lieuInfo.initiale : '',\r\n                                statut: statut === 'brouillon' ? 'brouillon' : 'attribue'\r\n                            });\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n        if (planningsToSave.length > 0) {\r\n            // DELETE avant INSERT pour éviter les doublons\r\n            const { error: deleteError } = await supabase\r\n                .from('planning_hebdomadaire')\r\n                .delete()\r\n                .in('date', weekDates);\r\n\r\n            if (deleteError) {\r\n                console.error('Erreur suppression planning:', deleteError);\r\n                throw deleteError;\r\n            }\r\n\r\n            const { error: insertError } = await supabase\r\n                .from('planning_hebdomadaire')\r\n                .insert(planningsToSave);\r\n\r\n            if (insertError) {\r\n                console.error('Erreur insertion planning:', insertError);\r\n                throw insertError;\r\n            }\r\n        }\r\n\r\n        if (planningFormateursToSave.length > 0) {\r\n            // DELETE avant INSERT pour éviter les doublons\r\n            const { error: deleteFormateursError } = await supabase\r\n                .from('planning_formateurs_hebdo')\r\n                .delete()\r\n                .in('date', weekDates);\r\n\r\n            if (deleteFormateursError) {\r\n                console.error('Erreur suppression planning formateurs:', deleteFormateursError);\r\n                throw deleteFormateursError;\r\n            }\r\n\r\n            const { error: insertFormateursError } = await supabase\r\n                .from('planning_formateurs_hebdo')\r\n                .insert(planningFormateursToSave);\r\n\r\n            if (insertFormateursError) {\r\n                console.error('Erreur insertion planning formateurs:', insertFormateursError);\r\n                throw insertFormateursError;\r\n            }\r\n        }\r\n\r\n        return {\r\n            creneaux: planningsToSave.length,\r\n            formateursAfectes: formateursAfectes.size\r\n        };\r\n    };\r\n\r\n    // FONCTIONS UTILITAIRES\r\n    const getLieuCouleur = (lieuId) => {\r\n        if (!lieuId) return '#ffffff';\r\n        const lieu = lieux.find(l => l.id === lieuId);\r\n        return lieu?.couleur || '#ffffff';\r\n    };\r\n\r\n    // FONCTION COLORATION PERSISTANTE - Calculer couleurs après enregistrement\r\n    const calculerCouleursEnregistrees = () => {\r\n        const nouvellesCouleursEnregistrees = {};\r\n        \r\n        jours.forEach((jour, dayIndex) => {\r\n            (lieuxParJour[dayIndex] || []).forEach((lieuIndex) => {\r\n                ['Matin', 'AM'].forEach((creneau) => {\r\n                    const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                    \r\n                    const formateursIds = (formateursParCase[key] || []).filter(id => id !== \"\");\r\n                    const apprenantsIds = (apprenantsParCase[key] || []).filter(id => id !== \"\");\r\n                    const lieuId = lieuxSelectionnes[key] || null;\r\n                    \r\n                    // Case a des personnes affectées ET un lieu sélectionné\r\n                    const aDesPersonnes = formateursIds.length > 0 || apprenantsIds.length > 0;\r\n                    \r\n                    if (lieuId && aDesPersonnes) {\r\n                        nouvellesCouleursEnregistrees[key] = getLieuCouleur(lieuId);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        \r\n        return nouvellesCouleursEnregistrees;\r\n    };\r\n\r\n    // FONCTION COLORATION PERSISTANTE - Vérifier si case devient vide après suppression\r\n    const verifierEtSupprimerCouleur = (cellKey) => {\r\n        // Extraire les indices de la cellKey\r\n        const [dayIndex, lieuIndex, creneau] = cellKey.split('-');\r\n        const dayIdx = parseInt(dayIndex);\r\n        const lieuIdx = parseInt(lieuIndex);\r\n        const key = cellKey;\r\n        \r\n        // Vérifier s'il reste des personnes affectées dans cette case\r\n        const formateursIds = (formateursParCase[key] || []).filter(id => id !== \"\");\r\n        const apprenantsIds = (apprenantsParCase[key] || []).filter(id => id !== \"\");\r\n        const aDesPersonnes = formateursIds.length > 0 || apprenantsIds.length > 0;\r\n        \r\n        // Si plus personne, supprimer la couleur\r\n        if (!aDesPersonnes) {\r\n            setCouleursEnregistrees(prev => {\r\n                const nouveau = { ...prev };\r\n                delete nouveau[cellKey];\r\n                return nouveau;\r\n            });\r\n        }\r\n    };\r\n\r\n    const getTextColor = (backgroundColor) => {\r\n        if (!backgroundColor || backgroundColor === '#ffffff') return '#000000';\r\n        \r\n        const hex = backgroundColor.replace('#', '');\r\n        const r = parseInt(hex.substr(0, 2), 16);\r\n        const g = parseInt(hex.substr(2, 2), 16);\r\n        const b = parseInt(hex.substr(4, 2), 16);\r\n        \r\n        const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\r\n        return luminance > 0.5 ? '#000000' : '#ffffff';\r\n    };\r\n\r\n    const getInitiales = (prenom, nom) => {\r\n        return `${prenom?.[0] ?? ''}${nom?.[0] ?? ''}`.toUpperCase();\r\n    };\r\n\r\n    const semaine = Math.ceil(((currentDate - new Date(currentDate.getFullYear(), 0, 1)) / 86400000 + new Date(currentDate.getFullYear(), 0, 1).getDay() + 1) / 7);\r\n\r\n    // NAVIGATION\r\n    const changeWeek = (direction) => {\r\n        const newDate = new Date(currentDate);\r\n        newDate.setDate(currentDate.getDate() + (direction * 7));\r\n        setCurrentDate(newDate);\r\n    };\r\n\r\n    const goToCurrentWeek = () => {\r\n        const currentWeekStart = getCurrentWeekStart();\r\n        setCurrentDate(currentWeekStart);\r\n    };\r\n\r\n    // GESTION DES DONNÉES\r\n    const handleLieuChange = (dayIndex, lieuIndex, creneau, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setLieuxSelectionnes(prev => ({ ...prev, [key]: value }));\r\n    };\r\n\r\n    const handleSalarieChange = (dayIndex, lieuIndex, creneau, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setSalariesSelectionnes(prev => ({ ...prev, [key]: value }));\r\n    };\r\n\r\n    const handleFormateurChange = (dayIndex, lieuIndex, creneau, selectIndex, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const newList = [...(formateursParCase[key] || [])];\r\n        newList[selectIndex] = value;\r\n        setFormateursParCase(prev => ({ ...prev, [key]: newList }));\r\n        \r\n        // NOUVEAU : Si on supprime un formateur (valeur vide), vérifier si case devient vide\r\n        if (value === \"\") {\r\n            setTimeout(() => verifierEtSupprimerCouleur(key), 0);\r\n        }\r\n    };\r\n\r\n    const handleAddFormateur = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setFormateursParCase(prev => ({\r\n            ...prev,\r\n            [key]: [...(prev[key] || []), \"\"]\r\n        }));\r\n    };\r\n\r\n    const handleRemoveFormateur = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const currentList = formateursParCase[key] || [];\r\n        if (currentList.length > 1) {\r\n            setFormateursParCase(prev => ({\r\n                ...prev,\r\n                [key]: prev[key].slice(0, -1)\r\n            }));\r\n            \r\n            // NOUVEAU : Vérifier si case devient vide et supprimer couleur si nécessaire\r\n            setTimeout(() => verifierEtSupprimerCouleur(key), 0);\r\n        }\r\n    };\r\n\r\n    const handleApprenantChange = (dayIndex, lieuIndex, creneau, selectIndex, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const newList = [...(apprenantsParCase[key] || [])];\r\n        newList[selectIndex] = value;\r\n        setApprenantsParCase(prev => ({ ...prev, [key]: newList }));\r\n        \r\n        // NOUVEAU : Si on supprime un apprenant (valeur vide), vérifier si case devient vide\r\n        if (value === \"\") {\r\n            setTimeout(() => verifierEtSupprimerCouleur(key), 0);\r\n        }\r\n    };\r\n\r\n    const handleAddApprenant = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setApprenantsParCase(prev => ({\r\n            ...prev,\r\n            [key]: [...(prev[key] || []), \"\"]\r\n        }));\r\n    };\r\n\r\n    const handleRemoveApprenant = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const currentList = apprenantsParCase[key] || [];\r\n        if (currentList.length > 1) {\r\n            setApprenantsParCase(prev => ({\r\n                ...prev,\r\n                [key]: prev[key].slice(0, -1)\r\n            }));\r\n            \r\n            // NOUVEAU : Vérifier si case devient vide et supprimer couleur si nécessaire\r\n            setTimeout(() => verifierEtSupprimerCouleur(key), 0);\r\n        }\r\n    };\r\n\r\n    const handleAddLieu = (dayIndex) => {\r\n        const currentLieux = lieuxParJour[dayIndex] || [];\r\n        const newLieuIndex = Math.max(...currentLieux) + 1;\r\n        \r\n        setLieuxParJour(prev => ({\r\n            ...prev,\r\n            [dayIndex]: [...currentLieux, newLieuIndex]\r\n        }));\r\n\r\n        ['Matin', 'AM'].forEach((creneau) => {\r\n            const key = `${dayIndex}-${newLieuIndex}-${creneau}`;\r\n            setApprenantsParCase(prev => ({ ...prev, [key]: [\"\"] }));\r\n            setFormateursParCase(prev => ({ ...prev, [key]: [\"\"] }));\r\n            setLieuxSelectionnes(prev => ({ ...prev, [key]: \"\" }));\r\n            setSalariesSelectionnes(prev => ({ ...prev, [key]: \"\" }));\r\n        });\r\n    };\r\n\r\n    const handleRemoveLieu = (dayIndex, lieuIndex) => {\r\n        const currentLieux = lieuxParJour[dayIndex] || [];\r\n        if (currentLieux.length > 1) {\r\n            setLieuxParJour(prev => ({\r\n                ...prev,\r\n                [dayIndex]: currentLieux.filter(l => l !== lieuIndex)\r\n            }));\r\n\r\n            ['Matin', 'AM'].forEach((creneau) => {\r\n                const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                setApprenantsParCase(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n                setFormateursParCase(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n                setLieuxSelectionnes(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n                setSalariesSelectionnes(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    if (!dataLoaded) {\r\n        return <SkeletonPlanningLoader />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <style jsx>{`\r\n                @keyframes shimmer {\r\n                    0% { background-position: -200% 0; }\r\n                    100% { background-position: 200% 0; }\r\n                }\r\n                \r\n                @media print {\r\n                    /* ✅ MASQUER ÉLÉMENTS NON IMPRIMABLES */\r\n                    .no-print { \r\n                        display: none !important; \r\n                    }\r\n                    \r\n                    /* ✅ CONFIGURATION PAGE D'IMPRESSION */\r\n                    @page {\r\n                        size: A4 landscape; /* Format paysage pour largeur max */\r\n                        margin: 0.3in; /* Marges réduites */\r\n                    }\r\n                    \r\n                    /* ✅ OPTIMISATION BODY ET CONTENEUR PRINCIPAL */\r\n                    body { \r\n                        background: white !important;\r\n                        font-size: 8px !important; /* Police réduite pour plus d'espace */\r\n                        line-height: 1.2 !important;\r\n                    }\r\n                    \r\n                    /* ✅ FOND BLANC POUR LE CONTENEUR PRINCIPAL - ÉCONOMIE D'ENCRE */\r\n                    div[style*=\"background: 'linear-gradient\"] {\r\n                        background: white !important;\r\n                    }\r\n                    \r\n                    /* ✅ TITRE IMPRESSION CENTRÉ */\r\n                    .print-title { \r\n                        display: block !important; \r\n                        text-align: center; \r\n                        font-size: 14px !important; \r\n                        font-weight: bold; \r\n                        margin-bottom: 15px; \r\n                        color: black !important; \r\n                        page-break-after: avoid;\r\n                    }\r\n                    \r\n                    /* ✅ CONTENEUR PLANNING OPTIMISÉ */\r\n                    div[style*=\"borderRadius: '12px'\"] {\r\n                        margin: 0 !important;\r\n                        padding: 8px !important;\r\n                        box-shadow: none !important;\r\n                        border-radius: 0 !important;\r\n                    }\r\n                    \r\n                    /* ✅ TABLEAU PRINCIPAL - LARGEUR MAXIMALE */\r\n                    table {\r\n                        width: 100% !important;\r\n                        font-size: 7px !important;\r\n                        border-collapse: collapse !important;\r\n                        table-layout: fixed !important; /* Largeur fixes pour colonnes */\r\n                    }\r\n                    \r\n                    /* ✅ CELLULES HEADER OPTIMISÉES */\r\n                    th {\r\n                        padding: 3px 1px !important;\r\n                        font-size: 7px !important;\r\n                        font-weight: 600 !important;\r\n                        text-align: center !important;\r\n                        border: 1px solid #ccc !important;\r\n                        background: #f5f5f5 !important;\r\n                        line-height: 1.1 !important;\r\n                        max-width: 80px !important; /* Largeur max par colonne */\r\n                        overflow: hidden !important;\r\n                        word-wrap: break-word !important;\r\n                    }\r\n                    \r\n                    /* ✅ CELLULES CONTENU OPTIMISÉES */\r\n                    td {\r\n                        padding: 2px 1px !important;\r\n                        font-size: 6px !important;\r\n                        border: 1px solid #ccc !important;\r\n                        vertical-align: top !important;\r\n                        max-width: 80px !important;\r\n                        overflow: hidden !important;\r\n                        line-height: 1.1 !important;\r\n                    }\r\n                    \r\n                    /* ⭐ NOUVEAU : MASQUER SELECTS EN IMPRESSION */\r\n                    select {\r\n                        display: none !important;\r\n                    }\r\n                    \r\n                    /* ⭐ NOUVEAU : AFFICHER VERSIONS TEXTE POUR IMPRESSION */\r\n                    .print-only {\r\n                        display: block !important;\r\n                    }\r\n                    \r\n                    /* ⭐ NOUVEAU : STYLES POUR TEXTES D'IMPRESSION */\r\n                    .print-text {\r\n                        font-size: 6px !important;\r\n                        padding: 1px 2px !important;\r\n                        background: #f8f9fa !important;\r\n                        border: 1px solid #ccc !important;\r\n                        border-radius: 2px !important;\r\n                        margin-bottom: 1px !important;\r\n                        min-height: 10px !important;\r\n                        color: #333 !important;\r\n                        font-weight: 500 !important;\r\n                    }\r\n                    \r\n                    .print-text-empty {\r\n                        color: #999 !important;\r\n                        font-style: italic !important;\r\n                    }\r\n                    \r\n                    /* ✅ SECTIONS FORMATEURS/APPRENANTS COMPACTES */\r\n                    div[style*=\"padding: '6px'\"] {\r\n                        padding: 2px 1px !important;\r\n                        margin-bottom: 1px !important;\r\n                        border: 1px solid #ddd !important;\r\n                        border-radius: 2px !important;\r\n                    }\r\n                    \r\n                    /* ✅ TITRES SECTIONS RÉDUITS */\r\n                    div[style*=\"fontSize: '10px'\"][style*=\"fontWeight: '600'\"] {\r\n                        font-size: 5px !important;\r\n                        font-weight: 700 !important;\r\n                        margin-bottom: 1px !important;\r\n                        text-align: center !important;\r\n                        text-transform: uppercase !important;\r\n                    }\r\n                    \r\n                    /* ✅ COLONNES HORAIRES (M/AM) OPTIMISÉES */\r\n                    td[style*=\"backgroundColor: '#fef3c7'\"],\r\n                    td[style*=\"backgroundColor: '#dbeafe'\"] {\r\n                        min-width: 15px !important;\r\n                        max-width: 15px !important;\r\n                        font-size: 8px !important;\r\n                        font-weight: 700 !important;\r\n                        text-align: center !important;\r\n                        padding: 2px 1px !important;\r\n                    }\r\n                    \r\n                    /* ✅ GESTION COULEURS EN IMPRESSION N&B */\r\n                    * {\r\n                        -webkit-print-color-adjust: exact !important;\r\n                        print-color-adjust: exact !important;\r\n                    }\r\n                    \r\n                    /* ✅ EMPÊCHER SAUT DE PAGE AU MILIEU DU TABLEAU */\r\n                    table, tbody, tr {\r\n                        page-break-inside: avoid !important;\r\n                    }\r\n                    \r\n                    /* ✅ AJUSTEMENT POUR TRÈS LARGES PLANNINGS */\r\n                    @media print and (max-width: 11in) {\r\n                        table {\r\n                            font-size: 5px !important;\r\n                        }\r\n                        th, td {\r\n                            max-width: 65px !important;\r\n                            font-size: 5px !important;\r\n                        }\r\n                        select {\r\n                            font-size: 5px !important;\r\n                            height: 12px !important;\r\n                            max-width: 60px !important;\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                /* ✅ TITRE CACHÉ EN MODE NORMAL */\r\n                .print-title { \r\n                    display: none; \r\n                }\r\n                \r\n                /* ⭐ NOUVEAU : MASQUER TEXTES IMPRESSION EN MODE NORMAL */\r\n                .print-only {\r\n                    display: none;\r\n                }\r\n            `}</style>\r\n\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                padding: '0',\r\n                opacity: 1,\r\n                transition: 'opacity 0.3s ease-in-out'\r\n            }}>\r\n                <div className=\"no-print\" style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                    borderRadius: '0 0 12px 12px',\r\n                    padding: '8px 20px',\r\n                    marginBottom: '10px',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    backdropFilter: 'blur(10px)',\r\n                    position: 'relative'\r\n                }}>\r\n                    <nav style={{ fontSize: '14px' }}>\r\n                        <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                        <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                        <span style={{ color: '#3b82f6', fontWeight: '500' }}>Planning Coordonnateur</span>\r\n                    </nav>\r\n                    \r\n                    <div style={{\r\n                        position: 'absolute',\r\n                        left: '50%',\r\n                        top: '50%',\r\n                        transform: 'translate(-50%, -50%)',\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center'\r\n                    }}>\r\n                        <h1 style={{\r\n                            fontSize: '18px',\r\n                            fontWeight: 'bold',\r\n                            color: '#1f2937',\r\n                            margin: '0'\r\n                        }}>\r\n                            Planning semaine {semaine}\r\n                        </h1>\r\n                        \r\n                    </div>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        Accueil\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"print-title\">\r\n                    Planning semaine {semaine}\r\n                </div>\r\n\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n                    borderRadius: '8px',\r\n                    padding: '8px 20px',\r\n                    marginBottom: '10px',\r\n                    marginLeft: '20px',\r\n                    marginRight: '20px',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n                        <button\r\n                            className=\"no-print\"\r\n                            onClick={() => window.print()}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#8b5cf6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            Impression planning\r\n                        </button>\r\n\r\n                        <div className=\"no-print\" style={{\r\n                            padding: '4px 8px',\r\n                            fontSize: '12px',\r\n                            fontWeight: '600',\r\n                            borderRadius: '6px',\r\n                            backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n                            color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#f59e0b' : '#10b981',\r\n                            border: '1px solid',\r\n                            borderColor: inactivityTime >= 240 ? '#fecaca' : inactivityTime >= 180 ? '#fde68a' : '#bbf7d0'\r\n                        }}>\r\n                            Status : {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n                                     inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                     inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                     `🟢 ACTIF`}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"no-print\" style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\r\n                        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                            <label style={{ fontSize: '12px', fontWeight: '500', color: '#374151' }}>\r\n                                Afficher :\r\n                            </label>\r\n                            <select\r\n                                value={filtreDisponibilite}\r\n                                onChange={(e) => setFiltreDisponibilite(e.target.value)}\r\n                                style={{\r\n                                    padding: '4px 8px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '4px',\r\n                                    fontSize: '12px',\r\n                                    cursor: 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                <option value=\"toutes\">Toutes les disponibilités</option>\r\n                                <option value=\"disponible\">Disponible uniquement</option>\r\n                                <option value=\"exceptionnelles\">Dispo exceptionnelles</option>\r\n                            </select>\r\n                        </div>\r\n                        \r\n                        <button\r\n                            onClick={() => changeWeek(-1)}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            ← Semaine précédente\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={goToCurrentWeek}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#10b981',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '600'\r\n                            }}\r\n                        >\r\n                            Aujourd'hui\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={() => changeWeek(1)}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            Semaine suivante →\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div className=\"no-print\" style={{ display: 'flex', gap: '8px' }}>\r\n                        <button\r\n                            onClick={handleEnregistrerBrouillon}\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: isLoading ? '#94a3b8' : '#6b7280',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                            }}\r\n                        >\r\n                            {isLoading ? 'Sauvegarde...' : 'Enregistrer'}\r\n                        </button>\r\n\r\n                        <button\r\n                            onClick={logout}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: '#dc2626',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            🚪 Déconnexion\r\n                        </button>\r\n\r\n                        <button\r\n                            onClick={handleValiderTransmettre}\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: isLoading ? '#94a3b8' : '#10b981',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                            }}\r\n                        >\r\n                            {isLoading ? 'Validation...' : 'Valider & Transmettre'}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {message && (\r\n                    <div className=\"no-print\" style={{\r\n                        backgroundColor: message.includes('🤴') ? '#dbeafe' : \r\n                                         message.includes('✅') ? '#d1fae5' :\r\n                                         message.includes('📝') ? '#fef3c7' : '#fee2e2',\r\n                        color: message.includes('🤴') ? '#1e40af' : \r\n                               message.includes('✅') ? '#065f46' :\r\n                               message.includes('📝') ? '#92400e' : '#991b1b',\r\n                        padding: '8px 15px',\r\n                        borderRadius: '6px',\r\n                        marginBottom: '10px',\r\n                        marginLeft: '20px',\r\n                        marginRight: '20px',\r\n                        textAlign: 'center',\r\n                        fontSize: '14px',\r\n                        whiteSpace: 'pre-line'\r\n                    }}>\r\n                        {message}\r\n                    </div>\r\n                )}\r\n\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    margin: '0 20px 20px 20px',\r\n                    padding: '15px',\r\n                    overflow: 'auto',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                        <thead>\r\n                            <tr style={{ backgroundColor: '#f9fafb' }}>\r\n                                <th style={{ \r\n                                    padding: '10px', \r\n                                    border: '1px solid #e5e7eb',\r\n                                    fontWeight: '600',\r\n                                    fontSize: '13px',\r\n                                    textAlign: 'center',\r\n                                    minWidth: '40px',\r\n                                    maxWidth: '40px'\r\n                                }}>\r\n                                </th>\r\n                                {jours.map((jour, dayIndex) => \r\n                                    (lieuxParJour[dayIndex] || []).map((lieuIndex, lieuPos) => (\r\n                                        <th key={`${dayIndex}-${lieuIndex}`} style={{ \r\n                                            padding: '10px',\r\n                                            border: '1px solid #e5e7eb',\r\n                                            minWidth: '180px',\r\n                                            textAlign: 'center',\r\n                                            fontSize: '11px',\r\n                                            backgroundColor: '#f9fafb'\r\n                                        }}>\r\n                                            <div>\r\n                                                <div style={{ fontWeight: '600', fontSize: '13px', marginBottom: '3px' }}>\r\n                                                    {jour}\r\n                                                </div>\r\n                                                <div style={{ fontSize: '10px', color: '#6b7280', marginBottom: '6px' }}>\r\n                                                    {getDateOfWeek(dayIndex, currentDate)}\r\n                                                </div>\r\n                                                <div className=\"no-print\" style={{ display: 'flex', gap: '3px', justifyContent: 'center' }}>\r\n                                                    <button \r\n                                                        onClick={() => handleAddLieu(dayIndex)}\r\n                                                        style={{\r\n                                                            padding: '3px 6px',\r\n                                                            background: '#10b981',\r\n                                                            color: 'white',\r\n                                                            border: 'none',\r\n                                                            borderRadius: '3px',\r\n                                                            fontSize: '11px',\r\n                                                            cursor: 'pointer',\r\n                                                            fontWeight: 'bold'\r\n                                                        }}\r\n                                                    >\r\n                                                        +\r\n                                                    </button>\r\n                                                    {(lieuxParJour[dayIndex] || []).length > 1 && (\r\n                                                        <button \r\n                                                            onClick={() => handleRemoveLieu(dayIndex, lieuIndex)}\r\n                                                            style={{\r\n                                                                padding: '3px 6px',\r\n                                                                background: '#ef4444',\r\n                                                                color: 'white',\r\n                                                                border: 'none',\r\n                                                                borderRadius: '3px',\r\n                                                                fontSize: '11px',\r\n                                                                cursor: 'pointer',\r\n                                                                fontWeight: 'bold'\r\n                                                            }}\r\n                                                        >\r\n                                                            −\r\n                                                        </button>\r\n                                                    )}\r\n                                                </div>\r\n                                            </div>\r\n                                        </th>\r\n                                    ))\r\n                                )}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {['Matin', 'AM'].map((creneau, creneauIndex) => (\r\n                                <tr key={creneau}>\r\n                                    <td style={{ \r\n                                        padding: '8px', \r\n                                        border: '1px solid #e5e7eb',\r\n                                        backgroundColor: creneauIndex === 0 ? '#fef3c7' : '#dbeafe',\r\n                                        fontWeight: 'bold',\r\n                                        textAlign: 'center',\r\n                                        fontSize: '11px',\r\n                                        minWidth: '40px',\r\n                                        maxWidth: '40px'\r\n                                    }}>\r\n                                        {creneau === 'Matin' ? 'M' : 'AM'}\r\n                                    </td>\r\n                                    {jours.map((jour, dayIndex) => \r\n                                        (lieuxParJour[dayIndex] || []).map((lieuIndex) => {\r\n                                            const cellKey = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                                            const selectedLieuId = lieuxSelectionnes[cellKey];\r\n                                            const backgroundColor = getLieuCouleur(selectedLieuId);\r\n                                            const textColor = getTextColor(backgroundColor);\r\n                                            \r\n                                            return (\r\n                                                <td \r\n                                                    key={cellKey} \r\n                                                    style={{\r\n                                                        padding: '8px',\r\n                                                        border: '1px solid #e5e7eb',\r\n                                                        backgroundColor: backgroundColor,\r\n                                                        color: textColor,\r\n                                                        verticalAlign: 'top',\r\n                                                        minWidth: '180px'\r\n                                                    }}\r\n                                                >\r\n                                                    <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>\r\n                                                        <select \r\n                                                            style={{\r\n                                                                width: '100%',\r\n                                                                padding: '4px',\r\n                                                                border: '1px solid #d1d5db',\r\n                                                                borderRadius: '4px',\r\n                                                                fontSize: '11px',\r\n                                                                fontWeight: '500',\r\n                                                                background: 'rgba(255,255,255,0.9)',\r\n                                                                color: '#374151'\r\n                                                            }}\r\n                                                            value={selectedLieuId || \"\"}\r\n                                                            onChange={(e) => handleLieuChange(dayIndex, lieuIndex, creneau, e.target.value)}\r\n                                                        >\r\n                                                            <option value=\"\">Choisir lieu</option>\r\n                                                            {lieux.map((lieu) => (\r\n                                                                <option key={lieu.id} value={lieu.id}>{lieu.nom}</option>\r\n                                                            ))}\r\n                                                        </select>\r\n                                                        {/* ⭐ VERSION IMPRESSION */}\r\n                                                        <div className=\"print-only print-text\">\r\n                                                            {selectedLieuId ? getNomLieu(selectedLieuId) : \r\n                                                             <span className=\"print-text-empty\">Aucun lieu</span>}\r\n                                                        </div>\r\n\r\n                                                        <select \r\n                                                            style={{\r\n                                                                width: '100%',\r\n                                                                padding: '4px',\r\n                                                                border: '1px solid #d1d5db',\r\n                                                                borderRadius: '4px',\r\n                                                                fontSize: '11px',\r\n                                                                background: 'rgba(255,255,255,0.9)',\r\n                                                                color: '#374151'\r\n                                                            }}\r\n                                                            value={salariesSelectionnes[cellKey] || \"\"}\r\n                                                            onChange={(e) => handleSalarieChange(dayIndex, lieuIndex, creneau, e.target.value)}\r\n                                                        >\r\n                                                            <option value=\"\">Choisir salarié</option>\r\n                                                            {salaries.map((s) => (\r\n                                                                <option key={s.id} value={s.id}>\r\n                                                                    {s.initiales || getInitiales(s.prenom, s.nom)}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </select>\r\n                                                        {/* ⭐ VERSION IMPRESSION */}\r\n                                                        <div className=\"print-only print-text\">\r\n                                                            {salariesSelectionnes[cellKey] ? getNomSalarie(salariesSelectionnes[cellKey]) : \r\n                                                             <span className=\"print-text-empty\">Aucun salarié</span>}\r\n                                                        </div>\r\n\r\n                                                        <div style={{\r\n                                                            padding: '6px',\r\n                                                            background: 'rgba(255, 255, 255, 0.2)',\r\n                                                            borderRadius: '4px',\r\n                                                            border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                                                        }}>\r\n                                                            <div style={{ \r\n                                                                fontSize: '10px', \r\n                                                                fontWeight: '600', \r\n                                                                marginBottom: '4px',\r\n                                                                textAlign: 'center'\r\n                                                            }}>\r\n                                                                FORMATEURS\r\n                                                            </div>\r\n                                                            {(formateursParCase[cellKey] || [\"\"]).map((selectedId, i) => {\r\n                                                                const formateursDisponibles = getFormateursDisponibles(jour, creneau, selectedLieuId);\r\n                                                                \r\n                                                                return (\r\n                                                                    <React.Fragment key={i}>\r\n                                                                        <select\r\n                                                                            style={{\r\n                                                                                width: '100%',\r\n                                                                                padding: '3px',\r\n                                                                                border: '1px solid #d1d5db',\r\n                                                                                borderRadius: '3px',\r\n                                                                                fontSize: '10px',\r\n                                                                                background: couleursEnregistrees[cellKey] || 'rgba(255,255,255,0.9)',\r\n                                                                                color: '#374151',\r\n                                                                                marginBottom: '3px'\r\n                                                                            }}\r\n                                                                            value={selectedId}\r\n                                                                            onChange={(e) => handleFormateurChange(dayIndex, lieuIndex, creneau, i, e.target.value)}\r\n                                                                        >\r\n                                                                            <option value=\"\">Formateur</option>\r\n                                                                            {formateursDisponibles\r\n                                                                                .filter(f => {\r\n                                                                                    const currentSelections = formateursParCase[cellKey] || [];\r\n                                                                                    return !currentSelections.includes(f.id) || currentSelections[i] === f.id;\r\n                                                                                })\r\n                                                                                .map(f => (\r\n                                                                                    <option \r\n                                                                                        key={f.id} \r\n                                                                                        value={f.id}\r\n                                                                                        style={{\r\n                                                                                            backgroundColor: f.statut === 'disponible' ? '#dbeafe' : \r\n                                                                                                          f.statut === 'dispo_except' ? '#fef3c7' : 'white',\r\n                                                                                            color: f.statut === 'disponible' ? '#1e40af' : \r\n                                                                                                   f.statut === 'dispo_except' ? '#92400e' : '#374151'\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        {f.prenom} {f.nom}\r\n                                                                                    </option>\r\n                                                                                ))}\r\n                                                                        </select>\r\n                                                                        {/* ⭐ VERSION IMPRESSION */}\r\n                                                                        <div className=\"print-only print-text\">\r\n                                                                            {selectedId ? getNomFormateur(selectedId) : \r\n                                                                             <span className=\"print-text-empty\">Aucun formateur</span>}\r\n                                                                        </div>\r\n                                                                    </React.Fragment>\r\n                                                                );\r\n                                                            })}\r\n\r\n                                                            <div className=\"no-print\" style={{ display: 'flex', gap: '3px', justifyContent: 'center' }}>\r\n                                                                <button\r\n                                                                    onClick={() => handleAddFormateur(dayIndex, lieuIndex, creneau)}\r\n                                                                    style={{\r\n                                                                        padding: '3px 6px',\r\n                                                                        background: '#3b82f6',\r\n                                                                        color: 'white',\r\n                                                                        border: 'none',\r\n                                                                        borderRadius: '3px',\r\n                                                                        fontSize: '10px',\r\n                                                                        cursor: 'pointer',\r\n                                                                        fontWeight: 'bold'\r\n                                                                    }}\r\n                                                                >\r\n                                                                    +\r\n                                                                </button>\r\n                                                                {(formateursParCase[cellKey] || []).length > 1 && (\r\n                                                                    <button\r\n                                                                        onClick={() => handleRemoveFormateur(dayIndex, lieuIndex, creneau)}\r\n                                                                        style={{\r\n                                                                            padding: '3px 6px',\r\n                                                                            background: '#ef4444',\r\n                                                                            color: 'white',\r\n                                                                            border: 'none',\r\n                                                                            borderRadius: '3px',\r\n                                                                            fontSize: '10px',\r\n                                                                            cursor: 'pointer',\r\n                                                                            fontWeight: 'bold'\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        −\r\n                                                                    </button>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                        <MenuApprenants \r\n                                                            cellKey={cellKey}\r\n                                                            creneauData={{\r\n                                                                date: getWeekDates(currentDate)[dayIndex],\r\n                                                                jour: jours[dayIndex],\r\n                                                                creneau: creneau,\r\n                                                                lieu_id: selectedLieuId\r\n                                                            }}\r\n                                                            apprenantsParCase={apprenantsParCase}\r\n                                                            apprenants={apprenants}\r\n                                                            onApprenantChange={handleApprenantChange}\r\n                                                            onAddApprenant={handleAddApprenant}\r\n                                                            onRemoveApprenant={handleRemoveApprenant}\r\n                                                            disabled={!selectedLieuId}\r\n                                                            couleurEnregistree={couleursEnregistrees[cellKey]}\r\n                                                        />\r\n                                                    </div>\r\n                                                </td>\r\n                                            );\r\n                                        })\r\n                                    )}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC - Page titre personnalisé\r\nexport default withAuthAdmin(PlanningCoordo, \"Planning Coordinateur\");",
          "taille": 100417,
          "lignes": 2123,
          "dateModif": "2025-08-29T18:11:53.627Z",
          "erreur": null
        },
        "vercel": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🟡 Fichier existe seulement en local"
      }
    },
    {
      "fichier": "pages/planning-coordo.js",
      "resultat": {
        "statut": "SIMILAIRE",
        "local": {
          "existe": true,
          "contenu": "import React, { useEffect, useState } from 'react';\r\nimport { supabase } from '../lib/supabaseClient';\r\nimport { useRouter } from 'next/router';\r\nimport { withAuthAdmin } from '../components/withAuthAdmin';\r\nimport MenuApprenants from '../components/MenuApprenants';\r\n\r\nconst jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi'];\r\n\r\n// Skeleton Loader spécifique au Planning Coordinateur\r\nconst SkeletonPlanningLoader = () => {\r\n  const shimmer = {\r\n    background: 'linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%)',\r\n    backgroundSize: '200% 100%',\r\n    animation: 'shimmer 1.5s infinite'\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <style jsx>{`\r\n        @keyframes shimmer {\r\n          0% { background-position: -200% 0; }\r\n          100% { background-position: 200% 0; }\r\n        }\r\n        @media print {\r\n          .no-print { display: none !important; }\r\n          body { background: white !important; }\r\n          .print-title { display: block !important; text-align: center; font-size: 18px; font-weight: bold; margin-bottom: 20px; color: black !important; }\r\n        }\r\n        .print-title { display: none; }\r\n      `}</style>\r\n\r\n      <div style={{\r\n        minHeight: '100vh',\r\n        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n        padding: '0'\r\n      }}>\r\n        {/* Header Navigation Skeleton */}\r\n        <div className=\"no-print\" style={{\r\n          backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n          borderRadius: '0 0 12px 12px',\r\n          padding: '8px 20px',\r\n          marginBottom: '10px',\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          backdropFilter: 'blur(10px)',\r\n          position: 'relative'\r\n        }}>\r\n          <div style={{ \r\n            height: '16px', \r\n            width: '250px', \r\n            borderRadius: '4px',\r\n            ...shimmer \r\n          }} />\r\n          \r\n          <div style={{\r\n            position: 'absolute',\r\n            left: '50%',\r\n            top: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center'\r\n          }}>\r\n            <div style={{ \r\n              height: '20px', \r\n              width: '180px', \r\n              borderRadius: '4px',\r\n              marginBottom: '4px',\r\n              ...shimmer \r\n            }} />\r\n          </div>\r\n\r\n          <div style={{ \r\n            height: '32px', \r\n            width: '80px', \r\n            borderRadius: '8px',\r\n            ...shimmer \r\n          }} />\r\n        </div>\r\n\r\n        <div className=\"print-title\">\r\n          <div style={{ \r\n            height: '18px', \r\n            width: '150px', \r\n            borderRadius: '4px',\r\n            margin: '0 auto',\r\n            ...shimmer \r\n          }} />\r\n        </div>\r\n\r\n        {/* Toolbar Skeleton */}\r\n        <div style={{\r\n          backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n          borderRadius: '8px',\r\n          padding: '8px 20px',\r\n          marginBottom: '10px',\r\n          marginLeft: '20px',\r\n          marginRight: '20px',\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\r\n        }}>\r\n          <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n            <div style={{ \r\n              height: '30px', \r\n              width: '140px', \r\n              borderRadius: '6px',\r\n              ...shimmer \r\n            }} />\r\n            <div style={{ \r\n              height: '30px', \r\n              width: '180px', \r\n              borderRadius: '6px',\r\n              ...shimmer \r\n            }} />\r\n          </div>\r\n\r\n          <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\r\n            <div style={{ \r\n              height: '24px', \r\n              width: '200px', \r\n              borderRadius: '4px',\r\n              ...shimmer \r\n            }} />\r\n            {[1, 2, 3, 4].map(i => (\r\n              <div key={i} style={{ \r\n                height: '30px', \r\n                width: '120px', \r\n                borderRadius: '6px',\r\n                ...shimmer \r\n              }} />\r\n            ))}\r\n          </div>\r\n\r\n          <div style={{ display: 'flex', gap: '8px' }}>\r\n            {[1, 2, 3].map(i => (\r\n              <div key={i} style={{ \r\n                height: '30px', \r\n                width: '110px', \r\n                borderRadius: '6px',\r\n                ...shimmer \r\n              }} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Planning Table Skeleton */}\r\n        <div style={{\r\n          backgroundColor: 'white',\r\n          borderRadius: '12px',\r\n          margin: '0 20px 20px 20px',\r\n          padding: '15px',\r\n          overflow: 'auto',\r\n          boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n        }}>\r\n          {/* Table Header Skeleton */}\r\n          <div style={{\r\n            display: 'grid',\r\n            gridTemplateColumns: '40px repeat(5, 1fr)',\r\n            gap: '1px',\r\n            marginBottom: '1px'\r\n          }}>\r\n            <div style={{\r\n              height: '60px',\r\n              backgroundColor: '#f9fafb',\r\n              border: '1px solid #e5e7eb',\r\n              borderRadius: '4px'\r\n            }} />\r\n            {jours.map((jour, i) => (\r\n              <div key={jour} style={{\r\n                height: '60px',\r\n                backgroundColor: '#f9fafb',\r\n                border: '1px solid #e5e7eb',\r\n                borderRadius: '4px',\r\n                padding: '8px',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n              }}>\r\n                <div style={{ \r\n                  height: '14px', \r\n                  width: '60px', \r\n                  borderRadius: '4px',\r\n                  marginBottom: '4px',\r\n                  ...shimmer \r\n                }} />\r\n                <div style={{ \r\n                  height: '12px', \r\n                  width: '80px', \r\n                  borderRadius: '4px',\r\n                  marginBottom: '6px',\r\n                  ...shimmer \r\n                }} />\r\n                <div style={{ display: 'flex', gap: '3px' }}>\r\n                  <div style={{ \r\n                    height: '20px', \r\n                    width: '25px', \r\n                    borderRadius: '3px',\r\n                    ...shimmer \r\n                  }} />\r\n                  <div style={{ \r\n                    height: '20px', \r\n                    width: '25px', \r\n                    borderRadius: '3px',\r\n                    ...shimmer \r\n                  }} />\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Table Rows Skeleton */}\r\n          {['M', 'AM'].map((creneau, creneauIndex) => (\r\n            <div key={creneau} style={{\r\n              display: 'grid',\r\n              gridTemplateColumns: '40px repeat(5, 1fr)',\r\n              gap: '1px',\r\n              marginBottom: '1px'\r\n            }}>\r\n              <div style={{\r\n                height: '200px',\r\n                backgroundColor: creneauIndex === 0 ? '#fef3c7' : '#dbeafe',\r\n                border: '1px solid #e5e7eb',\r\n                borderRadius: '4px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                fontWeight: 'bold',\r\n                fontSize: '11px'\r\n              }}>\r\n                {creneau}\r\n              </div>\r\n              \r\n              {jours.map((jour, dayIndex) => (\r\n                <div key={`${creneau}-${dayIndex}`} style={{\r\n                  height: '200px',\r\n                  backgroundColor: 'white',\r\n                  border: '1px solid #e5e7eb',\r\n                  borderRadius: '4px',\r\n                  padding: '8px',\r\n                  display: 'flex',\r\n                  flexDirection: 'column',\r\n                  gap: '6px'\r\n                }}>\r\n                  {/* Lieu Select Skeleton */}\r\n                  <div style={{ \r\n                    height: '28px', \r\n                    width: '100%', \r\n                    borderRadius: '4px',\r\n                    ...shimmer \r\n                  }} />\r\n                  \r\n                  {/* Salarié Select Skeleton */}\r\n                  <div style={{ \r\n                    height: '28px', \r\n                    width: '100%', \r\n                    borderRadius: '4px',\r\n                    ...shimmer \r\n                  }} />\r\n                  \r\n                  {/* Formateurs Block Skeleton */}\r\n                  <div style={{\r\n                    padding: '6px',\r\n                    background: 'rgba(255, 255, 255, 0.2)',\r\n                    borderRadius: '4px',\r\n                    border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                  }}>\r\n                    <div style={{ \r\n                      height: '14px', \r\n                      width: '80px', \r\n                      borderRadius: '4px',\r\n                      margin: '0 auto 4px',\r\n                      ...shimmer \r\n                    }} />\r\n                    {[1, 2].map(i => (\r\n                      <div key={i} style={{ \r\n                        height: '24px', \r\n                        width: '100%', \r\n                        borderRadius: '3px',\r\n                        marginBottom: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                    ))}\r\n                    <div style={{ display: 'flex', gap: '3px', justifyContent: 'center', marginTop: '4px' }}>\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {/* Apprenants Block Skeleton */}\r\n                  <div style={{\r\n                    padding: '6px',\r\n                    background: 'rgba(255, 255, 255, 0.2)',\r\n                    borderRadius: '4px',\r\n                    border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                  }}>\r\n                    <div style={{ \r\n                      height: '14px', \r\n                      width: '80px', \r\n                      borderRadius: '4px',\r\n                      margin: '0 auto 4px',\r\n                      ...shimmer \r\n                    }} />\r\n                    <div style={{ \r\n                      height: '24px', \r\n                      width: '100%', \r\n                      borderRadius: '3px',\r\n                      marginBottom: '3px',\r\n                      ...shimmer \r\n                    }} />\r\n                    <div style={{ display: 'flex', gap: '3px', justifyContent: 'center', marginTop: '4px' }}>\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n// Fonction pour calculer la date d'un jour spécifique dans la semaine courante\r\nfunction getDateOfWeek(dayIndex, currentDate) {\r\n    const startOfWeek = new Date(currentDate);\r\n    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1);\r\n    const resultDate = new Date(startOfWeek);\r\n    resultDate.setDate(startOfWeek.getDate() + dayIndex);\r\n    return resultDate.toLocaleDateString('fr-FR');\r\n}\r\n\r\n// Fonction pour revenir à la semaine courante\r\nfunction getCurrentWeekStart() {\r\n    const now = new Date();\r\n    const startOfWeek = new Date(now);\r\n    startOfWeek.setDate(now.getDate() - now.getDay() + 1);\r\n    return startOfWeek;\r\n}\r\n\r\n// Fonction dates UTC pour éviter décalages timezone\r\nfunction getWeekDates(currentDate) {\r\n    const startOfWeek = new Date(currentDate);\r\n    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1);\r\n    \r\n    const weekDates = [];\r\n    for (let i = 0; i < 5; i++) {\r\n        const date = new Date(startOfWeek);\r\n        date.setDate(startOfWeek.getDate() + i);\r\n        const year = date.getFullYear();\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        const day = String(date.getDate()).padStart(2, '0');\r\n        weekDates.push(`${year}-${month}-${day}`);\r\n    }\r\n    return weekDates;\r\n}\r\n\r\nfunction PlanningCoordo({ user, logout, inactivityTime }) {\r\n    const router = useRouter();\r\n    \r\n    // États pour les données de base\r\n    const [salaries, setSalaries] = useState([]);\r\n    const [formateurs, setFormateurs] = useState([]);\r\n    const [apprenants, setApprenants] = useState([]);\r\n    const [currentDate, setCurrentDate] = useState(new Date());\r\n    const [lieux, setLieux] = useState([]);\r\n    const [planningTypes, setPlanningTypes] = useState([]);\r\n    const [absencesValidees, setAbsencesValidees] = useState([]);\r\n    \r\n    // États pour les données du planning\r\n    const [apprenantsParCase, setApprenantsParCase] = useState({});\r\n    const [formateursParCase, setFormateursParCase] = useState({});\r\n    const [lieuxParJour, setLieuxParJour] = useState({});\r\n    const [lieuxSelectionnes, setLieuxSelectionnes] = useState({});\r\n    const [salariesSelectionnes, setSalariesSelectionnes] = useState({});\r\n    \r\n    // États pour coloration persistante post-enregistrement\r\n    const [couleursEnregistrees, setCouleursEnregistrees] = useState({});\r\n    \r\n    // États de contrôle\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [dataLoaded, setDataLoaded] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [filtreDisponibilite, setFiltreDisponibilite] = useState('toutes');\r\n\r\n    // ☆☆☆ NOUVEAUX ÉTATS POUR CONTRÔLE ROI ABSOLU - ÉTAPE 3.1 ☆☆☆\r\n    const [derniereCommande, setDerniereCommande] = useState(null);\r\n    const [commandesTraitees, setCommandesTraitees] = useState(new Set());\r\n    const [statsEcoute, setStatsEcoute] = useState({\r\n        commandesRecues: 0,\r\n        refreshEffectues: 0,\r\n        derniereActivite: null\r\n    });\r\n\r\n    // ☆☆☆ HELPER FUNCTIONS POUR IMPRESSION - RÉCUPÉRATION DES NOMS ☆☆☆\r\n    // Helper pour récupérer le nom du lieu\r\n    const getNomLieu = (lieuId) => {\r\n        if (!lieuId) return '';\r\n        const lieu = lieux.find(l => l.id === lieuId);\r\n        return lieu ? lieu.nom : '';\r\n    };\r\n\r\n    // Helper pour récupérer le nom du salarié  \r\n    const getNomSalarie = (salarieId) => {\r\n        if (!salarieId) return '';\r\n        const salarie = salaries.find(s => s.id === salarieId);\r\n        return salarie ? (salarie.initiales || getInitiales(salarie.prenom, salarie.nom)) : '';\r\n    };\r\n\r\n    // Helper pour récupérer le nom du formateur\r\n    const getNomFormateur = (formateurId) => {\r\n        if (!formateurId) return '';\r\n        const formateur = formateurs.find(f => f.id === formateurId);\r\n        return formateur ? `${formateur.prenom} ${formateur.nom}` : '';\r\n    };\r\n\r\n    // Helper pour récupérer le nom de l'apprenant\r\n    const getNomApprenant = (apprenantId) => {\r\n        if (!apprenantId) return '';\r\n        const apprenant = apprenants.find(a => a.id === apprenantId);\r\n        return apprenant ? `${apprenant.prenom} ${apprenant.nom}` : '';\r\n    };\r\n\r\n    // ☆☆☆ FONCTION ROI AMÉLIORÉE - ÉCOUTE ACTIVE COMPLÈTE ☆☆☆\r\n    const ecouterCommandesRoi = () => {\r\n        const interval = setInterval(() => {\r\n            const commande = localStorage.getItem('roiCommande');\r\n            if (commande) {\r\n                try {\r\n                    const parsed = JSON.parse(commande);\r\n                    \r\n                    // Éviter de traiter la même commande plusieurs fois\r\n                    if (!commandesTraitees.has(parsed.timestamp)) {\r\n                        console.log('🤴 PRINCE COORDO reçoit ordre du ROI:', parsed);\r\n                        \r\n                        setDerniereCommande(parsed);\r\n                        setCommandesTraitees(prev => new Set([...prev, parsed.timestamp]));\r\n                        \r\n                        // Traiter immédiatement la commande ROI\r\n                        executerOrdreRoi(parsed);\r\n                        \r\n                        // Mettre à jour stats écoute\r\n                        setStatsEcoute(prev => ({\r\n                            ...prev,\r\n                            commandesRecues: prev.commandesRecues + 1,\r\n                            derniereActivite: new Date().toLocaleTimeString()\r\n                        }));\r\n                    }\r\n                } catch (error) {\r\n                    console.error('❌ Erreur parsing commande ROI:', error);\r\n                }\r\n            }\r\n        }, 500); // Check plus fréquent pour réactivité\r\n\r\n        return interval;\r\n    };\r\n\r\n    // ☆☆☆ FONCTION ROI PRINCIPALE - EXÉCUTION ORDRES ☆☆☆\r\n    const executerOrdreRoi = async (commande) => {\r\n        try {\r\n            console.log(`🤴 PRINCE exécute ordre: ${commande.action}`);\r\n            \r\n            switch (commande.action) {\r\n                case 'retirer_formateur':\r\n                    await traiterRetirerFormateur(commande);\r\n                    break;\r\n                    \r\n                case 'ajouter_formateur':\r\n                    await traiterAjouterFormateur(commande);\r\n                    break;\r\n                    \r\n                case 'remettre_disponible':\r\n                    await traiterRemettreDisponible(commande);\r\n                    break;\r\n                    \r\n                case 'changer_statut':\r\n                    await traiterChangerStatut(commande);\r\n                    break;\r\n                    \r\n                case 'refresh_complet':\r\n                    await traiterRefreshComplet(commande);\r\n                    break;\r\n                    \r\n                default:\r\n                    console.log(`⚠️ Ordre ROI non reconnu: ${commande.action}`);\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur exécution ordre ROI:', error);\r\n        }\r\n    };\r\n\r\n    // ☆☆☆ TRAITEMENTS SPÉCIFIQUES DES ORDRES ROI ☆☆☆\r\n    \r\n    const traiterRetirerFormateur = async (commande) => {\r\n        console.log(`🚫 PRINCE retire formateur ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Retirer formateur le ${commande.date}\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterAjouterFormateur = async (commande) => {\r\n        console.log(`✅ PRINCE ajoute formateur ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        const typeAjout = commande.details?.transformation || 'ajout_standard';\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Ajouter formateur ${\r\n            typeAjout.includes('dispo_except') ? '(DISPO EXCEPT)' : ''\r\n        } le ${commande.date}\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterRemettreDisponible = async (commande) => {\r\n        console.log(`🔄 PRINCE remet disponible ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Formateur remis disponible le ${commande.date}\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterChangerStatut = async (commande) => {\r\n        console.log(`🔄 PRINCE change statut ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        const transformation = commande.details?.transformation || 'changement_type';\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Changement statut (${transformation})\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterRefreshComplet = async (commande) => {\r\n        console.log('🔄 PRINCE effectue refresh complet sur ordre ROI');\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Refresh complet des données\r\n🔄 Rechargement total en cours...`);\r\n        \r\n        // Refresh complet de toutes les données\r\n        await rechargerToutesDonnees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    // ☆☆☆ FONCTIONS DE RECHARGEMENT OPTIMISÉES ☆☆☆\r\n    \r\n    const rechargerAbsencesValidees = async () => {\r\n        try {\r\n            console.log('🔄 Rechargement absences validées...');\r\n            \r\n            const { data: absencesRes, error } = await supabase\r\n                .from('absences_formateurs')\r\n                .select('id, formateur_id, date_debut, date_fin, type, statut')\r\n                .eq('statut', 'validé');\r\n                \r\n            if (error) throw error;\r\n                \r\n            if (absencesRes) {\r\n                console.log(`✅ ${absencesRes.length} absences validées rechargées`);\r\n                setAbsencesValidees(absencesRes);\r\n                \r\n                // Mettre à jour stats\r\n                setStatsEcoute(prev => ({\r\n                    ...prev,\r\n                    refreshEffectues: prev.refreshEffectues + 1\r\n                }));\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur rechargement absences:', error);\r\n        }\r\n    };\r\n\r\n    const rechargerToutesDonnees = async () => {\r\n        try {\r\n            console.log('🔄 Rechargement complet données...');\r\n            \r\n            const [absencesRes, planningTypesRes] = await Promise.all([\r\n                supabase.from('absences_formateurs').select('id, formateur_id, date_debut, date_fin, type, statut').eq('statut', 'validé'),\r\n                supabase.from('planning_type_formateurs').select('id, formateur_id, jour, creneau, statut, lieu_id, valide').eq('valide', true)\r\n            ]);\r\n\r\n            if (absencesRes.data) setAbsencesValidees(absencesRes.data);\r\n            if (planningTypesRes.data) setPlanningTypes(planningTypesRes.data);\r\n            \r\n            console.log('✅ Rechargement complet terminé');\r\n            \r\n            // Mettre à jour stats\r\n            setStatsEcoute(prev => ({\r\n                ...prev,\r\n                refreshEffectues: prev.refreshEffectues + 1\r\n            }));\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur rechargement complet:', error);\r\n        }\r\n    };\r\n\r\n    // RÉCUPÉRATION DES DONNÉES DE BASE\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const [salariesRes, formateursRes, apprenantsRes, lieuxRes, planningTypesRes, absencesRes] = await Promise.all([\r\n                    supabase.from('users').select('id, prenom, nom, role, initiales').eq('role', 'salarié').eq('archive', false),\r\n                    supabase.from('users').select('id, prenom, nom, role').eq('role', 'formateur').eq('archive', false),\r\n                    supabase.from('users').select('id, prenom, nom, role').eq('role', 'apprenant').eq('archive', false),\r\n                    supabase.from('lieux').select('id, nom, couleur, initiale').eq('archive', false),\r\n                    supabase.from('planning_type_formateurs').select('id, formateur_id, jour, creneau, statut, lieu_id, valide').eq('valide', true),\r\n                    supabase.from('absences_formateurs').select('id, formateur_id, date_debut, date_fin, type, statut').eq('statut', 'validé')\r\n                ]);\r\n\r\n                if (salariesRes.data) setSalaries(salariesRes.data);\r\n                if (formateursRes.data) setFormateurs(formateursRes.data);\r\n                if (apprenantsRes.data) setApprenants(apprenantsRes.data);\r\n                if (lieuxRes.data) setLieux(lieuxRes.data);\r\n                if (planningTypesRes.data) setPlanningTypes(planningTypesRes.data);\r\n                if (absencesRes.data) setAbsencesValidees(absencesRes.data);\r\n            } catch (error) {\r\n                console.error('Erreur lors du chargement des données:', error);\r\n            }\r\n        };\r\n        \r\n        fetchData();\r\n    }, []);\r\n\r\n    // ☆☆☆ EFFET POUR DÉMARRER L'ÉCOUTE ROI AMÉLIORÉE ☆☆☆\r\n    useEffect(() => {\r\n        console.log('🎧 PRINCE démarre écoute active des ordres du ROI...');\r\n        const interval = ecouterCommandesRoi();\r\n        \r\n        return () => {\r\n            console.log('🔇 PRINCE arrête écoute des ordres ROI');\r\n            clearInterval(interval);\r\n        };\r\n    }, []); // Pas de dépendances pour écoute continue\r\n\r\n    // ☆☆☆ FONCTION CORRIGÉE - PRIORITÉ DISPO EXCEPTIONNELLE ☆☆☆\r\n    const isFormateurAbsent = (formateurId, dateStr) => {\r\n        // D'ABORD vérifier s'il a une dispo exceptionnelle (priorité absolue)\r\n        const dispoExcept = absencesValidees.find(absence => {\r\n            if (absence.formateur_id !== formateurId) return false;\r\n            if (absence.type !== 'formation') return false;\r\n            \r\n            const estDansIntervalle = dateStr >= absence.date_debut && dateStr <= absence.date_fin;\r\n            return estDansIntervalle;\r\n        });\r\n        \r\n        // Si dispo exceptionnelle trouvée = PAS absent !\r\n        if (dispoExcept) {\r\n            console.log(`✅ PRIORITÉ DISPO EXCEPT: formateur ${formateurId} disponible le ${dateStr} !`);\r\n            return false;\r\n        }\r\n        \r\n        // ENSUITE chercher les vraies absences\r\n        const absenceJour = absencesValidees.find(absence => {\r\n            if (absence.formateur_id !== formateurId) return false;\r\n            if (absence.type === 'formation') return false; // Dispo except n'est pas absence\r\n            \r\n            const estDansIntervalle = dateStr >= absence.date_debut && dateStr <= absence.date_fin;\r\n            return estDansIntervalle;\r\n        });\r\n\r\n        if (absenceJour) {\r\n            console.log(`🚫 ${formateurId} absent le ${dateStr} - retiré par ROI`);\r\n        }\r\n\r\n        return !!absenceJour;\r\n    };\r\n\r\n    // Fonction dispo exceptionnelle corrigée\r\n    const hasDispoExceptionnelle = (formateurId, dateStr) => {\r\n        const dispoJour = absencesValidees.find(absence => {\r\n            if (absence.formateur_id !== formateurId) return false;\r\n            if (absence.type !== 'formation') return false;\r\n            \r\n            const estDansIntervalle = dateStr >= absence.date_debut && dateStr <= absence.date_fin;\r\n            return estDansIntervalle;\r\n        });\r\n\r\n        return !!dispoJour;\r\n    };\r\n\r\n    // Fonction de filtrage des formateurs disponibles\r\n    const getFormateursDisponibles = (jour, creneau, lieuId) => {\r\n        const creneauDB = creneau === 'Matin' ? 'Matin' : 'AM';\r\n        \r\n        if (!jour || !creneau) {\r\n            return formateurs.map(f => ({ ...f, statut: null }));\r\n        }\r\n\r\n        const dayIndex = jours.indexOf(jour);\r\n        const weekDates = getWeekDates(currentDate);\r\n        const dateStr = weekDates[dayIndex];\r\n\r\n        const formateursAvecPlanningType = planningTypes.filter(pt => {\r\n            const jourMatch = pt.jour === jour;\r\n            const creneauMatch = pt.creneau === creneauDB;\r\n            \r\n            let statutValide = false;\r\n            if (filtreDisponibilite === 'disponible') {\r\n                statutValide = pt.statut === 'disponible';\r\n            } else if (filtreDisponibilite === 'exceptionnelles') {\r\n                statutValide = pt.statut === 'dispo_except';\r\n            } else if (filtreDisponibilite === 'toutes') {\r\n                statutValide = pt.statut === 'disponible' || pt.statut === 'dispo_except';\r\n            }\r\n            \r\n            if (!jourMatch || !creneauMatch || !statutValide) {\r\n                return false;\r\n            }\r\n            \r\n            if (pt.lieu_id === null) {\r\n                return true;\r\n            } else if (lieuId) {\r\n                return pt.lieu_id === lieuId;\r\n            } else {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        const formateursAvecPlanningTypeIds = formateursAvecPlanningType.map(pt => pt.formateur_id);\r\n        \r\n        const formateursAvecPlanningTypeTotal = planningTypes.map(pt => pt.formateur_id);\r\n        const formateursSansPlanningType = formateurs.filter(f => \r\n            !formateursAvecPlanningTypeTotal.includes(f.id)\r\n        );\r\n\r\n        const formateursDisponiblesPlanningType = formateurs.filter(f => \r\n            formateursAvecPlanningTypeIds.includes(f.id)\r\n        ).map(f => {\r\n            const planningType = formateursAvecPlanningType.find(pt => pt.formateur_id === f.id);\r\n            \r\n            // ☆☆☆ LOGIQUE ROI - ABSENCE GAGNE TOUJOURS ☆☆☆\r\n            if (isFormateurAbsent(f.id, dateStr)) {\r\n                console.log(`🚫 ${f.prenom} absent le ${dateStr} - retiré par ROI`);\r\n                return null;\r\n            }\r\n            \r\n            // ☆☆☆ LOGIQUE ROI - DISPO EXCEPT PRIORITAIRE ☆☆☆\r\n            if (hasDispoExceptionnelle(f.id, dateStr)) {\r\n                console.log(`✅ ${f.prenom} dispo exceptionnelle le ${dateStr} - ajouté par ROI`);\r\n                return { \r\n                    ...f, \r\n                    statut: 'dispo_except',\r\n                    lieuSpecifique: false,\r\n                    source: 'exception_validee_roi'\r\n                };\r\n            }\r\n            \r\n            return { \r\n                ...f, \r\n                statut: planningType ? planningType.statut : null,\r\n                lieuSpecifique: planningType && planningType.lieu_id ? true : false,\r\n                source: 'planning_type'\r\n            };\r\n        }).filter(f => f !== null);\r\n\r\n        const formateursSansPlanningAvecStatut = filtreDisponibilite === 'toutes' \r\n            ? formateursSansPlanningType.filter(f => !isFormateurAbsent(f.id, dateStr))\r\n                .map(f => {\r\n                    // ☆☆☆ LOGIQUE ROI - DISPO EXCEPT MÊME SANS PLANNING TYPE ☆☆☆\r\n                    if (hasDispoExceptionnelle(f.id, dateStr)) {\r\n                        console.log(`✅ ${f.prenom} dispo exceptionnelle le ${dateStr} (sans planning) - ajouté par ROI`);\r\n                        return { \r\n                            ...f, \r\n                            statut: 'dispo_except',\r\n                            lieuSpecifique: false,\r\n                            source: 'exception_validee_roi'\r\n                        };\r\n                    }\r\n                    \r\n                    return { \r\n                        ...f, \r\n                        statut: null,\r\n                        lieuSpecifique: false,\r\n                        source: 'aucun_planning'\r\n                    };\r\n                })\r\n            : [];\r\n\r\n        // 🆕 NOUVELLE LOGIQUE : Exclusion formateurs déjà assignés sur le même créneau\r\n        const formateursAvecExclusion = [...formateursDisponiblesPlanningType, ...formateursSansPlanningAvecStatut]\r\n            .filter(formateur => {\r\n                // Vérifier si ce formateur est déjà assigné sur le même jour/créneau dans un autre lieu\r\n                const estDejaAssigne = Object.keys(formateursParCase).some(cellKey => {\r\n                    // Décomposer la cellKey: \"dayIndex-lieuIndex-creneau\"\r\n                    const [dayIdx, lieuIdx, creneauKey] = cellKey.split('-');\r\n                    const cellDayIndex = parseInt(dayIdx);\r\n                    const cellCreneau = creneauKey;\r\n                    \r\n                    // Vérifier si c'est le même jour et créneau\r\n                    const currentDayIndex = jours.indexOf(jour);\r\n                    const memeJour = cellDayIndex === currentDayIndex;\r\n                    const memeCreneau = cellCreneau === creneau;\r\n                    \r\n                    if (memeJour && memeCreneau) {\r\n                        // Vérifier si le formateur est assigné dans cette case\r\n                        const formateursAssignes = formateursParCase[cellKey] || [];\r\n                        const estAssigneDansCetteCase = formateursAssignes.includes(formateur.id);\r\n                        \r\n                        // Si assigné dans cette case, on doit vérifier si c'est pour le même lieu\r\n                        if (estAssigneDansCetteCase) {\r\n                            // Récupérer le lieu_id de la cellule où le formateur est assigné\r\n                            const cellLieuId = lieuxSelectionnes[cellKey];\r\n                            \r\n                            // Si c'est un lieu différent, alors c'est une exclusion\r\n                            // On compare les lieu_id directement, pas les indices\r\n                            return cellLieuId !== lieuId;\r\n                        }\r\n                    }\r\n                    \r\n                    return false;\r\n                });\r\n                \r\n                if (estDejaAssigne) {\r\n                    console.log(`🚫 ${formateur.prenom} exclu - déjà assigné ${jour} ${creneau} ailleurs`);\r\n                }\r\n                \r\n                return !estDejaAssigne;\r\n            });\r\n\r\n        return formateursAvecExclusion;\r\n    };\r\n\r\n    // CHARGEMENT DU PLANNING\r\n    const loadWeekPlanning = async (targetDate) => {\r\n        try {\r\n            const weekDates = getWeekDates(targetDate);\r\n            \r\n            const { data: planningData, error } = await supabase\r\n                .from('planning_hebdomadaire')\r\n                .select('*')\r\n                .in('date', weekDates)\r\n                .order('created_at', { ascending: false });\r\n\r\n            if (error) {\r\n                console.error('Erreur lors du chargement:', error);\r\n                return;\r\n            }\r\n\r\n            const newApprenantsParCase = {};\r\n            const newFormateursParCase = {};\r\n            const newLieuxSelectionnes = {};\r\n            const newSalariesSelectionnes = {};\r\n            const newLieuxParJour = {};\r\n\r\n            // ⭐ CORRECTION : Reconstruction des indices depuis les données BDD\r\n            jours.forEach((jour, dayIndex) => {\r\n                // Extraire tous les lieu_index uniques pour ce jour\r\n                const indicesUtilises = new Set();\r\n                \r\n                if (planningData && planningData.length > 0) {\r\n                    planningData.forEach(item => {\r\n                        if (item.jour === jour) {\r\n                            const lieuIndex = item.lieu_index || 0;\r\n                            indicesUtilises.add(lieuIndex);\r\n                        }\r\n                    });\r\n                }\r\n                \r\n                // Si aucune donnée, initialiser avec [0] par défaut\r\n                if (indicesUtilises.size === 0) {\r\n                    newLieuxParJour[dayIndex] = [0];\r\n                } else {\r\n                    // Convertir en array trié\r\n                    newLieuxParJour[dayIndex] = Array.from(indicesUtilises).sort((a, b) => a - b);\r\n                }\r\n            });\r\n\r\n            // Initialiser les structures pour TOUS les indices trouvés\r\n            jours.forEach((_, dayIndex) => {\r\n                newLieuxParJour[dayIndex].forEach(lieuIndex => {\r\n                    ['Matin', 'AM'].forEach((creneau) => {\r\n                        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                        newApprenantsParCase[key] = [\"\"];\r\n                        newFormateursParCase[key] = [\"\"];\r\n                        newLieuxSelectionnes[key] = \"\";\r\n                        newSalariesSelectionnes[key] = \"\";\r\n                    });\r\n                });\r\n            });\r\n\r\n            if (planningData && planningData.length > 0) {\r\n                planningData.forEach(item => {\r\n                    const dayIndex = jours.indexOf(item.jour);\r\n                    if (dayIndex !== -1) {\r\n                        const creneau = item.creneau === 'matin' ? 'Matin' : 'AM';\r\n                        const lieuIndex = item.lieu_index || 0;\r\n                        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n\r\n                        if (item.formateurs_ids && item.formateurs_ids.length > 0) {\r\n                            newFormateursParCase[key] = [...item.formateurs_ids.filter(id => id), \"\"];\r\n                        }\r\n                        if (item.apprenants_ids && item.apprenants_ids.length > 0) {\r\n                            newApprenantsParCase[key] = [...item.apprenants_ids.filter(id => id), \"\"];\r\n                        }\r\n                        if (item.lieu_id) {\r\n                            newLieuxSelectionnes[key] = item.lieu_id;\r\n                        }\r\n                        if (item.salarie_id) {\r\n                            newSalariesSelectionnes[key] = item.salarie_id;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            setApprenantsParCase(newApprenantsParCase);\r\n            setFormateursParCase(newFormateursParCase);\r\n            setLieuxSelectionnes(newLieuxSelectionnes);\r\n            setSalariesSelectionnes(newSalariesSelectionnes);\r\n            setLieuxParJour(newLieuxParJour);\r\n            setDataLoaded(true);\r\n\r\n        } catch (error) {\r\n            console.error('Erreur lors du chargement du planning:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (lieux.length >= 0 && salaries.length > 0 && formateurs.length > 0 && apprenants.length > 0) {\r\n            setDataLoaded(false);\r\n            loadWeekPlanning(currentDate);\r\n        }\r\n    }, [currentDate, lieux, salaries, formateurs, apprenants]);\r\n\r\n    // NOUVEAU : Recalculer couleurs enregistrées après chargement des données\r\n    useEffect(() => {\r\n        if (dataLoaded && lieux.length > 0) {\r\n            const couleursRestaurees = calculerCouleursEnregistrees();\r\n            setCouleursEnregistrees(couleursRestaurees);\r\n        }\r\n    }, [dataLoaded, formateursParCase, apprenantsParCase, lieuxSelectionnes, lieuxParJour, lieux]);\r\n\r\n    // FONCTIONS DE SAUVEGARDE\r\n    const handleEnregistrerBrouillon = async () => {\r\n        setIsLoading(true);\r\n        \r\n        try {\r\n            const weekDates = getWeekDates(currentDate);\r\n            const stats = await sauvegarderPlanning('brouillon', weekDates);\r\n\r\n            // NOUVEAU : Appliquer coloration persistante après sauvegarde réussie\r\n            const nouvellesCouleursEnregistrees = calculerCouleursEnregistrees();\r\n            setCouleursEnregistrees(nouvellesCouleursEnregistrees);\r\n\r\n            setMessage(`📝 Brouillon semaine ${semaine} enregistré !\r\n${stats.creneaux} créneaux • ${stats.formateursAfectes} formateurs`);\r\n            setTimeout(() => setMessage(''), 5000);\r\n\r\n        } catch (error) {\r\n            console.error('Erreur lors de l\\'enregistrement:', error);\r\n            setMessage(`⚠️ Erreur: ${error.message}`);\r\n            setTimeout(() => setMessage(''), 5000);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleValiderTransmettre = async () => {\r\n        if (!window.confirm('Valider et transmettre le planning ? Les formateurs recevront des notifications.')) return;\r\n        \r\n        setIsLoading(true);\r\n        \r\n        try {\r\n            const weekDates = getWeekDates(currentDate);\r\n            const stats = await sauvegarderPlanning('validé', weekDates);\r\n\r\n            // NOUVEAU : Appliquer coloration persistante après sauvegarde réussie\r\n            const nouvellesCouleursEnregistrees = calculerCouleursEnregistrees();\r\n            setCouleursEnregistrees(nouvellesCouleursEnregistrees);\r\n\r\n            await envoyerMessagesValidation(stats, semaine, weekDates);\r\n\r\n            setMessage(`✅ Planning semaine ${semaine} validé et transmis !\r\n${stats.creneaux} créneaux • ${stats.formateursAfectes} formateurs affectés\r\n📧 Messages envoyés aux formateurs`);\r\n            setTimeout(() => setMessage(''), 8000);\r\n\r\n        } catch (error) {\r\n            console.error('Erreur lors de la validation:', error);\r\n            setMessage(`⚠️ Erreur: ${error.message}`);\r\n            setTimeout(() => setMessage(''), 5000);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Fonction envoi messages validation\r\n    const envoyerMessagesValidation = async (stats, semaine, weekDates) => {\r\n        try {\r\n            const { data: affectations } = await supabase\r\n                .from('planning_formateurs_hebdo')\r\n                .select('formateur_id, date, creneau, lieu_nom')\r\n                .in('date', weekDates)\r\n                .eq('statut', 'attribue');\r\n\r\n            if (affectations && affectations.length > 0) {\r\n                const affectationsParFormateur = {};\r\n                affectations.forEach(aff => {\r\n                    if (!affectationsParFormateur[aff.formateur_id]) {\r\n                        affectationsParFormateur[aff.formateur_id] = [];\r\n                    }\r\n                    affectationsParFormateur[aff.formateur_id].push(aff);\r\n                });\r\n\r\n                for (const [formateurId, affectationsFormateur] of Object.entries(affectationsParFormateur)) {\r\n                    const formateur = formateurs.find(f => f.id === formateurId);\r\n                    if (formateur) {\r\n                        const creneauxDetail = affectationsFormateur.map(aff => \r\n                            `${aff.date} ${aff.creneau} à ${aff.lieu_nom}`\r\n                        ).join('\\n');\r\n\r\n                        await supabase.from('messages').insert({\r\n                            expediteur: 'Coordination ACLEF',\r\n                            destinataire_id: formateurId,\r\n                            objet: `Planning semaine ${semaine} validé`,\r\n                            contenu: `Bonjour ${formateur.prenom},\\n\\nVotre planning pour la semaine ${semaine} a été validé.\\n\\nVos interventions :\\n${creneauxDetail}\\n\\nMerci de votre engagement !\\n\\nCordialement,\\nL'équipe ACLEF`,\r\n                            statut: 'envoye',\r\n                            type: 'planning_valide'\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Erreur envoi messages validation:', error);\r\n        }\r\n    };\r\n\r\n    // FONCTION DE SAUVEGARDE\r\n    const sauvegarderPlanning = async (statut, weekDates) => {\r\n        const planningsToSave = [];\r\n        const planningFormateursToSave = [];\r\n        const formateursAfectes = new Set();\r\n\r\n        jours.forEach((jour, dayIndex) => {\r\n            const currentDateStr = weekDates[dayIndex];\r\n            \r\n            (lieuxParJour[dayIndex] || []).forEach((lieuIndex) => {\r\n                ['Matin', 'AM'].forEach((creneau) => {\r\n                    const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                    \r\n                    const formateursIds = (formateursParCase[key] || []).filter(id => id !== \"\");\r\n                    const apprenantsIds = (apprenantsParCase[key] || []).filter(id => id !== \"\");\r\n                    const lieuId = lieuxSelectionnes[key] || null;\r\n                    const salarieId = salariesSelectionnes[key] || null;\r\n                    \r\n                    if (formateursIds.length > 0 || apprenantsIds.length > 0 || lieuId || salarieId) {\r\n                        let creneauDB = creneau === 'Matin' ? 'matin' : 'AM';\r\n\r\n                        planningsToSave.push({\r\n                            date: currentDateStr,\r\n                            jour: jour,\r\n                            creneau: creneauDB,\r\n                            lieu_index: lieuIndex,\r\n                            lieu_id: lieuId,\r\n                            salarie_id: salarieId || null,\r\n                            formateurs_ids: formateursIds,\r\n                            apprenants_ids: apprenantsIds,\r\n                            statut_planning: statut\r\n                        });\r\n\r\n                        formateursIds.forEach(formateurId => {\r\n                            formateursAfectes.add(formateurId);\r\n                            const lieuInfo = lieux.find(l => l.id === lieuId);\r\n                            \r\n                            planningFormateursToSave.push({\r\n                                formateur_id: formateurId,\r\n                                date: currentDateStr,\r\n                                creneau: creneauDB,\r\n                                lieu_nom: lieuInfo ? lieuInfo.nom : '',\r\n                                lieu_initiales: lieuInfo ? lieuInfo.initiale : '',\r\n                                statut: statut === 'brouillon' ? 'brouillon' : 'attribue'\r\n                            });\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n        if (planningsToSave.length > 0) {\r\n            // DELETE avant INSERT pour éviter les doublons\r\n            const { error: deleteError } = await supabase\r\n                .from('planning_hebdomadaire')\r\n                .delete()\r\n                .in('date', weekDates);\r\n\r\n            if (deleteError) {\r\n                console.error('Erreur suppression planning:', deleteError);\r\n                throw deleteError;\r\n            }\r\n\r\n            const { error: insertError } = await supabase\r\n                .from('planning_hebdomadaire')\r\n                .insert(planningsToSave);\r\n\r\n            if (insertError) {\r\n                console.error('Erreur insertion planning:', insertError);\r\n                throw insertError;\r\n            }\r\n        }\r\n\r\n        if (planningFormateursToSave.length > 0) {\r\n            // DELETE avant INSERT pour éviter les doublons\r\n            const { error: deleteFormateursError } = await supabase\r\n                .from('planning_formateurs_hebdo')\r\n                .delete()\r\n                .in('date', weekDates);\r\n\r\n            if (deleteFormateursError) {\r\n                console.error('Erreur suppression planning formateurs:', deleteFormateursError);\r\n                throw deleteFormateursError;\r\n            }\r\n\r\n            const { error: insertFormateursError } = await supabase\r\n                .from('planning_formateurs_hebdo')\r\n                .insert(planningFormateursToSave);\r\n\r\n            if (insertFormateursError) {\r\n                console.error('Erreur insertion planning formateurs:', insertFormateursError);\r\n                throw insertFormateursError;\r\n            }\r\n        }\r\n\r\n        return {\r\n            creneaux: planningsToSave.length,\r\n            formateursAfectes: formateursAfectes.size\r\n        };\r\n    };\r\n\r\n    // FONCTIONS UTILITAIRES\r\n    const getLieuCouleur = (lieuId) => {\r\n        if (!lieuId) return '#ffffff';\r\n        const lieu = lieux.find(l => l.id === lieuId);\r\n        return lieu?.couleur || '#ffffff';\r\n    };\r\n\r\n    // FONCTION COLORATION PERSISTANTE - Calculer couleurs après enregistrement\r\n    const calculerCouleursEnregistrees = () => {\r\n        const nouvellesCouleursEnregistrees = {};\r\n        \r\n        jours.forEach((jour, dayIndex) => {\r\n            (lieuxParJour[dayIndex] || []).forEach((lieuIndex) => {\r\n                ['Matin', 'AM'].forEach((creneau) => {\r\n                    const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                    \r\n                    const formateursIds = (formateursParCase[key] || []).filter(id => id !== \"\");\r\n                    const apprenantsIds = (apprenantsParCase[key] || []).filter(id => id !== \"\");\r\n                    const lieuId = lieuxSelectionnes[key] || null;\r\n                    \r\n                    // Case a des personnes affectées ET un lieu sélectionné\r\n                    const aDesPersonnes = formateursIds.length > 0 || apprenantsIds.length > 0;\r\n                    \r\n                    if (lieuId && aDesPersonnes) {\r\n                        nouvellesCouleursEnregistrees[key] = getLieuCouleur(lieuId);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        \r\n        return nouvellesCouleursEnregistrees;\r\n    };\r\n\r\n    // FONCTION COLORATION PERSISTANTE - Vérifier si case devient vide après suppression\r\n    const verifierEtSupprimerCouleur = (cellKey) => {\r\n        // Extraire les indices de la cellKey\r\n        const [dayIndex, lieuIndex, creneau] = cellKey.split('-');\r\n        const dayIdx = parseInt(dayIndex);\r\n        const lieuIdx = parseInt(lieuIndex);\r\n        const key = cellKey;\r\n        \r\n        // Vérifier s'il reste des personnes affectées dans cette case\r\n        const formateursIds = (formateursParCase[key] || []).filter(id => id !== \"\");\r\n        const apprenantsIds = (apprenantsParCase[key] || []).filter(id => id !== \"\");\r\n        const aDesPersonnes = formateursIds.length > 0 || apprenantsIds.length > 0;\r\n        \r\n        // Si plus personne, supprimer la couleur\r\n        if (!aDesPersonnes) {\r\n            setCouleursEnregistrees(prev => {\r\n                const nouveau = { ...prev };\r\n                delete nouveau[cellKey];\r\n                return nouveau;\r\n            });\r\n        }\r\n    };\r\n\r\n    const getTextColor = (backgroundColor) => {\r\n        if (!backgroundColor || backgroundColor === '#ffffff') return '#000000';\r\n        \r\n        const hex = backgroundColor.replace('#', '');\r\n        const r = parseInt(hex.substr(0, 2), 16);\r\n        const g = parseInt(hex.substr(2, 2), 16);\r\n        const b = parseInt(hex.substr(4, 2), 16);\r\n        \r\n        const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\r\n        return luminance > 0.5 ? '#000000' : '#ffffff';\r\n    };\r\n\r\n    const getInitiales = (prenom, nom) => {\r\n        return `${prenom?.[0] ?? ''}${nom?.[0] ?? ''}`.toUpperCase();\r\n    };\r\n\r\n    const semaine = Math.ceil(((currentDate - new Date(currentDate.getFullYear(), 0, 1)) / 86400000 + new Date(currentDate.getFullYear(), 0, 1).getDay() + 1) / 7);\r\n\r\n    // NAVIGATION\r\n    const changeWeek = (direction) => {\r\n        const newDate = new Date(currentDate);\r\n        newDate.setDate(currentDate.getDate() + (direction * 7));\r\n        setCurrentDate(newDate);\r\n    };\r\n\r\n    const goToCurrentWeek = () => {\r\n        const currentWeekStart = getCurrentWeekStart();\r\n        setCurrentDate(currentWeekStart);\r\n    };\r\n\r\n    // GESTION DES DONNÉES\r\n    const handleLieuChange = (dayIndex, lieuIndex, creneau, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setLieuxSelectionnes(prev => ({ ...prev, [key]: value }));\r\n    };\r\n\r\n    const handleSalarieChange = (dayIndex, lieuIndex, creneau, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setSalariesSelectionnes(prev => ({ ...prev, [key]: value }));\r\n    };\r\n\r\n    const handleFormateurChange = (dayIndex, lieuIndex, creneau, selectIndex, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const newList = [...(formateursParCase[key] || [])];\r\n        newList[selectIndex] = value;\r\n        setFormateursParCase(prev => ({ ...prev, [key]: newList }));\r\n        \r\n        // NOUVEAU : Si on supprime un formateur (valeur vide), vérifier si case devient vide\r\n        if (value === \"\") {\r\n            setTimeout(() => verifierEtSupprimerCouleur(key), 0);\r\n        }\r\n    };\r\n\r\n    const handleAddFormateur = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setFormateursParCase(prev => ({\r\n            ...prev,\r\n            [key]: [...(prev[key] || []), \"\"]\r\n        }));\r\n    };\r\n\r\n    const handleRemoveFormateur = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const currentList = formateursParCase[key] || [];\r\n        if (currentList.length > 1) {\r\n            setFormateursParCase(prev => ({\r\n                ...prev,\r\n                [key]: prev[key].slice(0, -1)\r\n            }));\r\n            \r\n            // NOUVEAU : Vérifier si case devient vide et supprimer couleur si nécessaire\r\n            setTimeout(() => verifierEtSupprimerCouleur(key), 0);\r\n        }\r\n    };\r\n\r\n    const handleApprenantChange = (dayIndex, lieuIndex, creneau, selectIndex, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const newList = [...(apprenantsParCase[key] || [])];\r\n        newList[selectIndex] = value;\r\n        setApprenantsParCase(prev => ({ ...prev, [key]: newList }));\r\n        \r\n        // NOUVEAU : Si on supprime un apprenant (valeur vide), vérifier si case devient vide\r\n        if (value === \"\") {\r\n            setTimeout(() => verifierEtSupprimerCouleur(key), 0);\r\n        }\r\n    };\r\n\r\n    const handleAddApprenant = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setApprenantsParCase(prev => ({\r\n            ...prev,\r\n            [key]: [...(prev[key] || []), \"\"]\r\n        }));\r\n    };\r\n\r\n    const handleRemoveApprenant = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const currentList = apprenantsParCase[key] || [];\r\n        if (currentList.length > 1) {\r\n            setApprenantsParCase(prev => ({\r\n                ...prev,\r\n                [key]: prev[key].slice(0, -1)\r\n            }));\r\n            \r\n            // NOUVEAU : Vérifier si case devient vide et supprimer couleur si nécessaire\r\n            setTimeout(() => verifierEtSupprimerCouleur(key), 0);\r\n        }\r\n    };\r\n\r\n    const handleAddLieu = (dayIndex) => {\r\n        const currentLieux = lieuxParJour[dayIndex] || [];\r\n        const newLieuIndex = Math.max(...currentLieux) + 1;\r\n        \r\n        setLieuxParJour(prev => ({\r\n            ...prev,\r\n            [dayIndex]: [...currentLieux, newLieuIndex]\r\n        }));\r\n\r\n        ['Matin', 'AM'].forEach((creneau) => {\r\n            const key = `${dayIndex}-${newLieuIndex}-${creneau}`;\r\n            setApprenantsParCase(prev => ({ ...prev, [key]: [\"\"] }));\r\n            setFormateursParCase(prev => ({ ...prev, [key]: [\"\"] }));\r\n            setLieuxSelectionnes(prev => ({ ...prev, [key]: \"\" }));\r\n            setSalariesSelectionnes(prev => ({ ...prev, [key]: \"\" }));\r\n        });\r\n    };\r\n\r\n    const handleRemoveLieu = (dayIndex, lieuIndex) => {\r\n        const currentLieux = lieuxParJour[dayIndex] || [];\r\n        if (currentLieux.length > 1) {\r\n            setLieuxParJour(prev => ({\r\n                ...prev,\r\n                [dayIndex]: currentLieux.filter(l => l !== lieuIndex)\r\n            }));\r\n\r\n            ['Matin', 'AM'].forEach((creneau) => {\r\n                const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                setApprenantsParCase(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n                setFormateursParCase(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n                setLieuxSelectionnes(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n                setSalariesSelectionnes(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    if (!dataLoaded) {\r\n        return <SkeletonPlanningLoader />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <style jsx>{`\r\n                @keyframes shimmer {\r\n                    0% { background-position: -200% 0; }\r\n                    100% { background-position: 200% 0; }\r\n                }\r\n                \r\n                @media print {\r\n                    /* ✅ MASQUER ÉLÉMENTS NON IMPRIMABLES */\r\n                    .no-print { \r\n                        display: none !important; \r\n                    }\r\n                    \r\n                    /* ✅ CONFIGURATION PAGE D'IMPRESSION */\r\n                    @page {\r\n                        size: A4 landscape; /* Format paysage pour largeur max */\r\n                        margin: 0.3in; /* Marges réduites */\r\n                    }\r\n                    \r\n                    /* ✅ OPTIMISATION BODY ET CONTENEUR PRINCIPAL */\r\n                    body { \r\n                        background: white !important;\r\n                        font-size: 8px !important; /* Police réduite pour plus d'espace */\r\n                        line-height: 1.2 !important;\r\n                    }\r\n                    \r\n                    /* ✅ FOND BLANC POUR LE CONTENEUR PRINCIPAL - ÉCONOMIE D'ENCRE */\r\n                    div[style*=\"background: 'linear-gradient\"] {\r\n                        background: white !important;\r\n                    }\r\n                    \r\n                    /* ✅ TITRE IMPRESSION CENTRÉ */\r\n                    .print-title { \r\n                        display: block !important; \r\n                        text-align: center; \r\n                        font-size: 14px !important; \r\n                        font-weight: bold; \r\n                        margin-bottom: 15px; \r\n                        color: black !important; \r\n                        page-break-after: avoid;\r\n                    }\r\n                    \r\n                    /* ✅ CONTENEUR PLANNING OPTIMISÉ */\r\n                    div[style*=\"borderRadius: '12px'\"] {\r\n                        margin: 0 !important;\r\n                        padding: 8px !important;\r\n                        box-shadow: none !important;\r\n                        border-radius: 0 !important;\r\n                    }\r\n                    \r\n                    /* ✅ TABLEAU PRINCIPAL - LARGEUR MAXIMALE */\r\n                    table {\r\n                        width: 100% !important;\r\n                        font-size: 7px !important;\r\n                        border-collapse: collapse !important;\r\n                        table-layout: fixed !important; /* Largeur fixes pour colonnes */\r\n                    }\r\n                    \r\n                    /* ✅ CELLULES HEADER OPTIMISÉES */\r\n                    th {\r\n                        padding: 3px 1px !important;\r\n                        font-size: 7px !important;\r\n                        font-weight: 600 !important;\r\n                        text-align: center !important;\r\n                        border: 1px solid #ccc !important;\r\n                        background: #f5f5f5 !important;\r\n                        line-height: 1.1 !important;\r\n                        max-width: 80px !important; /* Largeur max par colonne */\r\n                        overflow: hidden !important;\r\n                        word-wrap: break-word !important;\r\n                    }\r\n                    \r\n                    /* ✅ CELLULES CONTENU OPTIMISÉES */\r\n                    td {\r\n                        padding: 2px 1px !important;\r\n                        font-size: 6px !important;\r\n                        border: 1px solid #ccc !important;\r\n                        vertical-align: top !important;\r\n                        max-width: 80px !important;\r\n                        overflow: hidden !important;\r\n                        line-height: 1.1 !important;\r\n                    }\r\n                    \r\n                    /* ⭐ NOUVEAU : MASQUER SELECTS EN IMPRESSION */\r\n                    select {\r\n                        display: none !important;\r\n                    }\r\n                    \r\n                    /* ⭐ NOUVEAU : AFFICHER VERSIONS TEXTE POUR IMPRESSION */\r\n                    .print-only {\r\n                        display: block !important;\r\n                    }\r\n                    \r\n                    /* ⭐ NOUVEAU : STYLES POUR TEXTES D'IMPRESSION */\r\n                    .print-text {\r\n                        font-size: 6px !important;\r\n                        padding: 1px 2px !important;\r\n                        background: #f8f9fa !important;\r\n                        border: 1px solid #ccc !important;\r\n                        border-radius: 2px !important;\r\n                        margin-bottom: 1px !important;\r\n                        min-height: 10px !important;\r\n                        color: #333 !important;\r\n                        font-weight: 500 !important;\r\n                    }\r\n                    \r\n                    .print-text-empty {\r\n                        color: #999 !important;\r\n                        font-style: italic !important;\r\n                    }\r\n                    \r\n                    /* ✅ SECTIONS FORMATEURS/APPRENANTS COMPACTES */\r\n                    div[style*=\"padding: '6px'\"] {\r\n                        padding: 2px 1px !important;\r\n                        margin-bottom: 1px !important;\r\n                        border: 1px solid #ddd !important;\r\n                        border-radius: 2px !important;\r\n                    }\r\n                    \r\n                    /* ✅ TITRES SECTIONS RÉDUITS */\r\n                    div[style*=\"fontSize: '10px'\"][style*=\"fontWeight: '600'\"] {\r\n                        font-size: 5px !important;\r\n                        font-weight: 700 !important;\r\n                        margin-bottom: 1px !important;\r\n                        text-align: center !important;\r\n                        text-transform: uppercase !important;\r\n                    }\r\n                    \r\n                    /* ✅ COLONNES HORAIRES (M/AM) OPTIMISÉES */\r\n                    td[style*=\"backgroundColor: '#fef3c7'\"],\r\n                    td[style*=\"backgroundColor: '#dbeafe'\"] {\r\n                        min-width: 15px !important;\r\n                        max-width: 15px !important;\r\n                        font-size: 8px !important;\r\n                        font-weight: 700 !important;\r\n                        text-align: center !important;\r\n                        padding: 2px 1px !important;\r\n                    }\r\n                    \r\n                    /* ✅ GESTION COULEURS EN IMPRESSION N&B */\r\n                    * {\r\n                        -webkit-print-color-adjust: exact !important;\r\n                        print-color-adjust: exact !important;\r\n                    }\r\n                    \r\n                    /* ✅ EMPÊCHER SAUT DE PAGE AU MILIEU DU TABLEAU */\r\n                    table, tbody, tr {\r\n                        page-break-inside: avoid !important;\r\n                    }\r\n                    \r\n                    /* ✅ AJUSTEMENT POUR TRÈS LARGES PLANNINGS */\r\n                    @media print and (max-width: 11in) {\r\n                        table {\r\n                            font-size: 5px !important;\r\n                        }\r\n                        th, td {\r\n                            max-width: 65px !important;\r\n                            font-size: 5px !important;\r\n                        }\r\n                        select {\r\n                            font-size: 5px !important;\r\n                            height: 12px !important;\r\n                            max-width: 60px !important;\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                /* ✅ TITRE CACHÉ EN MODE NORMAL */\r\n                .print-title { \r\n                    display: none; \r\n                }\r\n                \r\n                /* ⭐ NOUVEAU : MASQUER TEXTES IMPRESSION EN MODE NORMAL */\r\n                .print-only {\r\n                    display: none;\r\n                }\r\n            `}</style>\r\n\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                padding: '0',\r\n                opacity: 1,\r\n                transition: 'opacity 0.3s ease-in-out'\r\n            }}>\r\n                <div className=\"no-print\" style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                    borderRadius: '0 0 12px 12px',\r\n                    padding: '8px 20px',\r\n                    marginBottom: '10px',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    backdropFilter: 'blur(10px)',\r\n                    position: 'relative'\r\n                }}>\r\n                    <nav style={{ fontSize: '14px' }}>\r\n                        <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                        <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                        <span style={{ color: '#3b82f6', fontWeight: '500' }}>Planning Coordonnateur</span>\r\n                    </nav>\r\n                    \r\n                    <div style={{\r\n                        position: 'absolute',\r\n                        left: '50%',\r\n                        top: '50%',\r\n                        transform: 'translate(-50%, -50%)',\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center'\r\n                    }}>\r\n                        <h1 style={{\r\n                            fontSize: '18px',\r\n                            fontWeight: 'bold',\r\n                            color: '#1f2937',\r\n                            margin: '0'\r\n                        }}>\r\n                            Planning semaine {semaine}\r\n                        </h1>\r\n                        \r\n                    </div>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        Accueil\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"print-title\">\r\n                    Planning semaine {semaine}\r\n                </div>\r\n\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n                    borderRadius: '8px',\r\n                    padding: '8px 20px',\r\n                    marginBottom: '10px',\r\n                    marginLeft: '20px',\r\n                    marginRight: '20px',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n                        <button\r\n                            className=\"no-print\"\r\n                            onClick={() => window.print()}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#8b5cf6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            Impression planning\r\n                        </button>\r\n\r\n                        <div className=\"no-print\" style={{\r\n                            padding: '4px 8px',\r\n                            fontSize: '12px',\r\n                            fontWeight: '600',\r\n                            borderRadius: '6px',\r\n                            backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n                            color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#f59e0b' : '#10b981',\r\n                            border: '1px solid',\r\n                            borderColor: inactivityTime >= 240 ? '#fecaca' : inactivityTime >= 180 ? '#fde68a' : '#bbf7d0'\r\n                        }}>\r\n                            Status : {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n                                     inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                     inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                     `🟢 ACTIF`}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"no-print\" style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\r\n                        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                            <label style={{ fontSize: '12px', fontWeight: '500', color: '#374151' }}>\r\n                                Afficher :\r\n                            </label>\r\n                            <select\r\n                                value={filtreDisponibilite}\r\n                                onChange={(e) => setFiltreDisponibilite(e.target.value)}\r\n                                style={{\r\n                                    padding: '4px 8px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '4px',\r\n                                    fontSize: '12px',\r\n                                    cursor: 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                <option value=\"toutes\">Toutes les disponibilités</option>\r\n                                <option value=\"disponible\">Disponible uniquement</option>\r\n                                <option value=\"exceptionnelles\">Dispo exceptionnelles</option>\r\n                            </select>\r\n                        </div>\r\n                        \r\n                        <button\r\n                            onClick={() => changeWeek(-1)}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            ← Semaine précédente\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={goToCurrentWeek}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#10b981',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '600'\r\n                            }}\r\n                        >\r\n                            Aujourd'hui\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={() => changeWeek(1)}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            Semaine suivante →\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div className=\"no-print\" style={{ display: 'flex', gap: '8px' }}>\r\n                        <button\r\n                            onClick={handleEnregistrerBrouillon}\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: isLoading ? '#94a3b8' : '#6b7280',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                            }}\r\n                        >\r\n                            {isLoading ? 'Sauvegarde...' : 'Enregistrer'}\r\n                        </button>\r\n\r\n                        <button\r\n                            onClick={logout}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: '#dc2626',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            🚪 Déconnexion\r\n                        </button>\r\n\r\n                        <button\r\n                            onClick={handleValiderTransmettre}\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: isLoading ? '#94a3b8' : '#10b981',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                            }}\r\n                        >\r\n                            {isLoading ? 'Validation...' : 'Valider & Transmettre'}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {message && (\r\n                    <div className=\"no-print\" style={{\r\n                        backgroundColor: message.includes('🤴') ? '#dbeafe' : \r\n                                         message.includes('✅') ? '#d1fae5' :\r\n                                         message.includes('📝') ? '#fef3c7' : '#fee2e2',\r\n                        color: message.includes('🤴') ? '#1e40af' : \r\n                               message.includes('✅') ? '#065f46' :\r\n                               message.includes('📝') ? '#92400e' : '#991b1b',\r\n                        padding: '8px 15px',\r\n                        borderRadius: '6px',\r\n                        marginBottom: '10px',\r\n                        marginLeft: '20px',\r\n                        marginRight: '20px',\r\n                        textAlign: 'center',\r\n                        fontSize: '14px',\r\n                        whiteSpace: 'pre-line'\r\n                    }}>\r\n                        {message}\r\n                    </div>\r\n                )}\r\n\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    margin: '0 20px 20px 20px',\r\n                    padding: '15px',\r\n                    overflow: 'auto',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                        <thead>\r\n                            <tr style={{ backgroundColor: '#f9fafb' }}>\r\n                                <th style={{ \r\n                                    padding: '10px', \r\n                                    border: '1px solid #e5e7eb',\r\n                                    fontWeight: '600',\r\n                                    fontSize: '13px',\r\n                                    textAlign: 'center',\r\n                                    minWidth: '40px',\r\n                                    maxWidth: '40px'\r\n                                }}>\r\n                                </th>\r\n                                {jours.map((jour, dayIndex) => \r\n                                    (lieuxParJour[dayIndex] || []).map((lieuIndex, lieuPos) => (\r\n                                        <th key={`${dayIndex}-${lieuIndex}`} style={{ \r\n                                            padding: '10px',\r\n                                            border: '1px solid #e5e7eb',\r\n                                            minWidth: '180px',\r\n                                            textAlign: 'center',\r\n                                            fontSize: '11px',\r\n                                            backgroundColor: '#f9fafb'\r\n                                        }}>\r\n                                            <div>\r\n                                                <div style={{ fontWeight: '600', fontSize: '13px', marginBottom: '3px' }}>\r\n                                                    {jour}\r\n                                                </div>\r\n                                                <div style={{ fontSize: '10px', color: '#6b7280', marginBottom: '6px' }}>\r\n                                                    {getDateOfWeek(dayIndex, currentDate)}\r\n                                                </div>\r\n                                                <div className=\"no-print\" style={{ display: 'flex', gap: '3px', justifyContent: 'center' }}>\r\n                                                    <button \r\n                                                        onClick={() => handleAddLieu(dayIndex)}\r\n                                                        style={{\r\n                                                            padding: '3px 6px',\r\n                                                            background: '#10b981',\r\n                                                            color: 'white',\r\n                                                            border: 'none',\r\n                                                            borderRadius: '3px',\r\n                                                            fontSize: '11px',\r\n                                                            cursor: 'pointer',\r\n                                                            fontWeight: 'bold'\r\n                                                        }}\r\n                                                    >\r\n                                                        +\r\n                                                    </button>\r\n                                                    {(lieuxParJour[dayIndex] || []).length > 1 && (\r\n                                                        <button \r\n                                                            onClick={() => handleRemoveLieu(dayIndex, lieuIndex)}\r\n                                                            style={{\r\n                                                                padding: '3px 6px',\r\n                                                                background: '#ef4444',\r\n                                                                color: 'white',\r\n                                                                border: 'none',\r\n                                                                borderRadius: '3px',\r\n                                                                fontSize: '11px',\r\n                                                                cursor: 'pointer',\r\n                                                                fontWeight: 'bold'\r\n                                                            }}\r\n                                                        >\r\n                                                            −\r\n                                                        </button>\r\n                                                    )}\r\n                                                </div>\r\n                                            </div>\r\n                                        </th>\r\n                                    ))\r\n                                )}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {['Matin', 'AM'].map((creneau, creneauIndex) => (\r\n                                <tr key={creneau}>\r\n                                    <td style={{ \r\n                                        padding: '8px', \r\n                                        border: '1px solid #e5e7eb',\r\n                                        backgroundColor: creneauIndex === 0 ? '#fef3c7' : '#dbeafe',\r\n                                        fontWeight: 'bold',\r\n                                        textAlign: 'center',\r\n                                        fontSize: '11px',\r\n                                        minWidth: '40px',\r\n                                        maxWidth: '40px'\r\n                                    }}>\r\n                                        {creneau === 'Matin' ? 'M' : 'AM'}\r\n                                    </td>\r\n                                    {jours.map((jour, dayIndex) => \r\n                                        (lieuxParJour[dayIndex] || []).map((lieuIndex) => {\r\n                                            const cellKey = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                                            const selectedLieuId = lieuxSelectionnes[cellKey];\r\n                                            const backgroundColor = getLieuCouleur(selectedLieuId);\r\n                                            const textColor = getTextColor(backgroundColor);\r\n                                            \r\n                                            return (\r\n                                                <td \r\n                                                    key={cellKey} \r\n                                                    style={{\r\n                                                        padding: '8px',\r\n                                                        border: '1px solid #e5e7eb',\r\n                                                        backgroundColor: backgroundColor,\r\n                                                        color: textColor,\r\n                                                        verticalAlign: 'top',\r\n                                                        minWidth: '180px'\r\n                                                    }}\r\n                                                >\r\n                                                    <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>\r\n                                                        <select \r\n                                                            style={{\r\n                                                                width: '100%',\r\n                                                                padding: '4px',\r\n                                                                border: '1px solid #d1d5db',\r\n                                                                borderRadius: '4px',\r\n                                                                fontSize: '11px',\r\n                                                                fontWeight: '500',\r\n                                                                background: 'rgba(255,255,255,0.9)',\r\n                                                                color: '#374151'\r\n                                                            }}\r\n                                                            value={selectedLieuId || \"\"}\r\n                                                            onChange={(e) => handleLieuChange(dayIndex, lieuIndex, creneau, e.target.value)}\r\n                                                        >\r\n                                                            <option value=\"\">Choisir lieu</option>\r\n                                                            {lieux.map((lieu) => (\r\n                                                                <option key={lieu.id} value={lieu.id}>{lieu.nom}</option>\r\n                                                            ))}\r\n                                                        </select>\r\n                                                        {/* ⭐ VERSION IMPRESSION */}\r\n                                                        <div className=\"print-only print-text\">\r\n                                                            {selectedLieuId ? getNomLieu(selectedLieuId) : \r\n                                                             <span className=\"print-text-empty\">Aucun lieu</span>}\r\n                                                        </div>\r\n\r\n                                                        <select \r\n                                                            style={{\r\n                                                                width: '100%',\r\n                                                                padding: '4px',\r\n                                                                border: '1px solid #d1d5db',\r\n                                                                borderRadius: '4px',\r\n                                                                fontSize: '11px',\r\n                                                                background: 'rgba(255,255,255,0.9)',\r\n                                                                color: '#374151'\r\n                                                            }}\r\n                                                            value={salariesSelectionnes[cellKey] || \"\"}\r\n                                                            onChange={(e) => handleSalarieChange(dayIndex, lieuIndex, creneau, e.target.value)}\r\n                                                        >\r\n                                                            <option value=\"\">Choisir salarié</option>\r\n                                                            {salaries.map((s) => (\r\n                                                                <option key={s.id} value={s.id}>\r\n                                                                    {s.initiales || getInitiales(s.prenom, s.nom)}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </select>\r\n                                                        {/* ⭐ VERSION IMPRESSION */}\r\n                                                        <div className=\"print-only print-text\">\r\n                                                            {salariesSelectionnes[cellKey] ? getNomSalarie(salariesSelectionnes[cellKey]) : \r\n                                                             <span className=\"print-text-empty\">Aucun salarié</span>}\r\n                                                        </div>\r\n\r\n                                                        <div style={{\r\n                                                            padding: '6px',\r\n                                                            background: 'rgba(255, 255, 255, 0.2)',\r\n                                                            borderRadius: '4px',\r\n                                                            border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                                                        }}>\r\n                                                            <div style={{ \r\n                                                                fontSize: '10px', \r\n                                                                fontWeight: '600', \r\n                                                                marginBottom: '4px',\r\n                                                                textAlign: 'center'\r\n                                                            }}>\r\n                                                                FORMATEURS\r\n                                                            </div>\r\n                                                            {(formateursParCase[cellKey] || [\"\"]).map((selectedId, i) => {\r\n                                                                const formateursDisponibles = getFormateursDisponibles(jour, creneau, selectedLieuId);\r\n                                                                \r\n                                                                return (\r\n                                                                    <React.Fragment key={i}>\r\n                                                                        <select\r\n                                                                            style={{\r\n                                                                                width: '100%',\r\n                                                                                padding: '3px',\r\n                                                                                border: '1px solid #d1d5db',\r\n                                                                                borderRadius: '3px',\r\n                                                                                fontSize: '10px',\r\n                                                                                background: couleursEnregistrees[cellKey] || 'rgba(255,255,255,0.9)',\r\n                                                                                color: '#374151',\r\n                                                                                marginBottom: '3px'\r\n                                                                            }}\r\n                                                                            value={selectedId}\r\n                                                                            onChange={(e) => handleFormateurChange(dayIndex, lieuIndex, creneau, i, e.target.value)}\r\n                                                                        >\r\n                                                                            <option value=\"\">Formateur</option>\r\n                                                                            {formateursDisponibles\r\n                                                                                .filter(f => {\r\n                                                                                    const currentSelections = formateursParCase[cellKey] || [];\r\n                                                                                    return !currentSelections.includes(f.id) || currentSelections[i] === f.id;\r\n                                                                                })\r\n                                                                                .map(f => (\r\n                                                                                    <option \r\n                                                                                        key={f.id} \r\n                                                                                        value={f.id}\r\n                                                                                        style={{\r\n                                                                                            backgroundColor: f.statut === 'disponible' ? '#dbeafe' : \r\n                                                                                                          f.statut === 'dispo_except' ? '#fef3c7' : 'white',\r\n                                                                                            color: f.statut === 'disponible' ? '#1e40af' : \r\n                                                                                                   f.statut === 'dispo_except' ? '#92400e' : '#374151'\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        {f.prenom} {f.nom}\r\n                                                                                    </option>\r\n                                                                                ))}\r\n                                                                        </select>\r\n                                                                        {/* ⭐ VERSION IMPRESSION */}\r\n                                                                        <div className=\"print-only print-text\">\r\n                                                                            {selectedId ? getNomFormateur(selectedId) : \r\n                                                                             <span className=\"print-text-empty\">Aucun formateur</span>}\r\n                                                                        </div>\r\n                                                                    </React.Fragment>\r\n                                                                );\r\n                                                            })}\r\n\r\n                                                            <div className=\"no-print\" style={{ display: 'flex', gap: '3px', justifyContent: 'center' }}>\r\n                                                                <button\r\n                                                                    onClick={() => handleAddFormateur(dayIndex, lieuIndex, creneau)}\r\n                                                                    style={{\r\n                                                                        padding: '3px 6px',\r\n                                                                        background: '#3b82f6',\r\n                                                                        color: 'white',\r\n                                                                        border: 'none',\r\n                                                                        borderRadius: '3px',\r\n                                                                        fontSize: '10px',\r\n                                                                        cursor: 'pointer',\r\n                                                                        fontWeight: 'bold'\r\n                                                                    }}\r\n                                                                >\r\n                                                                    +\r\n                                                                </button>\r\n                                                                {(formateursParCase[cellKey] || []).length > 1 && (\r\n                                                                    <button\r\n                                                                        onClick={() => handleRemoveFormateur(dayIndex, lieuIndex, creneau)}\r\n                                                                        style={{\r\n                                                                            padding: '3px 6px',\r\n                                                                            background: '#ef4444',\r\n                                                                            color: 'white',\r\n                                                                            border: 'none',\r\n                                                                            borderRadius: '3px',\r\n                                                                            fontSize: '10px',\r\n                                                                            cursor: 'pointer',\r\n                                                                            fontWeight: 'bold'\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        −\r\n                                                                    </button>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                        <MenuApprenants \r\n                                                            cellKey={cellKey}\r\n                                                            creneauData={{\r\n                                                                date: getWeekDates(currentDate)[dayIndex],\r\n                                                                jour: jours[dayIndex],\r\n                                                                creneau: creneau,\r\n                                                                lieu_id: selectedLieuId\r\n                                                            }}\r\n                                                            apprenantsParCase={apprenantsParCase}\r\n                                                            apprenants={apprenants}\r\n                                                            onApprenantChange={handleApprenantChange}\r\n                                                            onAddApprenant={handleAddApprenant}\r\n                                                            onRemoveApprenant={handleRemoveApprenant}\r\n                                                            disabled={!selectedLieuId}\r\n                                                            couleurEnregistree={couleursEnregistrees[cellKey]}\r\n                                                        />\r\n                                                    </div>\r\n                                                </td>\r\n                                            );\r\n                                        })\r\n                                    )}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC - Page titre personnalisé\r\nexport default withAuthAdmin(PlanningCoordo, \"Planning Coordinateur\");",
          "taille": 100417,
          "lignes": 2123,
          "dateModif": "2025-08-29T18:16:23.639Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useEffect, useState } from 'react';\r\nimport { supabase } from '../lib/supabaseClient';\r\nimport { useRouter } from 'next/router';\r\nimport { withAuthAdmin } from '../components/withAuthAdmin';\r\n\r\nconst jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi'];\r\n\r\n// Skeleton Loader spécifique au Planning Coordinateur\r\nconst SkeletonPlanningLoader = () => {\r\n  const shimmer = {\r\n    background: 'linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%)',\r\n    backgroundSize: '200% 100%',\r\n    animation: 'shimmer 1.5s infinite'\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <style jsx>{`\r\n        @keyframes shimmer {\r\n          0% { background-position: -200% 0; }\r\n          100% { background-position: 200% 0; }\r\n        }\r\n        @media print {\r\n          .no-print { display: none !important; }\r\n          body { \r\n            background: white !important; \r\n            margin: 0 !important;\r\n            padding: 0 !important;\r\n            font-size: 6px !important;\r\n          }\r\n          .print-title { \r\n            display: block !important; \r\n            text-align: center; \r\n            font-size: 12px !important; \r\n            font-weight: bold; \r\n            margin: 2px 0 !important; \r\n            color: black !important; \r\n          }\r\n          /* Optimisation globale pour A4 paysage */\r\n          * {\r\n            box-sizing: border-box !important;\r\n            margin: 0 !important;\r\n            padding: 0 !important;\r\n          }\r\n          /* Container principal */\r\n          .planning-container {\r\n            width: 100% !important;\r\n            max-width: none !important;\r\n            margin: 0 !important;\r\n            padding: 5px !important;\r\n            overflow: visible !important;\r\n          }\r\n          /* Tableau planning */\r\n          table {\r\n            width: 100% !important;\r\n            border-collapse: collapse !important;\r\n            font-size: 5px !important;\r\n            margin: 0 !important;\r\n          }\r\n          th, td {\r\n            border: 1px solid #333 !important;\r\n            padding: 1px !important;\r\n            font-size: 5px !important;\r\n            vertical-align: top !important;\r\n            overflow: hidden !important;\r\n          }\r\n          /* Headers colonnes */\r\n          th {\r\n            background: #f0f0f0 !important;\r\n            font-weight: bold !important;\r\n            font-size: 6px !important;\r\n            text-align: center !important;\r\n          }\r\n          /* Selects formateurs - unification avec apprenants */\r\n          select {\r\n            width: 100% !important;\r\n            padding: 0 !important;\r\n            border: 1px solid #ccc !important;\r\n            border-radius: 1px !important;\r\n            font-size: 4px !important;\r\n            margin: 0 !important;\r\n            background: white !important;\r\n            color: #333 !important;\r\n          }\r\n          /* Titres sections dans cellules */\r\n          .formateur-header, .apprenant-header {\r\n            font-size: 5px !important;\r\n            font-weight: bold !important;\r\n            text-align: center !important;\r\n            margin: 0 !important;\r\n            padding: 1px !important;\r\n            background: #f8f9fa !important;\r\n          }\r\n          /* Uniformisation apprenants/formateurs */\r\n          .apprenants-print-display {\r\n            display: block !important;\r\n            font-size: 4px !important;\r\n            padding: 0 !important;\r\n            background: white !important;\r\n            border: 1px solid #ccc !important;\r\n            border-radius: 1px !important;\r\n            margin: 0 !important;\r\n            color: #333 !important;\r\n          }\r\n          /* Suppression des espaces inutiles */\r\n          br { display: none !important; }\r\n          .skeleton, .shimmer { display: none !important; }\r\n        }\r\n        .print-title { display: none; }\r\n      `}</style>\r\n\r\n      <div style={{\r\n        minHeight: '100vh',\r\n        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n        padding: '0'\r\n      }}>\r\n        {/* Header Navigation Skeleton */}\r\n        <div className=\"no-print\" style={{\r\n          backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n          borderRadius: '0 0 12px 12px',\r\n          padding: '8px 20px',\r\n          marginBottom: '10px',\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          backdropFilter: 'blur(10px)',\r\n          position: 'relative'\r\n        }}>\r\n          <div style={{ \r\n            height: '16px', \r\n            width: '250px', \r\n            borderRadius: '4px',\r\n            ...shimmer \r\n          }} />\r\n          \r\n          <div style={{\r\n            position: 'absolute',\r\n            left: '50%',\r\n            top: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center'\r\n          }}>\r\n            <div style={{ \r\n              height: '20px', \r\n              width: '180px', \r\n              borderRadius: '4px',\r\n              marginBottom: '4px',\r\n              ...shimmer \r\n            }} />\r\n          </div>\r\n\r\n          <div style={{ \r\n            height: '32px', \r\n            width: '80px', \r\n            borderRadius: '8px',\r\n            ...shimmer \r\n          }} />\r\n        </div>\r\n\r\n        <div className=\"print-title\">\r\n          <div style={{ \r\n            height: '18px', \r\n            width: '150px', \r\n            borderRadius: '4px',\r\n            margin: '0 auto',\r\n            ...shimmer \r\n          }} />\r\n        </div>\r\n\r\n        {/* Toolbar Skeleton */}\r\n        <div style={{\r\n          backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n          borderRadius: '8px',\r\n          padding: '8px 20px',\r\n          marginBottom: '10px',\r\n          marginLeft: '20px',\r\n          marginRight: '20px',\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\r\n        }}>\r\n          <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n            <div style={{ \r\n              height: '30px', \r\n              width: '140px', \r\n              borderRadius: '6px',\r\n              ...shimmer \r\n            }} />\r\n            <div style={{ \r\n              height: '30px', \r\n              width: '180px', \r\n              borderRadius: '6px',\r\n              ...shimmer \r\n            }} />\r\n          </div>\r\n\r\n          <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\r\n            <div style={{ \r\n              height: '24px', \r\n              width: '200px', \r\n              borderRadius: '4px',\r\n              ...shimmer \r\n            }} />\r\n            {[1, 2, 3, 4].map(i => (\r\n              <div key={i} style={{ \r\n                height: '30px', \r\n                width: '120px', \r\n                borderRadius: '6px',\r\n                ...shimmer \r\n              }} />\r\n            ))}\r\n          </div>\r\n\r\n          <div style={{ display: 'flex', gap: '8px' }}>\r\n            {[1, 2, 3].map(i => (\r\n              <div key={i} style={{ \r\n                height: '30px', \r\n                width: '110px', \r\n                borderRadius: '6px',\r\n                ...shimmer \r\n              }} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Planning Table Skeleton */}\r\n        <div style={{\r\n          backgroundColor: 'white',\r\n          borderRadius: '12px',\r\n          margin: '0 20px 20px 20px',\r\n          padding: '15px',\r\n          overflow: 'auto',\r\n          boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n        }}>\r\n          {/* Table Header Skeleton */}\r\n          <div style={{\r\n            display: 'grid',\r\n            gridTemplateColumns: '40px repeat(5, 1fr)',\r\n            gap: '1px',\r\n            marginBottom: '1px'\r\n          }}>\r\n            <div style={{\r\n              height: '60px',\r\n              backgroundColor: '#f9fafb',\r\n              border: '1px solid #e5e7eb',\r\n              borderRadius: '4px'\r\n            }} />\r\n            {jours.map((jour, i) => (\r\n              <div key={jour} style={{\r\n                height: '60px',\r\n                backgroundColor: '#f9fafb',\r\n                border: '1px solid #e5e7eb',\r\n                borderRadius: '4px',\r\n                padding: '8px',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n              }}>\r\n                <div style={{ \r\n                  height: '14px', \r\n                  width: '60px', \r\n                  borderRadius: '4px',\r\n                  marginBottom: '4px',\r\n                  ...shimmer \r\n                }} />\r\n                <div style={{ \r\n                  height: '12px', \r\n                  width: '80px', \r\n                  borderRadius: '4px',\r\n                  marginBottom: '6px',\r\n                  ...shimmer \r\n                }} />\r\n                <div style={{ display: 'flex', gap: '3px' }}>\r\n                  <div style={{ \r\n                    height: '20px', \r\n                    width: '25px', \r\n                    borderRadius: '3px',\r\n                    ...shimmer \r\n                  }} />\r\n                  <div style={{ \r\n                    height: '20px', \r\n                    width: '25px', \r\n                    borderRadius: '3px',\r\n                    ...shimmer \r\n                  }} />\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Table Rows Skeleton */}\r\n          {['M', 'AM'].map((creneau, creneauIndex) => (\r\n            <div key={creneau} style={{\r\n              display: 'grid',\r\n              gridTemplateColumns: '40px repeat(5, 1fr)',\r\n              gap: '1px',\r\n              marginBottom: '1px'\r\n            }}>\r\n              <div style={{\r\n                height: '200px',\r\n                backgroundColor: creneauIndex === 0 ? '#fef3c7' : '#dbeafe',\r\n                border: '1px solid #e5e7eb',\r\n                borderRadius: '4px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                fontWeight: 'bold',\r\n                fontSize: '11px'\r\n              }}>\r\n                {creneau}\r\n              </div>\r\n              \r\n              {jours.map((jour, dayIndex) => (\r\n                <div key={`${creneau}-${dayIndex}`} style={{\r\n                  height: '200px',\r\n                  backgroundColor: 'white',\r\n                  border: '1px solid #e5e7eb',\r\n                  borderRadius: '4px',\r\n                  padding: '8px',\r\n                  display: 'flex',\r\n                  flexDirection: 'column',\r\n                  gap: '6px'\r\n                }}>\r\n                  {/* Lieu Select Skeleton */}\r\n                  <div style={{ \r\n                    height: '28px', \r\n                    width: '100%', \r\n                    borderRadius: '4px',\r\n                    ...shimmer \r\n                  }} />\r\n                  \r\n                  {/* Salarié Select Skeleton */}\r\n                  <div style={{ \r\n                    height: '28px', \r\n                    width: '100%', \r\n                    borderRadius: '4px',\r\n                    ...shimmer \r\n                  }} />\r\n                  \r\n                  {/* Formateurs Block Skeleton */}\r\n                  <div style={{\r\n                    padding: '6px',\r\n                    background: 'rgba(255, 255, 255, 0.2)',\r\n                    borderRadius: '4px',\r\n                    border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                  }}>\r\n                    <div style={{ \r\n                      height: '14px', \r\n                      width: '80px', \r\n                      borderRadius: '4px',\r\n                      margin: '0 auto 4px',\r\n                      ...shimmer \r\n                    }} />\r\n                    {[1, 2].map(i => (\r\n                      <div key={i} style={{ \r\n                        height: '24px', \r\n                        width: '100%', \r\n                        borderRadius: '3px',\r\n                        marginBottom: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                    ))}\r\n                    <div style={{ display: 'flex', gap: '3px', justifyContent: 'center', marginTop: '4px' }}>\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {/* Apprenants Block Skeleton */}\r\n                  <div style={{\r\n                    padding: '6px',\r\n                    background: 'rgba(255, 255, 255, 0.2)',\r\n                    borderRadius: '4px',\r\n                    border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                  }}>\r\n                    <div style={{ \r\n                      height: '14px', \r\n                      width: '80px', \r\n                      borderRadius: '4px',\r\n                      margin: '0 auto 4px',\r\n                      ...shimmer \r\n                    }} />\r\n                    <div style={{ \r\n                      height: '24px', \r\n                      width: '100%', \r\n                      borderRadius: '3px',\r\n                      marginBottom: '3px',\r\n                      ...shimmer \r\n                    }} />\r\n                    <div style={{ display: 'flex', gap: '3px', justifyContent: 'center', marginTop: '4px' }}>\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                      <div style={{ \r\n                        height: '20px', \r\n                        width: '25px', \r\n                        borderRadius: '3px',\r\n                        ...shimmer \r\n                      }} />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n// Fonction pour calculer la date d'un jour spécifique dans la semaine courante\r\nfunction getDateOfWeek(dayIndex, currentDate) {\r\n    const startOfWeek = new Date(currentDate);\r\n    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1);\r\n    const resultDate = new Date(startOfWeek);\r\n    resultDate.setDate(startOfWeek.getDate() + dayIndex);\r\n    return resultDate.toLocaleDateString('fr-FR');\r\n}\r\n\r\n// Fonction pour revenir à la semaine courante\r\nfunction getCurrentWeekStart() {\r\n    const now = new Date();\r\n    const startOfWeek = new Date(now);\r\n    startOfWeek.setDate(now.getDate() - now.getDay() + 1);\r\n    return startOfWeek;\r\n}\r\n\r\n// Fonction dates UTC pour éviter décalages timezone\r\nfunction getWeekDates(currentDate) {\r\n    const startOfWeek = new Date(currentDate);\r\n    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1);\r\n    \r\n    const weekDates = [];\r\n    for (let i = 0; i < 5; i++) {\r\n        const date = new Date(startOfWeek);\r\n        date.setDate(startOfWeek.getDate() + i);\r\n        const year = date.getFullYear();\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        const day = String(date.getDate()).padStart(2, '0');\r\n        weekDates.push(`${year}-${month}-${day}`);\r\n    }\r\n    return weekDates;\r\n}\r\n\r\nfunction PlanningCoordo({ user, logout, inactivityTime }) {\r\n    const router = useRouter();\r\n    \r\n    // États pour les données de base\r\n    const [salaries, setSalaries] = useState([]);\r\n    const [formateurs, setFormateurs] = useState([]);\r\n    const [apprenants, setApprenants] = useState([]);\r\n    const [currentDate, setCurrentDate] = useState(new Date());\r\n    const [lieux, setLieux] = useState([]);\r\n    const [planningTypes, setPlanningTypes] = useState([]);\r\n    const [absencesValidees, setAbsencesValidees] = useState([]);\r\n    \r\n    // États pour les données du planning\r\n    const [apprenantsParCase, setApprenantsParCase] = useState({});\r\n    const [formateursParCase, setFormateursParCase] = useState({});\r\n    const [lieuxParJour, setLieuxParJour] = useState({});\r\n    const [lieuxSelectionnes, setLieuxSelectionnes] = useState({});\r\n    const [salariesSelectionnes, setSalariesSelectionnes] = useState({});\r\n    \r\n    // États de contrôle\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [dataLoaded, setDataLoaded] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [filtreDisponibilite, setFiltreDisponibilite] = useState('toutes');\r\n\r\n    // ☆☆☆ NOUVEAUX ÉTATS POUR CONTRÔLE ROI ABSOLU - ÉTAPE 3.1 ☆☆☆\r\n    const [derniereCommande, setDerniereCommande] = useState(null);\r\n    const [commandesTraitees, setCommandesTraitees] = useState(new Set());\r\n    const [statsEcoute, setStatsEcoute] = useState({\r\n        commandesRecues: 0,\r\n        refreshEffectues: 0,\r\n        derniereActivite: null\r\n    });\r\n\r\n    // ☆☆☆ FONCTION ROI AMÉLIORÉE - ÉCOUTE ACTIVE COMPLÈTE ☆☆☆\r\n    const ecouterCommandesRoi = () => {\r\n        const interval = setInterval(() => {\r\n            const commande = localStorage.getItem('roiCommande');\r\n            if (commande) {\r\n                try {\r\n                    const parsed = JSON.parse(commande);\r\n                    \r\n                    // Éviter de traiter la même commande plusieurs fois\r\n                    if (!commandesTraitees.has(parsed.timestamp)) {\r\n                        console.log('🤴 PRINCE COORDO reçoit ordre du ROI:', parsed);\r\n                        \r\n                        setDerniereCommande(parsed);\r\n                        setCommandesTraitees(prev => new Set([...prev, parsed.timestamp]));\r\n                        \r\n                        // Traiter immédiatement la commande ROI\r\n                        executerOrdreRoi(parsed);\r\n                        \r\n                        // Mettre à jour stats écoute\r\n                        setStatsEcoute(prev => ({\r\n                            ...prev,\r\n                            commandesRecues: prev.commandesRecues + 1,\r\n                            derniereActivite: new Date().toLocaleTimeString()\r\n                        }));\r\n                    }\r\n                } catch (error) {\r\n                    console.error('❌ Erreur parsing commande ROI:', error);\r\n                }\r\n            }\r\n        }, 500); // Check plus fréquent pour réactivité\r\n\r\n        return interval;\r\n    };\r\n\r\n    // ☆☆☆ FONCTION ROI PRINCIPALE - EXÉCUTION ORDRES ☆☆☆\r\n    const executerOrdreRoi = async (commande) => {\r\n        try {\r\n            console.log(`🤴 PRINCE exécute ordre: ${commande.action}`);\r\n            \r\n            switch (commande.action) {\r\n                case 'retirer_formateur':\r\n                    await traiterRetirerFormateur(commande);\r\n                    break;\r\n                    \r\n                case 'ajouter_formateur':\r\n                    await traiterAjouterFormateur(commande);\r\n                    break;\r\n                    \r\n                case 'remettre_disponible':\r\n                    await traiterRemettreDisponible(commande);\r\n                    break;\r\n                    \r\n                case 'changer_statut':\r\n                    await traiterChangerStatut(commande);\r\n                    break;\r\n                    \r\n                case 'refresh_complet':\r\n                    await traiterRefreshComplet(commande);\r\n                    break;\r\n                    \r\n                default:\r\n                    console.log(`⚠️ Ordre ROI non reconnu: ${commande.action}`);\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur exécution ordre ROI:', error);\r\n        }\r\n    };\r\n\r\n    // ☆☆☆ TRAITEMENTS SPÉCIFIQUES DES ORDRES ROI ☆☆☆\r\n    \r\n    const traiterRetirerFormateur = async (commande) => {\r\n        console.log(`🚫 PRINCE retire formateur ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Retirer formateur le ${commande.date}\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterAjouterFormateur = async (commande) => {\r\n        console.log(`✅ PRINCE ajoute formateur ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        const typeAjout = commande.details?.transformation || 'ajout_standard';\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Ajouter formateur ${\r\n            typeAjout.includes('dispo_except') ? '(DISPO EXCEPT)' : ''\r\n        } le ${commande.date}\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterRemettreDisponible = async (commande) => {\r\n        console.log(`🔄 PRINCE remet disponible ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Formateur remis disponible le ${commande.date}\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterChangerStatut = async (commande) => {\r\n        console.log(`🔄 PRINCE change statut ${commande.formateur_id} le ${commande.date}`);\r\n        \r\n        const transformation = commande.details?.transformation || 'changement_type';\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Changement statut (${transformation})\r\n🔄 Refresh automatique des menus...`);\r\n        \r\n        // Refresh immédiat des absences\r\n        await rechargerAbsencesValidees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    const traiterRefreshComplet = async (commande) => {\r\n        console.log('🔄 PRINCE effectue refresh complet sur ordre ROI');\r\n        \r\n        setMessage(`🤴 ROI ORDONNE : Refresh complet des données\r\n🔄 Rechargement total en cours...`);\r\n        \r\n        // Refresh complet de toutes les données\r\n        await rechargerToutesDonnees();\r\n        \r\n        setTimeout(() => setMessage(''), 4000);\r\n    };\r\n\r\n    // ☆☆☆ FONCTIONS DE RECHARGEMENT OPTIMISÉES ☆☆☆\r\n    \r\n    const rechargerAbsencesValidees = async () => {\r\n        try {\r\n            console.log('🔄 Rechargement absences validées...');\r\n            \r\n            const { data: absencesRes, error } = await supabase\r\n                .from('absences_formateurs')\r\n                .select('id, formateur_id, date_debut, date_fin, type, statut')\r\n                .eq('statut', 'validé');\r\n                \r\n            if (error) throw error;\r\n                \r\n            if (absencesRes) {\r\n                console.log(`✅ ${absencesRes.length} absences validées rechargées`);\r\n                setAbsencesValidees(absencesRes);\r\n                \r\n                // Mettre à jour stats\r\n                setStatsEcoute(prev => ({\r\n                    ...prev,\r\n                    refreshEffectues: prev.refreshEffectues + 1\r\n                }));\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur rechargement absences:', error);\r\n        }\r\n    };\r\n\r\n    const rechargerToutesDonnees = async () => {\r\n        try {\r\n            console.log('🔄 Rechargement complet données...');\r\n            \r\n            const [absencesRes, planningTypesRes] = await Promise.all([\r\n                supabase.from('absences_formateurs').select('id, formateur_id, date_debut, date_fin, type, statut').eq('statut', 'validé'),\r\n                supabase.from('planning_type_formateurs').select('id, formateur_id, jour, creneau, statut, lieu_id, valide').eq('valide', true)\r\n            ]);\r\n\r\n            if (absencesRes.data) setAbsencesValidees(absencesRes.data);\r\n            if (planningTypesRes.data) setPlanningTypes(planningTypesRes.data);\r\n            \r\n            console.log('✅ Rechargement complet terminé');\r\n            \r\n            // Mettre à jour stats\r\n            setStatsEcoute(prev => ({\r\n                ...prev,\r\n                refreshEffectues: prev.refreshEffectues + 1\r\n            }));\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur rechargement complet:', error);\r\n        }\r\n    };\r\n\r\n    // RÉCUPÉRATION DES DONNÉES DE BASE\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const [salariesRes, formateursRes, apprenantsRes, lieuxRes, planningTypesRes, absencesRes] = await Promise.all([\r\n                    supabase.from('users').select('id, prenom, nom, role, initiales').eq('role', 'salarié').eq('archive', false),\r\n                    supabase.from('users').select('id, prenom, nom, role').eq('role', 'formateur').eq('archive', false),\r\n                    supabase.from('users').select('id, prenom, nom, role').eq('role', 'apprenant').eq('archive', false),\r\n                    supabase.from('lieux').select('id, nom, couleur, initiale').eq('archive', false),\r\n                    supabase.from('planning_type_formateurs').select('id, formateur_id, jour, creneau, statut, lieu_id, valide').eq('valide', true),\r\n                    supabase.from('absences_formateurs').select('id, formateur_id, date_debut, date_fin, type, statut').eq('statut', 'validé')\r\n                ]);\r\n\r\n                if (salariesRes.data) setSalaries(salariesRes.data);\r\n                if (formateursRes.data) setFormateurs(formateursRes.data);\r\n                if (apprenantsRes.data) setApprenants(apprenantsRes.data);\r\n                if (lieuxRes.data) setLieux(lieuxRes.data);\r\n                if (planningTypesRes.data) setPlanningTypes(planningTypesRes.data);\r\n                if (absencesRes.data) setAbsencesValidees(absencesRes.data);\r\n            } catch (error) {\r\n                console.error('Erreur lors du chargement des données:', error);\r\n            }\r\n        };\r\n        \r\n        fetchData();\r\n    }, []);\r\n\r\n    // ☆☆☆ EFFET POUR DÉMARRER L'ÉCOUTE ROI AMÉLIORÉE ☆☆☆\r\n    useEffect(() => {\r\n        console.log('🎧 PRINCE démarre écoute active des ordres du ROI...');\r\n        const interval = ecouterCommandesRoi();\r\n        \r\n        return () => {\r\n            console.log('🔇 PRINCE arrête écoute des ordres ROI');\r\n            clearInterval(interval);\r\n        };\r\n    }, []); // Pas de dépendances pour écoute continue\r\n\r\n    // ☆☆☆ FONCTION CORRIGÉE - PRIORITÉ DISPO EXCEPTIONNELLE ☆☆☆\r\n    const isFormateurAbsent = (formateurId, dateStr) => {\r\n        // D'ABORD vérifier s'il a une dispo exceptionnelle (priorité absolue)\r\n        const dispoExcept = absencesValidees.find(absence => {\r\n            if (absence.formateur_id !== formateurId) return false;\r\n            if (absence.type !== 'formation') return false;\r\n            \r\n            const estDansIntervalle = dateStr >= absence.date_debut && dateStr <= absence.date_fin;\r\n            return estDansIntervalle;\r\n        });\r\n        \r\n        // Si dispo exceptionnelle trouvée = PAS absent !\r\n        if (dispoExcept) {\r\n            console.log(`✅ PRIORITÉ DISPO EXCEPT: formateur ${formateurId} disponible le ${dateStr} !`);\r\n            return false;\r\n        }\r\n        \r\n        // ENSUITE chercher les vraies absences\r\n        const absenceJour = absencesValidees.find(absence => {\r\n            if (absence.formateur_id !== formateurId) return false;\r\n            if (absence.type === 'formation') return false; // Dispo except n'est pas absence\r\n            \r\n            const estDansIntervalle = dateStr >= absence.date_debut && dateStr <= absence.date_fin;\r\n            return estDansIntervalle;\r\n        });\r\n\r\n        if (absenceJour) {\r\n            console.log(`🚫 ${formateurId} absent le ${dateStr} - retiré par ROI`);\r\n        }\r\n\r\n        return !!absenceJour;\r\n    };\r\n\r\n    // Fonction dispo exceptionnelle corrigée\r\n    const hasDispoExceptionnelle = (formateurId, dateStr) => {\r\n        const dispoJour = absencesValidees.find(absence => {\r\n            if (absence.formateur_id !== formateurId) return false;\r\n            if (absence.type !== 'formation') return false;\r\n            \r\n            const estDansIntervalle = dateStr >= absence.date_debut && dateStr <= absence.date_fin;\r\n            return estDansIntervalle;\r\n        });\r\n\r\n        return !!dispoJour;\r\n    };\r\n\r\n    // Fonction de filtrage des formateurs disponibles\r\n    const getFormateursDisponibles = (jour, creneau, lieuId) => {\r\n        const creneauDB = creneau === 'Matin' ? 'Matin' : 'AM';\r\n        \r\n        if (!jour || !creneau) {\r\n            return formateurs.map(f => ({ ...f, statut: null }));\r\n        }\r\n\r\n        const dayIndex = jours.indexOf(jour);\r\n        const weekDates = getWeekDates(currentDate);\r\n        const dateStr = weekDates[dayIndex];\r\n\r\n        const formateursAvecPlanningType = planningTypes.filter(pt => {\r\n            const jourMatch = pt.jour === jour;\r\n            const creneauMatch = pt.creneau === creneauDB;\r\n            \r\n            let statutValide = false;\r\n            if (filtreDisponibilite === 'disponible') {\r\n                statutValide = pt.statut === 'disponible';\r\n            } else if (filtreDisponibilite === 'exceptionnelles') {\r\n                statutValide = pt.statut === 'dispo_except';\r\n            } else if (filtreDisponibilite === 'toutes') {\r\n                statutValide = pt.statut === 'disponible' || pt.statut === 'dispo_except';\r\n            }\r\n            \r\n            if (!jourMatch || !creneauMatch || !statutValide) {\r\n                return false;\r\n            }\r\n            \r\n            if (pt.lieu_id === null) {\r\n                return true;\r\n            } else if (lieuId) {\r\n                return pt.lieu_id === lieuId;\r\n            } else {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        const formateursAvecPlanningTypeIds = formateursAvecPlanningType.map(pt => pt.formateur_id);\r\n        \r\n        const formateursAvecPlanningTypeTotal = planningTypes.map(pt => pt.formateur_id);\r\n        const formateursSansPlanningType = formateurs.filter(f => \r\n            !formateursAvecPlanningTypeTotal.includes(f.id)\r\n        );\r\n\r\n        const formateursDisponiblesPlanningType = formateurs.filter(f => \r\n            formateursAvecPlanningTypeIds.includes(f.id)\r\n        ).map(f => {\r\n            const planningType = formateursAvecPlanningType.find(pt => pt.formateur_id === f.id);\r\n            \r\n            // ☆☆☆ LOGIQUE ROI - ABSENCE GAGNE TOUJOURS ☆☆☆\r\n            if (isFormateurAbsent(f.id, dateStr)) {\r\n                console.log(`🚫 ${f.prenom} absent le ${dateStr} - retiré par ROI`);\r\n                return null;\r\n            }\r\n            \r\n            // ☆☆☆ LOGIQUE ROI - DISPO EXCEPT PRIORITAIRE ☆☆☆\r\n            if (hasDispoExceptionnelle(f.id, dateStr)) {\r\n                console.log(`✅ ${f.prenom} dispo exceptionnelle le ${dateStr} - ajouté par ROI`);\r\n                return { \r\n                    ...f, \r\n                    statut: 'dispo_except',\r\n                    lieuSpecifique: false,\r\n                    source: 'exception_validee_roi'\r\n                };\r\n            }\r\n            \r\n            return { \r\n                ...f, \r\n                statut: planningType ? planningType.statut : null,\r\n                lieuSpecifique: planningType && planningType.lieu_id ? true : false,\r\n                source: 'planning_type'\r\n            };\r\n        }).filter(f => f !== null);\r\n\r\n        const formateursSansPlanningAvecStatut = filtreDisponibilite === 'toutes' \r\n            ? formateursSansPlanningType.filter(f => !isFormateurAbsent(f.id, dateStr))\r\n                .map(f => {\r\n                    // ☆☆☆ LOGIQUE ROI - DISPO EXCEPT MÊME SANS PLANNING TYPE ☆☆☆\r\n                    if (hasDispoExceptionnelle(f.id, dateStr)) {\r\n                        console.log(`✅ ${f.prenom} dispo exceptionnelle le ${dateStr} (sans planning) - ajouté par ROI`);\r\n                        return { \r\n                            ...f, \r\n                            statut: 'dispo_except',\r\n                            lieuSpecifique: false,\r\n                            source: 'exception_validee_roi'\r\n                        };\r\n                    }\r\n                    \r\n                    return { \r\n                        ...f, \r\n                        statut: null,\r\n                        lieuSpecifique: false,\r\n                        source: 'aucun_planning'\r\n                    };\r\n                })\r\n            : [];\r\n\r\n        return [...formateursDisponiblesPlanningType, ...formateursSansPlanningAvecStatut];\r\n    };\r\n\r\n    // CHARGEMENT DU PLANNING\r\n    const loadWeekPlanning = async (targetDate) => {\r\n        try {\r\n            const weekDates = getWeekDates(targetDate);\r\n            \r\n            const { data: planningData, error } = await supabase\r\n                .from('planning_hebdomadaire')\r\n                .select('*')\r\n                .in('date', weekDates)\r\n                .order('created_at', { ascending: false });\r\n\r\n            if (error) {\r\n                console.error('Erreur lors du chargement:', error);\r\n                return;\r\n            }\r\n\r\n            const newApprenantsParCase = {};\r\n            const newFormateursParCase = {};\r\n            const newLieuxSelectionnes = {};\r\n            const newSalariesSelectionnes = {};\r\n            const newLieuxParJour = {};\r\n\r\n            jours.forEach((_, dayIndex) => {\r\n                newLieuxParJour[dayIndex] = [0];\r\n                ['Matin', 'AM'].forEach((creneau) => {\r\n                    const key = `${dayIndex}-0-${creneau}`;\r\n                    newApprenantsParCase[key] = [\"\"];\r\n                    newFormateursParCase[key] = [\"\"];\r\n                    newLieuxSelectionnes[key] = \"\";\r\n                    newSalariesSelectionnes[key] = \"\";\r\n                });\r\n            });\r\n\r\n            if (planningData && planningData.length > 0) {\r\n                planningData.forEach(item => {\r\n                    const dayIndex = jours.indexOf(item.jour);\r\n                    if (dayIndex !== -1) {\r\n                        const creneau = item.creneau === 'matin' ? 'Matin' : 'AM';\r\n                        const lieuIndex = item.lieu_index || 0;\r\n                        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n\r\n                        if (item.formateurs_ids && item.formateurs_ids.length > 0) {\r\n                            newFormateursParCase[key] = [...item.formateurs_ids.filter(id => id), \"\"];\r\n                        }\r\n                        if (item.apprenants_ids && item.apprenants_ids.length > 0) {\r\n                            newApprenantsParCase[key] = [...item.apprenants_ids.filter(id => id), \"\"];\r\n                        }\r\n                        if (item.lieu_id) {\r\n                            newLieuxSelectionnes[key] = item.lieu_id;\r\n                        }\r\n                        if (item.salarie_id) {\r\n                            newSalariesSelectionnes[key] = item.salarie_id;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            setApprenantsParCase(newApprenantsParCase);\r\n            setFormateursParCase(newFormateursParCase);\r\n            setLieuxSelectionnes(newLieuxSelectionnes);\r\n            setSalariesSelectionnes(newSalariesSelectionnes);\r\n            setLieuxParJour(newLieuxParJour);\r\n            setDataLoaded(true);\r\n\r\n        } catch (error) {\r\n            console.error('Erreur lors du chargement du planning:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (lieux.length >= 0 && salaries.length > 0 && formateurs.length > 0 && apprenants.length > 0) {\r\n            setDataLoaded(false);\r\n            loadWeekPlanning(currentDate);\r\n        }\r\n    }, [currentDate, lieux, salaries, formateurs, apprenants]);\r\n\r\n    // FONCTIONS DE SAUVEGARDE\r\n    const handleEnregistrerBrouillon = async () => {\r\n        setIsLoading(true);\r\n        \r\n        try {\r\n            const weekDates = getWeekDates(currentDate);\r\n            const stats = await sauvegarderPlanning('brouillon', weekDates);\r\n\r\n            setMessage(`📝 Brouillon semaine ${semaine} enregistré !\r\n${stats.creneaux} créneaux • ${stats.formateursAfectes} formateurs`);\r\n            setTimeout(() => setMessage(''), 5000);\r\n\r\n        } catch (error) {\r\n            console.error('Erreur lors de l\\'enregistrement:', error);\r\n            setMessage(`⚠️ Erreur: ${error.message}`);\r\n            setTimeout(() => setMessage(''), 5000);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleValiderTransmettre = async () => {\r\n        if (!window.confirm('Valider et transmettre le planning ? Les formateurs recevront des notifications.')) return;\r\n        \r\n        setIsLoading(true);\r\n        \r\n        try {\r\n            const weekDates = getWeekDates(currentDate);\r\n            const stats = await sauvegarderPlanning('validé', weekDates);\r\n\r\n            await envoyerMessagesValidation(stats, semaine, weekDates);\r\n\r\n            setMessage(`✅ Planning semaine ${semaine} validé et transmis !\r\n${stats.creneaux} créneaux • ${stats.formateursAfectes} formateurs affectés\r\n📧 Messages envoyés aux formateurs`);\r\n            setTimeout(() => setMessage(''), 8000);\r\n\r\n        } catch (error) {\r\n            console.error('Erreur lors de la validation:', error);\r\n            setMessage(`⚠️ Erreur: ${error.message}`);\r\n            setTimeout(() => setMessage(''), 5000);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Fonction envoi messages validation\r\n    const envoyerMessagesValidation = async (stats, semaine, weekDates) => {\r\n        try {\r\n            const { data: affectations } = await supabase\r\n                .from('planning_formateurs_hebdo')\r\n                .select('formateur_id, date, creneau, lieu_nom')\r\n                .in('date', weekDates)\r\n                .eq('statut', 'attribue');\r\n\r\n            if (affectations && affectations.length > 0) {\r\n                const affectationsParFormateur = {};\r\n                affectations.forEach(aff => {\r\n                    if (!affectationsParFormateur[aff.formateur_id]) {\r\n                        affectationsParFormateur[aff.formateur_id] = [];\r\n                    }\r\n                    affectationsParFormateur[aff.formateur_id].push(aff);\r\n                });\r\n\r\n                for (const [formateurId, affectationsFormateur] of Object.entries(affectationsParFormateur)) {\r\n                    const formateur = formateurs.find(f => f.id === formateurId);\r\n                    if (formateur) {\r\n                        const creneauxDetail = affectationsFormateur.map(aff => \r\n                            `${aff.date} ${aff.creneau} à ${aff.lieu_nom}`\r\n                        ).join('\\n');\r\n\r\n                        await supabase.from('messages').insert({\r\n                            expediteur: 'Coordination ACLEF',\r\n                            destinataire_id: formateurId,\r\n                            objet: `Planning semaine ${semaine} validé`,\r\n                            contenu: `Bonjour ${formateur.prenom},\\n\\nVotre planning pour la semaine ${semaine} a été validé.\\n\\nVos interventions :\\n${creneauxDetail}\\n\\nMerci de votre engagement !\\n\\nCordialement,\\nL'équipe ACLEF`,\r\n                            statut: 'envoye',\r\n                            type: 'planning_valide'\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Erreur envoi messages validation:', error);\r\n        }\r\n    };\r\n\r\n    // FONCTION DE SAUVEGARDE\r\n    const sauvegarderPlanning = async (statut, weekDates) => {\r\n        const planningsToSave = [];\r\n        const planningFormateursToSave = [];\r\n        const formateursAfectes = new Set();\r\n\r\n        jours.forEach((jour, dayIndex) => {\r\n            const currentDateStr = weekDates[dayIndex];\r\n            \r\n            (lieuxParJour[dayIndex] || []).forEach((lieuIndex) => {\r\n                ['Matin', 'AM'].forEach((creneau) => {\r\n                    const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                    \r\n                    const formateursIds = (formateursParCase[key] || []).filter(id => id !== \"\");\r\n                    const apprenantsIds = (apprenantsParCase[key] || []).filter(id => id !== \"\");\r\n                    const lieuId = lieuxSelectionnes[key] || null;\r\n                    const salarieId = salariesSelectionnes[key] || null;\r\n                    \r\n                    if (formateursIds.length > 0 || apprenantsIds.length > 0 || lieuId || salarieId) {\r\n                        let creneauDB = creneau === 'Matin' ? 'matin' : 'AM';\r\n\r\n                        planningsToSave.push({\r\n                            date: currentDateStr,\r\n                            jour: jour,\r\n                            creneau: creneauDB,\r\n                            lieu_index: lieuIndex,\r\n                            lieu_id: lieuId,\r\n                            salarie_id: salarieId || null,\r\n                            formateurs_ids: formateursIds,\r\n                            apprenants_ids: apprenantsIds,\r\n                            statut_planning: statut\r\n                        });\r\n\r\n                        formateursIds.forEach(formateurId => {\r\n                            formateursAfectes.add(formateurId);\r\n                            const lieuInfo = lieux.find(l => l.id === lieuId);\r\n                            \r\n                            planningFormateursToSave.push({\r\n                                formateur_id: formateurId,\r\n                                date: currentDateStr,\r\n                                creneau: creneauDB,\r\n                                lieu_nom: lieuInfo ? lieuInfo.nom : '',\r\n                                lieu_initiales: lieuInfo ? lieuInfo.initiale : '',\r\n                                statut: statut === 'brouillon' ? 'brouillon' : 'attribue'\r\n                            });\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n        if (planningsToSave.length > 0) {\r\n            const { error: insertError } = await supabase\r\n                .from('planning_hebdomadaire')\r\n                .insert(planningsToSave);\r\n\r\n            if (insertError) {\r\n                console.error('Erreur insertion planning:', insertError);\r\n                throw insertError;\r\n            }\r\n        }\r\n\r\n        if (planningFormateursToSave.length > 0) {\r\n            const { error: insertFormateursError } = await supabase\r\n                .from('planning_formateurs_hebdo')\r\n                .insert(planningFormateursToSave);\r\n\r\n            if (insertFormateursError) {\r\n                console.error('Erreur insertion planning formateurs:', insertFormateursError);\r\n                throw insertFormateursError;\r\n            }\r\n        }\r\n\r\n        return {\r\n            creneaux: planningsToSave.length,\r\n            formateursAfectes: formateursAfectes.size\r\n        };\r\n    };\r\n\r\n    // FONCTIONS UTILITAIRES\r\n    const getLieuCouleur = (lieuId) => {\r\n        if (!lieuId) return '#ffffff';\r\n        const lieu = lieux.find(l => l.id === lieuId);\r\n        return lieu?.couleur || '#ffffff';\r\n    };\r\n\r\n    const getTextColor = (backgroundColor) => {\r\n        if (!backgroundColor || backgroundColor === '#ffffff') return '#000000';\r\n        \r\n        const hex = backgroundColor.replace('#', '');\r\n        const r = parseInt(hex.substr(0, 2), 16);\r\n        const g = parseInt(hex.substr(2, 2), 16);\r\n        const b = parseInt(hex.substr(4, 2), 16);\r\n        \r\n        const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\r\n        return luminance > 0.5 ? '#000000' : '#ffffff';\r\n    };\r\n\r\n    const getInitiales = (prenom, nom) => {\r\n        return `${prenom?.[0] ?? ''}${nom?.[0] ?? ''}`.toUpperCase();\r\n    };\r\n\r\n    const semaine = Math.ceil(((currentDate - new Date(currentDate.getFullYear(), 0, 1)) / 86400000 + new Date(currentDate.getFullYear(), 0, 1).getDay() + 1) / 7);\r\n\r\n    // NAVIGATION\r\n    const changeWeek = (direction) => {\r\n        const newDate = new Date(currentDate);\r\n        newDate.setDate(currentDate.getDate() + (direction * 7));\r\n        setCurrentDate(newDate);\r\n    };\r\n\r\n    const goToCurrentWeek = () => {\r\n        const currentWeekStart = getCurrentWeekStart();\r\n        setCurrentDate(currentWeekStart);\r\n    };\r\n\r\n    // GESTION DES DONNÉES\r\n    const handleLieuChange = (dayIndex, lieuIndex, creneau, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setLieuxSelectionnes(prev => ({ ...prev, [key]: value }));\r\n    };\r\n\r\n    const handleSalarieChange = (dayIndex, lieuIndex, creneau, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setSalariesSelectionnes(prev => ({ ...prev, [key]: value }));\r\n    };\r\n\r\n    const handleFormateurChange = (dayIndex, lieuIndex, creneau, selectIndex, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const newList = [...(formateursParCase[key] || [])];\r\n        newList[selectIndex] = value;\r\n        setFormateursParCase(prev => ({ ...prev, [key]: newList }));\r\n    };\r\n\r\n    const handleAddFormateur = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setFormateursParCase(prev => ({\r\n            ...prev,\r\n            [key]: [...(prev[key] || []), \"\"]\r\n        }));\r\n    };\r\n\r\n    const handleRemoveFormateur = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const currentList = formateursParCase[key] || [];\r\n        if (currentList.length > 1) {\r\n            setFormateursParCase(prev => ({\r\n                ...prev,\r\n                [key]: prev[key].slice(0, -1)\r\n            }));\r\n        }\r\n    };\r\n\r\n    const handleApprenantChange = (dayIndex, lieuIndex, creneau, selectIndex, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const newList = [...(apprenantsParCase[key] || [])];\r\n        newList[selectIndex] = value;\r\n        setApprenantsParCase(prev => ({ ...prev, [key]: newList }));\r\n    };\r\n\r\n    const handleAddApprenant = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setApprenantsParCase(prev => ({\r\n            ...prev,\r\n            [key]: [...(prev[key] || []), \"\"]\r\n        }));\r\n    };\r\n\r\n    const handleRemoveApprenant = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const currentList = apprenantsParCase[key] || [];\r\n        if (currentList.length > 1) {\r\n            setApprenantsParCase(prev => ({\r\n                ...prev,\r\n                [key]: prev[key].slice(0, -1)\r\n            }));\r\n        }\r\n    };\r\n\r\n    const handleAddLieu = (dayIndex) => {\r\n        const currentLieux = lieuxParJour[dayIndex] || [];\r\n        const newLieuIndex = Math.max(...currentLieux) + 1;\r\n        \r\n        setLieuxParJour(prev => ({\r\n            ...prev,\r\n            [dayIndex]: [...currentLieux, newLieuIndex]\r\n        }));\r\n\r\n        ['Matin', 'AM'].forEach((creneau) => {\r\n            const key = `${dayIndex}-${newLieuIndex}-${creneau}`;\r\n            setApprenantsParCase(prev => ({ ...prev, [key]: [\"\"] }));\r\n            setFormateursParCase(prev => ({ ...prev, [key]: [\"\"] }));\r\n            setLieuxSelectionnes(prev => ({ ...prev, [key]: \"\" }));\r\n            setSalariesSelectionnes(prev => ({ ...prev, [key]: \"\" }));\r\n        });\r\n    };\r\n\r\n    const handleRemoveLieu = (dayIndex, lieuIndex) => {\r\n        const currentLieux = lieuxParJour[dayIndex] || [];\r\n        if (currentLieux.length > 1) {\r\n            setLieuxParJour(prev => ({\r\n                ...prev,\r\n                [dayIndex]: currentLieux.filter(l => l !== lieuIndex)\r\n            }));\r\n\r\n            ['Matin', 'AM'].forEach((creneau) => {\r\n                const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                setApprenantsParCase(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n                setFormateursParCase(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n                setLieuxSelectionnes(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n                setSalariesSelectionnes(prev => {\r\n                    const newState = { ...prev };\r\n                    delete newState[key];\r\n                    return newState;\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    if (!dataLoaded) {\r\n        return <SkeletonPlanningLoader />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <style jsx>{`\r\n                @media print {\r\n                    .no-print { display: none !important; }\r\n                    body { background: white !important; }\r\n                    .print-title { display: block !important; text-align: center; font-size: 18px; font-weight: bold; margin-bottom: 20px; color: black !important; }\r\n                }\r\n                .print-title { display: none; }\r\n            `}</style>\r\n\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                padding: '0',\r\n                opacity: 1,\r\n                transition: 'opacity 0.3s ease-in-out'\r\n            }}>\r\n                <div className=\"no-print\" style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                    borderRadius: '0 0 12px 12px',\r\n                    padding: '8px 20px',\r\n                    marginBottom: '10px',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    backdropFilter: 'blur(10px)',\r\n                    position: 'relative'\r\n                }}>\r\n                    <nav style={{ fontSize: '14px' }}>\r\n                        <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                        <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                        <span style={{ color: '#3b82f6', fontWeight: '500' }}>Planning Coordonnateur</span>\r\n                    </nav>\r\n                    \r\n                    <div style={{\r\n                        position: 'absolute',\r\n                        left: '50%',\r\n                        top: '50%',\r\n                        transform: 'translate(-50%, -50%)',\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center'\r\n                    }}>\r\n                        <h1 style={{\r\n                            fontSize: '18px',\r\n                            fontWeight: 'bold',\r\n                            color: '#1f2937',\r\n                            margin: '0'\r\n                        }}>\r\n                            Planning semaine {semaine}\r\n                        </h1>\r\n                        \r\n                    </div>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        Accueil\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"print-title\">\r\n                    Planning semaine {semaine}\r\n                </div>\r\n\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n                    borderRadius: '8px',\r\n                    padding: '8px 20px',\r\n                    marginBottom: '10px',\r\n                    marginLeft: '20px',\r\n                    marginRight: '20px',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n                        <button\r\n                            className=\"no-print\"\r\n                            onClick={() => window.print()}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#8b5cf6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            Impression planning\r\n                        </button>\r\n\r\n                        <div className=\"no-print\" style={{\r\n                            padding: '4px 8px',\r\n                            fontSize: '12px',\r\n                            fontWeight: '600',\r\n                            borderRadius: '6px',\r\n                            backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n                            color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#f59e0b' : '#10b981',\r\n                            border: '1px solid',\r\n                            borderColor: inactivityTime >= 240 ? '#fecaca' : inactivityTime >= 180 ? '#fde68a' : '#bbf7d0'\r\n                        }}>\r\n                            Status : {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n                                     inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                     inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                     `🟢 ACTIF`}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"no-print\" style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\r\n                        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                            <label style={{ fontSize: '12px', fontWeight: '500', color: '#374151' }}>\r\n                                Afficher :\r\n                            </label>\r\n                            <select\r\n                                value={filtreDisponibilite}\r\n                                onChange={(e) => setFiltreDisponibilite(e.target.value)}\r\n                                style={{\r\n                                    padding: '4px 8px',\r\n                                    border: '1px solid #d1d5db',\r\n                                    borderRadius: '4px',\r\n                                    fontSize: '12px',\r\n                                    cursor: 'pointer',\r\n                                    fontWeight: '500'\r\n                                }}\r\n                            >\r\n                                <option value=\"toutes\">Toutes les disponibilités</option>\r\n                                <option value=\"disponible\">Disponible uniquement</option>\r\n                                <option value=\"exceptionnelles\">Dispo exceptionnelles</option>\r\n                            </select>\r\n                        </div>\r\n                        \r\n                        <button\r\n                            onClick={() => changeWeek(-1)}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            ← Semaine précédente\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={goToCurrentWeek}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#10b981',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '600'\r\n                            }}\r\n                        >\r\n                            Aujourd'hui\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={() => changeWeek(1)}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            Semaine suivante →\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div className=\"no-print\" style={{ display: 'flex', gap: '8px' }}>\r\n                        <button\r\n                            onClick={handleEnregistrerBrouillon}\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: isLoading ? '#94a3b8' : '#6b7280',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                            }}\r\n                        >\r\n                            {isLoading ? 'Sauvegarde...' : 'Enregistrer'}\r\n                        </button>\r\n\r\n                        <button\r\n                            onClick={logout}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: '#dc2626',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            🚪 Déconnexion\r\n                        </button>\r\n\r\n                        <button\r\n                            onClick={handleValiderTransmettre}\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: isLoading ? '#94a3b8' : '#10b981',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer'\r\n                            }}\r\n                        >\r\n                            {isLoading ? 'Validation...' : 'Valider & Transmettre'}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {message && (\r\n                    <div className=\"no-print\" style={{\r\n                        backgroundColor: message.includes('🤴') ? '#dbeafe' : \r\n                                         message.includes('✅') ? '#d1fae5' :\r\n                                         message.includes('📝') ? '#fef3c7' : '#fee2e2',\r\n                        color: message.includes('🤴') ? '#1e40af' : \r\n                               message.includes('✅') ? '#065f46' :\r\n                               message.includes('📝') ? '#92400e' : '#991b1b',\r\n                        padding: '8px 15px',\r\n                        borderRadius: '6px',\r\n                        marginBottom: '10px',\r\n                        marginLeft: '20px',\r\n                        marginRight: '20px',\r\n                        textAlign: 'center',\r\n                        fontSize: '14px',\r\n                        whiteSpace: 'pre-line'\r\n                    }}>\r\n                        {message}\r\n                    </div>\r\n                )}\r\n\r\n                <div className=\"planning-container\" style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    margin: '0 20px 20px 20px',\r\n                    padding: '15px',\r\n                    overflow: 'auto',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                        <thead>\r\n                            <tr style={{ backgroundColor: '#f9fafb' }}>\r\n                                <th style={{ \r\n                                    padding: '10px', \r\n                                    border: '1px solid #e5e7eb',\r\n                                    fontWeight: '600',\r\n                                    fontSize: '13px',\r\n                                    textAlign: 'center',\r\n                                    minWidth: '40px',\r\n                                    maxWidth: '40px'\r\n                                }}>\r\n                                </th>\r\n                                {jours.map((jour, dayIndex) => \r\n                                    (lieuxParJour[dayIndex] || []).map((lieuIndex, lieuPos) => (\r\n                                        <th key={`${dayIndex}-${lieuIndex}`} style={{ \r\n                                            padding: '10px',\r\n                                            border: '1px solid #e5e7eb',\r\n                                            minWidth: '180px',\r\n                                            textAlign: 'center',\r\n                                            fontSize: '11px',\r\n                                            backgroundColor: '#f9fafb'\r\n                                        }}>\r\n                                            <div>\r\n                                                <div style={{ fontWeight: '600', fontSize: '13px', marginBottom: '3px' }}>\r\n                                                    {jour}\r\n                                                </div>\r\n                                                <div style={{ fontSize: '10px', color: '#6b7280', marginBottom: '6px' }}>\r\n                                                    {getDateOfWeek(dayIndex, currentDate)}\r\n                                                </div>\r\n                                                <div className=\"no-print\" style={{ display: 'flex', gap: '3px', justifyContent: 'center' }}>\r\n                                                    <button \r\n                                                        onClick={() => handleAddLieu(dayIndex)}\r\n                                                        style={{\r\n                                                            padding: '3px 6px',\r\n                                                            background: '#10b981',\r\n                                                            color: 'white',\r\n                                                            border: 'none',\r\n                                                            borderRadius: '3px',\r\n                                                            fontSize: '11px',\r\n                                                            cursor: 'pointer',\r\n                                                            fontWeight: 'bold'\r\n                                                        }}\r\n                                                    >\r\n                                                        +\r\n                                                    </button>\r\n                                                    {(lieuxParJour[dayIndex] || []).length > 1 && (\r\n                                                        <button \r\n                                                            onClick={() => handleRemoveLieu(dayIndex, lieuIndex)}\r\n                                                            style={{\r\n                                                                padding: '3px 6px',\r\n                                                                background: '#ef4444',\r\n                                                                color: 'white',\r\n                                                                border: 'none',\r\n                                                                borderRadius: '3px',\r\n                                                                fontSize: '11px',\r\n                                                                cursor: 'pointer',\r\n                                                                fontWeight: 'bold'\r\n                                                            }}\r\n                                                        >\r\n                                                            −\r\n                                                        </button>\r\n                                                    )}\r\n                                                </div>\r\n                                            </div>\r\n                                        </th>\r\n                                    ))\r\n                                )}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {['Matin', 'AM'].map((creneau, creneauIndex) => (\r\n                                <tr key={creneau}>\r\n                                    <td style={{ \r\n                                        padding: '8px', \r\n                                        border: '1px solid #e5e7eb',\r\n                                        backgroundColor: creneauIndex === 0 ? '#fef3c7' : '#dbeafe',\r\n                                        fontWeight: 'bold',\r\n                                        textAlign: 'center',\r\n                                        fontSize: '11px',\r\n                                        minWidth: '40px',\r\n                                        maxWidth: '40px'\r\n                                    }}>\r\n                                        {creneau === 'Matin' ? 'M' : 'AM'}\r\n                                    </td>\r\n                                    {jours.map((jour, dayIndex) => \r\n                                        (lieuxParJour[dayIndex] || []).map((lieuIndex) => {\r\n                                            const cellKey = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                                            const selectedLieuId = lieuxSelectionnes[cellKey];\r\n                                            const backgroundColor = getLieuCouleur(selectedLieuId);\r\n                                            const textColor = getTextColor(backgroundColor);\r\n                                            \r\n                                            return (\r\n                                                <td \r\n                                                    key={cellKey} \r\n                                                    style={{\r\n                                                        padding: '8px',\r\n                                                        border: '1px solid #e5e7eb',\r\n                                                        backgroundColor: backgroundColor,\r\n                                                        color: textColor,\r\n                                                        verticalAlign: 'top',\r\n                                                        minWidth: '180px'\r\n                                                    }}\r\n                                                >\r\n                                                    <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>\r\n                                                        <select \r\n                                                            style={{\r\n                                                                width: '100%',\r\n                                                                padding: '4px',\r\n                                                                border: '1px solid #d1d5db',\r\n                                                                borderRadius: '4px',\r\n                                                                fontSize: '11px',\r\n                                                                fontWeight: '500',\r\n                                                                background: 'rgba(255,255,255,0.9)',\r\n                                                                color: '#374151'\r\n                                                            }}\r\n                                                            value={selectedLieuId || \"\"}\r\n                                                            onChange={(e) => handleLieuChange(dayIndex, lieuIndex, creneau, e.target.value)}\r\n                                                        >\r\n                                                            <option value=\"\">Choisir lieu</option>\r\n                                                            {lieux.map((lieu) => (\r\n                                                                <option key={lieu.id} value={lieu.id}>{lieu.nom}</option>\r\n                                                            ))}\r\n                                                        </select>\r\n\r\n                                                        <select \r\n                                                            style={{\r\n                                                                width: '100%',\r\n                                                                padding: '4px',\r\n                                                                border: '1px solid #d1d5db',\r\n                                                                borderRadius: '4px',\r\n                                                                fontSize: '11px',\r\n                                                                background: 'rgba(255,255,255,0.9)',\r\n                                                                color: '#374151'\r\n                                                            }}\r\n                                                            value={salariesSelectionnes[cellKey] || \"\"}\r\n                                                            onChange={(e) => handleSalarieChange(dayIndex, lieuIndex, creneau, e.target.value)}\r\n                                                        >\r\n                                                            <option value=\"\">Choisir salarié</option>\r\n                                                            {salaries.map((s) => (\r\n                                                                <option key={s.id} value={s.id}>\r\n                                                                    {s.initiales || getInitiales(s.prenom, s.nom)}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </select>\r\n\r\n                                                        <div style={{\r\n                                                            padding: '6px',\r\n                                                            background: 'rgba(255, 255, 255, 0.2)',\r\n                                                            borderRadius: '4px',\r\n                                                            border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                                                        }}>\r\n                                                            <div className=\"formateur-header\" style={{ \r\n                                                                fontSize: '10px', \r\n                                                                fontWeight: '600', \r\n                                                                marginBottom: '4px',\r\n                                                                textAlign: 'center'\r\n                                                            }}>\r\n                                                                FORMATEURS\r\n                                                            </div>\r\n                                                            {(formateursParCase[cellKey] || [\"\"]).map((selectedId, i) => {\r\n                                                                const formateursDisponibles = getFormateursDisponibles(jour, creneau, selectedLieuId);\r\n                                                                \r\n                                                                return (\r\n                                                                    <select\r\n                                                                        key={i}\r\n                                                                        style={{\r\n                                                                            width: '100%',\r\n                                                                            padding: '3px',\r\n                                                                            border: '1px solid #d1d5db',\r\n                                                                            borderRadius: '3px',\r\n                                                                            fontSize: '10px',\r\n                                                                            background: 'rgba(255,255,255,0.9)',\r\n                                                                            color: '#374151',\r\n                                                                            marginBottom: '3px'\r\n                                                                        }}\r\n                                                                        value={selectedId}\r\n                                                                        onChange={(e) => handleFormateurChange(dayIndex, lieuIndex, creneau, i, e.target.value)}\r\n                                                                    >\r\n                                                                        <option value=\"\">Formateur</option>\r\n                                                                        {formateursDisponibles\r\n                                                                            .filter(f => {\r\n                                                                                const currentSelections = formateursParCase[cellKey] || [];\r\n                                                                                return !currentSelections.includes(f.id) || currentSelections[i] === f.id;\r\n                                                                            })\r\n                                                                            .map(f => (\r\n                                                                                <option \r\n                                                                                    key={f.id} \r\n                                                                                    value={f.id}\r\n                                                                                    style={{\r\n                                                                                        backgroundColor: f.statut === 'disponible' ? '#dbeafe' : \r\n                                                                                                      f.statut === 'dispo_except' ? '#fef3c7' : 'white',\r\n                                                                                        color: f.statut === 'disponible' ? '#1e40af' : \r\n                                                                                               f.statut === 'dispo_except' ? '#92400e' : '#374151'\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    {f.prenom} {f.nom}\r\n                                                                                    {f.statut === 'dispo_except' ? ' (EXCEPT)' : \r\n                                                                                     f.statut === 'disponible' ? \r\n                                                                                        (f.lieuSpecifique ? ' (LIEU)' : ' (S/P)') : ''}\r\n                                                                                    {f.source === 'exception_validee_roi' ? ' [ROI]' : ''}\r\n                                                                                </option>\r\n                                                                            ))}\r\n                                                                    </select>\r\n                                                                );\r\n                                                            })}\r\n\r\n                                                            <div className=\"no-print\" style={{ display: 'flex', gap: '3px', justifyContent: 'center' }}>\r\n                                                                <button\r\n                                                                    onClick={() => handleAddFormateur(dayIndex, lieuIndex, creneau)}\r\n                                                                    style={{\r\n                                                                        padding: '3px 6px',\r\n                                                                        background: '#3b82f6',\r\n                                                                        color: 'white',\r\n                                                                        border: 'none',\r\n                                                                        borderRadius: '3px',\r\n                                                                        fontSize: '10px',\r\n                                                                        cursor: 'pointer',\r\n                                                                        fontWeight: 'bold'\r\n                                                                    }}\r\n                                                                >\r\n                                                                    +\r\n                                                                </button>\r\n                                                                {(formateursParCase[cellKey] || []).length > 1 && (\r\n                                                                    <button\r\n                                                                        onClick={() => handleRemoveFormateur(dayIndex, lieuIndex, creneau)}\r\n                                                                        style={{\r\n                                                                            padding: '3px 6px',\r\n                                                                            background: '#ef4444',\r\n                                                                            color: 'white',\r\n                                                                            border: 'none',\r\n                                                                            borderRadius: '3px',\r\n                                                                            fontSize: '10px',\r\n                                                                            cursor: 'pointer',\r\n                                                                            fontWeight: 'bold'\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        −\r\n                                                                    </button>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                        <div style={{\r\n                                                            padding: '6px',\r\n                                                            background: 'rgba(255, 255, 255, 0.2)',\r\n                                                            borderRadius: '4px',\r\n                                                            border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                                                        }}>\r\n                                                            <div style={{ \r\n                                                                fontSize: '10px', \r\n                                                                fontWeight: '600', \r\n                                                                marginBottom: '4px',\r\n                                                                textAlign: 'center'\r\n                                                            }}>\r\n                                                                APPRENANTS\r\n                                                            </div>\r\n                                                            {(apprenantsParCase[cellKey] || [\"\"]).map((selectedId, i) => (\r\n                                                                <select\r\n                                                                    key={i}\r\n                                                                    style={{\r\n                                                                        width: '100%',\r\n                                                                        padding: '3px',\r\n                                                                        border: '1px solid #d1d5db',\r\n                                                                        borderRadius: '3px',\r\n                                                                        fontSize: '10px',\r\n                                                                        background: 'rgba(255,255,255,0.9)',\r\n                                                                        color: '#374151',\r\n                                                                        marginBottom: '3px'\r\n                                                                    }}\r\n                                                                    value={selectedId}\r\n                                                                    onChange={(e) => handleApprenantChange(dayIndex, lieuIndex, creneau, i, e.target.value)}\r\n                                                                >\r\n                                                                    <option value=\"\">Apprenant</option>\r\n                                                                    {apprenants\r\n                                                                        .filter(a => {\r\n                                                                            const currentSelections = apprenantsParCase[cellKey] || [];\r\n                                                                            return !currentSelections.includes(a.id) || currentSelections[i] === a.id;\r\n                                                                        })\r\n                                                                        .map(a => (\r\n                                                                            <option key={a.id} value={a.id}>\r\n                                                                                {a.prenom} {a.nom}\r\n                                                                            </option>\r\n                                                                        ))}\r\n                                                                </select>\r\n                                                            ))}\r\n\r\n                                                            <div className=\"no-print\" style={{ display: 'flex', gap: '3px', justifyContent: 'center' }}>\r\n                                                                <button\r\n                                                                    onClick={() => handleAddApprenant(dayIndex, lieuIndex, creneau)}\r\n                                                                    style={{\r\n                                                                        padding: '3px 6px',\r\n                                                                        background: '#3b82f6',\r\n                                                                        color: 'white',\r\n                                                                        border: 'none',\r\n                                                                        borderRadius: '3px',\r\n                                                                        fontSize: '10px',\r\n                                                                        cursor: 'pointer',\r\n                                                                        fontWeight: 'bold'\r\n                                                                    }}\r\n                                                                >\r\n                                                                    +\r\n                                                                </button>\r\n                                                                {(apprenantsParCase[cellKey] || []).length > 1 && (\r\n                                                                    <button\r\n                                                                        onClick={() => handleRemoveApprenant(dayIndex, lieuIndex, creneau)}\r\n                                                                        style={{\r\n                                                                            padding: '3px 6px',\r\n                                                                            background: '#ef4444',\r\n                                                                            color: 'white',\r\n                                                                            border: 'none',\r\n                                                                            borderRadius: '3px',\r\n                                                                            fontSize: '10px',\r\n                                                                            cursor: 'pointer',\r\n                                                                            fontWeight: 'bold'\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        −\r\n                                                                    </button>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </td>\r\n                                            );\r\n                                        })\r\n                                    )}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC - Page titre personnalisé\r\nexport default withAuthAdmin(PlanningCoordo, \"Planning Coordinateur\");",
          "taille": 90307,
          "lignes": 1885,
          "dateModif": "2025-08-29T18:08:42.289Z",
          "erreur": null
        },
        "identique": false,
        "diffTaille": 10110,
        "diffLignes": 238,
        "pourcentageSimilarite": 90,
        "message": "🟡 SIMILAIRE - Similarité: 90% (±10110 bytes, ±238 lignes)"
      }
    },
    {
      "fichier": "pages/planning-test-v1.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "// ==========================================\r\n// PLANNING-TEST-V1.JS - APPROCHE COMPOSANT SÉPARÉ\r\n// ==========================================\r\n// Principe : MenuApprenants.js externe + intégration minimale\r\n// Avantages : Séparation des responsabilités, réutilisabilité\r\n// Inconvénients : Communication entre composants, complexité\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { supabase } from '../lib/supabaseClient';\r\nimport { useRouter } from 'next/router';\r\nimport { withAuthAdmin } from '../components/withAuthAdmin';\r\nimport MenuApprenants from '../components/MenuApprenants';\r\n\r\nconst jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi'];\r\n\r\nfunction PlanningTestV1({ user, logout, inactivityTime }) {\r\n    const router = useRouter();\r\n    \r\n    // États pour les données de base (identiques à l'original)\r\n    const [salaries, setSalaries] = useState([]);\r\n    const [formateurs, setFormateurs] = useState([]);\r\n    const [apprenants, setApprenants] = useState([]);\r\n    const [currentDate, setCurrentDate] = useState(new Date());\r\n    const [lieux, setLieux] = useState([]);\r\n    const [planningTypes, setPlanningTypes] = useState([]);\r\n    const [absencesValidees, setAbsencesValidees] = useState([]);\r\n    \r\n    // États pour les données du planning (identiques à l'original)\r\n    const [apprenantsParCase, setApprenantsParCase] = useState({});\r\n    const [formateursParCase, setFormateursParCase] = useState({});\r\n    const [lieuxParJour, setLieuxParJour] = useState({});\r\n    const [lieuxSelectionnes, setLieuxSelectionnes] = useState({});\r\n    const [salariesSelectionnes, setSalariesSelectionnes] = useState({});\r\n    \r\n    // États de contrôle\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [dataLoaded, setDataLoaded] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [filtreDisponibilite, setFiltreDisponibilite] = useState('toutes');\r\n\r\n    // NOUVEAUX ÉTATS POUR APPROCHE V1 - COMPOSANT SÉPARÉ\r\n    const [apprenantsStats, setApprenantsStats] = useState({\r\n        totalCases: 0,\r\n        casesAvecApprenants: 0,\r\n        totalApprenants: 0\r\n    });\r\n\r\n    // Fonctions utilitaires (copiées de l'original)\r\n    function getDateOfWeek(dayIndex, currentDate) {\r\n        const startOfWeek = new Date(currentDate);\r\n        startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1);\r\n        const resultDate = new Date(startOfWeek);\r\n        resultDate.setDate(startOfWeek.getDate() + dayIndex);\r\n        return resultDate.toLocaleDateString('fr-FR');\r\n    }\r\n\r\n    function getCurrentWeekStart() {\r\n        const now = new Date();\r\n        const startOfWeek = new Date(now);\r\n        startOfWeek.setDate(now.getDate() - now.getDay() + 1);\r\n        return startOfWeek;\r\n    }\r\n\r\n    function getWeekDates(currentDate) {\r\n        const startOfWeek = new Date(currentDate);\r\n        startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1);\r\n        \r\n        const weekDates = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            const date = new Date(startOfWeek);\r\n            date.setDate(startOfWeek.getDate() + i);\r\n            const year = date.getFullYear();\r\n            const month = String(date.getMonth() + 1).padStart(2, '0');\r\n            const day = String(date.getDate()).padStart(2, '0');\r\n            weekDates.push(`${year}-${month}-${day}`);\r\n        }\r\n        return weekDates;\r\n    }\r\n\r\n    const semaine = Math.ceil(((currentDate - new Date(currentDate.getFullYear(), 0, 1)) / 86400000 + new Date(currentDate.getFullYear(), 0, 1).getDay() + 1) / 7);\r\n\r\n    // Helper functions (copiées de l'original)\r\n    const getNomLieu = (lieuId) => {\r\n        if (!lieuId) return '';\r\n        const lieu = lieux.find(l => l.id === lieuId);\r\n        return lieu ? lieu.nom : '';\r\n    };\r\n\r\n    const getNomSalarie = (salarieId) => {\r\n        if (!salarieId) return '';\r\n        const salarie = salaries.find(s => s.id === salarieId);\r\n        return salarie ? (salarie.initiales || getInitiales(salarie.prenom, salarie.nom)) : '';\r\n    };\r\n\r\n    const getNomFormateur = (formateurId) => {\r\n        if (!formateurId) return '';\r\n        const formateur = formateurs.find(f => f.id === formateurId);\r\n        return formateur ? `${formateur.prenom} ${formateur.nom}` : '';\r\n    };\r\n\r\n    const getNomApprenant = (apprenantId) => {\r\n        if (!apprenantId) return '';\r\n        const apprenant = apprenants.find(a => a.id === apprenantId);\r\n        return apprenant ? `${apprenant.prenom} ${apprenant.nom}` : '';\r\n    };\r\n\r\n    const getLieuCouleur = (lieuId) => {\r\n        if (!lieuId) return '#ffffff';\r\n        const lieu = lieux.find(l => l.id === lieuId);\r\n        return lieu?.couleur || '#ffffff';\r\n    };\r\n\r\n    const getTextColor = (backgroundColor) => {\r\n        if (!backgroundColor || backgroundColor === '#ffffff') return '#000000';\r\n        \r\n        const hex = backgroundColor.replace('#', '');\r\n        const r = parseInt(hex.substr(0, 2), 16);\r\n        const g = parseInt(hex.substr(2, 2), 16);\r\n        const b = parseInt(hex.substr(4, 2), 16);\r\n        \r\n        const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\r\n        return luminance > 0.5 ? '#000000' : '#ffffff';\r\n    };\r\n\r\n    const getInitiales = (prenom, nom) => {\r\n        return `${prenom?.[0] ?? ''}${nom?.[0] ?? ''}`.toUpperCase();\r\n    };\r\n\r\n    // Fonction de filtrage formateurs (copiée et simplifiée de l'original)\r\n    const getFormateursDisponibles = (jour, creneau, lieuId) => {\r\n        const creneauDB = creneau === 'Matin' ? 'Matin' : 'AM';\r\n        \r\n        if (!jour || !creneau) {\r\n            return formateurs.map(f => ({ ...f, statut: null }));\r\n        }\r\n\r\n        // Version simplifiée pour les tests\r\n        return formateurs.map(f => ({ \r\n            ...f, \r\n            statut: 'disponible',\r\n            lieuSpecifique: false,\r\n            source: 'test_v1'\r\n        }));\r\n    };\r\n\r\n    // ⭐ FONCTION CENTRALE V1 - GESTION APPRENANTS VIA COMPOSANT EXTERNE\r\n    const handleApprenantSelect = (caseKey, apprenantId, action = 'add') => {\r\n        console.log(`🎯 V1 - ${action} apprenant ${apprenantId} dans case ${caseKey}`);\r\n        \r\n        setApprenantsParCase(prev => {\r\n            const currentList = prev[caseKey] || [''];\r\n            let newList;\r\n            \r\n            if (action === 'remove') {\r\n                // Retirer l'apprenant de la liste\r\n                newList = currentList.filter(id => id !== apprenantId);\r\n                // S'assurer qu'il reste au moins un slot vide\r\n                if (newList.length === 0 || !newList.includes('')) {\r\n                    newList.push('');\r\n                }\r\n            } else {\r\n                // Ajouter l'apprenant\r\n                const emptyIndex = currentList.findIndex(id => id === '');\r\n                if (emptyIndex !== -1) {\r\n                    newList = [...currentList];\r\n                    newList[emptyIndex] = apprenantId;\r\n                    // Ajouter un nouveau slot vide si nécessaire\r\n                    if (!newList.includes('')) {\r\n                        newList.push('');\r\n                    }\r\n                } else {\r\n                    newList = [...currentList.filter(id => id), apprenantId, ''];\r\n                }\r\n            }\r\n            \r\n            return { ...prev, [caseKey]: newList };\r\n        });\r\n\r\n        // Mettre à jour les statistiques\r\n        updateApprenantsStats();\r\n        \r\n        // Afficher message de feedback\r\n        const apprenantNom = getNomApprenant(apprenantId) || apprenantId;\r\n        const actionText = action === 'remove' ? 'retiré de' : 'ajouté à';\r\n        setMessage(`👥 V1: ${apprenantNom} ${actionText} la case ${caseKey}`);\r\n        setTimeout(() => setMessage(''), 3000);\r\n    };\r\n\r\n    // Fonction pour obtenir les données de créneau pour MenuApprenants\r\n    const getCreneauDataForMenu = (dayIndex, lieuIndex, creneau) => {\r\n        const weekDates = getWeekDates(currentDate);\r\n        const caseKey = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        \r\n        return {\r\n            date: weekDates[dayIndex],\r\n            jour: jours[dayIndex],\r\n            creneau: creneau,\r\n            lieu_id: lieuxSelectionnes[caseKey] || null\r\n        };\r\n    };\r\n\r\n    // Fonction pour obtenir les apprenants sélectionnés pour une case\r\n    const getSelectedApprenantsForCase = (caseKey) => {\r\n        const selectedList = apprenantsParCase[caseKey] || [''];\r\n        return selectedList.filter(id => id && id !== '');\r\n    };\r\n\r\n    // Mettre à jour les statistiques d'apprenants\r\n    const updateApprenantsStats = () => {\r\n        let totalCases = 0;\r\n        let casesAvecApprenants = 0;\r\n        let totalApprenants = 0;\r\n\r\n        Object.entries(apprenantsParCase).forEach(([key, list]) => {\r\n            totalCases++;\r\n            const apprenantsDansCase = (list || []).filter(id => id && id !== '');\r\n            if (apprenantsDansCase.length > 0) {\r\n                casesAvecApprenants++;\r\n                totalApprenants += apprenantsDansCase.length;\r\n            }\r\n        });\r\n\r\n        setApprenantsStats({\r\n            totalCases,\r\n            casesAvecApprenants,\r\n            totalApprenants\r\n        });\r\n    };\r\n\r\n    // RÉCUPÉRATION DES DONNÉES DE BASE (identique à l'original)\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const [salariesRes, formateursRes, apprenantsRes, lieuxRes] = await Promise.all([\r\n                    supabase.from('users').select('id, prenom, nom, role, initiales').eq('role', 'salarié').eq('archive', false),\r\n                    supabase.from('users').select('id, prenom, nom, role').eq('role', 'formateur').eq('archive', false),\r\n                    supabase.from('users').select('id, prenom, nom, role').eq('role', 'apprenant').eq('archive', false),\r\n                    supabase.from('lieux').select('id, nom, couleur, initiale').eq('archive', false)\r\n                ]);\r\n\r\n                if (salariesRes.data) setSalaries(salariesRes.data);\r\n                if (formateursRes.data) setFormateurs(formateursRes.data);\r\n                if (apprenantsRes.data) setApprenants(apprenantsRes.data);\r\n                if (lieuxRes.data) setLieux(lieuxRes.data);\r\n                \r\n            } catch (error) {\r\n                console.error('Erreur lors du chargement des données V1:', error);\r\n            }\r\n        };\r\n        \r\n        fetchData();\r\n    }, []);\r\n\r\n    // CHARGEMENT DU PLANNING (simplifié pour les tests)\r\n    const loadWeekPlanning = async (targetDate) => {\r\n        try {\r\n            // Initialisation simple pour les tests\r\n            const newApprenantsParCase = {};\r\n            const newFormateursParCase = {};\r\n            const newLieuxSelectionnes = {};\r\n            const newSalariesSelectionnes = {};\r\n            const newLieuxParJour = {};\r\n\r\n            // Initialiser avec une structure de base\r\n            jours.forEach((_, dayIndex) => {\r\n                newLieuxParJour[dayIndex] = [0]; // Un lieu par défaut\r\n                \r\n                [0].forEach(lieuIndex => {\r\n                    ['Matin', 'AM'].forEach((creneau) => {\r\n                        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                        newApprenantsParCase[key] = [\"\"];\r\n                        newFormateursParCase[key] = [\"\"];\r\n                        newLieuxSelectionnes[key] = \"\";\r\n                        newSalariesSelectionnes[key] = \"\";\r\n                    });\r\n                });\r\n            });\r\n\r\n            setApprenantsParCase(newApprenantsParCase);\r\n            setFormateursParCase(newFormateursParCase);\r\n            setLieuxSelectionnes(newLieuxSelectionnes);\r\n            setSalariesSelectionnes(newSalariesSelectionnes);\r\n            setLieuxParJour(newLieuxParJour);\r\n            setDataLoaded(true);\r\n\r\n        } catch (error) {\r\n            console.error('Erreur lors du chargement du planning V1:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (lieux.length >= 0 && salaries.length > 0 && formateurs.length > 0 && apprenants.length > 0) {\r\n            setDataLoaded(false);\r\n            loadWeekPlanning(currentDate);\r\n        }\r\n    }, [currentDate, lieux, salaries, formateurs, apprenants]);\r\n\r\n    // Mettre à jour les stats quand les données changent\r\n    useEffect(() => {\r\n        updateApprenantsStats();\r\n    }, [apprenantsParCase]);\r\n\r\n    // GESTION DES HANDLERS (identiques à l'original mais simplifiés)\r\n    const handleLieuChange = (dayIndex, lieuIndex, creneau, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setLieuxSelectionnes(prev => ({ ...prev, [key]: value }));\r\n    };\r\n\r\n    const handleSalarieChange = (dayIndex, lieuIndex, creneau, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setSalariesSelectionnes(prev => ({ ...prev, [key]: value }));\r\n    };\r\n\r\n    const handleFormateurChange = (dayIndex, lieuIndex, creneau, selectIndex, value) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const newList = [...(formateursParCase[key] || [])];\r\n        newList[selectIndex] = value;\r\n        setFormateursParCase(prev => ({ ...prev, [key]: newList }));\r\n    };\r\n\r\n    const handleAddFormateur = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        setFormateursParCase(prev => ({\r\n            ...prev,\r\n            [key]: [...(prev[key] || []), \"\"]\r\n        }));\r\n    };\r\n\r\n    const handleRemoveFormateur = (dayIndex, lieuIndex, creneau) => {\r\n        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n        const currentList = formateursParCase[key] || [];\r\n        if (currentList.length > 1) {\r\n            setFormateursParCase(prev => ({\r\n                ...prev,\r\n                [key]: prev[key].slice(0, -1)\r\n            }));\r\n        }\r\n    };\r\n\r\n    // NAVIGATION\r\n    const changeWeek = (direction) => {\r\n        const newDate = new Date(currentDate);\r\n        newDate.setDate(currentDate.getDate() + (direction * 7));\r\n        setCurrentDate(newDate);\r\n    };\r\n\r\n    const goToCurrentWeek = () => {\r\n        const currentWeekStart = getCurrentWeekStart();\r\n        setCurrentDate(currentWeekStart);\r\n    };\r\n\r\n    if (!dataLoaded) {\r\n        return (\r\n            <div style={{ \r\n                display: 'flex', \r\n                justifyContent: 'center', \r\n                alignItems: 'center', \r\n                minHeight: '100vh',\r\n                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                color: 'white',\r\n                fontSize: '18px'\r\n            }}>\r\n                🔄 Chargement prototype V1...\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                padding: '0'\r\n            }}>\r\n                {/* Header Navigation */}\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                    borderRadius: '0 0 12px 12px',\r\n                    padding: '8px 20px',\r\n                    marginBottom: '10px',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    backdropFilter: 'blur(10px)'\r\n                }}>\r\n                    <nav style={{ fontSize: '14px' }}>\r\n                        <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                        <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                        <span style={{ color: '#3b82f6', fontWeight: '500' }}>🧪 Test V1 - Composant Séparé</span>\r\n                    </nav>\r\n                    \r\n                    <div style={{ textAlign: 'center' }}>\r\n                        <h1 style={{\r\n                            fontSize: '18px',\r\n                            fontWeight: 'bold',\r\n                            color: '#1f2937',\r\n                            margin: '0'\r\n                        }}>\r\n                            📝 PROTOTYPE V1 - COMPOSANT SÉPARÉ\r\n                        </h1>\r\n                        <div style={{ fontSize: '12px', color: '#6b7280', marginTop: '2px' }}>\r\n                            MenuApprenants externe • Planning semaine {semaine}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🏠 Dashboard\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Toolbar avec statistiques V1 */}\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n                    borderRadius: '8px',\r\n                    padding: '8px 20px',\r\n                    marginBottom: '10px',\r\n                    marginLeft: '20px',\r\n                    marginRight: '20px',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    {/* Statistiques V1 */}\r\n                    <div style={{\r\n                        display: 'flex',\r\n                        gap: '15px',\r\n                        alignItems: 'center',\r\n                        padding: '4px 12px',\r\n                        backgroundColor: 'rgba(59, 130, 246, 0.1)',\r\n                        borderRadius: '6px',\r\n                        border: '1px solid rgba(59, 130, 246, 0.2)'\r\n                    }}>\r\n                        <div style={{ fontSize: '12px', fontWeight: '600', color: '#1e40af' }}>\r\n                            📊 V1 Stats:\r\n                        </div>\r\n                        <div style={{ fontSize: '11px', color: '#3730a3' }}>\r\n                            👥 {apprenantsStats.totalApprenants} apprenants\r\n                        </div>\r\n                        <div style={{ fontSize: '11px', color: '#3730a3' }}>\r\n                            📋 {apprenantsStats.casesAvecApprenants}/{apprenantsStats.totalCases} cases\r\n                        </div>\r\n                        <div style={{ fontSize: '11px', color: '#3730a3' }}>\r\n                            🎯 Composant externe\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Navigation semaine */}\r\n                    <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\r\n                        <button\r\n                            onClick={() => changeWeek(-1)}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            ← Précédente\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={goToCurrentWeek}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#10b981',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            Aujourd'hui\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={() => changeWeek(1)}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            Suivante →\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* Actions */}\r\n                    <div style={{ display: 'flex', gap: '8px' }}>\r\n                        <button\r\n                            onClick={() => setMessage('💾 V1: Sauvegarde simulée (test uniquement)')}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: '#6b7280',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            💾 Test Sauvegarde\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Message de feedback */}\r\n                {message && (\r\n                    <div style={{\r\n                        backgroundColor: message.includes('V1') ? '#dbeafe' : '#d1fae5',\r\n                        color: message.includes('V1') ? '#1e40af' : '#065f46',\r\n                        padding: '8px 15px',\r\n                        borderRadius: '6px',\r\n                        marginBottom: '10px',\r\n                        marginLeft: '20px',\r\n                        marginRight: '20px',\r\n                        textAlign: 'center',\r\n                        fontSize: '14px'\r\n                    }}>\r\n                        {message}\r\n                    </div>\r\n                )}\r\n\r\n                {/* Planning Table */}\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    margin: '0 20px 20px 20px',\r\n                    padding: '15px',\r\n                    overflow: 'auto',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                        <thead>\r\n                            <tr style={{ backgroundColor: '#f9fafb' }}>\r\n                                <th style={{ \r\n                                    padding: '10px', \r\n                                    border: '1px solid #e5e7eb',\r\n                                    fontWeight: '600',\r\n                                    fontSize: '13px',\r\n                                    textAlign: 'center',\r\n                                    minWidth: '40px'\r\n                                }}>\r\n                                    V1\r\n                                </th>\r\n                                {jours.map((jour, dayIndex) => \r\n                                    (lieuxParJour[dayIndex] || []).map((lieuIndex) => (\r\n                                        <th key={`${dayIndex}-${lieuIndex}`} style={{ \r\n                                            padding: '10px',\r\n                                            border: '1px solid #e5e7eb',\r\n                                            minWidth: '200px',\r\n                                            textAlign: 'center',\r\n                                            fontSize: '11px',\r\n                                            backgroundColor: '#f9fafb'\r\n                                        }}>\r\n                                            <div style={{ fontWeight: '600', fontSize: '13px', marginBottom: '3px' }}>\r\n                                                {jour}\r\n                                            </div>\r\n                                            <div style={{ fontSize: '10px', color: '#6b7280' }}>\r\n                                                {getDateOfWeek(dayIndex, currentDate)}\r\n                                            </div>\r\n                                        </th>\r\n                                    ))\r\n                                )}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {['Matin', 'AM'].map((creneau, creneauIndex) => (\r\n                                <tr key={creneau}>\r\n                                    <td style={{ \r\n                                        padding: '8px', \r\n                                        border: '1px solid #e5e7eb',\r\n                                        backgroundColor: creneauIndex === 0 ? '#fef3c7' : '#dbeafe',\r\n                                        fontWeight: 'bold',\r\n                                        textAlign: 'center',\r\n                                        fontSize: '11px'\r\n                                    }}>\r\n                                        {creneau === 'Matin' ? 'M' : 'AM'}\r\n                                    </td>\r\n                                    {jours.map((jour, dayIndex) => \r\n                                        (lieuxParJour[dayIndex] || []).map((lieuIndex) => {\r\n                                            const cellKey = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                                            const selectedLieuId = lieuxSelectionnes[cellKey];\r\n                                            const backgroundColor = getLieuCouleur(selectedLieuId);\r\n                                            const textColor = getTextColor(backgroundColor);\r\n                                            \r\n                                            return (\r\n                                                <td \r\n                                                    key={cellKey} \r\n                                                    style={{\r\n                                                        padding: '8px',\r\n                                                        border: '1px solid #e5e7eb',\r\n                                                        backgroundColor: backgroundColor,\r\n                                                        color: textColor,\r\n                                                        verticalAlign: 'top',\r\n                                                        minWidth: '200px'\r\n                                                    }}\r\n                                                >\r\n                                                    <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>\r\n                                                        {/* Lieu Select */}\r\n                                                        <select \r\n                                                            style={{\r\n                                                                width: '100%',\r\n                                                                padding: '4px',\r\n                                                                border: '1px solid #d1d5db',\r\n                                                                borderRadius: '4px',\r\n                                                                fontSize: '11px',\r\n                                                                background: 'rgba(255,255,255,0.9)'\r\n                                                            }}\r\n                                                            value={selectedLieuId || \"\"}\r\n                                                            onChange={(e) => handleLieuChange(dayIndex, lieuIndex, creneau, e.target.value)}\r\n                                                        >\r\n                                                            <option value=\"\">Choisir lieu</option>\r\n                                                            {lieux.map((lieu) => (\r\n                                                                <option key={lieu.id} value={lieu.id}>{lieu.nom}</option>\r\n                                                            ))}\r\n                                                        </select>\r\n\r\n                                                        {/* Salarié Select */}\r\n                                                        <select \r\n                                                            style={{\r\n                                                                width: '100%',\r\n                                                                padding: '4px',\r\n                                                                border: '1px solid #d1d5db',\r\n                                                                borderRadius: '4px',\r\n                                                                fontSize: '11px',\r\n                                                                background: 'rgba(255,255,255,0.9)'\r\n                                                            }}\r\n                                                            value={salariesSelectionnes[cellKey] || \"\"}\r\n                                                            onChange={(e) => handleSalarieChange(dayIndex, lieuIndex, creneau, e.target.value)}\r\n                                                        >\r\n                                                            <option value=\"\">Choisir salarié</option>\r\n                                                            {salaries.map((s) => (\r\n                                                                <option key={s.id} value={s.id}>\r\n                                                                    {s.initiales || getInitiales(s.prenom, s.nom)}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </select>\r\n\r\n                                                        {/* Section Formateurs */}\r\n                                                        <div style={{\r\n                                                            padding: '6px',\r\n                                                            background: 'rgba(255, 255, 255, 0.2)',\r\n                                                            borderRadius: '4px',\r\n                                                            border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                                                        }}>\r\n                                                            <div style={{ \r\n                                                                fontSize: '10px', \r\n                                                                fontWeight: '600', \r\n                                                                marginBottom: '4px',\r\n                                                                textAlign: 'center'\r\n                                                            }}>\r\n                                                                FORMATEURS\r\n                                                            </div>\r\n                                                            {(formateursParCase[cellKey] || [\"\"]).map((selectedId, i) => {\r\n                                                                const formateursDisponibles = getFormateursDisponibles(jour, creneau, selectedLieuId);\r\n                                                                \r\n                                                                return (\r\n                                                                    <select\r\n                                                                        key={i}\r\n                                                                        style={{\r\n                                                                            width: '100%',\r\n                                                                            padding: '3px',\r\n                                                                            border: '1px solid #d1d5db',\r\n                                                                            borderRadius: '3px',\r\n                                                                            fontSize: '10px',\r\n                                                                            background: 'rgba(255,255,255,0.9)',\r\n                                                                            marginBottom: '3px'\r\n                                                                        }}\r\n                                                                        value={selectedId}\r\n                                                                        onChange={(e) => handleFormateurChange(dayIndex, lieuIndex, creneau, i, e.target.value)}\r\n                                                                    >\r\n                                                                        <option value=\"\">Formateur</option>\r\n                                                                        {formateursDisponibles.map(f => (\r\n                                                                            <option key={f.id} value={f.id}>\r\n                                                                                {f.prenom} {f.nom}\r\n                                                                            </option>\r\n                                                                        ))}\r\n                                                                    </select>\r\n                                                                );\r\n                                                            })}\r\n\r\n                                                            <div style={{ display: 'flex', gap: '3px', justifyContent: 'center' }}>\r\n                                                                <button\r\n                                                                    onClick={() => handleAddFormateur(dayIndex, lieuIndex, creneau)}\r\n                                                                    style={{\r\n                                                                        padding: '3px 6px',\r\n                                                                        background: '#3b82f6',\r\n                                                                        color: 'white',\r\n                                                                        border: 'none',\r\n                                                                        borderRadius: '3px',\r\n                                                                        fontSize: '10px',\r\n                                                                        cursor: 'pointer'\r\n                                                                    }}\r\n                                                                >\r\n                                                                    +\r\n                                                                </button>\r\n                                                                {(formateursParCase[cellKey] || []).length > 1 && (\r\n                                                                    <button\r\n                                                                        onClick={() => handleRemoveFormateur(dayIndex, lieuIndex, creneau)}\r\n                                                                        style={{\r\n                                                                            padding: '3px 6px',\r\n                                                                            background: '#ef4444',\r\n                                                                            color: 'white',\r\n                                                                            border: 'none',\r\n                                                                            borderRadius: '3px',\r\n                                                                            fontSize: '10px',\r\n                                                                            cursor: 'pointer'\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        −\r\n                                                                    </button>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                        {/* ⭐ SECTION APPRENANTS - UTILISATION DU COMPOSANT EXTERNE */}\r\n                                                        <div style={{\r\n                                                            padding: '6px',\r\n                                                            background: 'rgba(34, 197, 94, 0.1)',\r\n                                                            borderRadius: '4px',\r\n                                                            border: '2px solid rgba(34, 197, 94, 0.3)'\r\n                                                        }}>\r\n                                                            <div style={{ \r\n                                                                fontSize: '10px', \r\n                                                                fontWeight: '600', \r\n                                                                marginBottom: '4px',\r\n                                                                textAlign: 'center',\r\n                                                                color: '#059669'\r\n                                                            }}>\r\n                                                                🎯 APPRENANTS (V1)\r\n                                                            </div>\r\n                                                            \r\n                                                            <MenuApprenants\r\n                                                                caseKey={cellKey}\r\n                                                                creneauData={getCreneauDataForMenu(dayIndex, lieuIndex, creneau)}\r\n                                                                onApprenantSelect={handleApprenantSelect}\r\n                                                                disabled={!selectedLieuId}\r\n                                                                selectedApprenants={getSelectedApprenantsForCase(cellKey)}\r\n                                                            />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </td>\r\n                                            );\r\n                                        })\r\n                                    )}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                {/* Footer avec informations V1 */}\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n                    borderRadius: '8px',\r\n                    padding: '12px 20px',\r\n                    margin: '0 20px 20px 20px',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    <div style={{ \r\n                        fontSize: '14px', \r\n                        fontWeight: '600', \r\n                        color: '#1e40af',\r\n                        marginBottom: '4px'\r\n                    }}>\r\n                        📋 PROTOTYPE V1 - COMPOSANT SÉPARÉ\r\n                    </div>\r\n                    <div style={{ fontSize: '12px', color: '#6b7280' }}>\r\n                        ✅ Avantages : Séparation claire, réutilisabilité, logique encapsulée<br/>\r\n                        ⚠️ Inconvénients : Communication composant-parent, complexité architecture\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withAuthAdmin(PlanningTestV1, \"Test V1 - Composant Séparé\");",
          "taille": 41086,
          "lignes": 798,
          "dateModif": "2025-08-26T23:59:54.183Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "pages/planning-test-v2.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "// ==========================================\r\n// PLANNING-TEST-V2.JS - APPROCHE INTÉGRATION DIRECTE\r\n// ==========================================\r\n// Principe : Logique apprenants intégrée directement dans planning-coordo.js\r\n// Avantages : Simplicité, contrôle direct, moins de composants\r\n// Inconvénients : Code plus lourd, moins de réutilisabilité\r\n\r\nimport React, { useEffect, useState, useCallback } from 'react';\r\nimport { supabase } from '../lib/supabaseClient';\r\nimport { useRouter } from 'next/router';\r\nimport { withAuthAdmin } from '../components/withAuthAdmin';\r\n\r\nconst jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi'];\r\n\r\nfunction PlanningTestV2({ user, logout, inactivityTime }) {\r\n    const router = useRouter();\r\n    \r\n    // États pour les données de base\r\n    const [salaries, setSalaries] = useState([]);\r\n    const [formateurs, setFormateurs] = useState([]);\r\n    const [apprenants, setApprenants] = useState([]);\r\n    const [currentDate, setCurrentDate] = useState(new Date());\r\n    const [lieux, setLieux] = useState([]);\r\n    const [planningTypes, setPlanningTypes] = useState([]);\r\n    const [absencesValidees, setAbsencesValidees] = useState([]);\r\n    \r\n    // États pour les données du planning avec EXTENSION V2\r\n    const [planningData, setPlanningData] = useState({});\r\n    const [lieuxParJour, setLieuxParJour] = useState({});\r\n    \r\n    // États de contrôle\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [dataLoaded, setDataLoaded] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [filtreDisponibilite, setFiltreDisponibilite] = useState('toutes');\r\n\r\n    // NOUVEAUX ÉTATS SPÉCIFIQUES V2 - INTÉGRATION DIRECTE\r\n    const [apprenantsDisponiblesCache, setApprenantsDisponiblesCache] = useState({});\r\n    const [loadingApprenants, setLoadingApprenants] = useState({});\r\n    const [statsV2, setStatsV2] = useState({\r\n        totalFiltrage: 0,\r\n        derniereMAJ: null,\r\n        cacheHits: 0\r\n    });\r\n\r\n    // Fonctions utilitaires\r\n    function getDateOfWeek(dayIndex, currentDate) {\r\n        const startOfWeek = new Date(currentDate);\r\n        startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1);\r\n        const resultDate = new Date(startOfWeek);\r\n        resultDate.setDate(startOfWeek.getDate() + dayIndex);\r\n        return resultDate.toLocaleDateString('fr-FR');\r\n    }\r\n\r\n    function getWeekDates(currentDate) {\r\n        const startOfWeek = new Date(currentDate);\r\n        startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1);\r\n        \r\n        const weekDates = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            const date = new Date(startOfWeek);\r\n            date.setDate(startOfWeek.getDate() + i);\r\n            const year = date.getFullYear();\r\n            const month = String(date.getMonth() + 1).padStart(2, '0');\r\n            const day = String(date.getDate()).padStart(2, '0');\r\n            weekDates.push(`${year}-${month}-${day}`);\r\n        }\r\n        return weekDates;\r\n    }\r\n\r\n    const semaine = Math.ceil(((currentDate - new Date(currentDate.getFullYear(), 0, 1)) / 86400000 + new Date(currentDate.getFullYear(), 0, 1).getDay() + 1) / 7);\r\n\r\n    // Helper functions\r\n    const getLieuCouleur = (lieuId) => {\r\n        if (!lieuId) return '#ffffff';\r\n        const lieu = lieux.find(l => l.id === lieuId);\r\n        return lieu?.couleur || '#ffffff';\r\n    };\r\n\r\n    const getTextColor = (backgroundColor) => {\r\n        if (!backgroundColor || backgroundColor === '#ffffff') return '#000000';\r\n        const hex = backgroundColor.replace('#', '');\r\n        const r = parseInt(hex.substr(0, 2), 16);\r\n        const g = parseInt(hex.substr(2, 2), 16);\r\n        const b = parseInt(hex.substr(4, 2), 16);\r\n        const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\r\n        return luminance > 0.5 ? '#000000' : '#ffffff';\r\n    };\r\n\r\n    const getInitiales = (prenom, nom) => {\r\n        return `${prenom?.[0] ?? ''}${nom?.[0] ?? ''}`.toUpperCase();\r\n    };\r\n\r\n    // ⭐ FONCTIONS DE VALIDATION INTÉGRÉES V2 (copiées de planning-test.js)\r\n    \r\n    const validateDatesFormation = (apprenant, dateTest) => {\r\n        if (!apprenant.date_entree_formation) return false;\r\n        \r\n        const dateEntree = new Date(apprenant.date_entree_formation);\r\n        const dateFin = new Date(\r\n            apprenant.date_fin_formation_reelle || \r\n            apprenant.date_sortie_previsionnelle\r\n        );\r\n        const dateTestObj = new Date(dateTest);\r\n        \r\n        return dateTestObj >= dateEntree && dateTestObj <= dateFin;\r\n    };\r\n\r\n    const validateStatutActuel = (apprenant, dateTest, suspensions) => {\r\n        if (apprenant.statut_formation !== 'en_cours') return false;\r\n        \r\n        const suspensionActive = suspensions.find(s => \r\n            s.apprenant_id === apprenant.id &&\r\n            new Date(s.date_suspension) <= new Date(dateTest) &&\r\n            new Date(s.date_reprise_prevue) >= new Date(dateTest)\r\n        );\r\n        \r\n        return !suspensionActive;\r\n    };\r\n\r\n    const validatePlanningType = (apprenantId, planningTypes, jourRequis, creneauRequis, lieuIdRequis) => {\r\n        const planning = planningTypes.find(pt => \r\n            pt.apprenant_id === apprenantId &&\r\n            pt.jour === jourRequis.toLowerCase() &&\r\n            pt.creneau === creneauRequis\r\n        );\r\n        \r\n        if (!planning) return false;\r\n        \r\n        if (lieuIdRequis && planning.lieu_id && planning.lieu_id !== lieuIdRequis) {\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    };\r\n\r\n    // ⭐ FONCTION PRINCIPALE INTÉGRÉE V2 - FILTRAGE APPRENANTS\r\n    const updateApprenantsDisponibles = useCallback(async (caseKey, creneauData) => {\r\n        if (!creneauData.date || !creneauData.jour || !creneauData.creneau || !creneauData.lieu_id) {\r\n            setPlanningData(prev => ({\r\n                ...prev,\r\n                [caseKey]: {\r\n                    ...prev[caseKey],\r\n                    apprenants_disponibles: []\r\n                }\r\n            }));\r\n            return;\r\n        }\r\n\r\n        const cacheKey = `${creneauData.date}-${creneauData.jour}-${creneauData.creneau}-${creneauData.lieu_id}`;\r\n        \r\n        // Vérifier le cache\r\n        if (apprenantsDisponiblesCache[cacheKey]) {\r\n            console.log(`🎯 V2 Cache hit pour ${cacheKey}`);\r\n            setPlanningData(prev => ({\r\n                ...prev,\r\n                [caseKey]: {\r\n                    ...prev[caseKey],\r\n                    apprenants_disponibles: apprenantsDisponiblesCache[cacheKey]\r\n                }\r\n            }));\r\n            setStatsV2(prev => ({ ...prev, cacheHits: prev.cacheHits + 1 }));\r\n            return;\r\n        }\r\n\r\n        setLoadingApprenants(prev => ({ ...prev, [caseKey]: true }));\r\n\r\n        try {\r\n            console.log(`🔍 V2 Filtrage direct pour ${cacheKey}`);\r\n\r\n            // 1. Récupérer apprenants\r\n            let { data: apprenantsData, error: apprenantsError } = await supabase\r\n                .from('apprenants_actifs')\r\n                .select('*');\r\n            \r\n            if (apprenantsError && apprenantsError.code === 'PGRST106') {\r\n                const result = await supabase\r\n                    .from('users')\r\n                    .select('*')\r\n                    .eq('role', 'apprenant')\r\n                    .eq('archive', false);\r\n                apprenantsData = result.data;\r\n            } else if (apprenantsError) {\r\n                throw apprenantsError;\r\n            }\r\n\r\n            if (!apprenantsData || apprenantsData.length === 0) {\r\n                console.log('V2: Aucun apprenant trouvé');\r\n                return;\r\n            }\r\n\r\n            // 2. Récupérer planning types\r\n            const creneauDB = creneauData.creneau === 'Matin' ? 'matin' : 'AM';\r\n            const { data: planningTypesData, error: planningError } = await supabase\r\n                .from('planning_apprenants')\r\n                .select('apprenant_id, lieu_id, jour, creneau')\r\n                .eq('jour', creneauData.jour.toLowerCase())\r\n                .eq('creneau', creneauDB)\r\n                .eq('actif', true);\r\n            \r\n            if (planningError && planningError.code !== 'PGRST106') throw planningError;\r\n\r\n            // 3. Récupérer suspensions\r\n            let suspensions = [];\r\n            try {\r\n                const { data: suspensionsData, error: suspensionsError } = await supabase\r\n                    .from('suspensions_parcours')\r\n                    .select('apprenant_id, date_suspension, date_reprise_prevue')\r\n                    .lte('date_suspension', creneauData.date)\r\n                    .gte('date_reprise_prevue', creneauData.date);\r\n                \r\n                if (!suspensionsError) {\r\n                    suspensions = suspensionsData || [];\r\n                }\r\n            } catch (suspError) {\r\n                console.log('V2: Erreur suspensions, poursuite sans:', suspError.message);\r\n            }\r\n\r\n            // 4. Appliquer filtres\r\n            const results = apprenantsData.map(apprenant => {\r\n                const critere1 = validateDatesFormation(apprenant, creneauData.date);\r\n                const critere2 = validateStatutActuel(apprenant, creneauData.date, suspensions);\r\n                const critere3 = validatePlanningType(apprenant.id, planningTypesData || [], creneauData.jour, creneauDB, creneauData.lieu_id);\r\n                \r\n                return {\r\n                    apprenant,\r\n                    disponible: critere1 && critere2 && critere3\r\n                };\r\n            });\r\n            \r\n            const disponibles = results.filter(r => r.disponible).map(r => r.apprenant);\r\n            \r\n            // Mettre à jour cache\r\n            setApprenantsDisponiblesCache(prev => ({\r\n                ...prev,\r\n                [cacheKey]: disponibles\r\n            }));\r\n\r\n            // Mettre à jour planning data\r\n            setPlanningData(prev => ({\r\n                ...prev,\r\n                [caseKey]: {\r\n                    ...prev[caseKey],\r\n                    apprenants_disponibles: disponibles\r\n                }\r\n            }));\r\n\r\n            // Mettre à jour stats\r\n            setStatsV2(prev => ({\r\n                ...prev,\r\n                totalFiltrage: prev.totalFiltrage + 1,\r\n                derniereMAJ: new Date().toLocaleTimeString()\r\n            }));\r\n\r\n            console.log(`✅ V2 Filtrage terminé: ${disponibles.length} apprenants disponibles`);\r\n            \r\n        } catch (error) {\r\n            console.error('V2 Erreur filtrage apprenants:', error);\r\n            setMessage(`⚠️ V2: Erreur filtrage - ${error.message}`);\r\n            setTimeout(() => setMessage(''), 4000);\r\n        } finally {\r\n            setLoadingApprenants(prev => ({ ...prev, [caseKey]: false }));\r\n        }\r\n    }, [apprenantsDisponiblesCache]);\r\n\r\n    // ⭐ HANDLERS V2 INTÉGRÉS\r\n    \r\n    const handleLieuChange = (caseKey, lieuId) => {\r\n        const [dayIndex, lieuIndex, creneau] = caseKey.split('-');\r\n        const weekDates = getWeekDates(currentDate);\r\n        \r\n        // Mettre à jour le lieu\r\n        setPlanningData(prev => ({\r\n            ...prev,\r\n            [caseKey]: {\r\n                ...prev[caseKey],\r\n                lieu_id: lieuId\r\n            }\r\n        }));\r\n\r\n        // Recalculer apprenants disponibles si lieu sélectionné\r\n        if (lieuId) {\r\n            const creneauData = {\r\n                date: weekDates[parseInt(dayIndex)],\r\n                jour: jours[parseInt(dayIndex)],\r\n                creneau: creneau,\r\n                lieu_id: lieuId\r\n            };\r\n            updateApprenantsDisponibles(caseKey, creneauData);\r\n        }\r\n    };\r\n\r\n    const handleSalarieChange = (caseKey, salarieId) => {\r\n        setPlanningData(prev => ({\r\n            ...prev,\r\n            [caseKey]: {\r\n                ...prev[caseKey],\r\n                salarie_id: salarieId\r\n            }\r\n        }));\r\n    };\r\n\r\n    const handleFormateurChange = (caseKey, selectIndex, formateurId) => {\r\n        setPlanningData(prev => {\r\n            const currentList = [...(prev[caseKey]?.formateurs_ids || [''])];\r\n            currentList[selectIndex] = formateurId;\r\n            \r\n            return {\r\n                ...prev,\r\n                [caseKey]: {\r\n                    ...prev[caseKey],\r\n                    formateurs_ids: currentList\r\n                }\r\n            };\r\n        });\r\n    };\r\n\r\n    const handleApprenantAdd = (caseKey, apprenantId) => {\r\n        if (!apprenantId) return;\r\n\r\n        setPlanningData(prev => {\r\n            const currentList = prev[caseKey]?.apprenants_ids || [''];\r\n            const emptyIndex = currentList.findIndex(id => id === '');\r\n            \r\n            let newList;\r\n            if (emptyIndex !== -1) {\r\n                newList = [...currentList];\r\n                newList[emptyIndex] = apprenantId;\r\n                if (!newList.includes('')) {\r\n                    newList.push('');\r\n                }\r\n            } else {\r\n                newList = [...currentList.filter(id => id), apprenantId, ''];\r\n            }\r\n            \r\n            return {\r\n                ...prev,\r\n                [caseKey]: {\r\n                    ...prev[caseKey],\r\n                    apprenants_ids: newList\r\n                }\r\n            };\r\n        });\r\n\r\n        const apprenantNom = apprenants.find(a => a.id === apprenantId)?.prenom || apprenantId;\r\n        setMessage(`👥 V2: ${apprenantNom} ajouté directement à ${caseKey}`);\r\n        setTimeout(() => setMessage(''), 3000);\r\n    };\r\n\r\n    const handleApprenantRemove = (caseKey, apprenantId) => {\r\n        setPlanningData(prev => {\r\n            const currentList = prev[caseKey]?.apprenants_ids || [''];\r\n            const newList = currentList.filter(id => id !== apprenantId);\r\n            if (newList.length === 0 || !newList.includes('')) {\r\n                newList.push('');\r\n            }\r\n            \r\n            return {\r\n                ...prev,\r\n                [caseKey]: {\r\n                    ...prev[caseKey],\r\n                    apprenants_ids: newList\r\n                }\r\n            };\r\n        });\r\n    };\r\n\r\n    const handleAddFormateur = (caseKey) => {\r\n        setPlanningData(prev => ({\r\n            ...prev,\r\n            [caseKey]: {\r\n                ...prev[caseKey],\r\n                formateurs_ids: [...(prev[caseKey]?.formateurs_ids || ['']), '']\r\n            }\r\n        }));\r\n    };\r\n\r\n    const handleRemoveFormateur = (caseKey) => {\r\n        setPlanningData(prev => {\r\n            const currentList = prev[caseKey]?.formateurs_ids || [''];\r\n            if (currentList.length > 1) {\r\n                return {\r\n                    ...prev,\r\n                    [caseKey]: {\r\n                        ...prev[caseKey],\r\n                        formateurs_ids: currentList.slice(0, -1)\r\n                    }\r\n                };\r\n            }\r\n            return prev;\r\n        });\r\n    };\r\n\r\n    // Navigation\r\n    const changeWeek = (direction) => {\r\n        const newDate = new Date(currentDate);\r\n        newDate.setDate(currentDate.getDate() + (direction * 7));\r\n        setCurrentDate(newDate);\r\n    };\r\n\r\n    const goToCurrentWeek = () => {\r\n        setCurrentDate(new Date());\r\n    };\r\n\r\n    // CHARGEMENT DES DONNÉES\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const [salariesRes, formateursRes, apprenantsRes, lieuxRes] = await Promise.all([\r\n                    supabase.from('users').select('id, prenom, nom, role, initiales').eq('role', 'salarié').eq('archive', false),\r\n                    supabase.from('users').select('id, prenom, nom, role').eq('role', 'formateur').eq('archive', false),\r\n                    supabase.from('users').select('id, prenom, nom, role').eq('role', 'apprenant').eq('archive', false),\r\n                    supabase.from('lieux').select('id, nom, couleur, initiale').eq('archive', false)\r\n                ]);\r\n\r\n                if (salariesRes.data) setSalaries(salariesRes.data);\r\n                if (formateursRes.data) setFormateurs(formateursRes.data);\r\n                if (apprenantsRes.data) setApprenants(apprenantsRes.data);\r\n                if (lieuxRes.data) setLieux(lieuxRes.data);\r\n                \r\n            } catch (error) {\r\n                console.error('V2 Erreur chargement données:', error);\r\n            }\r\n        };\r\n        \r\n        fetchData();\r\n    }, []);\r\n\r\n    // INITIALISATION PLANNING\r\n    useEffect(() => {\r\n        if (lieux.length >= 0 && salaries.length > 0 && formateurs.length > 0 && apprenants.length > 0) {\r\n            // Initialisation structure V2\r\n            const newPlanningData = {};\r\n            const newLieuxParJour = {};\r\n\r\n            jours.forEach((_, dayIndex) => {\r\n                newLieuxParJour[dayIndex] = [0];\r\n                \r\n                [0].forEach(lieuIndex => {\r\n                    ['Matin', 'AM'].forEach((creneau) => {\r\n                        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                        newPlanningData[key] = {\r\n                            lieu_id: null,\r\n                            salarie_id: null,\r\n                            formateurs_ids: [''],\r\n                            apprenants_ids: [''],\r\n                            apprenants_disponibles: []\r\n                        };\r\n                    });\r\n                });\r\n            });\r\n\r\n            setPlanningData(newPlanningData);\r\n            setLieuxParJour(newLieuxParJour);\r\n            setDataLoaded(true);\r\n        }\r\n    }, [lieux, salaries, formateurs, apprenants, currentDate]);\r\n\r\n    if (!dataLoaded) {\r\n        return (\r\n            <div style={{ \r\n                display: 'flex', \r\n                justifyContent: 'center', \r\n                alignItems: 'center', \r\n                minHeight: '100vh',\r\n                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                color: 'white',\r\n                fontSize: '18px'\r\n            }}>\r\n                🔄 Chargement prototype V2...\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                padding: '0'\r\n            }}>\r\n                {/* Header Navigation */}\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                    borderRadius: '0 0 12px 12px',\r\n                    padding: '8px 20px',\r\n                    marginBottom: '10px',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    backdropFilter: 'blur(10px)'\r\n                }}>\r\n                    <nav style={{ fontSize: '14px' }}>\r\n                        <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                        <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                        <span style={{ color: '#e11d48', fontWeight: '500' }}>🧪 Test V2 - Intégration Directe</span>\r\n                    </nav>\r\n                    \r\n                    <div style={{ textAlign: 'center' }}>\r\n                        <h1 style={{\r\n                            fontSize: '18px',\r\n                            fontWeight: 'bold',\r\n                            color: '#1f2937',\r\n                            margin: '0'\r\n                        }}>\r\n                            📝 PROTOTYPE V2 - INTÉGRATION DIRECTE\r\n                        </h1>\r\n                        <div style={{ fontSize: '12px', color: '#6b7280', marginTop: '2px' }}>\r\n                            Logique intégrée • Planning semaine {semaine}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🏠 Dashboard\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Toolbar avec statistiques V2 */}\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n                    borderRadius: '8px',\r\n                    padding: '8px 20px',\r\n                    marginBottom: '10px',\r\n                    marginLeft: '20px',\r\n                    marginRight: '20px',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    {/* Statistiques V2 */}\r\n                    <div style={{\r\n                        display: 'flex',\r\n                        gap: '15px',\r\n                        alignItems: 'center',\r\n                        padding: '4px 12px',\r\n                        backgroundColor: 'rgba(225, 29, 72, 0.1)',\r\n                        borderRadius: '6px',\r\n                        border: '1px solid rgba(225, 29, 72, 0.2)'\r\n                    }}>\r\n                        <div style={{ fontSize: '12px', fontWeight: '600', color: '#be185d' }}>\r\n                            📊 V2 Stats:\r\n                        </div>\r\n                        <div style={{ fontSize: '11px', color: '#9d174d' }}>\r\n                            🔍 {statsV2.totalFiltrage} filtrages\r\n                        </div>\r\n                        <div style={{ fontSize: '11px', color: '#9d174d' }}>\r\n                            ⚡ {statsV2.cacheHits} cache hits\r\n                        </div>\r\n                        <div style={{ fontSize: '11px', color: '#9d174d' }}>\r\n                            🕒 {statsV2.derniereMAJ || 'Jamais'}\r\n                        </div>\r\n                        <div style={{ fontSize: '11px', color: '#9d174d' }}>\r\n                            🎯 Intégré direct\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Navigation semaine */}\r\n                    <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\r\n                        <button\r\n                            onClick={() => changeWeek(-1)}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            ← Précédente\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={goToCurrentWeek}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#10b981',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            Aujourd'hui\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={() => changeWeek(1)}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            Suivante →\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* Actions */}\r\n                    <div style={{ display: 'flex', gap: '8px' }}>\r\n                        <button\r\n                            onClick={() => {\r\n                                // Vider le cache pour test\r\n                                setApprenantsDisponiblesCache({});\r\n                                setMessage('🗑️ V2: Cache vidé pour test performance');\r\n                                setTimeout(() => setMessage(''), 3000);\r\n                            }}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: '#f59e0b',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            🗑️ Vider Cache\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={() => setMessage('💾 V2: Sauvegarde simulée (test uniquement)')}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: '#6b7280',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            💾 Test Sauvegarde\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Message de feedback */}\r\n                {message && (\r\n                    <div style={{\r\n                        backgroundColor: message.includes('V2') ? '#fdf2f8' : '#d1fae5',\r\n                        color: message.includes('V2') ? '#be185d' : '#065f46',\r\n                        padding: '8px 15px',\r\n                        borderRadius: '6px',\r\n                        marginBottom: '10px',\r\n                        marginLeft: '20px',\r\n                        marginRight: '20px',\r\n                        textAlign: 'center',\r\n                        fontSize: '14px'\r\n                    }}>\r\n                        {message}\r\n                    </div>\r\n                )}\r\n\r\n                {/* Planning Table */}\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    margin: '0 20px 20px 20px',\r\n                    padding: '15px',\r\n                    overflow: 'auto',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                        <thead>\r\n                            <tr style={{ backgroundColor: '#f9fafb' }}>\r\n                                <th style={{ \r\n                                    padding: '10px', \r\n                                    border: '1px solid #e5e7eb',\r\n                                    fontWeight: '600',\r\n                                    fontSize: '13px',\r\n                                    textAlign: 'center',\r\n                                    minWidth: '40px'\r\n                                }}>\r\n                                    V2\r\n                                </th>\r\n                                {jours.map((jour, dayIndex) => \r\n                                    (lieuxParJour[dayIndex] || []).map((lieuIndex) => (\r\n                                        <th key={`${dayIndex}-${lieuIndex}`} style={{ \r\n                                            padding: '10px',\r\n                                            border: '1px solid #e5e7eb',\r\n                                            minWidth: '220px',\r\n                                            textAlign: 'center',\r\n                                            fontSize: '11px',\r\n                                            backgroundColor: '#f9fafb'\r\n                                        }}>\r\n                                            <div style={{ fontWeight: '600', fontSize: '13px', marginBottom: '3px' }}>\r\n                                                {jour}\r\n                                            </div>\r\n                                            <div style={{ fontSize: '10px', color: '#6b7280' }}>\r\n                                                {getDateOfWeek(dayIndex, currentDate)}\r\n                                            </div>\r\n                                        </th>\r\n                                    ))\r\n                                )}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {['Matin', 'AM'].map((creneau, creneauIndex) => (\r\n                                <tr key={creneau}>\r\n                                    <td style={{ \r\n                                        padding: '8px', \r\n                                        border: '1px solid #e5e7eb',\r\n                                        backgroundColor: creneauIndex === 0 ? '#fef3c7' : '#dbeafe',\r\n                                        fontWeight: 'bold',\r\n                                        textAlign: 'center',\r\n                                        fontSize: '11px'\r\n                                    }}>\r\n                                        {creneau === 'Matin' ? 'M' : 'AM'}\r\n                                    </td>\r\n                                    {jours.map((jour, dayIndex) => \r\n                                        (lieuxParJour[dayIndex] || []).map((lieuIndex) => {\r\n                                            const cellKey = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                                            const cellData = planningData[cellKey] || {};\r\n                                            const backgroundColor = getLieuCouleur(cellData.lieu_id);\r\n                                            const textColor = getTextColor(backgroundColor);\r\n                                            const isLoading = loadingApprenants[cellKey];\r\n                                            \r\n                                            return (\r\n                                                <td \r\n                                                    key={cellKey} \r\n                                                    style={{\r\n                                                        padding: '8px',\r\n                                                        border: '1px solid #e5e7eb',\r\n                                                        backgroundColor: backgroundColor,\r\n                                                        color: textColor,\r\n                                                        verticalAlign: 'top',\r\n                                                        minWidth: '220px'\r\n                                                    }}\r\n                                                >\r\n                                                    <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>\r\n                                                        {/* Lieu Select */}\r\n                                                        <select \r\n                                                            style={{\r\n                                                                width: '100%',\r\n                                                                padding: '4px',\r\n                                                                border: '1px solid #d1d5db',\r\n                                                                borderRadius: '4px',\r\n                                                                fontSize: '11px',\r\n                                                                background: 'rgba(255,255,255,0.9)'\r\n                                                            }}\r\n                                                            value={cellData.lieu_id || \"\"}\r\n                                                            onChange={(e) => handleLieuChange(cellKey, e.target.value)}\r\n                                                        >\r\n                                                            <option value=\"\">Choisir lieu</option>\r\n                                                            {lieux.map((lieu) => (\r\n                                                                <option key={lieu.id} value={lieu.id}>{lieu.nom}</option>\r\n                                                            ))}\r\n                                                        </select>\r\n\r\n                                                        {/* Salarié Select */}\r\n                                                        <select \r\n                                                            style={{\r\n                                                                width: '100%',\r\n                                                                padding: '4px',\r\n                                                                border: '1px solid #d1d5db',\r\n                                                                borderRadius: '4px',\r\n                                                                fontSize: '11px',\r\n                                                                background: 'rgba(255,255,255,0.9)'\r\n                                                            }}\r\n                                                            value={cellData.salarie_id || \"\"}\r\n                                                            onChange={(e) => handleSalarieChange(cellKey, e.target.value)}\r\n                                                        >\r\n                                                            <option value=\"\">Choisir salarié</option>\r\n                                                            {salaries.map((s) => (\r\n                                                                <option key={s.id} value={s.id}>\r\n                                                                    {s.initiales || getInitiales(s.prenom, s.nom)}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </select>\r\n\r\n                                                        {/* Section Formateurs (simplifiée) */}\r\n                                                        <div style={{\r\n                                                            padding: '6px',\r\n                                                            background: 'rgba(255, 255, 255, 0.2)',\r\n                                                            borderRadius: '4px',\r\n                                                            border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                                                        }}>\r\n                                                            <div style={{ \r\n                                                                fontSize: '10px', \r\n                                                                fontWeight: '600', \r\n                                                                marginBottom: '4px',\r\n                                                                textAlign: 'center'\r\n                                                            }}>\r\n                                                                FORMATEURS\r\n                                                            </div>\r\n                                                            {(cellData.formateurs_ids || ['']).map((selectedId, i) => (\r\n                                                                <select\r\n                                                                    key={i}\r\n                                                                    style={{\r\n                                                                        width: '100%',\r\n                                                                        padding: '3px',\r\n                                                                        border: '1px solid #d1d5db',\r\n                                                                        borderRadius: '3px',\r\n                                                                        fontSize: '10px',\r\n                                                                        background: 'rgba(255,255,255,0.9)',\r\n                                                                        marginBottom: '3px'\r\n                                                                    }}\r\n                                                                    value={selectedId}\r\n                                                                    onChange={(e) => handleFormateurChange(cellKey, i, e.target.value)}\r\n                                                                >\r\n                                                                    <option value=\"\">Formateur</option>\r\n                                                                    {formateurs.map(f => (\r\n                                                                        <option key={f.id} value={f.id}>\r\n                                                                            {f.prenom} {f.nom}\r\n                                                                        </option>\r\n                                                                    ))}\r\n                                                                </select>\r\n                                                            ))}\r\n\r\n                                                            <div style={{ display: 'flex', gap: '3px', justifyContent: 'center' }}>\r\n                                                                <button\r\n                                                                    onClick={() => handleAddFormateur(cellKey)}\r\n                                                                    style={{\r\n                                                                        padding: '3px 6px',\r\n                                                                        background: '#3b82f6',\r\n                                                                        color: 'white',\r\n                                                                        border: 'none',\r\n                                                                        borderRadius: '3px',\r\n                                                                        fontSize: '10px',\r\n                                                                        cursor: 'pointer'\r\n                                                                    }}\r\n                                                                >\r\n                                                                    +\r\n                                                                </button>\r\n                                                                {(cellData.formateurs_ids || []).length > 1 && (\r\n                                                                    <button\r\n                                                                        onClick={() => handleRemoveFormateur(cellKey)}\r\n                                                                        style={{\r\n                                                                            padding: '3px 6px',\r\n                                                                            background: '#ef4444',\r\n                                                                            color: 'white',\r\n                                                                            border: 'none',\r\n                                                                            borderRadius: '3px',\r\n                                                                            fontSize: '10px',\r\n                                                                            cursor: 'pointer'\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        −\r\n                                                                    </button>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                        {/* ⭐ SECTION APPRENANTS - LOGIQUE INTÉGRÉE V2 */}\r\n                                                        <div style={{\r\n                                                            padding: '6px',\r\n                                                            background: 'rgba(225, 29, 72, 0.1)',\r\n                                                            borderRadius: '4px',\r\n                                                            border: '2px solid rgba(225, 29, 72, 0.3)'\r\n                                                        }}>\r\n                                                            <div style={{ \r\n                                                                fontSize: '10px', \r\n                                                                fontWeight: '600', \r\n                                                                marginBottom: '4px',\r\n                                                                textAlign: 'center',\r\n                                                                color: '#be185d'\r\n                                                            }}>\r\n                                                                🎯 APPRENANTS (V2) {isLoading && '⏳'}\r\n                                                            </div>\r\n                                                            \r\n                                                            {/* Menu déroulant pour ajouter apprenant */}\r\n                                                            <select\r\n                                                                onChange={(e) => handleApprenantAdd(cellKey, e.target.value)}\r\n                                                                disabled={!cellData.lieu_id || isLoading}\r\n                                                                style={{\r\n                                                                    width: '100%',\r\n                                                                    padding: '3px',\r\n                                                                    border: '1px solid #d1d5db',\r\n                                                                    borderRadius: '3px',\r\n                                                                    fontSize: '10px',\r\n                                                                    background: 'rgba(255,255,255,0.9)',\r\n                                                                    marginBottom: '3px',\r\n                                                                    cursor: !cellData.lieu_id ? 'not-allowed' : 'pointer'\r\n                                                                }}\r\n                                                            >\r\n                                                                <option value=\"\">\r\n                                                                    {isLoading ? '⏳ Chargement...' : \r\n                                                                     !cellData.lieu_id ? '📍 Sélectionnez lieu' : \r\n                                                                     `➕ Ajouter (${(cellData.apprenants_disponibles || []).length})`}\r\n                                                                </option>\r\n                                                                {!isLoading && cellData.lieu_id && (cellData.apprenants_disponibles || [])\r\n                                                                    .filter(apprenant => {\r\n                                                                        const selectedIds = (cellData.apprenants_ids || []).filter(id => id);\r\n                                                                        return !selectedIds.includes(apprenant.id);\r\n                                                                    })\r\n                                                                    .map(apprenant => (\r\n                                                                        <option key={apprenant.id} value={apprenant.id}>\r\n                                                                            {apprenant.prenom} {apprenant.nom}\r\n                                                                        </option>\r\n                                                                    ))}\r\n                                                            </select>\r\n                                                            \r\n                                                            {/* Affichage apprenants sélectionnés */}\r\n                                                            {(cellData.apprenants_ids || []).filter(id => id).map(apprenantId => {\r\n                                                                const apprenant = apprenants.find(a => a.id === apprenantId);\r\n                                                                \r\n                                                                return (\r\n                                                                    <div \r\n                                                                        key={apprenantId}\r\n                                                                        style={{\r\n                                                                            display: 'flex',\r\n                                                                            alignItems: 'center',\r\n                                                                            justifyContent: 'space-between',\r\n                                                                            padding: '2px 6px',\r\n                                                                            margin: '1px 0',\r\n                                                                            backgroundColor: 'rgba(225, 29, 72, 0.1)',\r\n                                                                            border: '1px solid rgba(225, 29, 72, 0.3)',\r\n                                                                            borderRadius: '3px',\r\n                                                                            fontSize: '9px'\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <span style={{ color: '#be185d', fontWeight: '500' }}>\r\n                                                                            {apprenant ? `${apprenant.prenom} ${apprenant.nom}` : 'Inconnu'}\r\n                                                                        </span>\r\n                                                                        <button \r\n                                                                            onClick={() => handleApprenantRemove(cellKey, apprenantId)}\r\n                                                                            style={{\r\n                                                                                background: '#ef4444',\r\n                                                                                color: 'white',\r\n                                                                                border: 'none',\r\n                                                                                borderRadius: '2px',\r\n                                                                                width: '16px',\r\n                                                                                height: '16px',\r\n                                                                                fontSize: '10px',\r\n                                                                                cursor: 'pointer',\r\n                                                                                marginLeft: '4px'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            ×\r\n                                                                        </button>\r\n                                                                    </div>\r\n                                                                );\r\n                                                            })}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </td>\r\n                                            );\r\n                                        })\r\n                                    )}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                {/* Footer avec informations V2 */}\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n                    borderRadius: '8px',\r\n                    padding: '12px 20px',\r\n                    margin: '0 20px 20px 20px',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    <div style={{ \r\n                        fontSize: '14px', \r\n                        fontWeight: '600', \r\n                        color: '#be185d',\r\n                        marginBottom: '4px'\r\n                    }}>\r\n                        📋 PROTOTYPE V2 - INTÉGRATION DIRECTE\r\n                    </div>\r\n                    <div style={{ fontSize: '12px', color: '#6b7280' }}>\r\n                        ✅ Avantages : Contrôle direct, simplicité, performance cache<br/>\r\n                        ⚠️ Inconvénients : Code plus lourd, moins de réutilisabilité, maintenance complexe\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withAuthAdmin(PlanningTestV2, \"Test V2 - Intégration Directe\");",
          "taille": 51432,
          "lignes": 991,
          "dateModif": "2025-08-27T05:38:23.598Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "pages/planning-test-v3.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "// ==========================================\r\n// PLANNING-TEST-V3.JS - APPROCHE MIXTE OPTIMISÉE\r\n// ==========================================\r\n// Principe : Hybrid avec cache intelligent et performance optimisée\r\n// Avantages : Performance maximale, cache intelligent, interface optimisée\r\n// Inconvénients : Complexité accrue, gestion cache plus délicate\r\n\r\nimport React, { useEffect, useState, useCallback, useMemo } from 'react';\r\nimport { supabase } from '../lib/supabaseClient';\r\nimport { useRouter } from 'next/router';\r\nimport { withAuthAdmin } from '../components/withAuthAdmin';\r\n\r\nconst jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi'];\r\n\r\n// ⭐ CONFIGURATION CACHE V3\r\nconst CACHE_DURATION = 30000; // 30 secondes\r\nconst MAX_CACHE_ENTRIES = 50; // Limite mémoire\r\n\r\nfunction PlanningTestV3({ user, logout, inactivityTime }) {\r\n    const router = useRouter();\r\n    \r\n    // États pour les données de base\r\n    const [salaries, setSalaries] = useState([]);\r\n    const [formateurs, setFormateurs] = useState([]);\r\n    const [apprenants, setApprenants] = useState([]);\r\n    const [currentDate, setCurrentDate] = useState(new Date());\r\n    const [lieux, setLieux] = useState([]);\r\n    const [planningTypes, setPlanningTypes] = useState([]);\r\n    const [absencesValidees, setAbsencesValidees] = useState([]);\r\n    \r\n    // États pour les données du planning\r\n    const [planningData, setPlanningData] = useState({});\r\n    const [lieuxParJour, setLieuxParJour] = useState({});\r\n    \r\n    // États de contrôle\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [dataLoaded, setDataLoaded] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [filtreDisponibilite, setFiltreDisponibilite] = useState('toutes');\r\n\r\n    // ⭐ NOUVEAUX ÉTATS V3 - CACHE INTELLIGENT OPTIMISÉ\r\n    const [cacheApprenants, setCacheApprenants] = useState(new Map());\r\n    const [lastUpdateTime, setLastUpdateTime] = useState(new Map());\r\n    const [loadingStates, setLoadingStates] = useState(new Set());\r\n    const [statsV3, setStatsV3] = useState({\r\n        totalRequests: 0,\r\n        cacheHits: 0,\r\n        cacheMisses: 0,\r\n        averageResponseTime: 0,\r\n        lastOptimization: null\r\n    });\r\n\r\n    // Fonctions utilitaires\r\n    const getWeekDates = useCallback((currentDate) => {\r\n        const startOfWeek = new Date(currentDate);\r\n        startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1);\r\n        \r\n        const weekDates = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            const date = new Date(startOfWeek);\r\n            date.setDate(startOfWeek.getDate() + i);\r\n            const year = date.getFullYear();\r\n            const month = String(date.getMonth() + 1).padStart(2, '0');\r\n            const day = String(date.getDate()).padStart(2, '0');\r\n            weekDates.push(`${year}-${month}-${day}`);\r\n        }\r\n        return weekDates;\r\n    }, []);\r\n\r\n    const semaine = useMemo(() => {\r\n        return Math.ceil(((currentDate - new Date(currentDate.getFullYear(), 0, 1)) / 86400000 + new Date(currentDate.getFullYear(), 0, 1).getDay() + 1) / 7);\r\n    }, [currentDate]);\r\n\r\n    // Helper functions optimisées avec useMemo\r\n    const lieuxMap = useMemo(() => {\r\n        return new Map(lieux.map(lieu => [lieu.id, lieu]));\r\n    }, [lieux]);\r\n\r\n    const salariesMap = useMemo(() => {\r\n        return new Map(salaries.map(s => [s.id, s]));\r\n    }, [salaries]);\r\n\r\n    const formateursMap = useMemo(() => {\r\n        return new Map(formateurs.map(f => [f.id, f]));\r\n    }, [formateurs]);\r\n\r\n    const apprenantsMap = useMemo(() => {\r\n        return new Map(apprenants.map(a => [a.id, a]));\r\n    }, [apprenants]);\r\n\r\n    const getLieuCouleur = useCallback((lieuId) => {\r\n        return lieuxMap.get(lieuId)?.couleur || '#ffffff';\r\n    }, [lieuxMap]);\r\n\r\n    const getTextColor = useCallback((backgroundColor) => {\r\n        if (!backgroundColor || backgroundColor === '#ffffff') return '#000000';\r\n        const hex = backgroundColor.replace('#', '');\r\n        const r = parseInt(hex.substr(0, 2), 16);\r\n        const g = parseInt(hex.substr(2, 2), 16);\r\n        const b = parseInt(hex.substr(4, 2), 16);\r\n        const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\r\n        return luminance > 0.5 ? '#000000' : '#ffffff';\r\n    }, []);\r\n\r\n    const getInitiales = useCallback((prenom, nom) => {\r\n        return `${prenom?.[0] ?? ''}${nom?.[0] ?? ''}`.toUpperCase();\r\n    }, []);\r\n\r\n    function getDateOfWeek(dayIndex, currentDate) {\r\n        const startOfWeek = new Date(currentDate);\r\n        startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1);\r\n        const resultDate = new Date(startOfWeek);\r\n        resultDate.setDate(startOfWeek.getDate() + dayIndex);\r\n        return resultDate.toLocaleDateString('fr-FR');\r\n    }\r\n\r\n    // ⭐ FONCTIONS DE VALIDATION OPTIMISÉES V3\r\n    const validateDatesFormation = useCallback((apprenant, dateTest) => {\r\n        if (!apprenant.date_entree_formation) return false;\r\n        \r\n        const dateEntree = new Date(apprenant.date_entree_formation);\r\n        const dateFin = new Date(\r\n            apprenant.date_fin_formation_reelle || \r\n            apprenant.date_sortie_previsionnelle\r\n        );\r\n        const dateTestObj = new Date(dateTest);\r\n        \r\n        return dateTestObj >= dateEntree && dateTestObj <= dateFin;\r\n    }, []);\r\n\r\n    const validateStatutActuel = useCallback((apprenant, dateTest, suspensions) => {\r\n        if (apprenant.statut_formation !== 'en_cours') return false;\r\n        \r\n        const suspensionActive = suspensions.find(s => \r\n            s.apprenant_id === apprenant.id &&\r\n            new Date(s.date_suspension) <= new Date(dateTest) &&\r\n            new Date(s.date_reprise_prevue) >= new Date(dateTest)\r\n        );\r\n        \r\n        return !suspensionActive;\r\n    }, []);\r\n\r\n    const validatePlanningType = useCallback((apprenantId, planningTypes, jourRequis, creneauRequis, lieuIdRequis) => {\r\n        const planning = planningTypes.find(pt => \r\n            pt.apprenant_id === apprenantId &&\r\n            pt.jour === jourRequis.toLowerCase() &&\r\n            pt.creneau === creneauRequis\r\n        );\r\n        \r\n        if (!planning) return false;\r\n        \r\n        if (lieuIdRequis && planning.lieu_id && planning.lieu_id !== lieuIdRequis) {\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    }, []);\r\n\r\n    // ⭐ SYSTÈME DE CACHE INTELLIGENT V3\r\n    const generateCacheKey = useCallback((date, jour, creneau, lieuId) => {\r\n        return `${date}-${jour}-${creneau}-${lieuId}`;\r\n    }, []);\r\n\r\n    const isCacheValid = useCallback((cacheKey) => {\r\n        const lastUpdate = lastUpdateTime.get(cacheKey);\r\n        if (!lastUpdate) return false;\r\n        \r\n        return Date.now() - lastUpdate < CACHE_DURATION;\r\n    }, [lastUpdateTime]);\r\n\r\n    const optimizeCache = useCallback(() => {\r\n        const now = Date.now();\r\n        const keysToDelete = [];\r\n        \r\n        // Nettoyer les entrées expirées\r\n        for (const [key, timestamp] of lastUpdateTime.entries()) {\r\n            if (now - timestamp > CACHE_DURATION) {\r\n                keysToDelete.push(key);\r\n            }\r\n        }\r\n        \r\n        // Limiter le nombre d'entrées\r\n        if (cacheApprenants.size > MAX_CACHE_ENTRIES) {\r\n            const sortedEntries = Array.from(lastUpdateTime.entries())\r\n                .sort(([,a], [,b]) => a - b);\r\n            \r\n            const toDelete = sortedEntries.slice(0, cacheApprenants.size - MAX_CACHE_ENTRIES + keysToDelete.length);\r\n            keysToDelete.push(...toDelete.map(([key]) => key));\r\n        }\r\n        \r\n        // Supprimer les clés identifiées\r\n        keysToDelete.forEach(key => {\r\n            setCacheApprenants(prev => {\r\n                const newCache = new Map(prev);\r\n                newCache.delete(key);\r\n                return newCache;\r\n            });\r\n            setLastUpdateTime(prev => {\r\n                const newTime = new Map(prev);\r\n                newTime.delete(key);\r\n                return newTime;\r\n            });\r\n        });\r\n        \r\n        if (keysToDelete.length > 0) {\r\n            setStatsV3(prev => ({\r\n                ...prev,\r\n                lastOptimization: new Date().toLocaleTimeString()\r\n            }));\r\n            console.log(`🧹 V3 Cache optimisé: ${keysToDelete.length} entrées supprimées`);\r\n        }\r\n    }, [cacheApprenants.size, lastUpdateTime]);\r\n\r\n    // ⭐ FONCTION CACHE INTELLIGENTE PRINCIPALE V3\r\n    const getCachedApprenants = useCallback(async (cacheKey, creneauData) => {\r\n        const startTime = performance.now();\r\n        \r\n        setStatsV3(prev => ({ ...prev, totalRequests: prev.totalRequests + 1 }));\r\n        \r\n        // Vérifier le cache\r\n        if (isCacheValid(cacheKey)) {\r\n            const cached = cacheApprenants.get(cacheKey);\r\n            if (cached) {\r\n                console.log(`⚡ V3 Cache hit pour ${cacheKey}`);\r\n                const responseTime = performance.now() - startTime;\r\n                setStatsV3(prev => ({\r\n                    ...prev,\r\n                    cacheHits: prev.cacheHits + 1,\r\n                    averageResponseTime: (prev.averageResponseTime + responseTime) / 2\r\n                }));\r\n                return cached;\r\n            }\r\n        }\r\n        \r\n        console.log(`🔍 V3 Cache miss pour ${cacheKey} - Filtrage en cours`);\r\n        setStatsV3(prev => ({ ...prev, cacheMisses: prev.cacheMisses + 1 }));\r\n        \r\n        try {\r\n            // 1. Récupérer apprenants\r\n            let { data: apprenantsData, error: apprenantsError } = await supabase\r\n                .from('apprenants_actifs')\r\n                .select('*');\r\n            \r\n            if (apprenantsError && apprenantsError.code === 'PGRST106') {\r\n                const result = await supabase\r\n                    .from('users')\r\n                    .select('*')\r\n                    .eq('role', 'apprenant')\r\n                    .eq('archive', false);\r\n                apprenantsData = result.data;\r\n            } else if (apprenantsError) {\r\n                throw apprenantsError;\r\n            }\r\n\r\n            if (!apprenantsData || apprenantsData.length === 0) {\r\n                return [];\r\n            }\r\n\r\n            // 2. Récupérer planning types\r\n            const creneauDB = creneauData.creneau === 'Matin' ? 'matin' : 'AM';\r\n            const { data: planningTypesData, error: planningError } = await supabase\r\n                .from('planning_apprenants')\r\n                .select('apprenant_id, lieu_id, jour, creneau')\r\n                .eq('jour', creneauData.jour.toLowerCase())\r\n                .eq('creneau', creneauDB)\r\n                .eq('actif', true);\r\n            \r\n            if (planningError && planningError.code !== 'PGRST106') throw planningError;\r\n\r\n            // 3. Récupérer suspensions\r\n            let suspensions = [];\r\n            try {\r\n                const { data: suspensionsData, error: suspensionsError } = await supabase\r\n                    .from('suspensions_parcours')\r\n                    .select('apprenant_id, date_suspension, date_reprise_prevue')\r\n                    .lte('date_suspension', creneauData.date)\r\n                    .gte('date_reprise_prevue', creneauData.date);\r\n                \r\n                if (!suspensionsError) {\r\n                    suspensions = suspensionsData || [];\r\n                }\r\n            } catch (suspError) {\r\n                console.log('V3: Erreur suspensions, poursuite sans:', suspError.message);\r\n            }\r\n\r\n            // 4. Appliquer filtres avec optimisations\r\n            const results = apprenantsData\r\n                .map(apprenant => {\r\n                    const critere1 = validateDatesFormation(apprenant, creneauData.date);\r\n                    if (!critere1) return null; // Early exit pour performance\r\n                    \r\n                    const critere2 = validateStatutActuel(apprenant, creneauData.date, suspensions);\r\n                    if (!critere2) return null; // Early exit pour performance\r\n                    \r\n                    const critere3 = validatePlanningType(apprenant.id, planningTypesData || [], creneauData.jour, creneauDB, creneauData.lieu_id);\r\n                    if (!critere3) return null; // Early exit pour performance\r\n                    \r\n                    return apprenant;\r\n                })\r\n                .filter(Boolean); // Enlever les null\r\n            \r\n            // Mettre en cache\r\n            setCacheApprenants(prev => new Map(prev).set(cacheKey, results));\r\n            setLastUpdateTime(prev => new Map(prev).set(cacheKey, Date.now()));\r\n            \r\n            const responseTime = performance.now() - startTime;\r\n            setStatsV3(prev => ({\r\n                ...prev,\r\n                averageResponseTime: (prev.averageResponseTime + responseTime) / 2\r\n            }));\r\n            \r\n            console.log(`✅ V3 Filtrage terminé: ${results.length} apprenants disponibles (${responseTime.toFixed(1)}ms)`);\r\n            \r\n            // Optimiser le cache de temps en temps\r\n            if (Math.random() < 0.1) { // 10% de chance\r\n                setTimeout(optimizeCache, 100);\r\n            }\r\n            \r\n            return results;\r\n            \r\n        } catch (error) {\r\n            console.error('V3 Erreur filtrage apprenants:', error);\r\n            throw error;\r\n        }\r\n    }, [cacheApprenants, isCacheValid, validateDatesFormation, validateStatutActuel, validatePlanningType, optimizeCache]);\r\n\r\n    // ⭐ FONCTION PRINCIPALE V3 - UPDATE APPRENANTS OPTIMISÉE\r\n    const updateApprenantsCaseV3 = useCallback(async (caseKey, creneauData) => {\r\n        if (!creneauData.date || !creneauData.jour || !creneauData.creneau || !creneauData.lieu_id) {\r\n            setPlanningData(prev => ({\r\n                ...prev,\r\n                [caseKey]: {\r\n                    ...prev[caseKey],\r\n                    apprenants_disponibles: []\r\n                }\r\n            }));\r\n            return;\r\n        }\r\n\r\n        const cacheKey = generateCacheKey(creneauData.date, creneauData.jour, creneauData.creneau, creneauData.lieu_id);\r\n        \r\n        // Éviter les requêtes multiples simultanées\r\n        if (loadingStates.has(caseKey)) {\r\n            console.log(`⏳ V3 Requête déjà en cours pour ${caseKey}`);\r\n            return;\r\n        }\r\n        \r\n        setLoadingStates(prev => new Set(prev).add(caseKey));\r\n        \r\n        try {\r\n            const disponibles = await getCachedApprenants(cacheKey, creneauData);\r\n            \r\n            setPlanningData(prev => ({\r\n                ...prev,\r\n                [caseKey]: {\r\n                    ...prev[caseKey],\r\n                    apprenants_disponibles: disponibles\r\n                }\r\n            }));\r\n            \r\n        } catch (error) {\r\n            console.error('V3 Erreur update apprenants:', error);\r\n            setMessage(`⚠️ V3: Erreur filtrage - ${error.message}`);\r\n            setTimeout(() => setMessage(''), 4000);\r\n        } finally {\r\n            setLoadingStates(prev => {\r\n                const newSet = new Set(prev);\r\n                newSet.delete(caseKey);\r\n                return newSet;\r\n            });\r\n        }\r\n    }, [generateCacheKey, getCachedApprenants, loadingStates]);\r\n\r\n    // ⭐ HANDLERS OPTIMISÉS V3\r\n    const handleLieuChange = useCallback((caseKey, lieuId) => {\r\n        const [dayIndex, lieuIndex, creneau] = caseKey.split('-');\r\n        const weekDates = getWeekDates(currentDate);\r\n        \r\n        setPlanningData(prev => ({\r\n            ...prev,\r\n            [caseKey]: {\r\n                ...prev[caseKey],\r\n                lieu_id: lieuId\r\n            }\r\n        }));\r\n\r\n        if (lieuId) {\r\n            const creneauData = {\r\n                date: weekDates[parseInt(dayIndex)],\r\n                jour: jours[parseInt(dayIndex)],\r\n                creneau: creneau,\r\n                lieu_id: lieuId\r\n            };\r\n            \r\n            // Utilisation optimisée avec debounce\r\n            setTimeout(() => updateApprenantsCaseV3(caseKey, creneauData), 100);\r\n        }\r\n    }, [currentDate, getWeekDates, updateApprenantsCaseV3]);\r\n\r\n    const handleSalarieChange = useCallback((caseKey, salarieId) => {\r\n        setPlanningData(prev => ({\r\n            ...prev,\r\n            [caseKey]: {\r\n                ...prev[caseKey],\r\n                salarie_id: salarieId\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    const handleFormateurChange = useCallback((caseKey, selectIndex, formateurId) => {\r\n        setPlanningData(prev => {\r\n            const currentList = [...(prev[caseKey]?.formateurs_ids || [''])];\r\n            currentList[selectIndex] = formateurId;\r\n            \r\n            return {\r\n                ...prev,\r\n                [caseKey]: {\r\n                    ...prev[caseKey],\r\n                    formateurs_ids: currentList\r\n                }\r\n            };\r\n        });\r\n    }, []);\r\n\r\n    const handleApprenantAdd = useCallback((caseKey, apprenantId) => {\r\n        if (!apprenantId) return;\r\n\r\n        setPlanningData(prev => {\r\n            const currentList = prev[caseKey]?.apprenants_ids || [''];\r\n            const emptyIndex = currentList.findIndex(id => id === '');\r\n            \r\n            let newList;\r\n            if (emptyIndex !== -1) {\r\n                newList = [...currentList];\r\n                newList[emptyIndex] = apprenantId;\r\n                if (!newList.includes('')) {\r\n                    newList.push('');\r\n                }\r\n            } else {\r\n                newList = [...currentList.filter(id => id), apprenantId, ''];\r\n            }\r\n            \r\n            return {\r\n                ...prev,\r\n                [caseKey]: {\r\n                    ...prev[caseKey],\r\n                    apprenants_ids: newList\r\n                }\r\n            };\r\n        });\r\n\r\n        const apprenant = apprenantsMap.get(apprenantId);\r\n        const apprenantNom = apprenant ? apprenant.prenom : apprenantId;\r\n        setMessage(`👥 V3: ${apprenantNom} ajouté avec cache optimisé à ${caseKey}`);\r\n        setTimeout(() => setMessage(''), 3000);\r\n    }, [apprenantsMap]);\r\n\r\n    const handleApprenantRemove = useCallback((caseKey, apprenantId) => {\r\n        setPlanningData(prev => {\r\n            const currentList = prev[caseKey]?.apprenants_ids || [''];\r\n            const newList = currentList.filter(id => id !== apprenantId);\r\n            if (newList.length === 0 || !newList.includes('')) {\r\n                newList.push('');\r\n            }\r\n            \r\n            return {\r\n                ...prev,\r\n                [caseKey]: {\r\n                    ...prev[caseKey],\r\n                    apprenants_ids: newList\r\n                }\r\n            };\r\n        });\r\n    }, []);\r\n\r\n    // Navigation optimisée\r\n    const changeWeek = useCallback((direction) => {\r\n        const newDate = new Date(currentDate);\r\n        newDate.setDate(currentDate.getDate() + (direction * 7));\r\n        setCurrentDate(newDate);\r\n        \r\n        // Vider le cache lors du changement de semaine pour éviter les données obsolètes\r\n        setCacheApprenants(new Map());\r\n        setLastUpdateTime(new Map());\r\n    }, [currentDate]);\r\n\r\n    const goToCurrentWeek = useCallback(() => {\r\n        setCurrentDate(new Date());\r\n        setCacheApprenants(new Map());\r\n        setLastUpdateTime(new Map());\r\n    }, []);\r\n\r\n    // CHARGEMENT DES DONNÉES\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const [salariesRes, formateursRes, apprenantsRes, lieuxRes] = await Promise.all([\r\n                    supabase.from('users').select('id, prenom, nom, role, initiales').eq('role', 'salarié').eq('archive', false),\r\n                    supabase.from('users').select('id, prenom, nom, role').eq('role', 'formateur').eq('archive', false),\r\n                    supabase.from('users').select('id, prenom, nom, role').eq('role', 'apprenant').eq('archive', false),\r\n                    supabase.from('lieux').select('id, nom, couleur, initiale').eq('archive', false)\r\n                ]);\r\n\r\n                if (salariesRes.data) setSalaries(salariesRes.data);\r\n                if (formateursRes.data) setFormateurs(formateursRes.data);\r\n                if (apprenantsRes.data) setApprenants(apprenantsRes.data);\r\n                if (lieuxRes.data) setLieux(lieuxRes.data);\r\n                \r\n            } catch (error) {\r\n                console.error('V3 Erreur chargement données:', error);\r\n            }\r\n        };\r\n        \r\n        fetchData();\r\n    }, []);\r\n\r\n    // INITIALISATION PLANNING\r\n    useEffect(() => {\r\n        if (lieux.length >= 0 && salaries.length > 0 && formateurs.length > 0 && apprenants.length > 0) {\r\n            const newPlanningData = {};\r\n            const newLieuxParJour = {};\r\n\r\n            jours.forEach((_, dayIndex) => {\r\n                newLieuxParJour[dayIndex] = [0];\r\n                \r\n                [0].forEach(lieuIndex => {\r\n                    ['Matin', 'AM'].forEach((creneau) => {\r\n                        const key = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                        newPlanningData[key] = {\r\n                            lieu_id: null,\r\n                            salarie_id: null,\r\n                            formateurs_ids: [''],\r\n                            apprenants_ids: [''],\r\n                            apprenants_disponibles: []\r\n                        };\r\n                    });\r\n                });\r\n            });\r\n\r\n            setPlanningData(newPlanningData);\r\n            setLieuxParJour(newLieuxParJour);\r\n            setDataLoaded(true);\r\n        }\r\n    }, [lieux, salaries, formateurs, apprenants, currentDate]);\r\n\r\n    // Optimisation automatique du cache\r\n    useEffect(() => {\r\n        const interval = setInterval(optimizeCache, 60000); // Chaque minute\r\n        return () => clearInterval(interval);\r\n    }, [optimizeCache]);\r\n\r\n    if (!dataLoaded) {\r\n        return (\r\n            <div style={{ \r\n                display: 'flex', \r\n                justifyContent: 'center', \r\n                alignItems: 'center', \r\n                minHeight: '100vh',\r\n                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                color: 'white',\r\n                fontSize: '18px'\r\n            }}>\r\n                🔄 Chargement prototype V3...\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                padding: '0'\r\n            }}>\r\n                {/* Header Navigation */}\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                    borderRadius: '0 0 12px 12px',\r\n                    padding: '8px 20px',\r\n                    marginBottom: '10px',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    backdropFilter: 'blur(10px)'\r\n                }}>\r\n                    <nav style={{ fontSize: '14px' }}>\r\n                        <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                        <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                        <span style={{ color: '#7c3aed', fontWeight: '500' }}>🧪 Test V3 - Mixte Optimisé</span>\r\n                    </nav>\r\n                    \r\n                    <div style={{ textAlign: 'center' }}>\r\n                        <h1 style={{\r\n                            fontSize: '18px',\r\n                            fontWeight: 'bold',\r\n                            color: '#1f2937',\r\n                            margin: '0'\r\n                        }}>\r\n                            📝 PROTOTYPE V3 - MIXTE OPTIMISÉ\r\n                        </h1>\r\n                        <div style={{ fontSize: '12px', color: '#6b7280', marginTop: '2px' }}>\r\n                            Cache intelligent • Planning semaine {semaine}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🏠 Dashboard\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Toolbar avec statistiques V3 avancées */}\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n                    borderRadius: '8px',\r\n                    padding: '8px 20px',\r\n                    marginBottom: '10px',\r\n                    marginLeft: '20px',\r\n                    marginRight: '20px',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    {/* Statistiques V3 avancées */}\r\n                    <div style={{\r\n                        display: 'flex',\r\n                        gap: '12px',\r\n                        alignItems: 'center',\r\n                        padding: '4px 12px',\r\n                        backgroundColor: 'rgba(124, 58, 237, 0.1)',\r\n                        borderRadius: '6px',\r\n                        border: '1px solid rgba(124, 58, 237, 0.2)'\r\n                    }}>\r\n                        <div style={{ fontSize: '12px', fontWeight: '600', color: '#6d28d9' }}>\r\n                            📊 V3 Performance:\r\n                        </div>\r\n                        <div style={{ fontSize: '10px', color: '#5b21b6' }}>\r\n                            🎯 {statsV3.totalRequests} req\r\n                        </div>\r\n                        <div style={{ fontSize: '10px', color: '#5b21b6' }}>\r\n                            ⚡ {statsV3.cacheHits}H/{statsV3.cacheMisses}M\r\n                        </div>\r\n                        <div style={{ fontSize: '10px', color: '#5b21b6' }}>\r\n                            ⏱️ {statsV3.averageResponseTime.toFixed(1)}ms\r\n                        </div>\r\n                        <div style={{ fontSize: '10px', color: '#5b21b6' }}>\r\n                            💾 {cacheApprenants.size}/{MAX_CACHE_ENTRIES}\r\n                        </div>\r\n                        <div style={{ fontSize: '10px', color: '#5b21b6' }}>\r\n                            🧹 {statsV3.lastOptimization || 'Jamais'}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Navigation semaine */}\r\n                    <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\r\n                        <button\r\n                            onClick={() => changeWeek(-1)}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            ← Précédente\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={goToCurrentWeek}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#10b981',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            Aujourd'hui\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={() => changeWeek(1)}\r\n                            style={{\r\n                                padding: '6px 12px',\r\n                                backgroundColor: '#3b82f6',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '13px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            Suivante →\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* Actions V3 */}\r\n                    <div style={{ display: 'flex', gap: '8px' }}>\r\n                        <button\r\n                            onClick={optimizeCache}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: '#7c3aed',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            🧹 Optimiser\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={() => {\r\n                                setCacheApprenants(new Map());\r\n                                setLastUpdateTime(new Map());\r\n                                setStatsV3({\r\n                                    totalRequests: 0,\r\n                                    cacheHits: 0,\r\n                                    cacheMisses: 0,\r\n                                    averageResponseTime: 0,\r\n                                    lastOptimization: null\r\n                                });\r\n                                setMessage('🔄 V3: Cache et statistiques réinitialisés');\r\n                                setTimeout(() => setMessage(''), 3000);\r\n                            }}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: '#f59e0b',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            🔄 Reset Cache\r\n                        </button>\r\n                        \r\n                        <button\r\n                            onClick={() => setMessage('💾 V3: Sauvegarde simulée (test uniquement)')}\r\n                            style={{\r\n                                padding: '6px 16px',\r\n                                backgroundColor: '#6b7280',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                fontSize: '14px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            💾 Test Sauvegarde\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Message de feedback */}\r\n                {message && (\r\n                    <div style={{\r\n                        backgroundColor: message.includes('V3') ? '#f3e8ff' : '#d1fae5',\r\n                        color: message.includes('V3') ? '#6d28d9' : '#065f46',\r\n                        padding: '8px 15px',\r\n                        borderRadius: '6px',\r\n                        marginBottom: '10px',\r\n                        marginLeft: '20px',\r\n                        marginRight: '20px',\r\n                        textAlign: 'center',\r\n                        fontSize: '14px'\r\n                    }}>\r\n                        {message}\r\n                    </div>\r\n                )}\r\n\r\n                {/* Planning Table */}\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    margin: '0 20px 20px 20px',\r\n                    padding: '15px',\r\n                    overflow: 'auto',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                        <thead>\r\n                            <tr style={{ backgroundColor: '#f9fafb' }}>\r\n                                <th style={{ \r\n                                    padding: '10px', \r\n                                    border: '1px solid #e5e7eb',\r\n                                    fontWeight: '600',\r\n                                    fontSize: '13px',\r\n                                    textAlign: 'center',\r\n                                    minWidth: '40px'\r\n                                }}>\r\n                                    V3\r\n                                </th>\r\n                                {jours.map((jour, dayIndex) => \r\n                                    (lieuxParJour[dayIndex] || []).map((lieuIndex) => (\r\n                                        <th key={`${dayIndex}-${lieuIndex}`} style={{ \r\n                                            padding: '10px',\r\n                                            border: '1px solid #e5e7eb',\r\n                                            minWidth: '240px',\r\n                                            textAlign: 'center',\r\n                                            fontSize: '11px',\r\n                                            backgroundColor: '#f9fafb'\r\n                                        }}>\r\n                                            <div style={{ fontWeight: '600', fontSize: '13px', marginBottom: '3px' }}>\r\n                                                {jour}\r\n                                            </div>\r\n                                            <div style={{ fontSize: '10px', color: '#6b7280' }}>\r\n                                                {getDateOfWeek(dayIndex, currentDate)}\r\n                                            </div>\r\n                                        </th>\r\n                                    ))\r\n                                )}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {['Matin', 'AM'].map((creneau, creneauIndex) => (\r\n                                <tr key={creneau}>\r\n                                    <td style={{ \r\n                                        padding: '8px', \r\n                                        border: '1px solid #e5e7eb',\r\n                                        backgroundColor: creneauIndex === 0 ? '#fef3c7' : '#dbeafe',\r\n                                        fontWeight: 'bold',\r\n                                        textAlign: 'center',\r\n                                        fontSize: '11px'\r\n                                    }}>\r\n                                        {creneau === 'Matin' ? 'M' : 'AM'}\r\n                                    </td>\r\n                                    {jours.map((jour, dayIndex) => \r\n                                        (lieuxParJour[dayIndex] || []).map((lieuIndex) => {\r\n                                            const cellKey = `${dayIndex}-${lieuIndex}-${creneau}`;\r\n                                            const cellData = planningData[cellKey] || {};\r\n                                            const backgroundColor = getLieuCouleur(cellData.lieu_id);\r\n                                            const textColor = getTextColor(backgroundColor);\r\n                                            const isLoading = loadingStates.has(cellKey);\r\n                                            \r\n                                            return (\r\n                                                <td \r\n                                                    key={cellKey} \r\n                                                    style={{\r\n                                                        padding: '8px',\r\n                                                        border: '1px solid #e5e7eb',\r\n                                                        backgroundColor: backgroundColor,\r\n                                                        color: textColor,\r\n                                                        verticalAlign: 'top',\r\n                                                        minWidth: '240px'\r\n                                                    }}\r\n                                                >\r\n                                                    <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>\r\n                                                        {/* Lieu Select */}\r\n                                                        <select \r\n                                                            style={{\r\n                                                                width: '100%',\r\n                                                                padding: '4px',\r\n                                                                border: '1px solid #d1d5db',\r\n                                                                borderRadius: '4px',\r\n                                                                fontSize: '11px',\r\n                                                                background: 'rgba(255,255,255,0.9)'\r\n                                                            }}\r\n                                                            value={cellData.lieu_id || \"\"}\r\n                                                            onChange={(e) => handleLieuChange(cellKey, e.target.value)}\r\n                                                        >\r\n                                                            <option value=\"\">Choisir lieu</option>\r\n                                                            {lieux.map((lieu) => (\r\n                                                                <option key={lieu.id} value={lieu.id}>{lieu.nom}</option>\r\n                                                            ))}\r\n                                                        </select>\r\n\r\n                                                        {/* Salarié Select */}\r\n                                                        <select \r\n                                                            style={{\r\n                                                                width: '100%',\r\n                                                                padding: '4px',\r\n                                                                border: '1px solid #d1d5db',\r\n                                                                borderRadius: '4px',\r\n                                                                fontSize: '11px',\r\n                                                                background: 'rgba(255,255,255,0.9)'\r\n                                                            }}\r\n                                                            value={cellData.salarie_id || \"\"}\r\n                                                            onChange={(e) => handleSalarieChange(cellKey, e.target.value)}\r\n                                                        >\r\n                                                            <option value=\"\">Choisir salarié</option>\r\n                                                            {salaries.map((s) => (\r\n                                                                <option key={s.id} value={s.id}>\r\n                                                                    {s.initiales || getInitiales(s.prenom, s.nom)}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </select>\r\n\r\n                                                        {/* Section Formateurs (simplifiée) */}\r\n                                                        <div style={{\r\n                                                            padding: '6px',\r\n                                                            background: 'rgba(255, 255, 255, 0.2)',\r\n                                                            borderRadius: '4px',\r\n                                                            border: '1px solid rgba(255, 255, 255, 0.3)'\r\n                                                        }}>\r\n                                                            <div style={{ \r\n                                                                fontSize: '10px', \r\n                                                                fontWeight: '600', \r\n                                                                marginBottom: '4px',\r\n                                                                textAlign: 'center'\r\n                                                            }}>\r\n                                                                FORMATEURS\r\n                                                            </div>\r\n                                                            {(cellData.formateurs_ids || ['']).slice(0, 1).map((selectedId, i) => (\r\n                                                                <select\r\n                                                                    key={i}\r\n                                                                    style={{\r\n                                                                        width: '100%',\r\n                                                                        padding: '3px',\r\n                                                                        border: '1px solid #d1d5db',\r\n                                                                        borderRadius: '3px',\r\n                                                                        fontSize: '10px',\r\n                                                                        background: 'rgba(255,255,255,0.9)',\r\n                                                                        marginBottom: '3px'\r\n                                                                    }}\r\n                                                                    value={selectedId}\r\n                                                                    onChange={(e) => handleFormateurChange(cellKey, i, e.target.value)}\r\n                                                                >\r\n                                                                    <option value=\"\">Formateur</option>\r\n                                                                    {formateurs.map(f => (\r\n                                                                        <option key={f.id} value={f.id}>\r\n                                                                            {f.prenom} {f.nom}\r\n                                                                        </option>\r\n                                                                    ))}\r\n                                                                </select>\r\n                                                            ))}\r\n                                                        </div>\r\n\r\n                                                        {/* ⭐ SECTION APPRENANTS V3 - CACHE INTELLIGENT OPTIMISÉ */}\r\n                                                        <div style={{\r\n                                                            padding: '6px',\r\n                                                            background: 'rgba(124, 58, 237, 0.1)',\r\n                                                            borderRadius: '4px',\r\n                                                            border: '2px solid rgba(124, 58, 237, 0.3)'\r\n                                                        }}>\r\n                                                            <div style={{ \r\n                                                                fontSize: '10px', \r\n                                                                fontWeight: '600', \r\n                                                                marginBottom: '4px',\r\n                                                                textAlign: 'center',\r\n                                                                color: '#6d28d9'\r\n                                                            }}>\r\n                                                                🎯 APPRENANTS (V3) {isLoading && '⚡'}\r\n                                                            </div>\r\n                                                            \r\n                                                            {/* Menu déroulant optimisé */}\r\n                                                            <select\r\n                                                                onChange={(e) => handleApprenantAdd(cellKey, e.target.value)}\r\n                                                                disabled={!cellData.lieu_id || isLoading}\r\n                                                                style={{\r\n                                                                    width: '100%',\r\n                                                                    padding: '3px',\r\n                                                                    border: '1px solid #d1d5db',\r\n                                                                    borderRadius: '3px',\r\n                                                                    fontSize: '10px',\r\n                                                                    background: 'rgba(255,255,255,0.9)',\r\n                                                                    marginBottom: '3px',\r\n                                                                    cursor: !cellData.lieu_id ? 'not-allowed' : 'pointer'\r\n                                                                }}\r\n                                                            >\r\n                                                                <option value=\"\">\r\n                                                                    {isLoading ? '⚡ Cache...' : \r\n                                                                     !cellData.lieu_id ? '📍 Lieu requis' : \r\n                                                                     `➕ Ajouter (${(cellData.apprenants_disponibles || []).length})`}\r\n                                                                </option>\r\n                                                                {!isLoading && cellData.lieu_id && (cellData.apprenants_disponibles || [])\r\n                                                                    .filter(apprenant => {\r\n                                                                        const selectedIds = (cellData.apprenants_ids || []).filter(id => id);\r\n                                                                        return !selectedIds.includes(apprenant.id);\r\n                                                                    })\r\n                                                                    .map(apprenant => (\r\n                                                                        <option key={apprenant.id} value={apprenant.id}>\r\n                                                                            {apprenant.prenom} {apprenant.nom}\r\n                                                                        </option>\r\n                                                                    ))}\r\n                                                            </select>\r\n                                                            \r\n                                                            {/* Affichage apprenants sélectionnés optimisé */}\r\n                                                            {(cellData.apprenants_ids || []).filter(id => id).map(apprenantId => {\r\n                                                                const apprenant = apprenantsMap.get(apprenantId);\r\n                                                                \r\n                                                                return (\r\n                                                                    <div \r\n                                                                        key={apprenantId}\r\n                                                                        style={{\r\n                                                                            display: 'flex',\r\n                                                                            alignItems: 'center',\r\n                                                                            justifyContent: 'space-between',\r\n                                                                            padding: '2px 6px',\r\n                                                                            margin: '1px 0',\r\n                                                                            backgroundColor: 'rgba(124, 58, 237, 0.1)',\r\n                                                                            border: '1px solid rgba(124, 58, 237, 0.3)',\r\n                                                                            borderRadius: '3px',\r\n                                                                            fontSize: '9px'\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <span style={{ color: '#6d28d9', fontWeight: '500' }}>\r\n                                                                            {apprenant ? `${apprenant.prenom} ${apprenant.nom}` : 'Inconnu'}\r\n                                                                        </span>\r\n                                                                        <button \r\n                                                                            onClick={() => handleApprenantRemove(cellKey, apprenantId)}\r\n                                                                            style={{\r\n                                                                                background: '#ef4444',\r\n                                                                                color: 'white',\r\n                                                                                border: 'none',\r\n                                                                                borderRadius: '2px',\r\n                                                                                width: '16px',\r\n                                                                                height: '16px',\r\n                                                                                fontSize: '10px',\r\n                                                                                cursor: 'pointer',\r\n                                                                                marginLeft: '4px'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            ×\r\n                                                                        </button>\r\n                                                                    </div>\r\n                                                                );\r\n                                                            })}\r\n                                                            \r\n                                                            {/* Indicateur cache pour debug */}\r\n                                                            {false && cellData.lieu_id && ( // Activer pour debug\r\n                                                                <div style={{\r\n                                                                    fontSize: '8px',\r\n                                                                    color: '#6d28d9',\r\n                                                                    textAlign: 'center',\r\n                                                                    marginTop: '2px',\r\n                                                                    opacity: 0.7\r\n                                                                }}>\r\n                                                                    {(() => {\r\n                                                                        const weekDates = getWeekDates(currentDate);\r\n                                                                        const cacheKey = generateCacheKey(\r\n                                                                            weekDates[dayIndex], \r\n                                                                            jour, \r\n                                                                            creneau, \r\n                                                                            cellData.lieu_id\r\n                                                                        );\r\n                                                                        return isCacheValid(cacheKey) ? '⚡ Cached' : '🔍 Fresh';\r\n                                                                    })()}\r\n                                                                </div>\r\n                                                            )}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </td>\r\n                                            );\r\n                                        })\r\n                                    )}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                {/* Footer avec informations V3 */}\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n                    borderRadius: '8px',\r\n                    padding: '12px 20px',\r\n                    margin: '0 20px 20px 20px',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    <div style={{ \r\n                        fontSize: '14px', \r\n                        fontWeight: '600', \r\n                        color: '#6d28d9',\r\n                        marginBottom: '4px'\r\n                    }}>\r\n                        📋 PROTOTYPE V3 - MIXTE OPTIMISÉ\r\n                    </div>\r\n                    <div style={{ fontSize: '12px', color: '#6b7280' }}>\r\n                        ✅ Avantages : Performance maximale, cache intelligent, optimisation automatique<br/>\r\n                        ⚠️ Inconvénients : Complexité accrue, gestion mémoire, debugging plus difficile\r\n                    </div>\r\n                    <div style={{ \r\n                        fontSize: '11px', \r\n                        color: '#7c3aed', \r\n                        marginTop: '8px',\r\n                        display: 'flex',\r\n                        justifyContent: 'center',\r\n                        gap: '20px'\r\n                    }}>\r\n                        <span>🎯 Efficacité cache: {statsV3.totalRequests > 0 ? \r\n                            ((statsV3.cacheHits / statsV3.totalRequests) * 100).toFixed(1) : 0}%</span>\r\n                        <span>⚡ Réponse moy: {statsV3.averageResponseTime.toFixed(1)}ms</span>\r\n                        <span>💾 Mémoire: {cacheApprenants.size}/{MAX_CACHE_ENTRIES}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withAuthAdmin(PlanningTestV3, \"Test V3 - Mixte Optimisé\");",
          "taille": 56847,
          "lignes": 1111,
          "dateModif": "2025-08-27T05:38:35.432Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "pages/planning-test.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\nimport { withAuthAdmin } from '../components/withAuthAdmin'\r\n\r\nfunction PlanningTest({ user, logout, inactivityTime }) {\r\n    const router = useRouter()\r\n    \r\n    // États principaux\r\n    const [dateTest, setDateTest] = useState(new Date().toISOString().split('T')[0])\r\n    const [jour, setJour] = useState('lundi')\r\n    const [creneau, setCreneau] = useState('matin')\r\n    const [lieuId, setLieuId] = useState('')\r\n    const [resultats, setResultats] = useState(null)\r\n    const [loading, setLoading] = useState(false)\r\n    const [lieux, setLieux] = useState([])\r\n\r\n    // Constantes\r\n    const jours = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi']\r\n    const creneaux = ['matin', 'AM']\r\n\r\n    // Chargement initial\r\n    useEffect(() => {\r\n        fetchLieux()\r\n    }, [])\r\n\r\n    // Récupération des lieux\r\n    const fetchLieux = async () => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('lieux')\r\n                .select('id, nom, couleur, initiale')\r\n                .eq('archive', false)\r\n                .order('nom')\r\n\r\n            if (error) throw error\r\n            setLieux(data || [])\r\n        } catch (error) {\r\n            console.error('Erreur chargement lieux:', error)\r\n        }\r\n    }\r\n\r\n    // FONCTIONS DE VALIDATION DES CRITÈRES\r\n\r\n    // Critère 1 : Validation des dates de formation\r\n    const validateDatesFormation = (apprenant, dateTest) => {\r\n        if (!apprenant.date_entree_formation) return false\r\n        \r\n        const dateEntree = new Date(apprenant.date_entree_formation)\r\n        const dateFin = new Date(\r\n            apprenant.date_fin_formation_reelle || \r\n            apprenant.date_sortie_previsionnelle\r\n        )\r\n        const dateTestObj = new Date(dateTest)\r\n        \r\n        return dateTestObj >= dateEntree && dateTestObj <= dateFin\r\n    }\r\n\r\n    // Critère 2 : Validation du statut actuel\r\n    const validateStatutActuel = (apprenant, dateTest, suspensions) => {\r\n        // Statut formation général\r\n        if (apprenant.statut_formation !== 'en_cours') return false\r\n        \r\n        // Vérifier suspensions ponctuelles\r\n        const suspensionActive = suspensions.find(s => \r\n            s.apprenant_id === apprenant.id &&\r\n            new Date(s.date_suspension) <= new Date(dateTest) &&\r\n            new Date(s.date_reprise_prevue) >= new Date(dateTest)\r\n        )\r\n        \r\n        return !suspensionActive\r\n    }\r\n\r\n    // Critère 3 : Validation du planning type\r\n    const validatePlanningType = (apprenantId, planningTypes, lieuIdRequis) => {\r\n        const planning = planningTypes.find(pt => pt.apprenant_id === apprenantId)\r\n        \r\n        if (!planning) return false // Pas de planning type défini\r\n        \r\n        // Si lieu spécifique requis, vérifier correspondance\r\n        if (lieuIdRequis && planning.lieu_id !== lieuIdRequis) {\r\n            return false\r\n        }\r\n        \r\n        return true\r\n    }\r\n\r\n    // FONCTION PRINCIPALE DE FILTRAGE\r\n    const getApprenantsDisponibles = async (dateTest, jour, creneau, lieuId) => {\r\n        const startTime = Date.now()\r\n        let sqlQueries = 0\r\n        \r\n        try {\r\n            console.log(`🔍 Début filtrage pour: ${dateTest}, ${jour}, ${creneau}, lieu: ${lieuId || 'tous'}`)\r\n\r\n            // 1. Récupérer tous les apprenants actifs avec infos formation\r\n            let { data: apprenants, error: apprenantsError } = await supabase\r\n                .from('apprenants_actifs')\r\n                .select('*')\r\n            \r\n            sqlQueries++\r\n\r\n            // Fallback sur table users si vue indisponible\r\n            if (apprenantsError && apprenantsError.code === 'PGRST106') {\r\n                console.log('Vue apprenants_actifs non disponible, utilisation table users')\r\n                const result = await supabase\r\n                    .from('users')\r\n                    .select('*')\r\n                    .eq('role', 'apprenant')\r\n                    .eq('archive', false)\r\n                \r\n                apprenants = result.data\r\n                sqlQueries++\r\n            } else if (apprenantsError) {\r\n                throw apprenantsError\r\n            }\r\n\r\n            console.log(`📊 ${apprenants?.length || 0} apprenants récupérés`)\r\n\r\n            // 2. Récupérer les planning types pour le jour/créneau demandé\r\n            const { data: planningTypes, error: planningError } = await supabase\r\n                .from('planning_apprenants')\r\n                .select('apprenant_id, lieu_id, jour, creneau')\r\n                .eq('jour', jour)\r\n                .eq('creneau', creneau)\r\n                .eq('actif', true)\r\n            \r\n            sqlQueries++\r\n\r\n            if (planningError) throw planningError\r\n            console.log(`📋 ${planningTypes?.length || 0} planning types trouvés pour ${jour} ${creneau}`)\r\n\r\n            // 3. Récupérer les suspensions actives à cette date\r\n            let suspensions = []\r\n            try {\r\n                const { data: suspensionsData, error: suspensionsError } = await supabase\r\n                    .from('suspensions_parcours')\r\n                    .select('apprenant_id, date_suspension, date_reprise_prevue')\r\n                    .lte('date_suspension', dateTest)\r\n                    .gte('date_reprise_prevue', dateTest)\r\n                \r\n                sqlQueries++\r\n                \r\n                if (!suspensionsError) {\r\n                    suspensions = suspensionsData || []\r\n                } else if (suspensionsError.code === 'PGRST106') {\r\n                    console.log('Table suspensions_parcours non disponible, utilisation données users')\r\n                    // Utiliser les données de suspension de la table users\r\n                    suspensions = apprenants\r\n                        .filter(a => a.statut_formation === 'suspendu' && a.date_suspension)\r\n                        .map(a => ({\r\n                            apprenant_id: a.id,\r\n                            date_suspension: a.date_suspension,\r\n                            date_reprise_prevue: a.date_reprise_prevue\r\n                        }))\r\n                }\r\n            } catch (suspError) {\r\n                console.log('Erreur suspensions, poursuite sans:', suspError.message)\r\n            }\r\n\r\n            console.log(`⏸️ ${suspensions.length} suspensions actives trouvées`)\r\n\r\n            // 4. Appliquer les trois filtres\r\n            const results = (apprenants || []).map(apprenant => {\r\n                const critere1 = validateDatesFormation(apprenant, dateTest)\r\n                const critere2 = validateStatutActuel(apprenant, dateTest, suspensions)\r\n                const critere3 = validatePlanningType(apprenant.id, planningTypes, lieuId)\r\n                \r\n                return {\r\n                    apprenant,\r\n                    disponible: critere1 && critere2 && critere3,\r\n                    criteres: {\r\n                        dates: critere1,\r\n                        statut: critere2,\r\n                        planning: critere3\r\n                    },\r\n                    details: {\r\n                        dateEntree: apprenant.date_entree_formation,\r\n                        dateFin: apprenant.date_fin_formation_reelle || apprenant.date_sortie_previsionnelle,\r\n                        statutFormation: apprenant.statut_formation,\r\n                        planningSuspension: apprenant.date_suspension,\r\n                        planningType: planningTypes.find(pt => pt.apprenant_id === apprenant.id)\r\n                    }\r\n                }\r\n            })\r\n            \r\n            const execTime = Date.now() - startTime\r\n            console.log(`✅ Filtrage terminé en ${execTime}ms`)\r\n            \r\n            return {\r\n                disponibles: results.filter(r => r.disponible),\r\n                exclus: results.filter(r => !r.disponible),\r\n                debug: {\r\n                    tempsExecution: execTime,\r\n                    requetesSQL: sqlQueries,\r\n                    totalApprenants: apprenants?.length || 0,\r\n                    parametres: { dateTest, jour, creneau, lieuId }\r\n                }\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('Erreur filtrage:', error)\r\n            const execTime = Date.now() - startTime\r\n            return { \r\n                disponibles: [], \r\n                exclus: [], \r\n                debug: { \r\n                    erreur: error.message,\r\n                    tempsExecution: execTime,\r\n                    requetesSQL: sqlQueries\r\n                } \r\n            }\r\n        }\r\n    }\r\n\r\n    // Exécution du test de filtrage\r\n    const executerTest = async () => {\r\n        setLoading(true)\r\n        try {\r\n            const results = await getApprenantsDisponibles(dateTest, jour, creneau, lieuId)\r\n            setResultats(results)\r\n        } catch (error) {\r\n            console.error('Erreur test:', error)\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    // Composant d'affichage des résultats\r\n    const AffichageResultats = ({ resultats }) => {\r\n        if (!resultats) return null\r\n\r\n        const lieuNom = lieuId ? lieux.find(l => l.id === lieuId)?.nom : 'Tous lieux'\r\n\r\n        return (\r\n            <div className=\"resultats-test\">\r\n                {/* En-tête résumé */}\r\n                <div className=\"resume-filtrage\">\r\n                    <h3>📊 RÉSULTATS FILTRAGE</h3>\r\n                    <div className=\"stats-resume\">\r\n                        <span className=\"stat disponibles\">\r\n                            ✅ {resultats.disponibles.length} Disponibles\r\n                        </span>\r\n                        <span className=\"stat exclus\">\r\n                            ❌ {resultats.exclus.length} Exclus\r\n                        </span>\r\n                        <span className=\"stat total\">\r\n                            📋 {resultats.debug.totalApprenants} Total\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Section apprenants disponibles */}\r\n                {resultats.disponibles.length > 0 && (\r\n                    <div className=\"section-disponibles\">\r\n                        <h4 className=\"section-title disponible\">\r\n                            ✅ APPRENANTS DISPONIBLES ({resultats.disponibles.length})\r\n                        </h4>\r\n                        <div className=\"header-colonnes\">\r\n                            <span>Nom</span>\r\n                            <span>Dates</span>\r\n                            <span>Statut</span>\r\n                            <span>Planning</span>\r\n                        </div>\r\n                        {resultats.disponibles.map(result => (\r\n                            <div key={result.apprenant.id} className=\"ligne-apprenant disponible\">\r\n                                <span className=\"nom\">\r\n                                    {result.apprenant.prenom} {result.apprenant.nom}\r\n                                </span>\r\n                                <span className=\"critere dates valide\">✓ Dates</span>\r\n                                <span className=\"critere statut valide\">✓ Statut</span>\r\n                                <span className=\"critere planning valide\">✓ Planning</span>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n                \r\n                {/* Section apprenants exclus */}\r\n                {resultats.exclus.length > 0 && (\r\n                    <div className=\"section-exclus\">\r\n                        <h4 className=\"section-title exclu\">\r\n                            ❌ APPRENANTS EXCLUS ({resultats.exclus.length})\r\n                        </h4>\r\n                        <div className=\"header-colonnes\">\r\n                            <span>Nom</span>\r\n                            <span>Dates</span>\r\n                            <span>Statut</span>\r\n                            <span>Planning</span>\r\n                        </div>\r\n                        {resultats.exclus.map(result => (\r\n                            <div key={result.apprenant.id} className=\"ligne-apprenant exclu\">\r\n                                <span className=\"nom\">\r\n                                    {result.apprenant.prenom} {result.apprenant.nom}\r\n                                </span>\r\n                                <span className={`critere dates ${result.criteres.dates ? 'valide' : 'invalide'}`}>\r\n                                    {result.criteres.dates ? '✓' : '❌'} Dates\r\n                                </span>\r\n                                <span className={`critere statut ${result.criteres.statut ? 'valide' : 'invalide'}`}>\r\n                                    {result.criteres.statut ? '✓' : '❌'} Statut\r\n                                </span>\r\n                                <span className={`critere planning ${result.criteres.planning ? 'valide' : 'invalide'}`}>\r\n                                    {result.criteres.planning ? '✓' : '❌'} Planning\r\n                                </span>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n                \r\n                {/* Informations debug */}\r\n                <div className=\"debug-info\">\r\n                    <h4>🔍 INFORMATIONS DEBUG</h4>\r\n                    <div className=\"debug-grid\">\r\n                        <div className=\"debug-item\">\r\n                            <span className=\"debug-label\">Temps d'exécution:</span>\r\n                            <span className=\"debug-value\">{resultats.debug.tempsExecution}ms</span>\r\n                        </div>\r\n                        <div className=\"debug-item\">\r\n                            <span className=\"debug-label\">Requêtes SQL:</span>\r\n                            <span className=\"debug-value\">{resultats.debug.requetesSQL}</span>\r\n                        </div>\r\n                        <div className=\"debug-item\">\r\n                            <span className=\"debug-label\">Total apprenants:</span>\r\n                            <span className=\"debug-value\">{resultats.debug.totalApprenants}</span>\r\n                        </div>\r\n                        <div className=\"debug-item\">\r\n                            <span className=\"debug-label\">Paramètres:</span>\r\n                            <span className=\"debug-value\">\r\n                                {dateTest} • {jour} • {creneau} • {lieuNom}\r\n                            </span>\r\n                        </div>\r\n                        {resultats.debug.erreur && (\r\n                            <div className=\"debug-item error\">\r\n                                <span className=\"debug-label\">Erreur:</span>\r\n                                <span className=\"debug-value\">{resultats.debug.erreur}</span>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* Styles CSS intégrés */}\r\n            <style jsx>{`\r\n                .planning-test {\r\n                    min-height: 100vh;\r\n                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n                    padding: 20px;\r\n                }\r\n\r\n                .container-test {\r\n                    max-width: 1400px;\r\n                    margin: 0 auto;\r\n                }\r\n\r\n                .header-test {\r\n                    color: white;\r\n                    font-size: 28px;\r\n                    font-weight: bold;\r\n                    text-align: center;\r\n                    margin-bottom: 30px;\r\n                    text-shadow: 0 2px 4px rgba(0,0,0,0.3);\r\n                }\r\n\r\n                .navigation {\r\n                    background: rgba(255, 255, 255, 0.95);\r\n                    border-radius: 12px;\r\n                    padding: 8px 20px;\r\n                    margin-bottom: 20px;\r\n                    display: flex;\r\n                    justify-content: space-between;\r\n                    align-items: center;\r\n                }\r\n\r\n                .parametres-test {\r\n                    background: rgba(255, 255, 255, 0.1);\r\n                    backdrop-filter: blur(20px);\r\n                    border-radius: 15px;\r\n                    border: 1px solid rgba(255, 255, 255, 0.2);\r\n                    padding: 25px;\r\n                    margin-bottom: 20px;\r\n                    display: grid;\r\n                    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\r\n                    gap: 15px;\r\n                    align-items: end;\r\n                }\r\n\r\n                .param-group {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n\r\n                .param-label {\r\n                    color: white;\r\n                    font-size: 14px;\r\n                    font-weight: 500;\r\n                    margin-bottom: 8px;\r\n                }\r\n\r\n                .param-input, .param-select {\r\n                    padding: 12px;\r\n                    border: none;\r\n                    border-radius: 8px;\r\n                    background: rgba(255, 255, 255, 0.95);\r\n                    font-size: 14px;\r\n                    font-weight: 500;\r\n                    cursor: pointer;\r\n                }\r\n\r\n                .btn-test {\r\n                    grid-column: span 2;\r\n                    padding: 15px 30px;\r\n                    background: linear-gradient(135deg, #ff6b35, #f7931e);\r\n                    color: white;\r\n                    border: none;\r\n                    border-radius: 10px;\r\n                    font-size: 16px;\r\n                    font-weight: bold;\r\n                    cursor: pointer;\r\n                    transition: all 0.3s ease;\r\n                    box-shadow: 0 4px 15px rgba(255, 107, 53, 0.3);\r\n                }\r\n\r\n                .btn-test:hover:not(:disabled) {\r\n                    transform: translateY(-2px);\r\n                    box-shadow: 0 6px 20px rgba(255, 107, 53, 0.4);\r\n                }\r\n\r\n                .btn-test:disabled {\r\n                    opacity: 0.6;\r\n                    cursor: not-allowed;\r\n                    transform: none;\r\n                }\r\n\r\n                .resultats-test {\r\n                    background: rgba(255, 255, 255, 0.1);\r\n                    backdrop-filter: blur(20px);\r\n                    border-radius: 15px;\r\n                    border: 1px solid rgba(255, 255, 255, 0.2);\r\n                    padding: 25px;\r\n                    margin-top: 20px;\r\n                }\r\n\r\n                .resume-filtrage {\r\n                    text-align: center;\r\n                    margin-bottom: 30px;\r\n                }\r\n\r\n                .resume-filtrage h3 {\r\n                    color: white;\r\n                    font-size: 24px;\r\n                    margin-bottom: 15px;\r\n                }\r\n\r\n                .stats-resume {\r\n                    display: flex;\r\n                    justify-content: center;\r\n                    gap: 20px;\r\n                    flex-wrap: wrap;\r\n                }\r\n\r\n                .stat {\r\n                    padding: 8px 16px;\r\n                    border-radius: 20px;\r\n                    font-weight: bold;\r\n                    font-size: 14px;\r\n                }\r\n\r\n                .stat.disponibles {\r\n                    background: rgba(76, 175, 80, 0.3);\r\n                    color: #4CAF50;\r\n                }\r\n\r\n                .stat.exclus {\r\n                    background: rgba(244, 67, 54, 0.3);\r\n                    color: #f44336;\r\n                }\r\n\r\n                .stat.total {\r\n                    background: rgba(33, 150, 243, 0.3);\r\n                    color: #2196F3;\r\n                }\r\n\r\n                .section-disponibles, .section-exclus {\r\n                    margin: 20px 0;\r\n                }\r\n\r\n                .section-title {\r\n                    font-size: 18px;\r\n                    font-weight: bold;\r\n                    margin-bottom: 15px;\r\n                    padding: 10px 15px;\r\n                    border-radius: 8px;\r\n                }\r\n\r\n                .section-title.disponible {\r\n                    background: rgba(76, 175, 80, 0.2);\r\n                    color: #4CAF50;\r\n                }\r\n\r\n                .section-title.exclu {\r\n                    background: rgba(244, 67, 54, 0.2);\r\n                    color: #f44336;\r\n                }\r\n\r\n                .header-colonnes {\r\n                    display: grid;\r\n                    grid-template-columns: 2fr 1fr 1fr 1fr;\r\n                    gap: 10px;\r\n                    padding: 10px 15px;\r\n                    background: rgba(0, 0, 0, 0.2);\r\n                    color: white;\r\n                    font-weight: bold;\r\n                    font-size: 14px;\r\n                    border-radius: 8px;\r\n                    margin-bottom: 5px;\r\n                }\r\n\r\n                .ligne-apprenant {\r\n                    display: grid;\r\n                    grid-template-columns: 2fr 1fr 1fr 1fr;\r\n                    gap: 10px;\r\n                    padding: 12px 15px;\r\n                    margin: 3px 0;\r\n                    border-radius: 8px;\r\n                    align-items: center;\r\n                    transition: transform 0.2s ease;\r\n                }\r\n\r\n                .ligne-apprenant:hover {\r\n                    transform: translateX(5px);\r\n                }\r\n\r\n                .ligne-apprenant.disponible {\r\n                    background: rgba(76, 175, 80, 0.15);\r\n                    border-left: 4px solid #4CAF50;\r\n                }\r\n\r\n                .ligne-apprenant.exclu {\r\n                    background: rgba(244, 67, 54, 0.15);\r\n                    border-left: 4px solid #f44336;\r\n                }\r\n\r\n                .nom {\r\n                    font-weight: 500;\r\n                    color: white;\r\n                }\r\n\r\n                .critere {\r\n                    text-align: center;\r\n                    padding: 4px 8px;\r\n                    border-radius: 4px;\r\n                    font-size: 13px;\r\n                    font-weight: 500;\r\n                }\r\n\r\n                .critere.valide {\r\n                    background: rgba(76, 175, 80, 0.3);\r\n                    color: #4CAF50;\r\n                }\r\n\r\n                .critere.invalide {\r\n                    background: rgba(244, 67, 54, 0.3);\r\n                    color: #f44336;\r\n                }\r\n\r\n                .debug-info {\r\n                    background: rgba(0, 0, 0, 0.2);\r\n                    border-radius: 10px;\r\n                    padding: 20px;\r\n                    margin-top: 30px;\r\n                }\r\n\r\n                .debug-info h4 {\r\n                    color: white;\r\n                    margin-bottom: 15px;\r\n                    font-size: 16px;\r\n                }\r\n\r\n                .debug-grid {\r\n                    display: grid;\r\n                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n                    gap: 10px;\r\n                }\r\n\r\n                .debug-item {\r\n                    display: flex;\r\n                    justify-content: space-between;\r\n                    align-items: center;\r\n                    padding: 8px 12px;\r\n                    background: rgba(255, 255, 255, 0.1);\r\n                    border-radius: 6px;\r\n                }\r\n\r\n                .debug-item.error {\r\n                    background: rgba(244, 67, 54, 0.2);\r\n                }\r\n\r\n                .debug-label {\r\n                    color: rgba(255, 255, 255, 0.8);\r\n                    font-size: 14px;\r\n                }\r\n\r\n                .debug-value {\r\n                    color: white;\r\n                    font-weight: 500;\r\n                    font-size: 14px;\r\n                }\r\n\r\n                .loading-overlay {\r\n                    position: fixed;\r\n                    top: 0;\r\n                    left: 0;\r\n                    right: 0;\r\n                    bottom: 0;\r\n                    background: rgba(0, 0, 0, 0.7);\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    z-index: 1000;\r\n                }\r\n\r\n                .loading-content {\r\n                    background: rgba(255, 255, 255, 0.1);\r\n                    backdrop-filter: blur(20px);\r\n                    border-radius: 15px;\r\n                    padding: 30px;\r\n                    text-align: center;\r\n                    color: white;\r\n                }\r\n\r\n                @media (max-width: 768px) {\r\n                    .planning-test {\r\n                        padding: 10px;\r\n                    }\r\n                    \r\n                    .parametres-test {\r\n                        grid-template-columns: 1fr;\r\n                        gap: 10px;\r\n                    }\r\n                    \r\n                    .btn-test {\r\n                        grid-column: span 1;\r\n                    }\r\n                    \r\n                    .header-colonnes, .ligne-apprenant {\r\n                        grid-template-columns: 1fr;\r\n                        gap: 5px;\r\n                    }\r\n                    \r\n                    .stats-resume {\r\n                        flex-direction: column;\r\n                        align-items: center;\r\n                    }\r\n                }\r\n            `}</style>\r\n\r\n            <div className=\"planning-test\">\r\n                {/* Loading overlay */}\r\n                {loading && (\r\n                    <div className=\"loading-overlay\">\r\n                        <div className=\"loading-content\">\r\n                            <div style={{ fontSize: '24px', marginBottom: '15px' }}>🔍</div>\r\n                            <div style={{ fontSize: '18px' }}>Test en cours...</div>\r\n                            <div style={{ fontSize: '14px', opacity: '0.8', marginTop: '10px' }}>\r\n                                Analyse des apprenants disponibles\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                <div className=\"container-test\">\r\n                    {/* Navigation */}\r\n                    <div className=\"navigation\">\r\n                        <button\r\n                            onClick={() => router.push('/')}\r\n                            style={{\r\n                                padding: '8px 16px',\r\n                                backgroundColor: '#6b7280',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                cursor: 'pointer',\r\n                                fontSize: '14px'\r\n                            }}\r\n                        >\r\n                            ← Retour Dashboard\r\n                        </button>\r\n                        <div style={{ fontSize: '14px', color: '#6b7280' }}>\r\n                            Admin: {user?.email}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <h1 className=\"header-test\">\r\n                        🧪 Test Planning - Logique Triple Filtrage\r\n                    </h1>\r\n\r\n                    {/* Paramètres de test */}\r\n                    <div className=\"parametres-test\">\r\n                        <div className=\"param-group\">\r\n                            <label className=\"param-label\">📅 Date test</label>\r\n                            <input \r\n                                type=\"date\" \r\n                                value={dateTest} \r\n                                onChange={e => setDateTest(e.target.value)}\r\n                                className=\"param-input\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"param-group\">\r\n                            <label className=\"param-label\">📆 Jour</label>\r\n                            <select \r\n                                value={jour} \r\n                                onChange={e => setJour(e.target.value)}\r\n                                className=\"param-select\"\r\n                            >\r\n                                {jours.map(j => (\r\n                                    <option key={j} value={j}>\r\n                                        {j.charAt(0).toUpperCase() + j.slice(1)}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className=\"param-group\">\r\n                            <label className=\"param-label\">⏰ Créneau</label>\r\n                            <select \r\n                                value={creneau} \r\n                                onChange={e => setCreneau(e.target.value)}\r\n                                className=\"param-select\"\r\n                            >\r\n                                {creneaux.map(c => (\r\n                                    <option key={c} value={c}>\r\n                                        {c === 'matin' ? '🌅 Matin' : '🌆 AM'}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className=\"param-group\">\r\n                            <label className=\"param-label\">📍 Lieu</label>\r\n                            <select \r\n                                value={lieuId} \r\n                                onChange={e => setLieuId(e.target.value)}\r\n                                className=\"param-select\"\r\n                            >\r\n                                <option value=\"\">Tous lieux</option>\r\n                                {lieux.map(l => (\r\n                                    <option key={l.id} value={l.id}>\r\n                                        {l.nom}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n\r\n                        <button \r\n                            onClick={executerTest} \r\n                            disabled={loading}\r\n                            className=\"btn-test\"\r\n                        >\r\n                            {loading ? '⏳ Test en cours...' : '🔍 FILTRER APPRENANTS DISPONIBLES'}\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* Affichage des résultats */}\r\n                    {resultats && <AffichageResultats resultats={resultats} />}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n// Protection avec HOC admin\r\nexport default withAuthAdmin(PlanningTest, \"Test Planning\")",
          "taille": 30974,
          "lignes": 776,
          "dateModif": "2025-08-27T05:38:51.620Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "pages/planning-type-apprenants.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\nimport { withAuthAdmin } from '../components/withAuthAdmin'\r\n\r\nfunction PlanningTypeApprenants({ user, logout, inactivityTime }) {\r\n    const router = useRouter()\r\n    \r\n    // États principaux\r\n    const [apprenants, setApprenants] = useState([])\r\n    const [apprenantSelectionne, setApprenantSelectionne] = useState(null)\r\n    const [lieux, setLieux] = useState([])\r\n    const [planningType, setPlanningType] = useState({})\r\n    const [loading, setLoading] = useState(false)\r\n    const [message, setMessage] = useState(null)\r\n\r\n    // Constantes\r\n    const jours = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi']\r\n    const creneaux = ['matin', 'AM']\r\n\r\n    // Chargement initial des données\r\n    useEffect(() => {\r\n        fetchApprenants()\r\n        fetchLieux()\r\n    }, [])\r\n\r\n    // Fonction pour récupérer les apprenants\r\n    const fetchApprenants = async () => {\r\n        try {\r\n            // Tentative avec vue enrichie\r\n            let { data, error } = await supabase\r\n                .from('apprenants_actifs')\r\n                .select('id, prenom, nom, statut_formation')\r\n                .eq('statut_formation', 'en_cours')\r\n                .order('nom')\r\n\r\n            // Fallback sur table users si vue indisponible\r\n            if (error && error.code === 'PGRST106') {\r\n                console.log('Vue apprenants_actifs non disponible, utilisation table users')\r\n                const result = await supabase\r\n                    .from('users')\r\n                    .select('id, prenom, nom, statut_formation')\r\n                    .eq('role', 'apprenant')\r\n                    .eq('archive', false)\r\n                    .order('nom')\r\n                \r\n                data = result.data\r\n                error = result.error\r\n            }\r\n\r\n            if (error) throw error\r\n            setApprenants(data || [])\r\n        } catch (err) {\r\n            console.error('Erreur chargement apprenants:', err)\r\n            setMessage({\r\n                type: 'error',\r\n                text: 'Erreur lors du chargement des apprenants'\r\n            })\r\n        }\r\n    }\r\n\r\n    // Fonction pour récupérer les lieux\r\n    const fetchLieux = async () => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('lieux')\r\n                .select('id, nom, couleur, initiale')\r\n                .eq('archive', false)\r\n                .order('nom')\r\n\r\n            if (error) throw error\r\n            setLieux(data || [])\r\n        } catch (err) {\r\n            console.error('Erreur chargement lieux:', err)\r\n            setMessage({\r\n                type: 'error',\r\n                text: 'Erreur lors du chargement des lieux'\r\n            })\r\n        }\r\n    }\r\n\r\n    // Fonction pour charger le planning existant d'un apprenant\r\n    const fetchPlanningType = async (apprenantId) => {\r\n        if (!apprenantId) return\r\n\r\n        setLoading(true)\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('planning_apprenants')\r\n                .select(`\r\n                    jour, creneau, lieu_id,\r\n                    lieux:lieu_id (nom, couleur, initiale)\r\n                `)\r\n                .eq('apprenant_id', apprenantId)\r\n                .eq('actif', true)\r\n\r\n            if (error) throw error\r\n\r\n            // Convertir en format grille pour l'interface\r\n            const planning = {}\r\n            data?.forEach(item => {\r\n                const key = `${item.jour}-${item.creneau}`\r\n                planning[key] = {\r\n                    lieu_id: item.lieu_id,\r\n                    lieu_nom: item.lieux?.nom,\r\n                    lieu_couleur: item.lieux?.couleur,\r\n                    lieu_initiale: item.lieux?.initiale\r\n                }\r\n            })\r\n\r\n            setPlanningType(planning)\r\n        } catch (err) {\r\n            console.error('Erreur chargement planning:', err)\r\n            setMessage({\r\n                type: 'error',\r\n                text: 'Erreur lors du chargement du planning'\r\n            })\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    // Gestion changement d'apprenant sélectionné\r\n    const handleApprenantChange = (apprenantId) => {\r\n        const apprenant = apprenants.find(a => a.id === apprenantId)\r\n        setApprenantSelectionne(apprenant)\r\n        setPlanningType({}) // Reset grille\r\n        setMessage(null)\r\n\r\n        if (apprenant) {\r\n            fetchPlanningType(apprenant.id)\r\n        }\r\n    }\r\n\r\n    // Gestion changement d'une case de la grille\r\n    const handleCaseChange = (key, lieuId) => {\r\n        if (lieuId) {\r\n            const lieu = lieux.find(l => l.id === lieuId)\r\n            setPlanningType(prev => ({\r\n                ...prev,\r\n                [key]: {\r\n                    lieu_id: lieuId,\r\n                    lieu_nom: lieu?.nom,\r\n                    lieu_couleur: lieu?.couleur,\r\n                    lieu_initiale: lieu?.initiale\r\n                }\r\n            }))\r\n        } else {\r\n            // Retirer la sélection\r\n            setPlanningType(prev => {\r\n                const newPlanning = { ...prev }\r\n                delete newPlanning[key]\r\n                return newPlanning\r\n            })\r\n        }\r\n    }\r\n\r\n    // Sauvegarde du planning\r\n    const sauvegarderPlanning = async () => {\r\n        if (!apprenantSelectionne) {\r\n            setMessage({\r\n                type: 'error',\r\n                text: 'Veuillez sélectionner un apprenant'\r\n            })\r\n            return\r\n        }\r\n\r\n        setLoading(true)\r\n        try {\r\n            // 1. Supprimer l'ancien planning de cet apprenant\r\n            await supabase\r\n                .from('planning_apprenants')\r\n                .delete()\r\n                .eq('apprenant_id', apprenantSelectionne.id)\r\n\r\n            // 2. Insérer le nouveau planning\r\n            const planningArray = Object.entries(planningType)\r\n                .filter(([key, value]) => value.lieu_id) // Seules les cases avec lieu\r\n                .map(([key, value]) => {\r\n                    const [jour, creneau] = key.split('-')\r\n                    return {\r\n                        apprenant_id: apprenantSelectionne.id,\r\n                        jour,\r\n                        creneau,\r\n                        lieu_id: value.lieu_id\r\n                    }\r\n                })\r\n\r\n            if (planningArray.length > 0) {\r\n                const { error } = await supabase\r\n                    .from('planning_apprenants')\r\n                    .insert(planningArray)\r\n\r\n                if (error) throw error\r\n            }\r\n\r\n            setMessage({\r\n                type: 'success',\r\n                text: `✅ Planning sauvegardé pour ${apprenantSelectionne.prenom} ${apprenantSelectionne.nom} (${planningArray.length} créneaux)`\r\n            })\r\n\r\n        } catch (error) {\r\n            console.error('Erreur sauvegarde:', error)\r\n            setMessage({\r\n                type: 'error',\r\n                text: '❌ Erreur lors de la sauvegarde'\r\n            })\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    // Composant Case de planning\r\n    const CasePlanning = ({ jour, creneau }) => {\r\n        const key = `${jour}-${creneau}`\r\n        const currentValue = planningType[key]\r\n\r\n        return (\r\n            <td className=\"case-planning\">\r\n                <select\r\n                    value={currentValue?.lieu_id || ''}\r\n                    onChange={(e) => handleCaseChange(key, e.target.value)}\r\n                    className=\"select-lieu\"\r\n                    style={{\r\n                        backgroundColor: currentValue?.lieu_couleur || 'rgba(255, 255, 255, 0.9)',\r\n                        color: currentValue?.lieu_couleur ? 'white' : '#374151',\r\n                        fontWeight: currentValue?.lieu_couleur ? 'bold' : 'normal'\r\n                    }}\r\n                    disabled={!apprenantSelectionne}\r\n                >\r\n                    <option value=\"\">--</option>\r\n                    {lieux.map(lieu => (\r\n                        <option key={lieu.id} value={lieu.id}>\r\n                            {lieu.initiale || lieu.nom}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </td>\r\n        )\r\n    }\r\n\r\n    // Statistiques du planning\r\n    const nbCreneaux = Object.keys(planningType).length\r\n\r\n    return (\r\n        <>\r\n            {/* Styles CSS intégrés */}\r\n            <style jsx>{`\r\n                .planning-type-apprenants {\r\n                    min-height: 100vh;\r\n                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n                    padding: 20px;\r\n                }\r\n\r\n                .container-planning {\r\n                    max-width: 1200px;\r\n                    margin: 0 auto;\r\n                    background: rgba(255, 255, 255, 0.1);\r\n                    backdrop-filter: blur(20px);\r\n                    border-radius: 20px;\r\n                    border: 1px solid rgba(255, 255, 255, 0.2);\r\n                    padding: 30px;\r\n                }\r\n\r\n                .header-title {\r\n                    color: white;\r\n                    font-size: 28px;\r\n                    font-weight: bold;\r\n                    text-align: center;\r\n                    margin-bottom: 30px;\r\n                    text-shadow: 0 2px 4px rgba(0,0,0,0.3);\r\n                }\r\n\r\n                .navigation {\r\n                    background: rgba(255, 255, 255, 0.95);\r\n                    border-radius: 12px;\r\n                    padding: 8px 20px;\r\n                    margin-bottom: 20px;\r\n                    display: flex;\r\n                    justify-content: space-between;\r\n                    align-items: center;\r\n                }\r\n\r\n                .selecteur-section {\r\n                    background: rgba(255, 255, 255, 0.1);\r\n                    border-radius: 15px;\r\n                    padding: 25px;\r\n                    margin-bottom: 30px;\r\n                    border: 1px solid rgba(255, 255, 255, 0.2);\r\n                }\r\n\r\n                .selecteur-label {\r\n                    color: white;\r\n                    font-size: 18px;\r\n                    font-weight: bold;\r\n                    margin-bottom: 15px;\r\n                    display: block;\r\n                }\r\n\r\n                .select-apprenant {\r\n                    width: 100%;\r\n                    max-width: 400px;\r\n                    padding: 12px 16px;\r\n                    border: none;\r\n                    border-radius: 10px;\r\n                    background: rgba(255, 255, 255, 0.95);\r\n                    font-size: 16px;\r\n                    font-weight: 500;\r\n                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n                    cursor: pointer;\r\n                }\r\n\r\n                .grille-container {\r\n                    background: rgba(255, 255, 255, 0.1);\r\n                    border-radius: 15px;\r\n                    padding: 20px;\r\n                    margin: 20px 0;\r\n                    border: 1px solid rgba(255, 255, 255, 0.2);\r\n                }\r\n\r\n                .grille-planning {\r\n                    width: 100%;\r\n                    border-collapse: collapse;\r\n                    background: rgba(255, 255, 255, 0.05);\r\n                    border-radius: 15px;\r\n                    overflow: hidden;\r\n                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\r\n                }\r\n\r\n                .header-jour, .header-creneau {\r\n                    background: rgba(0, 0, 0, 0.3);\r\n                    color: white;\r\n                    padding: 15px;\r\n                    font-weight: bold;\r\n                    text-align: center;\r\n                    font-size: 14px;\r\n                    border: 1px solid rgba(255, 255, 255, 0.1);\r\n                }\r\n\r\n                .label-creneau {\r\n                    background: rgba(0, 0, 0, 0.2);\r\n                    color: white;\r\n                    padding: 15px;\r\n                    font-weight: bold;\r\n                    text-align: center;\r\n                    width: 100px;\r\n                    font-size: 13px;\r\n                    border: 1px solid rgba(255, 255, 255, 0.1);\r\n                }\r\n\r\n                .case-planning {\r\n                    padding: 8px;\r\n                    border: 1px solid rgba(255, 255, 255, 0.2);\r\n                    text-align: center;\r\n                    background: rgba(255, 255, 255, 0.05);\r\n                    transition: background-color 0.3s ease;\r\n                }\r\n\r\n                .case-planning:hover {\r\n                    background: rgba(255, 255, 255, 0.1);\r\n                }\r\n\r\n                .select-lieu {\r\n                    width: 100%;\r\n                    padding: 8px;\r\n                    border: none;\r\n                    border-radius: 6px;\r\n                    text-align: center;\r\n                    font-size: 13px;\r\n                    cursor: pointer;\r\n                    transition: all 0.3s ease;\r\n                }\r\n\r\n                .select-lieu:disabled {\r\n                    opacity: 0.5;\r\n                    cursor: not-allowed;\r\n                }\r\n\r\n                .actions-section {\r\n                    background: rgba(255, 255, 255, 0.1);\r\n                    border-radius: 15px;\r\n                    padding: 25px;\r\n                    text-align: center;\r\n                    border: 1px solid rgba(255, 255, 255, 0.2);\r\n                }\r\n\r\n                .btn-sauvegarder {\r\n                    background: linear-gradient(135deg, #4CAF50, #45a049);\r\n                    color: white;\r\n                    border: none;\r\n                    padding: 15px 30px;\r\n                    border-radius: 10px;\r\n                    font-size: 16px;\r\n                    font-weight: bold;\r\n                    cursor: pointer;\r\n                    transition: transform 0.2s ease;\r\n                    box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);\r\n                }\r\n\r\n                .btn-sauvegarder:hover:not(:disabled) {\r\n                    transform: translateY(-2px);\r\n                    box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);\r\n                }\r\n\r\n                .btn-sauvegarder:disabled {\r\n                    opacity: 0.5;\r\n                    cursor: not-allowed;\r\n                    transform: none;\r\n                }\r\n\r\n                .stats-planning {\r\n                    margin-top: 15px;\r\n                    color: white;\r\n                    font-size: 16px;\r\n                    font-style: italic;\r\n                    opacity: 0.9;\r\n                }\r\n\r\n                .message {\r\n                    padding: 15px 20px;\r\n                    border-radius: 10px;\r\n                    margin: 20px 0;\r\n                    font-weight: 500;\r\n                    text-align: center;\r\n                }\r\n\r\n                .message.success {\r\n                    background: rgba(76, 175, 80, 0.2);\r\n                    color: #4CAF50;\r\n                    border: 1px solid rgba(76, 175, 80, 0.3);\r\n                }\r\n\r\n                .message.error {\r\n                    background: rgba(244, 67, 54, 0.2);\r\n                    color: #f44336;\r\n                    border: 1px solid rgba(244, 67, 54, 0.3);\r\n                }\r\n\r\n                .loading-overlay {\r\n                    position: absolute;\r\n                    top: 0;\r\n                    left: 0;\r\n                    right: 0;\r\n                    bottom: 0;\r\n                    background: rgba(0, 0, 0, 0.1);\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    border-radius: 15px;\r\n                }\r\n\r\n                @media (max-width: 768px) {\r\n                    .planning-type-apprenants {\r\n                        padding: 10px;\r\n                    }\r\n                    \r\n                    .container-planning {\r\n                        padding: 20px;\r\n                    }\r\n                    \r\n                    .grille-planning {\r\n                        font-size: 12px;\r\n                    }\r\n                    \r\n                    .select-lieu {\r\n                        font-size: 11px;\r\n                        padding: 6px;\r\n                    }\r\n                    \r\n                    .header-jour, .label-creneau {\r\n                        padding: 8px;\r\n                        font-size: 12px;\r\n                    }\r\n                }\r\n            `}</style>\r\n\r\n            <div className=\"planning-type-apprenants\">\r\n                {/* Navigation */}\r\n                <div className=\"navigation\">\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            backgroundColor: '#6b7280',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '6px',\r\n                            cursor: 'pointer',\r\n                            fontSize: '14px'\r\n                        }}\r\n                    >\r\n                        ← Retour Dashboard\r\n                    </button>\r\n                    <div style={{ fontSize: '14px', color: '#6b7280' }}>\r\n                        Admin: {user?.email}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"container-planning\">\r\n                    <h1 className=\"header-title\">\r\n                        🏫 Planning Type Apprenants\r\n                    </h1>\r\n\r\n                    {/* Sélecteur d'apprenant */}\r\n                    <div className=\"selecteur-section\">\r\n                        <label className=\"selecteur-label\">\r\n                            👥 Sélectionner un apprenant :\r\n                        </label>\r\n                        <select \r\n                            value={apprenantSelectionne?.id || ''}\r\n                            onChange={(e) => handleApprenantChange(e.target.value)}\r\n                            className=\"select-apprenant\"\r\n                        >\r\n                            <option value=\"\">-- Choisir un apprenant --</option>\r\n                            {apprenants.map(apprenant => (\r\n                                <option key={apprenant.id} value={apprenant.id}>\r\n                                    {apprenant.prenom} {apprenant.nom}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n\r\n                    {/* Message d'information */}\r\n                    {message && (\r\n                        <div className={`message ${message.type}`}>\r\n                            {message.text}\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Grille de planning */}\r\n                    <div className=\"grille-container\" style={{ position: 'relative' }}>\r\n                        {loading && (\r\n                            <div className=\"loading-overlay\">\r\n                                <div style={{ color: 'white', fontSize: '18px' }}>\r\n                                    ⏳ Chargement...\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                        \r\n                        <table className=\"grille-planning\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th className=\"header-creneau\"></th>\r\n                                    {jours.map(jour => (\r\n                                        <th key={jour} className=\"header-jour\">\r\n                                            {jour.charAt(0).toUpperCase() + jour.slice(1)}\r\n                                        </th>\r\n                                    ))}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {creneaux.map(creneau => (\r\n                                    <tr key={creneau}>\r\n                                        <td className=\"label-creneau\">\r\n                                            {creneau === 'matin' ? '🌅 Matin' : '🌆 AM'}\r\n                                        </td>\r\n                                        {jours.map(jour => (\r\n                                            <CasePlanning\r\n                                                key={`${jour}-${creneau}`}\r\n                                                jour={jour}\r\n                                                creneau={creneau}\r\n                                            />\r\n                                        ))}\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    {/* Actions et statistiques */}\r\n                    <div className=\"actions-section\">\r\n                        <button \r\n                            onClick={sauvegarderPlanning}\r\n                            disabled={!apprenantSelectionne || loading}\r\n                            className=\"btn-sauvegarder\"\r\n                        >\r\n                            {loading ? '⏳ Sauvegarde...' : '💾 Sauvegarder Planning'}\r\n                        </button>\r\n                        \r\n                        {apprenantSelectionne && (\r\n                            <div className=\"stats-planning\">\r\n                                ℹ️ {nbCreneaux} créneau(s) défini(s) pour {apprenantSelectionne.prenom} {apprenantSelectionne.nom}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n// Protection avec HOC admin\r\nexport default withAuthAdmin(PlanningTypeApprenants, \"Planning Type Apprenants\")",
          "taille": 22078,
          "lignes": 593,
          "dateModif": "2025-08-26T23:27:26.762Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\nimport { withAuthAdmin } from '../components/withAuthAdmin'\r\n\r\nfunction PlanningTypeApprenants({ user, logout, inactivityTime }) {\r\n    const router = useRouter()\r\n    \r\n    // États principaux\r\n    const [apprenants, setApprenants] = useState([])\r\n    const [apprenantSelectionne, setApprenantSelectionne] = useState(null)\r\n    const [lieux, setLieux] = useState([])\r\n    const [planningType, setPlanningType] = useState({})\r\n    const [loading, setLoading] = useState(false)\r\n    const [message, setMessage] = useState(null)\r\n\r\n    // Constantes\r\n    const jours = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi']\r\n    const creneaux = ['matin', 'AM']\r\n\r\n    // Chargement initial des données\r\n    useEffect(() => {\r\n        fetchApprenants()\r\n        fetchLieux()\r\n    }, [])\r\n\r\n    // Fonction pour récupérer les apprenants\r\n    const fetchApprenants = async () => {\r\n        try {\r\n            // Tentative avec vue enrichie\r\n            let { data, error } = await supabase\r\n                .from('apprenants_actifs')\r\n                .select('id, prenom, nom, statut_formation')\r\n                .eq('statut_formation', 'en_cours')\r\n                .order('nom')\r\n\r\n            // Fallback sur table users si vue indisponible\r\n            if (error && error.code === 'PGRST106') {\r\n                console.log('Vue apprenants_actifs non disponible, utilisation table users')\r\n                const result = await supabase\r\n                    .from('users')\r\n                    .select('id, prenom, nom, statut_formation')\r\n                    .eq('role', 'apprenant')\r\n                    .eq('archive', false)\r\n                    .order('nom')\r\n                \r\n                data = result.data\r\n                error = result.error\r\n            }\r\n\r\n            if (error) throw error\r\n            setApprenants(data || [])\r\n        } catch (err) {\r\n            console.error('Erreur chargement apprenants:', err)\r\n            setMessage({\r\n                type: 'error',\r\n                text: 'Erreur lors du chargement des apprenants'\r\n            })\r\n        }\r\n    }\r\n\r\n    // Fonction pour récupérer les lieux\r\n    const fetchLieux = async () => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('lieux')\r\n                .select('id, nom, couleur, initiale')\r\n                .eq('archive', false)\r\n                .order('nom')\r\n\r\n            if (error) throw error\r\n            setLieux(data || [])\r\n        } catch (err) {\r\n            console.error('Erreur chargement lieux:', err)\r\n            setMessage({\r\n                type: 'error',\r\n                text: 'Erreur lors du chargement des lieux'\r\n            })\r\n        }\r\n    }\r\n\r\n    // Fonction pour charger le planning existant d'un apprenant\r\n    const fetchPlanningType = async (apprenantId) => {\r\n        if (!apprenantId) return\r\n\r\n        setLoading(true)\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('planning_apprenants')\r\n                .select(`\r\n                    jour, creneau, lieu_id,\r\n                    lieux:lieu_id (nom, couleur, initiale)\r\n                `)\r\n                .eq('apprenant_id', apprenantId)\r\n                .eq('actif', true)\r\n\r\n            if (error) throw error\r\n\r\n            // Convertir en format grille pour l'interface\r\n            const planning = {}\r\n            data?.forEach(item => {\r\n                const key = `${item.jour}-${item.creneau}`\r\n                planning[key] = {\r\n                    lieu_id: item.lieu_id,\r\n                    lieu_nom: item.lieux?.nom,\r\n                    lieu_couleur: item.lieux?.couleur,\r\n                    lieu_initiale: item.lieux?.initiale\r\n                }\r\n            })\r\n\r\n            setPlanningType(planning)\r\n        } catch (err) {\r\n            console.error('Erreur chargement planning:', err)\r\n            setMessage({\r\n                type: 'error',\r\n                text: 'Erreur lors du chargement du planning'\r\n            })\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    // Gestion changement d'apprenant sélectionné\r\n    const handleApprenantChange = (apprenantId) => {\r\n        const apprenant = apprenants.find(a => a.id === apprenantId)\r\n        setApprenantSelectionne(apprenant)\r\n        setPlanningType({}) // Reset grille\r\n        setMessage(null)\r\n\r\n        if (apprenant) {\r\n            fetchPlanningType(apprenant.id)\r\n        }\r\n    }\r\n\r\n    // Gestion changement d'une case de la grille\r\n    const handleCaseChange = (key, lieuId) => {\r\n        if (lieuId) {\r\n            const lieu = lieux.find(l => l.id === lieuId)\r\n            setPlanningType(prev => ({\r\n                ...prev,\r\n                [key]: {\r\n                    lieu_id: lieuId,\r\n                    lieu_nom: lieu?.nom,\r\n                    lieu_couleur: lieu?.couleur,\r\n                    lieu_initiale: lieu?.initiale\r\n                }\r\n            }))\r\n        } else {\r\n            // Retirer la sélection\r\n            setPlanningType(prev => {\r\n                const newPlanning = { ...prev }\r\n                delete newPlanning[key]\r\n                return newPlanning\r\n            })\r\n        }\r\n    }\r\n\r\n    // Sauvegarde du planning\r\n    const sauvegarderPlanning = async () => {\r\n        if (!apprenantSelectionne) {\r\n            setMessage({\r\n                type: 'error',\r\n                text: 'Veuillez sélectionner un apprenant'\r\n            })\r\n            return\r\n        }\r\n\r\n        setLoading(true)\r\n        try {\r\n            // 1. Supprimer l'ancien planning de cet apprenant\r\n            await supabase\r\n                .from('planning_apprenants')\r\n                .delete()\r\n                .eq('apprenant_id', apprenantSelectionne.id)\r\n\r\n            // 2. Insérer le nouveau planning\r\n            const planningArray = Object.entries(planningType)\r\n                .filter(([key, value]) => value.lieu_id) // Seules les cases avec lieu\r\n                .map(([key, value]) => {\r\n                    const [jour, creneau] = key.split('-')\r\n                    return {\r\n                        apprenant_id: apprenantSelectionne.id,\r\n                        jour,\r\n                        creneau,\r\n                        lieu_id: value.lieu_id\r\n                    }\r\n                })\r\n\r\n            if (planningArray.length > 0) {\r\n                const { error } = await supabase\r\n                    .from('planning_apprenants')\r\n                    .insert(planningArray)\r\n\r\n                if (error) throw error\r\n            }\r\n\r\n            setMessage({\r\n                type: 'success',\r\n                text: `✅ Planning sauvegardé pour ${apprenantSelectionne.prenom} ${apprenantSelectionne.nom} (${planningArray.length} créneaux)`\r\n            })\r\n\r\n        } catch (error) {\r\n            console.error('Erreur sauvegarde:', error)\r\n            setMessage({\r\n                type: 'error',\r\n                text: '❌ Erreur lors de la sauvegarde'\r\n            })\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    // Composant Case de planning\r\n    const CasePlanning = ({ jour, creneau }) => {\r\n        const key = `${jour}-${creneau}`\r\n        const currentValue = planningType[key]\r\n\r\n        return (\r\n            <td className=\"case-planning\">\r\n                <select\r\n                    value={currentValue?.lieu_id || ''}\r\n                    onChange={(e) => handleCaseChange(key, e.target.value)}\r\n                    className=\"select-lieu\"\r\n                    style={{\r\n                        backgroundColor: currentValue?.lieu_couleur || 'rgba(255, 255, 255, 0.9)',\r\n                        color: currentValue?.lieu_couleur ? 'white' : '#374151',\r\n                        fontWeight: currentValue?.lieu_couleur ? 'bold' : 'normal'\r\n                    }}\r\n                    disabled={!apprenantSelectionne}\r\n                >\r\n                    <option value=\"\">--</option>\r\n                    {lieux.map(lieu => (\r\n                        <option key={lieu.id} value={lieu.id}>\r\n                            {lieu.initiale || lieu.nom}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </td>\r\n        )\r\n    }\r\n\r\n    // Statistiques du planning\r\n    const nbCreneaux = Object.keys(planningType).length\r\n\r\n    return (\r\n        <>\r\n            {/* Styles CSS intégrés */}\r\n            <style jsx>{`\r\n                .planning-type-apprenants {\r\n                    min-height: 100vh;\r\n                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n                    padding: 20px;\r\n                }\r\n\r\n                .container-planning {\r\n                    max-width: 1200px;\r\n                    margin: 0 auto;\r\n                    background: rgba(255, 255, 255, 0.1);\r\n                    backdrop-filter: blur(20px);\r\n                    border-radius: 20px;\r\n                    border: 1px solid rgba(255, 255, 255, 0.2);\r\n                    padding: 30px;\r\n                }\r\n\r\n                .header-title {\r\n                    color: white;\r\n                    font-size: 28px;\r\n                    font-weight: bold;\r\n                    text-align: center;\r\n                    margin-bottom: 30px;\r\n                    text-shadow: 0 2px 4px rgba(0,0,0,0.3);\r\n                }\r\n\r\n                .navigation {\r\n                    background: rgba(255, 255, 255, 0.95);\r\n                    border-radius: 12px;\r\n                    padding: 8px 20px;\r\n                    margin-bottom: 20px;\r\n                    display: flex;\r\n                    justify-content: space-between;\r\n                    align-items: center;\r\n                }\r\n\r\n                .selecteur-section {\r\n                    background: rgba(255, 255, 255, 0.1);\r\n                    border-radius: 15px;\r\n                    padding: 25px;\r\n                    margin-bottom: 30px;\r\n                    border: 1px solid rgba(255, 255, 255, 0.2);\r\n                }\r\n\r\n                .selecteur-label {\r\n                    color: white;\r\n                    font-size: 18px;\r\n                    font-weight: bold;\r\n                    margin-bottom: 15px;\r\n                    display: block;\r\n                }\r\n\r\n                .select-apprenant {\r\n                    width: 100%;\r\n                    max-width: 400px;\r\n                    padding: 12px 16px;\r\n                    border: none;\r\n                    border-radius: 10px;\r\n                    background: rgba(255, 255, 255, 0.95);\r\n                    font-size: 16px;\r\n                    font-weight: 500;\r\n                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n                    cursor: pointer;\r\n                }\r\n\r\n                .grille-container {\r\n                    background: rgba(255, 255, 255, 0.1);\r\n                    border-radius: 15px;\r\n                    padding: 20px;\r\n                    margin: 20px 0;\r\n                    border: 1px solid rgba(255, 255, 255, 0.2);\r\n                }\r\n\r\n                .grille-planning {\r\n                    width: 100%;\r\n                    border-collapse: collapse;\r\n                    background: rgba(255, 255, 255, 0.05);\r\n                    border-radius: 15px;\r\n                    overflow: hidden;\r\n                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\r\n                }\r\n\r\n                .header-jour, .header-creneau {\r\n                    background: rgba(0, 0, 0, 0.3);\r\n                    color: white;\r\n                    padding: 15px;\r\n                    font-weight: bold;\r\n                    text-align: center;\r\n                    font-size: 14px;\r\n                    border: 1px solid rgba(255, 255, 255, 0.1);\r\n                }\r\n\r\n                .label-creneau {\r\n                    background: rgba(0, 0, 0, 0.2);\r\n                    color: white;\r\n                    padding: 15px;\r\n                    font-weight: bold;\r\n                    text-align: center;\r\n                    width: 100px;\r\n                    font-size: 13px;\r\n                    border: 1px solid rgba(255, 255, 255, 0.1);\r\n                }\r\n\r\n                .case-planning {\r\n                    padding: 8px;\r\n                    border: 1px solid rgba(255, 255, 255, 0.2);\r\n                    text-align: center;\r\n                    background: rgba(255, 255, 255, 0.05);\r\n                    transition: background-color 0.3s ease;\r\n                }\r\n\r\n                .case-planning:hover {\r\n                    background: rgba(255, 255, 255, 0.1);\r\n                }\r\n\r\n                .select-lieu {\r\n                    width: 100%;\r\n                    padding: 8px;\r\n                    border: none;\r\n                    border-radius: 6px;\r\n                    text-align: center;\r\n                    font-size: 13px;\r\n                    cursor: pointer;\r\n                    transition: all 0.3s ease;\r\n                }\r\n\r\n                .select-lieu:disabled {\r\n                    opacity: 0.5;\r\n                    cursor: not-allowed;\r\n                }\r\n\r\n                .actions-section {\r\n                    background: rgba(255, 255, 255, 0.1);\r\n                    border-radius: 15px;\r\n                    padding: 25px;\r\n                    text-align: center;\r\n                    border: 1px solid rgba(255, 255, 255, 0.2);\r\n                }\r\n\r\n                .btn-sauvegarder {\r\n                    background: linear-gradient(135deg, #4CAF50, #45a049);\r\n                    color: white;\r\n                    border: none;\r\n                    padding: 15px 30px;\r\n                    border-radius: 10px;\r\n                    font-size: 16px;\r\n                    font-weight: bold;\r\n                    cursor: pointer;\r\n                    transition: transform 0.2s ease;\r\n                    box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);\r\n                }\r\n\r\n                .btn-sauvegarder:hover:not(:disabled) {\r\n                    transform: translateY(-2px);\r\n                    box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);\r\n                }\r\n\r\n                .btn-sauvegarder:disabled {\r\n                    opacity: 0.5;\r\n                    cursor: not-allowed;\r\n                    transform: none;\r\n                }\r\n\r\n                .stats-planning {\r\n                    margin-top: 15px;\r\n                    color: white;\r\n                    font-size: 16px;\r\n                    font-style: italic;\r\n                    opacity: 0.9;\r\n                }\r\n\r\n                .message {\r\n                    padding: 15px 20px;\r\n                    border-radius: 10px;\r\n                    margin: 20px 0;\r\n                    font-weight: 500;\r\n                    text-align: center;\r\n                }\r\n\r\n                .message.success {\r\n                    background: rgba(76, 175, 80, 0.2);\r\n                    color: #4CAF50;\r\n                    border: 1px solid rgba(76, 175, 80, 0.3);\r\n                }\r\n\r\n                .message.error {\r\n                    background: rgba(244, 67, 54, 0.2);\r\n                    color: #f44336;\r\n                    border: 1px solid rgba(244, 67, 54, 0.3);\r\n                }\r\n\r\n                .loading-overlay {\r\n                    position: absolute;\r\n                    top: 0;\r\n                    left: 0;\r\n                    right: 0;\r\n                    bottom: 0;\r\n                    background: rgba(0, 0, 0, 0.1);\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    border-radius: 15px;\r\n                }\r\n\r\n                @media (max-width: 768px) {\r\n                    .planning-type-apprenants {\r\n                        padding: 10px;\r\n                    }\r\n                    \r\n                    .container-planning {\r\n                        padding: 20px;\r\n                    }\r\n                    \r\n                    .grille-planning {\r\n                        font-size: 12px;\r\n                    }\r\n                    \r\n                    .select-lieu {\r\n                        font-size: 11px;\r\n                        padding: 6px;\r\n                    }\r\n                    \r\n                    .header-jour, .label-creneau {\r\n                        padding: 8px;\r\n                        font-size: 12px;\r\n                    }\r\n                }\r\n            `}</style>\r\n\r\n            <div className=\"planning-type-apprenants\">\r\n                {/* Navigation */}\r\n                <div className=\"navigation\">\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            backgroundColor: '#6b7280',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '6px',\r\n                            cursor: 'pointer',\r\n                            fontSize: '14px'\r\n                        }}\r\n                    >\r\n                        ← Retour Dashboard\r\n                    </button>\r\n                    <div style={{ fontSize: '14px', color: '#6b7280' }}>\r\n                        Admin: {user?.email}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"container-planning\">\r\n                    <h1 className=\"header-title\">\r\n                        🏫 Planning Type Apprenants\r\n                    </h1>\r\n\r\n                    {/* Sélecteur d'apprenant */}\r\n                    <div className=\"selecteur-section\">\r\n                        <label className=\"selecteur-label\">\r\n                            👥 Sélectionner un apprenant :\r\n                        </label>\r\n                        <select \r\n                            value={apprenantSelectionne?.id || ''}\r\n                            onChange={(e) => handleApprenantChange(e.target.value)}\r\n                            className=\"select-apprenant\"\r\n                        >\r\n                            <option value=\"\">-- Choisir un apprenant --</option>\r\n                            {apprenants.map(apprenant => (\r\n                                <option key={apprenant.id} value={apprenant.id}>\r\n                                    {apprenant.prenom} {apprenant.nom}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n\r\n                    {/* Message d'information */}\r\n                    {message && (\r\n                        <div className={`message ${message.type}`}>\r\n                            {message.text}\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Grille de planning */}\r\n                    <div className=\"grille-container\" style={{ position: 'relative' }}>\r\n                        {loading && (\r\n                            <div className=\"loading-overlay\">\r\n                                <div style={{ color: 'white', fontSize: '18px' }}>\r\n                                    ⏳ Chargement...\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                        \r\n                        <table className=\"grille-planning\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th className=\"header-creneau\"></th>\r\n                                    {jours.map(jour => (\r\n                                        <th key={jour} className=\"header-jour\">\r\n                                            {jour.charAt(0).toUpperCase() + jour.slice(1)}\r\n                                        </th>\r\n                                    ))}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {creneaux.map(creneau => (\r\n                                    <tr key={creneau}>\r\n                                        <td className=\"label-creneau\">\r\n                                            {creneau === 'matin' ? '🌅 Matin' : '🌆 AM'}\r\n                                        </td>\r\n                                        {jours.map(jour => (\r\n                                            <CasePlanning\r\n                                                key={`${jour}-${creneau}`}\r\n                                                jour={jour}\r\n                                                creneau={creneau}\r\n                                            />\r\n                                        ))}\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    {/* Actions et statistiques */}\r\n                    <div className=\"actions-section\">\r\n                        <button \r\n                            onClick={sauvegarderPlanning}\r\n                            disabled={!apprenantSelectionne || loading}\r\n                            className=\"btn-sauvegarder\"\r\n                        >\r\n                            {loading ? '⏳ Sauvegarde...' : '💾 Sauvegarder Planning'}\r\n                        </button>\r\n                        \r\n                        {apprenantSelectionne && (\r\n                            <div className=\"stats-planning\">\r\n                                ℹ️ {nbCreneaux} créneau(s) défini(s) pour {apprenantSelectionne.prenom} {apprenantSelectionne.nom}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n// Protection avec HOC admin\r\nexport default withAuthAdmin(PlanningTypeApprenants, \"Planning Type Apprenants\")",
          "taille": 22078,
          "lignes": 593,
          "dateModif": "2025-08-26T23:27:26.762Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/planning-type-formateurs.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\nimport { withAuthAdmin } from '../components/withAuthAdmin'\r\n\r\nfunction PlanningTypeFormateurs({ user, logout, inactivityTime }) {\r\n    const router = useRouter()\r\n    \r\n    // États\r\n    const [formateurs, setFormateurs] = useState([])\r\n    const [lieux, setLieux] = useState([])\r\n    const [formateurSelectionne, setFormateurSelectionne] = useState('')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [message, setMessage] = useState('')\r\n    const [planningData, setPlanningData] = useState({})\r\n    \r\n    // Configuration des jours et créneaux - ✅ AM au lieu d'Après-midi\r\n    const jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi']\r\n    const creneaux = ['Matin', 'AM']\r\n    \r\n    // Configuration des statuts\r\n    const statuts = [\r\n        { key: 'disponible', label: 'Disponible', couleur: '#10b981' },\r\n        { key: 'dispo_except', label: 'Dispo except.', couleur: '#f59e0b' },\r\n        { key: 'indisponible', label: 'Indisponible', couleur: '#6b7280' }\r\n    ]\r\n\r\n    // Charger les données depuis la BDD\r\n    useEffect(() => {\r\n        loadFormateurs()\r\n        loadLieux()\r\n        initializePlanning()\r\n    }, [])\r\n\r\n    // ✅ NOUVEAU: Pré-sélection formateur depuis URL\r\n    useEffect(() => {\r\n        if (formateurs.length > 0) {\r\n            const params = new URLSearchParams(window.location.search)\r\n            const formateurUrl = params.get('formateur')\r\n            if (formateurUrl && formateurs.find(f => f.id === formateurUrl)) {\r\n                console.log('✅ Pré-sélection formateur depuis URL:', formateurUrl)\r\n                setFormateurSelectionne(formateurUrl)\r\n                handleFormateurChange(formateurUrl)\r\n            }\r\n        }\r\n    }, [formateurs])\r\n\r\n    const loadFormateurs = async () => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('users')\r\n                .select('id, prenom, nom')\r\n                .eq('role', 'formateur')\r\n                .eq('archive', false)\r\n                .order('nom')\r\n\r\n            if (error) {\r\n                console.error('Erreur chargement formateurs:', error)\r\n                setMessage('Erreur lors du chargement des formateurs')\r\n            } else {\r\n                setFormateurs(data || [])\r\n            }\r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n            setMessage('Erreur de connexion à la base de données')\r\n        }\r\n    }\r\n\r\n    const loadLieux = async () => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('lieux')\r\n                .select('id, nom, initiale, couleur')\r\n                .eq('archive', false)\r\n                .order('nom')\r\n\r\n            if (error) {\r\n                console.error('Erreur chargement lieux:', error)\r\n                setMessage('Erreur lors du chargement des lieux')\r\n            } else {\r\n                setLieux(data || [])\r\n            }\r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n            setMessage('Erreur de connexion à la base de données')\r\n        }\r\n    }\r\n\r\n    const initializePlanning = () => {\r\n        const newPlanning = {}\r\n        jours.forEach((jour, dayIndex) => {\r\n            creneaux.forEach((creneau) => {\r\n                const key = `${dayIndex}-${creneau}`\r\n                newPlanning[key] = {\r\n                    statut: 'indisponible',\r\n                    lieu: null,\r\n                    valide: false,\r\n                    sansPreference: false\r\n                }\r\n            })\r\n        })\r\n        setPlanningData(newPlanning)\r\n    }\r\n\r\n    const handleFormateurChange = async (formateurId) => {\r\n        setFormateurSelectionne(formateurId)\r\n        setIsLoading(true)\r\n        \r\n        if (formateurId) {\r\n            await loadPlanningFormateur(formateurId)\r\n        } else {\r\n            initializePlanning()\r\n        }\r\n        \r\n        setIsLoading(false)\r\n    }\r\n\r\n    const loadPlanningFormateur = async (formateurId) => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .select(`\r\n                    id,\r\n                    jour,\r\n                    creneau,\r\n                    statut,\r\n                    lieu_id,\r\n                    valide,\r\n                    lieux:lieu_id (\r\n                        id,\r\n                        nom,\r\n                        initiale,\r\n                        couleur\r\n                    )\r\n                `)\r\n                .eq('formateur_id', formateurId)\r\n\r\n            if (error) {\r\n                console.error('Erreur chargement planning:', error)\r\n                setMessage('Erreur lors du chargement du planning')\r\n                initializePlanning()\r\n                return\r\n            }\r\n\r\n            const newPlanning = {}\r\n            \r\n            // Initialiser tous les créneaux comme indisponibles\r\n            jours.forEach((jour, dayIndex) => {\r\n                creneaux.forEach((creneau) => {\r\n                    const key = `${dayIndex}-${creneau}`\r\n                    newPlanning[key] = {\r\n                        statut: 'indisponible',\r\n                        lieu: null,\r\n                        valide: false,\r\n                        sansPreference: false\r\n                    }\r\n                })\r\n            })\r\n\r\n            // Remplir avec les données existantes\r\n            if (data && data.length > 0) {\r\n                data.forEach(item => {\r\n                    const dayIndex = jours.indexOf(item.jour)\r\n                    if (dayIndex !== -1) {\r\n                        const key = `${dayIndex}-${item.creneau}`\r\n                        newPlanning[key] = {\r\n                            statut: item.statut,\r\n                            lieu: item.lieux,\r\n                            valide: item.valide || false,\r\n                            // ✅ NOUVEAU: Détecter \"sans préférence\" si lieu_id est null mais statut disponible\r\n                            sansPreference: item.lieu_id === null && item.statut !== 'indisponible'\r\n                        }\r\n                    }\r\n                })\r\n                setMessage(`Planning chargé : ${data.length} créneaux déclarés par ${getFormateurNom()}`)\r\n            } else {\r\n                setMessage(`Aucun planning type déclaré par ${getFormateurNom()}`)\r\n            }\r\n\r\n            setPlanningData(newPlanning)\r\n\r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n            setMessage('Erreur lors du chargement du planning')\r\n            initializePlanning()\r\n        }\r\n    }\r\n\r\n    const toggleValidation = (dayIndex, creneau) => {\r\n        const key = `${dayIndex}-${creneau}`\r\n        setPlanningData(prev => ({\r\n            ...prev,\r\n            [key]: {\r\n                ...prev[key],\r\n                valide: !prev[key].valide\r\n            }\r\n        }))\r\n    }\r\n\r\n    const validerTout = () => {\r\n        setPlanningData(prev => {\r\n            const newData = {...prev}\r\n            Object.keys(newData).forEach(key => {\r\n                if (newData[key].statut !== 'indisponible') {\r\n                    newData[key].valide = true\r\n                }\r\n            })\r\n            return newData\r\n        })\r\n    }\r\n\r\n    const devaliderTout = () => {\r\n        setPlanningData(prev => {\r\n            const newData = {...prev}\r\n            Object.keys(newData).forEach(key => {\r\n                newData[key].valide = false\r\n            })\r\n            return newData\r\n        })\r\n    }\r\n\r\n    const getStats = () => {\r\n        const creneauxDeclares = Object.values(planningData).filter(d => d.statut !== 'indisponible').length\r\n        const creneauxValides = Object.values(planningData).filter(d => d.valide === true).length\r\n        return { creneauxDeclares, creneauxValides }\r\n    }\r\n\r\n    const getCouleurStatut = (statut) => {\r\n        const statutObj = statuts.find(s => s.key === statut)\r\n        return statutObj ? statutObj.couleur : '#6b7280'\r\n    }\r\n\r\n    const getFormateurNom = () => {\r\n        const formateur = formateurs.find(f => f.id === formateurSelectionne)\r\n        return formateur ? `${formateur.prenom} ${formateur.nom}` : ''\r\n    }\r\n\r\n    // ✅ NOUVEAU: Fonction d'envoi de message automatique\r\n    const envoyerMessageFormateur = async (formateurId, stats) => {\r\n        try {\r\n            const formateur = formateurs.find(f => f.id === formateurId)\r\n            if (!formateur) {\r\n                console.error('Formateur non trouvé pour envoi message')\r\n                return\r\n            }\r\n\r\n            const formateurNom = `${formateur.prenom} ${formateur.nom}`\r\n            \r\n            const { error } = await supabase\r\n                .from('messages')\r\n                .insert({\r\n                    expediteur_id: null, // null = admin\r\n                    destinataire_id: formateurId,\r\n                    expediteur: 'Coordination ACLEF',\r\n                    destinataire: formateurNom,\r\n                    objet: 'Planning type validé',\r\n                    contenu: `Bonjour ${formateur.prenom},\r\n\r\nVotre planning type a été validé avec succès !\r\n\r\n📋 Résumé de la validation :\r\n• ${stats.creneauxValides} créneaux validés sur ${stats.creneauxDeclares} déclarés\r\n• Votre planning est maintenant disponible dans le système de coordination\r\n\r\nVous pouvez consulter votre planning type validé dans votre interface formateur, section \"Mon planning type\".\r\n\r\nMerci pour votre collaboration !\r\n\r\nL'équipe de coordination ACLEF`,\r\n                    type: 'planning',\r\n                    lu: false,\r\n                    archive: false,\r\n                    statut_validation: 'valide',\r\n                    date: new Date().toISOString().split('T')[0],\r\n                    heure: new Date().toTimeString().slice(0, 5)\r\n                })\r\n\r\n            if (error) {\r\n                console.error('Erreur envoi message automatique:', error)\r\n                // Ne pas faire échouer la validation pour un problème de message\r\n            } else {\r\n                console.log('✅ Message automatique envoyé à ', formateurNom)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n            // Ne pas faire échouer la validation pour un problème de message\r\n        }\r\n    }\r\n\r\n    const handleValiderTransmettre = async () => {\r\n        if (!formateurSelectionne) {\r\n            setMessage('Aucun formateur sélectionné')\r\n            return\r\n        }\r\n\r\n        setIsLoading(true)\r\n        setMessage('Sauvegarde des validations en cours...')\r\n\r\n        try {\r\n            // Préparer les mises à jour pour chaque créneau\r\n            const updates = []\r\n            \r\n            Object.keys(planningData).forEach((key) => {\r\n                const [dayIndex, creneau] = key.split('-')\r\n                const jour = jours[parseInt(dayIndex)]\r\n                const cellData = planningData[key]\r\n                \r\n                if (cellData.statut !== 'indisponible') {\r\n                    updates.push({\r\n                        formateur_id: formateurSelectionne,\r\n                        jour: jour,\r\n                        creneau: creneau,\r\n                        valide: cellData.valide,\r\n                        valide_par: cellData.valide ? 'Admin' : null,\r\n                        date_validation: cellData.valide ? new Date().toISOString() : null\r\n                    })\r\n                }\r\n            })\r\n\r\n            // Mettre à jour chaque créneau individuellement\r\n            for (const update of updates) {\r\n                const { error } = await supabase\r\n                    .from('planning_type_formateurs')\r\n                    .update({\r\n                        valide: update.valide,\r\n                        valide_par: update.valide_par,\r\n                        date_validation: update.date_validation,\r\n                        updated_at: new Date().toISOString()\r\n                    })\r\n                    .eq('formateur_id', update.formateur_id)\r\n                    .eq('jour', update.jour)\r\n                    .eq('creneau', update.creneau)\r\n\r\n                if (error) {\r\n                    throw new Error(`Erreur mise à jour ${update.jour} ${update.creneau}: ${error.message}`)\r\n                }\r\n            }\r\n\r\n            const stats = getStats()\r\n            const formateurNom = getFormateurNom()\r\n            \r\n            // ✅ NOUVEAU: Envoyer message automatique au formateur\r\n            await envoyerMessageFormateur(formateurSelectionne, stats)\r\n            \r\n            setMessage(`✅ Planning validé et transmis ! ${stats.creneauxValides} créneau(x) validé(s) sur ${stats.creneauxDeclares} pour ${formateurNom}. Les données sont maintenant disponibles dans le planning coordinateur. Message de confirmation envoyé au formateur.`)\r\n\r\n        } catch (error) {\r\n            console.error('Erreur sauvegarde:', error)\r\n            setMessage(`❌ Erreur lors de la validation : ${error.message}`)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            padding: '40px 60px'\r\n        }}>\r\n            {/* Header avec navigation */}\r\n            <div style={{\r\n                backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                borderRadius: '12px',\r\n                padding: '8px 20px',\r\n                marginBottom: '20px',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                backdropFilter: 'blur(10px)'\r\n            }}>\r\n                <nav style={{ fontSize: '14px' }}>\r\n                    <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                    <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                    <span style={{ color: '#8b5cf6', fontWeight: '500' }}>Planning Type Formateurs</span>\r\n                </nav>\r\n                \r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        Accueil\r\n                    </button>\r\n\r\n                    {/* Status avec compte à rebours + Déconnexion */}\r\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                        {/* Badge de statut avec compte à rebours */}\r\n                        <div style={{\r\n                            padding: '4px 8px',\r\n                            fontSize: '12px',\r\n                            fontWeight: '600',\r\n                            borderRadius: '6px',\r\n                            backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n                            color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#f59e0b' : '#10b981',\r\n                            border: '1px solid',\r\n                            borderColor: inactivityTime >= 240 ? '#fecaca' : inactivityTime >= 180 ? '#fde68a' : '#bbf7d0'\r\n                        }}>\r\n                            Status : {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n                                     inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                     inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                     `🟢 ACTIF`}\r\n                        </div>\r\n                        \r\n                        {/* Bouton déconnexion */}\r\n                        <button\r\n                            onClick={logout}\r\n                            style={{\r\n                                padding: '8px 16px',\r\n                                background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                cursor: 'pointer',\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                                gap: '6px'\r\n                            }}\r\n                        >\r\n                            🚪 Déconnexion\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Titre principal */}\r\n            <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n                <h1 style={{\r\n                    fontSize: '36px',\r\n                    fontWeight: 'bold',\r\n                    color: 'white',\r\n                    marginBottom: '10px'\r\n                }}>\r\n                    Planning Type Formateurs\r\n                </h1>\r\n                <p style={{ color: 'rgba(255,255,255,0.8)', fontSize: '16px' }}>\r\n                    Consultez et validez les déclarations de planning type des formateurs\r\n                </p>\r\n            </div>\r\n\r\n            {/* Message de notification */}\r\n            {message && (\r\n                <div style={{\r\n                    backgroundColor: message.includes('✅') ? '#d1fae5' : message.includes('❌') ? '#fee2e2' : '#dbeafe',\r\n                    color: message.includes('✅') ? '#065f46' : message.includes('❌') ? '#991b1b' : '#1e40af',\r\n                    padding: '15px',\r\n                    borderRadius: '8px',\r\n                    marginBottom: '20px',\r\n                    textAlign: 'center',\r\n                    fontWeight: '500'\r\n                }}>\r\n                    {message}\r\n                </div>\r\n            )}\r\n\r\n            {/* Sélection du formateur */}\r\n            <div style={{\r\n                backgroundColor: 'white',\r\n                borderRadius: '12px',\r\n                padding: '20px',\r\n                marginBottom: '20px',\r\n                boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n            }}>\r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '20px', flexWrap: 'wrap' }}>\r\n                    <label style={{ \r\n                        fontSize: '16px', \r\n                        fontWeight: '600', \r\n                        color: '#374151',\r\n                        minWidth: '200px'\r\n                    }}>\r\n                        Sélectionner un formateur :\r\n                    </label>\r\n                    <select\r\n                        value={formateurSelectionne}\r\n                        onChange={(e) => handleFormateurChange(e.target.value)}\r\n                        style={{\r\n                            flex: 1,\r\n                            minWidth: '300px',\r\n                            padding: '12px',\r\n                            border: '2px solid #e5e7eb',\r\n                            borderRadius: '8px',\r\n                            fontSize: '16px',\r\n                            fontWeight: '500',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        <option value=\"\">-- Choisir un formateur --</option>\r\n                        {formateurs.map((formateur) => (\r\n                            <option key={formateur.id} value={formateur.id}>\r\n                                {formateur.prenom} {formateur.nom}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    \r\n                    {formateurSelectionne && (\r\n                        <button\r\n                            onClick={handleValiderTransmettre}\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '12px 24px',\r\n                                background: isLoading ? '#9ca3af' : 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                fontSize: '16px',\r\n                                fontWeight: '600',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                                boxShadow: '0 4px 12px rgba(16, 185, 129, 0.3)',\r\n                                transition: 'transform 0.2s'\r\n                            }}\r\n                            onMouseOver={(e) => !isLoading && (e.target.style.transform = 'translateY(-2px)')}\r\n                            onMouseOut={(e) => !isLoading && (e.target.style.transform = 'translateY(0)')}\r\n                        >\r\n                            {isLoading ? 'SAUVEGARDE...' : 'VALIDER & TRANSMETTRE'}\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Légende des statuts */}\r\n            {formateurSelectionne && (\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    marginBottom: '20px',\r\n                    backdropFilter: 'blur(10px)'\r\n                }}>\r\n                    <h3 style={{ \r\n                        fontSize: '16px', \r\n                        fontWeight: '600', \r\n                        color: '#374151', \r\n                        marginBottom: '15px' \r\n                    }}>\r\n                        Légende des statuts :\r\n                    </h3>\r\n                    <div style={{ \r\n                        display: 'grid', \r\n                        gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', \r\n                        gap: '15px' \r\n                    }}>\r\n                        {statuts.map(statut => (\r\n                            <div key={statut.key} style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                <div style={{\r\n                                    width: '24px',\r\n                                    height: '24px',\r\n                                    backgroundColor: statut.couleur,\r\n                                    borderRadius: '6px',\r\n                                    border: '2px solid white',\r\n                                    boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n                                }}></div>\r\n                                <span style={{ fontSize: '14px', fontWeight: '500' }}>\r\n                                    {statut.label}\r\n                                </span>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div style={{\r\n                        marginTop: '15px',\r\n                        padding: '15px',\r\n                        backgroundColor: 'rgba(59, 130, 246, 0.1)',\r\n                        borderRadius: '8px',\r\n                        border: '1px solid rgba(59, 130, 246, 0.2)'\r\n                    }}>\r\n                        <p style={{ fontSize: '14px', color: '#1d4ed8', margin: 0 }}>\r\n                            <strong>💡 Processus :</strong> Consultez les déclarations, validez les créneaux souhaités, puis transmettez le planning validé au formateur.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Tableau du planning type */}\r\n            {formateurSelectionne && (\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    overflow: 'hidden',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    {/* Header du tableau */}\r\n                    <div style={{\r\n                        background: 'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)',\r\n                        color: 'white',\r\n                        padding: '20px 24px'\r\n                    }}>\r\n                        <h2 style={{ \r\n                            fontSize: '20px', \r\n                            fontWeight: '600', \r\n                            margin: 0 \r\n                        }}>\r\n                            Planning type de {getFormateurNom()}\r\n                        </h2>\r\n                        <p style={{ \r\n                            fontSize: '14px', \r\n                            margin: '5px 0 0 0', \r\n                            opacity: 0.9 \r\n                        }}>\r\n                            Validez les créneaux que vous souhaitez utiliser dans le planning coordinateur\r\n                        </p>\r\n                    </div>\r\n\r\n                    {/* Tableau responsive */}\r\n                    <div style={{ overflowX: 'auto' }}>\r\n                        <table style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                            <thead>\r\n                                <tr style={{ backgroundColor: '#f9fafb' }}>\r\n                                    <th style={{\r\n                                        border: '1px solid #e5e7eb',\r\n                                        padding: '16px',\r\n                                        textAlign: 'left',\r\n                                        fontWeight: '600',\r\n                                        color: '#374151',\r\n                                        fontSize: '14px',\r\n                                        minWidth: '120px'\r\n                                    }}>\r\n                                        Créneau\r\n                                    </th>\r\n                                    {jours.map((jour) => (\r\n                                        <th key={jour} style={{\r\n                                            border: '1px solid #e5e7eb',\r\n                                            padding: '16px',\r\n                                            textAlign: 'center',\r\n                                            fontWeight: '600',\r\n                                            color: '#374151',\r\n                                            fontSize: '14px',\r\n                                            minWidth: '180px'\r\n                                        }}>\r\n                                            {jour}\r\n                                        </th>\r\n                                    ))}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {creneaux.map((creneau) => (\r\n                                    <tr key={creneau}>\r\n                                        <td style={{\r\n                                            border: '1px solid #e5e7eb',\r\n                                            padding: '16px',\r\n                                            fontWeight: '600',\r\n                                            color: '#111827',\r\n                                            backgroundColor: '#f9fafb',\r\n                                            fontSize: '14px'\r\n                                        }}>\r\n                                            {creneau}\r\n                                        </td>\r\n                                        {jours.map((jour, dayIndex) => {\r\n                                            const key = `${dayIndex}-${creneau}`\r\n                                            const cellData = planningData[key] || { statut: 'indisponible', lieu: null, valide: false, sansPreference: false }\r\n                                            const couleurStatut = getCouleurStatut(cellData.statut)\r\n                                            \r\n                                            return (\r\n                                                <td key={dayIndex} style={{\r\n                                                    border: '1px solid #e5e7eb',\r\n                                                    padding: '12px',\r\n                                                    backgroundColor: 'white',\r\n                                                    verticalAlign: 'top'\r\n                                                }}>\r\n                                                    {cellData.statut !== 'indisponible' ? (\r\n                                                        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\r\n                                                            {/* Badge statut */}\r\n                                                            <div style={{\r\n                                                                backgroundColor: couleurStatut,\r\n                                                                color: 'white',\r\n                                                                padding: '6px 10px',\r\n                                                                borderRadius: '6px',\r\n                                                                fontSize: '12px',\r\n                                                                fontWeight: '600',\r\n                                                                textAlign: 'center'\r\n                                                            }}>\r\n                                                                {statuts.find(s => s.key === cellData.statut)?.label}\r\n                                                            </div>\r\n                                                            \r\n                                                            {/* ✅ CORRECTION: Affichage lieu OU \"Sans Préférence\" */}\r\n                                                            {cellData.lieu ? (\r\n                                                                <div style={{\r\n                                                                    backgroundColor: cellData.lieu.couleur || '#6b7280',\r\n                                                                    color: 'white',\r\n                                                                    padding: '6px 10px',\r\n                                                                    borderRadius: '6px',\r\n                                                                    fontSize: '11px',\r\n                                                                    fontWeight: '600',\r\n                                                                    textAlign: 'center'\r\n                                                                }}>\r\n                                                                    {cellData.lieu.initiale} - {cellData.lieu.nom}\r\n                                                                </div>\r\n                                                            ) : cellData.sansPreference ? (\r\n                                                                <div style={{\r\n                                                                    backgroundColor: '#6b7280',\r\n                                                                    color: 'white',\r\n                                                                    padding: '6px 10px',\r\n                                                                    borderRadius: '6px',\r\n                                                                    fontSize: '11px',\r\n                                                                    fontWeight: '600',\r\n                                                                    textAlign: 'center'\r\n                                                                }}>\r\n                                                                    SP - Sans Préférence\r\n                                                                </div>\r\n                                                            ) : null}\r\n                                                            \r\n                                                            {/* Checkbox validation */}\r\n                                                            <label style={{\r\n                                                                display: 'flex',\r\n                                                                alignItems: 'center',\r\n                                                                gap: '6px',\r\n                                                                fontSize: '12px',\r\n                                                                cursor: 'pointer',\r\n                                                                padding: '4px',\r\n                                                                borderRadius: '4px',\r\n                                                                backgroundColor: cellData.valide ? '#d1fae5' : '#f3f4f6'\r\n                                                            }}>\r\n                                                                <input\r\n                                                                    type=\"checkbox\"\r\n                                                                    checked={cellData.valide}\r\n                                                                    onChange={() => toggleValidation(dayIndex, creneau)}\r\n                                                                    style={{ \r\n                                                                        width: '16px', \r\n                                                                        height: '16px',\r\n                                                                        cursor: 'pointer'\r\n                                                                    }}\r\n                                                                />\r\n                                                                <span style={{ \r\n                                                                    fontWeight: '600',\r\n                                                                    color: cellData.valide ? '#065f46' : '#6b7280'\r\n                                                                }}>\r\n                                                                    {cellData.valide ? 'Validé' : 'À valider'}\r\n                                                                </span>\r\n                                                            </label>\r\n                                                        </div>\r\n                                                    ) : (\r\n                                                        <div style={{\r\n                                                            color: '#9ca3af',\r\n                                                            fontSize: '12px',\r\n                                                            textAlign: 'center',\r\n                                                            fontStyle: 'italic',\r\n                                                            padding: '10px'\r\n                                                        }}>\r\n                                                            Indisponible\r\n                                                        </div>\r\n                                                    )}\r\n                                                </td>\r\n                                            )\r\n                                        })}\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    {/* Footer avec actions */}\r\n                    <div style={{\r\n                        backgroundColor: '#f9fafb',\r\n                        padding: '20px 24px',\r\n                        borderTop: '1px solid #e5e7eb',\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                        alignItems: 'center',\r\n                        flexWrap: 'wrap',\r\n                        gap: '15px'\r\n                    }}>\r\n                        <div style={{ fontSize: '14px', color: '#6b7280' }}>\r\n                            <strong>Créneaux déclarés :</strong> {getStats().creneauxDeclares} • <strong>Validés :</strong> {getStats().creneauxValides}\r\n                        </div>\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                onClick={devaliderTout}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: '500',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                Tout dévalider\r\n                            </button>\r\n                            <button\r\n                                onClick={validerTout}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: '#3b82f6',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: '500',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                Tout valider\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Message d'aide si aucun formateur sélectionné */}\r\n            {!formateurSelectionne && (\r\n                <div style={{\r\n                    backgroundColor: 'rgba(59, 130, 246, 0.1)',\r\n                    border: '2px solid rgba(59, 130, 246, 0.2)',\r\n                    borderRadius: '12px',\r\n                    padding: '40px',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    <div style={{ fontSize: '48px', marginBottom: '16px' }}>👨‍🏫</div>\r\n                    <h3 style={{\r\n                        fontSize: '18px',\r\n                        fontWeight: '600',\r\n                        color: '#1d4ed8',\r\n                        marginBottom: '8px'\r\n                    }}>\r\n                        Sélectionnez un formateur pour commencer\r\n                    </h3>\r\n                    <p style={{ color: '#3b82f6', fontSize: '14px' }}>\r\n                        Choisissez un formateur dans la liste déroulante ci-dessus pour consulter et valider son planning type.\r\n                    </p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC - Page titre personnalisé\r\nexport default withAuthAdmin(PlanningTypeFormateurs, \"Planning Type Formateurs\")",
          "taille": 39925,
          "lignes": 838,
          "dateModif": "2025-08-29T17:16:05.196Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\nimport { withAuthAdmin } from '../components/withAuthAdmin'\r\n\r\nfunction PlanningTypeFormateurs({ user, logout, inactivityTime }) {\r\n    const router = useRouter()\r\n    \r\n    // États\r\n    const [formateurs, setFormateurs] = useState([])\r\n    const [lieux, setLieux] = useState([])\r\n    const [formateurSelectionne, setFormateurSelectionne] = useState('')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [message, setMessage] = useState('')\r\n    const [planningData, setPlanningData] = useState({})\r\n    \r\n    // Configuration des jours et créneaux - ✅ AM au lieu d'Après-midi\r\n    const jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi']\r\n    const creneaux = ['Matin', 'AM']\r\n    \r\n    // Configuration des statuts\r\n    const statuts = [\r\n        { key: 'disponible', label: 'Disponible', couleur: '#10b981' },\r\n        { key: 'dispo_except', label: 'Dispo except.', couleur: '#f59e0b' },\r\n        { key: 'indisponible', label: 'Indisponible', couleur: '#6b7280' }\r\n    ]\r\n\r\n    // Charger les données depuis la BDD\r\n    useEffect(() => {\r\n        loadFormateurs()\r\n        loadLieux()\r\n        initializePlanning()\r\n    }, [])\r\n\r\n    // ✅ NOUVEAU: Pré-sélection formateur depuis URL\r\n    useEffect(() => {\r\n        if (formateurs.length > 0) {\r\n            const params = new URLSearchParams(window.location.search)\r\n            const formateurUrl = params.get('formateur')\r\n            if (formateurUrl && formateurs.find(f => f.id === formateurUrl)) {\r\n                console.log('✅ Pré-sélection formateur depuis URL:', formateurUrl)\r\n                setFormateurSelectionne(formateurUrl)\r\n                handleFormateurChange(formateurUrl)\r\n            }\r\n        }\r\n    }, [formateurs])\r\n\r\n    const loadFormateurs = async () => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('users')\r\n                .select('id, prenom, nom')\r\n                .eq('role', 'formateur')\r\n                .eq('archive', false)\r\n                .order('nom')\r\n\r\n            if (error) {\r\n                console.error('Erreur chargement formateurs:', error)\r\n                setMessage('Erreur lors du chargement des formateurs')\r\n            } else {\r\n                setFormateurs(data || [])\r\n            }\r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n            setMessage('Erreur de connexion à la base de données')\r\n        }\r\n    }\r\n\r\n    const loadLieux = async () => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('lieux')\r\n                .select('id, nom, initiale, couleur')\r\n                .eq('archive', false)\r\n                .order('nom')\r\n\r\n            if (error) {\r\n                console.error('Erreur chargement lieux:', error)\r\n                setMessage('Erreur lors du chargement des lieux')\r\n            } else {\r\n                setLieux(data || [])\r\n            }\r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n            setMessage('Erreur de connexion à la base de données')\r\n        }\r\n    }\r\n\r\n    const initializePlanning = () => {\r\n        const newPlanning = {}\r\n        jours.forEach((jour, dayIndex) => {\r\n            creneaux.forEach((creneau) => {\r\n                const key = `${dayIndex}-${creneau}`\r\n                newPlanning[key] = {\r\n                    statut: 'indisponible',\r\n                    lieu: null,\r\n                    valide: false,\r\n                    sansPreference: false\r\n                }\r\n            })\r\n        })\r\n        setPlanningData(newPlanning)\r\n    }\r\n\r\n    const handleFormateurChange = async (formateurId) => {\r\n        setFormateurSelectionne(formateurId)\r\n        setIsLoading(true)\r\n        \r\n        if (formateurId) {\r\n            await loadPlanningFormateur(formateurId)\r\n        } else {\r\n            initializePlanning()\r\n        }\r\n        \r\n        setIsLoading(false)\r\n    }\r\n\r\n    const loadPlanningFormateur = async (formateurId) => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .select(`\r\n                    id,\r\n                    jour,\r\n                    creneau,\r\n                    statut,\r\n                    lieu_id,\r\n                    valide,\r\n                    lieux:lieu_id (\r\n                        id,\r\n                        nom,\r\n                        initiale,\r\n                        couleur\r\n                    )\r\n                `)\r\n                .eq('formateur_id', formateurId)\r\n\r\n            if (error) {\r\n                console.error('Erreur chargement planning:', error)\r\n                setMessage('Erreur lors du chargement du planning')\r\n                initializePlanning()\r\n                return\r\n            }\r\n\r\n            const newPlanning = {}\r\n            \r\n            // Initialiser tous les créneaux comme indisponibles\r\n            jours.forEach((jour, dayIndex) => {\r\n                creneaux.forEach((creneau) => {\r\n                    const key = `${dayIndex}-${creneau}`\r\n                    newPlanning[key] = {\r\n                        statut: 'indisponible',\r\n                        lieu: null,\r\n                        valide: false,\r\n                        sansPreference: false\r\n                    }\r\n                })\r\n            })\r\n\r\n            // Remplir avec les données existantes\r\n            if (data && data.length > 0) {\r\n                data.forEach(item => {\r\n                    const dayIndex = jours.indexOf(item.jour)\r\n                    if (dayIndex !== -1) {\r\n                        const key = `${dayIndex}-${item.creneau}`\r\n                        newPlanning[key] = {\r\n                            statut: item.statut,\r\n                            lieu: item.lieux,\r\n                            valide: item.valide || false,\r\n                            // ✅ NOUVEAU: Détecter \"sans préférence\" si lieu_id est null mais statut disponible\r\n                            sansPreference: item.lieu_id === null && item.statut !== 'indisponible'\r\n                        }\r\n                    }\r\n                })\r\n                setMessage(`Planning chargé : ${data.length} créneaux déclarés par ${getFormateurNom()}`)\r\n            } else {\r\n                setMessage(`Aucun planning type déclaré par ${getFormateurNom()}`)\r\n            }\r\n\r\n            setPlanningData(newPlanning)\r\n\r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n            setMessage('Erreur lors du chargement du planning')\r\n            initializePlanning()\r\n        }\r\n    }\r\n\r\n    const toggleValidation = (dayIndex, creneau) => {\r\n        const key = `${dayIndex}-${creneau}`\r\n        setPlanningData(prev => ({\r\n            ...prev,\r\n            [key]: {\r\n                ...prev[key],\r\n                valide: !prev[key].valide\r\n            }\r\n        }))\r\n    }\r\n\r\n    const validerTout = () => {\r\n        setPlanningData(prev => {\r\n            const newData = {...prev}\r\n            Object.keys(newData).forEach(key => {\r\n                if (newData[key].statut !== 'indisponible') {\r\n                    newData[key].valide = true\r\n                }\r\n            })\r\n            return newData\r\n        })\r\n    }\r\n\r\n    const devaliderTout = () => {\r\n        setPlanningData(prev => {\r\n            const newData = {...prev}\r\n            Object.keys(newData).forEach(key => {\r\n                newData[key].valide = false\r\n            })\r\n            return newData\r\n        })\r\n    }\r\n\r\n    const getStats = () => {\r\n        const creneauxDeclares = Object.values(planningData).filter(d => d.statut !== 'indisponible').length\r\n        const creneauxValides = Object.values(planningData).filter(d => d.valide === true).length\r\n        return { creneauxDeclares, creneauxValides }\r\n    }\r\n\r\n    const getCouleurStatut = (statut) => {\r\n        const statutObj = statuts.find(s => s.key === statut)\r\n        return statutObj ? statutObj.couleur : '#6b7280'\r\n    }\r\n\r\n    const getFormateurNom = () => {\r\n        const formateur = formateurs.find(f => f.id === formateurSelectionne)\r\n        return formateur ? `${formateur.prenom} ${formateur.nom}` : ''\r\n    }\r\n\r\n    // ✅ NOUVEAU: Fonction d'envoi de message automatique\r\n    const envoyerMessageFormateur = async (formateurId, stats) => {\r\n        try {\r\n            const formateur = formateurs.find(f => f.id === formateurId)\r\n            if (!formateur) {\r\n                console.error('Formateur non trouvé pour envoi message')\r\n                return\r\n            }\r\n\r\n            const formateurNom = `${formateur.prenom} ${formateur.nom}`\r\n            \r\n            const { error } = await supabase\r\n                .from('messages')\r\n                .insert({\r\n                    expediteur_id: null, // null = admin\r\n                    destinataire_id: formateurId,\r\n                    expediteur: 'Coordination ACLEF',\r\n                    destinataire: formateurNom,\r\n                    objet: 'Planning type validé',\r\n                    contenu: `Bonjour ${formateur.prenom},\r\n\r\nVotre planning type a été validé avec succès !\r\n\r\n📋 Résumé de la validation :\r\n• ${stats.creneauxValides} créneaux validés sur ${stats.creneauxDeclares} déclarés\r\n• Votre planning est maintenant disponible dans le système de coordination\r\n\r\nVous pouvez consulter votre planning type validé dans votre interface formateur, section \"Mon planning type\".\r\n\r\nMerci pour votre collaboration !\r\n\r\nL'équipe de coordination ACLEF`,\r\n                    type: 'planning',\r\n                    lu: false,\r\n                    archive: false,\r\n                    statut_validation: 'valide',\r\n                    date: new Date().toISOString().split('T')[0],\r\n                    heure: new Date().toTimeString().slice(0, 5)\r\n                })\r\n\r\n            if (error) {\r\n                console.error('Erreur envoi message automatique:', error)\r\n                // Ne pas faire échouer la validation pour un problème de message\r\n            } else {\r\n                console.log('✅ Message automatique envoyé à ', formateurNom)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Erreur:', error)\r\n            // Ne pas faire échouer la validation pour un problème de message\r\n        }\r\n    }\r\n\r\n    const handleValiderTransmettre = async () => {\r\n        if (!formateurSelectionne) {\r\n            setMessage('Aucun formateur sélectionné')\r\n            return\r\n        }\r\n\r\n        setIsLoading(true)\r\n        setMessage('Sauvegarde des validations en cours...')\r\n\r\n        try {\r\n            // Préparer les mises à jour pour chaque créneau\r\n            const updates = []\r\n            \r\n            Object.keys(planningData).forEach((key) => {\r\n                const [dayIndex, creneau] = key.split('-')\r\n                const jour = jours[parseInt(dayIndex)]\r\n                const cellData = planningData[key]\r\n                \r\n                if (cellData.statut !== 'indisponible') {\r\n                    updates.push({\r\n                        formateur_id: formateurSelectionne,\r\n                        jour: jour,\r\n                        creneau: creneau,\r\n                        valide: cellData.valide,\r\n                        valide_par: cellData.valide ? 'Admin' : null,\r\n                        date_validation: cellData.valide ? new Date().toISOString() : null\r\n                    })\r\n                }\r\n            })\r\n\r\n            // Mettre à jour chaque créneau individuellement\r\n            for (const update of updates) {\r\n                const { error } = await supabase\r\n                    .from('planning_type_formateurs')\r\n                    .update({\r\n                        valide: update.valide,\r\n                        valide_par: update.valide_par,\r\n                        date_validation: update.date_validation,\r\n                        updated_at: new Date().toISOString()\r\n                    })\r\n                    .eq('formateur_id', update.formateur_id)\r\n                    .eq('jour', update.jour)\r\n                    .eq('creneau', update.creneau)\r\n\r\n                if (error) {\r\n                    throw new Error(`Erreur mise à jour ${update.jour} ${update.creneau}: ${error.message}`)\r\n                }\r\n            }\r\n\r\n            const stats = getStats()\r\n            const formateurNom = getFormateurNom()\r\n            \r\n            // ✅ NOUVEAU: Envoyer message automatique au formateur\r\n            await envoyerMessageFormateur(formateurSelectionne, stats)\r\n            \r\n            setMessage(`✅ Planning validé et transmis ! ${stats.creneauxValides} créneau(x) validé(s) sur ${stats.creneauxDeclares} pour ${formateurNom}. Les données sont maintenant disponibles dans le planning coordinateur. Message de confirmation envoyé au formateur.`)\r\n\r\n        } catch (error) {\r\n            console.error('Erreur sauvegarde:', error)\r\n            setMessage(`❌ Erreur lors de la validation : ${error.message}`)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            padding: '40px 60px'\r\n        }}>\r\n            {/* Header avec navigation */}\r\n            <div style={{\r\n                backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                borderRadius: '12px',\r\n                padding: '8px 20px',\r\n                marginBottom: '20px',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                backdropFilter: 'blur(10px)'\r\n            }}>\r\n                <nav style={{ fontSize: '14px' }}>\r\n                    <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                    <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                    <span style={{ color: '#8b5cf6', fontWeight: '500' }}>Planning Type Formateurs</span>\r\n                </nav>\r\n                \r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        Accueil\r\n                    </button>\r\n\r\n                    {/* Status avec compte à rebours + Déconnexion */}\r\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                        {/* Badge de statut avec compte à rebours */}\r\n                        <div style={{\r\n                            padding: '4px 8px',\r\n                            fontSize: '12px',\r\n                            fontWeight: '600',\r\n                            borderRadius: '6px',\r\n                            backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n                            color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#f59e0b' : '#10b981',\r\n                            border: '1px solid',\r\n                            borderColor: inactivityTime >= 240 ? '#fecaca' : inactivityTime >= 180 ? '#fde68a' : '#bbf7d0'\r\n                        }}>\r\n                            Status : {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n                                     inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                     inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                     `🟢 ACTIF`}\r\n                        </div>\r\n                        \r\n                        {/* Bouton déconnexion */}\r\n                        <button\r\n                            onClick={logout}\r\n                            style={{\r\n                                padding: '8px 16px',\r\n                                background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                cursor: 'pointer',\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                                gap: '6px'\r\n                            }}\r\n                        >\r\n                            🚪 Déconnexion\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Titre principal */}\r\n            <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n                <h1 style={{\r\n                    fontSize: '36px',\r\n                    fontWeight: 'bold',\r\n                    color: 'white',\r\n                    marginBottom: '10px'\r\n                }}>\r\n                    Planning Type Formateurs\r\n                </h1>\r\n                <p style={{ color: 'rgba(255,255,255,0.8)', fontSize: '16px' }}>\r\n                    Consultez et validez les déclarations de planning type des formateurs\r\n                </p>\r\n            </div>\r\n\r\n            {/* Message de notification */}\r\n            {message && (\r\n                <div style={{\r\n                    backgroundColor: message.includes('✅') ? '#d1fae5' : message.includes('❌') ? '#fee2e2' : '#dbeafe',\r\n                    color: message.includes('✅') ? '#065f46' : message.includes('❌') ? '#991b1b' : '#1e40af',\r\n                    padding: '15px',\r\n                    borderRadius: '8px',\r\n                    marginBottom: '20px',\r\n                    textAlign: 'center',\r\n                    fontWeight: '500'\r\n                }}>\r\n                    {message}\r\n                </div>\r\n            )}\r\n\r\n            {/* Sélection du formateur */}\r\n            <div style={{\r\n                backgroundColor: 'white',\r\n                borderRadius: '12px',\r\n                padding: '20px',\r\n                marginBottom: '20px',\r\n                boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n            }}>\r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '20px', flexWrap: 'wrap' }}>\r\n                    <label style={{ \r\n                        fontSize: '16px', \r\n                        fontWeight: '600', \r\n                        color: '#374151',\r\n                        minWidth: '200px'\r\n                    }}>\r\n                        Sélectionner un formateur :\r\n                    </label>\r\n                    <select\r\n                        value={formateurSelectionne}\r\n                        onChange={(e) => handleFormateurChange(e.target.value)}\r\n                        style={{\r\n                            flex: 1,\r\n                            minWidth: '300px',\r\n                            padding: '12px',\r\n                            border: '2px solid #e5e7eb',\r\n                            borderRadius: '8px',\r\n                            fontSize: '16px',\r\n                            fontWeight: '500',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        <option value=\"\">-- Choisir un formateur --</option>\r\n                        {formateurs.map((formateur) => (\r\n                            <option key={formateur.id} value={formateur.id}>\r\n                                {formateur.prenom} {formateur.nom}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    \r\n                    {formateurSelectionne && (\r\n                        <button\r\n                            onClick={handleValiderTransmettre}\r\n                            disabled={isLoading}\r\n                            style={{\r\n                                padding: '12px 24px',\r\n                                background: isLoading ? '#9ca3af' : 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '8px',\r\n                                fontSize: '16px',\r\n                                fontWeight: '600',\r\n                                cursor: isLoading ? 'not-allowed' : 'pointer',\r\n                                boxShadow: '0 4px 12px rgba(16, 185, 129, 0.3)',\r\n                                transition: 'transform 0.2s'\r\n                            }}\r\n                            onMouseOver={(e) => !isLoading && (e.target.style.transform = 'translateY(-2px)')}\r\n                            onMouseOut={(e) => !isLoading && (e.target.style.transform = 'translateY(0)')}\r\n                        >\r\n                            {isLoading ? 'SAUVEGARDE...' : 'VALIDER & TRANSMETTRE'}\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Légende des statuts */}\r\n            {formateurSelectionne && (\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                    borderRadius: '12px',\r\n                    padding: '20px',\r\n                    marginBottom: '20px',\r\n                    backdropFilter: 'blur(10px)'\r\n                }}>\r\n                    <h3 style={{ \r\n                        fontSize: '16px', \r\n                        fontWeight: '600', \r\n                        color: '#374151', \r\n                        marginBottom: '15px' \r\n                    }}>\r\n                        Légende des statuts :\r\n                    </h3>\r\n                    <div style={{ \r\n                        display: 'grid', \r\n                        gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', \r\n                        gap: '15px' \r\n                    }}>\r\n                        {statuts.map(statut => (\r\n                            <div key={statut.key} style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                <div style={{\r\n                                    width: '24px',\r\n                                    height: '24px',\r\n                                    backgroundColor: statut.couleur,\r\n                                    borderRadius: '6px',\r\n                                    border: '2px solid white',\r\n                                    boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n                                }}></div>\r\n                                <span style={{ fontSize: '14px', fontWeight: '500' }}>\r\n                                    {statut.label}\r\n                                </span>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div style={{\r\n                        marginTop: '15px',\r\n                        padding: '15px',\r\n                        backgroundColor: 'rgba(59, 130, 246, 0.1)',\r\n                        borderRadius: '8px',\r\n                        border: '1px solid rgba(59, 130, 246, 0.2)'\r\n                    }}>\r\n                        <p style={{ fontSize: '14px', color: '#1d4ed8', margin: 0 }}>\r\n                            <strong>💡 Processus :</strong> Consultez les déclarations, validez les créneaux souhaités, puis transmettez le planning validé au formateur.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Tableau du planning type */}\r\n            {formateurSelectionne && (\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '12px',\r\n                    overflow: 'hidden',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n                }}>\r\n                    {/* Header du tableau */}\r\n                    <div style={{\r\n                        background: 'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)',\r\n                        color: 'white',\r\n                        padding: '20px 24px'\r\n                    }}>\r\n                        <h2 style={{ \r\n                            fontSize: '20px', \r\n                            fontWeight: '600', \r\n                            margin: 0 \r\n                        }}>\r\n                            Planning type de {getFormateurNom()}\r\n                        </h2>\r\n                        <p style={{ \r\n                            fontSize: '14px', \r\n                            margin: '5px 0 0 0', \r\n                            opacity: 0.9 \r\n                        }}>\r\n                            Validez les créneaux que vous souhaitez utiliser dans le planning coordinateur\r\n                        </p>\r\n                    </div>\r\n\r\n                    {/* Tableau responsive */}\r\n                    <div style={{ overflowX: 'auto' }}>\r\n                        <table style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                            <thead>\r\n                                <tr style={{ backgroundColor: '#f9fafb' }}>\r\n                                    <th style={{\r\n                                        border: '1px solid #e5e7eb',\r\n                                        padding: '16px',\r\n                                        textAlign: 'left',\r\n                                        fontWeight: '600',\r\n                                        color: '#374151',\r\n                                        fontSize: '14px',\r\n                                        minWidth: '120px'\r\n                                    }}>\r\n                                        Créneau\r\n                                    </th>\r\n                                    {jours.map((jour) => (\r\n                                        <th key={jour} style={{\r\n                                            border: '1px solid #e5e7eb',\r\n                                            padding: '16px',\r\n                                            textAlign: 'center',\r\n                                            fontWeight: '600',\r\n                                            color: '#374151',\r\n                                            fontSize: '14px',\r\n                                            minWidth: '180px'\r\n                                        }}>\r\n                                            {jour}\r\n                                        </th>\r\n                                    ))}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {creneaux.map((creneau) => (\r\n                                    <tr key={creneau}>\r\n                                        <td style={{\r\n                                            border: '1px solid #e5e7eb',\r\n                                            padding: '16px',\r\n                                            fontWeight: '600',\r\n                                            color: '#111827',\r\n                                            backgroundColor: '#f9fafb',\r\n                                            fontSize: '14px'\r\n                                        }}>\r\n                                            {creneau}\r\n                                        </td>\r\n                                        {jours.map((jour, dayIndex) => {\r\n                                            const key = `${dayIndex}-${creneau}`\r\n                                            const cellData = planningData[key] || { statut: 'indisponible', lieu: null, valide: false, sansPreference: false }\r\n                                            const couleurStatut = getCouleurStatut(cellData.statut)\r\n                                            \r\n                                            return (\r\n                                                <td key={dayIndex} style={{\r\n                                                    border: '1px solid #e5e7eb',\r\n                                                    padding: '12px',\r\n                                                    backgroundColor: 'white',\r\n                                                    verticalAlign: 'top'\r\n                                                }}>\r\n                                                    {cellData.statut !== 'indisponible' ? (\r\n                                                        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\r\n                                                            {/* Badge statut */}\r\n                                                            <div style={{\r\n                                                                backgroundColor: couleurStatut,\r\n                                                                color: 'white',\r\n                                                                padding: '6px 10px',\r\n                                                                borderRadius: '6px',\r\n                                                                fontSize: '12px',\r\n                                                                fontWeight: '600',\r\n                                                                textAlign: 'center'\r\n                                                            }}>\r\n                                                                {statuts.find(s => s.key === cellData.statut)?.label}\r\n                                                            </div>\r\n                                                            \r\n                                                            {/* ✅ CORRECTION: Affichage lieu OU \"Sans Préférence\" */}\r\n                                                            {cellData.lieu ? (\r\n                                                                <div style={{\r\n                                                                    backgroundColor: cellData.lieu.couleur || '#6b7280',\r\n                                                                    color: 'white',\r\n                                                                    padding: '6px 10px',\r\n                                                                    borderRadius: '6px',\r\n                                                                    fontSize: '11px',\r\n                                                                    fontWeight: '600',\r\n                                                                    textAlign: 'center'\r\n                                                                }}>\r\n                                                                    {cellData.lieu.initiale} - {cellData.lieu.nom}\r\n                                                                </div>\r\n                                                            ) : cellData.sansPreference ? (\r\n                                                                <div style={{\r\n                                                                    backgroundColor: '#6b7280',\r\n                                                                    color: 'white',\r\n                                                                    padding: '6px 10px',\r\n                                                                    borderRadius: '6px',\r\n                                                                    fontSize: '11px',\r\n                                                                    fontWeight: '600',\r\n                                                                    textAlign: 'center'\r\n                                                                }}>\r\n                                                                    SP - Sans Préférence\r\n                                                                </div>\r\n                                                            ) : null}\r\n                                                            \r\n                                                            {/* Checkbox validation */}\r\n                                                            <label style={{\r\n                                                                display: 'flex',\r\n                                                                alignItems: 'center',\r\n                                                                gap: '6px',\r\n                                                                fontSize: '12px',\r\n                                                                cursor: 'pointer',\r\n                                                                padding: '4px',\r\n                                                                borderRadius: '4px',\r\n                                                                backgroundColor: cellData.valide ? '#d1fae5' : '#f3f4f6'\r\n                                                            }}>\r\n                                                                <input\r\n                                                                    type=\"checkbox\"\r\n                                                                    checked={cellData.valide}\r\n                                                                    onChange={() => toggleValidation(dayIndex, creneau)}\r\n                                                                    style={{ \r\n                                                                        width: '16px', \r\n                                                                        height: '16px',\r\n                                                                        cursor: 'pointer'\r\n                                                                    }}\r\n                                                                />\r\n                                                                <span style={{ \r\n                                                                    fontWeight: '600',\r\n                                                                    color: cellData.valide ? '#065f46' : '#6b7280'\r\n                                                                }}>\r\n                                                                    {cellData.valide ? 'Validé' : 'À valider'}\r\n                                                                </span>\r\n                                                            </label>\r\n                                                        </div>\r\n                                                    ) : (\r\n                                                        <div style={{\r\n                                                            color: '#9ca3af',\r\n                                                            fontSize: '12px',\r\n                                                            textAlign: 'center',\r\n                                                            fontStyle: 'italic',\r\n                                                            padding: '10px'\r\n                                                        }}>\r\n                                                            Indisponible\r\n                                                        </div>\r\n                                                    )}\r\n                                                </td>\r\n                                            )\r\n                                        })}\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    {/* Footer avec actions */}\r\n                    <div style={{\r\n                        backgroundColor: '#f9fafb',\r\n                        padding: '20px 24px',\r\n                        borderTop: '1px solid #e5e7eb',\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                        alignItems: 'center',\r\n                        flexWrap: 'wrap',\r\n                        gap: '15px'\r\n                    }}>\r\n                        <div style={{ fontSize: '14px', color: '#6b7280' }}>\r\n                            <strong>Créneaux déclarés :</strong> {getStats().creneauxDeclares} • <strong>Validés :</strong> {getStats().creneauxValides}\r\n                        </div>\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <button\r\n                                onClick={devaliderTout}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: '#6b7280',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: '500',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                Tout dévalider\r\n                            </button>\r\n                            <button\r\n                                onClick={validerTout}\r\n                                style={{\r\n                                    padding: '10px 20px',\r\n                                    backgroundColor: '#3b82f6',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: '500',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                            >\r\n                                Tout valider\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Message d'aide si aucun formateur sélectionné */}\r\n            {!formateurSelectionne && (\r\n                <div style={{\r\n                    backgroundColor: 'rgba(59, 130, 246, 0.1)',\r\n                    border: '2px solid rgba(59, 130, 246, 0.2)',\r\n                    borderRadius: '12px',\r\n                    padding: '40px',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    <div style={{ fontSize: '48px', marginBottom: '16px' }}>👨‍🏫</div>\r\n                    <h3 style={{\r\n                        fontSize: '18px',\r\n                        fontWeight: '600',\r\n                        color: '#1d4ed8',\r\n                        marginBottom: '8px'\r\n                    }}>\r\n                        Sélectionnez un formateur pour commencer\r\n                    </h3>\r\n                    <p style={{ color: '#3b82f6', fontSize: '14px' }}>\r\n                        Choisissez un formateur dans la liste déroulante ci-dessus pour consulter et valider son planning type.\r\n                    </p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC - Page titre personnalisé\r\nexport default withAuthAdmin(PlanningTypeFormateurs, \"Planning Type Formateurs\")",
          "taille": 39925,
          "lignes": 838,
          "dateModif": "2025-08-21T20:54:01.332Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/prise-controle-formateur.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\nimport { withAuthAdmin } from '../components/withAuthAdmin'\r\nimport PlanningFormateurType from '../components/assistance/PlanningFormateurType'\r\nimport MonPlanningType from '../components/assistance/MonPlanningType'\r\nimport Absence from '../components/assistance/Absence'\r\nimport MonPlanningHebdo from '../components/assistance/MonPlanningHebdo'\r\n\r\nfunction PriseControleFormateur({ user, logout, inactivityTime }) {\r\n    const router = useRouter()\r\n    const [formateurs, setFormateurs] = useState([])\r\n    const [formateurSelectionne, setFormateurSelectionne] = useState(null)\r\n    const [ongletActif, setOngletActif] = useState('planning-type')\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [message, setMessage] = useState('')\r\n    const [isPurging, setIsPurging] = useState(false)\r\n    const [logs, setLogs] = useState([])\r\n\r\n    // Configuration des onglets\r\n    const onglets = [\r\n        { \r\n            id: 'planning-type', \r\n            label: 'Planning Type', \r\n            description: 'Déclarer le planning type du formateur',\r\n            icon: '📅'\r\n        },\r\n        { \r\n            id: 'mon-planning-type', \r\n            label: 'Mon Planning Type', \r\n            description: 'Voir le planning type validé',\r\n            icon: '✅'\r\n        },\r\n        { \r\n            id: 'absences', \r\n            label: 'Absences', \r\n            description: 'Déclarer les absences/disponibilités exceptionnelles',\r\n            icon: '🚫'\r\n        },\r\n        { \r\n            id: 'planning-hebdo', \r\n            label: 'Planning Hebdo', \r\n            description: 'Voir le planning hebdomadaire du formateur',\r\n            icon: '📊'\r\n        }\r\n    ]\r\n\r\n    useEffect(() => {\r\n        chargerFormateurs()\r\n    }, [])\r\n\r\n    const chargerFormateurs = async () => {\r\n        try {\r\n            setIsLoading(true)\r\n            \r\n            const { data: formateursData, error } = await supabase\r\n                .from('users')\r\n                .select('id, prenom, nom, email, archive')\r\n                .eq('role', 'formateur')\r\n                .eq('archive', false)\r\n                .order('nom')\r\n\r\n            if (error) {\r\n                throw error\r\n            }\r\n\r\n            console.log(`✅ ${formateursData?.length || 0} formateurs chargés`)\r\n            setFormateurs(formateursData || [])\r\n\r\n        } catch (error) {\r\n            console.error('❌ Erreur chargement formateurs:', error)\r\n            setMessage(`❌ Erreur: ${error.message}`)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const handleFormateurChange = (formateurId) => {\r\n        const formateur = formateurs.find(f => f.id === formateurId)\r\n        setFormateurSelectionne(formateur)\r\n        setMessage('')\r\n        setLogs([])\r\n        \r\n        if (formateur) {\r\n            console.log(`👤 Formateur sélectionné: ${formateur.prenom} ${formateur.nom}`)\r\n        }\r\n    }\r\n\r\n    const handleOngletChange = (ongletId) => {\r\n        setOngletActif(ongletId)\r\n        setMessage('')\r\n        \r\n        const onglet = onglets.find(o => o.id === ongletId)\r\n        console.log(`🔑 Onglet activé: ${onglet?.label}`)\r\n    }\r\n\r\n    // ✅ Callbacks pour les composants\r\n    const handleSuccess = (successMessage) => {\r\n        setMessage(successMessage)\r\n        // Auto-clear message après 5 secondes\r\n        setTimeout(() => setMessage(''), 5000)\r\n    }\r\n\r\n    const handleError = (errorMessage) => {\r\n        setMessage(errorMessage)\r\n        // Auto-clear message après 5 secondes\r\n        setTimeout(() => setMessage(''), 5000)\r\n    }\r\n\r\n    // Fonction d'ajout de logs\r\n    const ajouterLog = (texte) => {\r\n        console.log(texte)\r\n        setLogs(prev => [...prev, `${new Date().toLocaleTimeString()}: ${texte}`])\r\n    }\r\n\r\n    // Fonction de purge complète\r\n    const purgerFormateur = async () => {\r\n        if (!formateurSelectionne) {\r\n            setMessage('⚠️ Aucun formateur sélectionné')\r\n            return\r\n        }\r\n\r\n        // Confirmation double sécurité\r\n        if (!confirm(`⚠️ ATTENTION !\\n\\nVous allez SUPPRIMER DÉFINITIVEMENT toutes les données de :\\n\\n${formateurSelectionne.prenom} ${formateurSelectionne.nom}\\n\\n- Planning type\\n- Absences déclarées\\n- Planning hebdomadaire\\n- Messages\\n- Références dans planning coordo\\n\\nCette action est IRRÉVERSIBLE !\\n\\nÊtes-vous sûr ?`)) {\r\n            return\r\n        }\r\n\r\n        setIsPurging(true)\r\n        setMessage('')\r\n        setLogs([])\r\n        ajouterLog(`🧹 DÉBUT PURGE: ${formateurSelectionne.prenom} ${formateurSelectionne.nom}`)\r\n\r\n        try {\r\n            let totalSupprime = 0\r\n\r\n            // 1️⃣ Planning type\r\n            ajouterLog('1️⃣ Suppression planning type...')\r\n            const { data: planningType, error: errorPT } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .delete()\r\n                .eq('formateur_id', formateurSelectionne.id)\r\n                .select()\r\n\r\n            const countPT = planningType?.length || 0\r\n            totalSupprime += countPT\r\n            ajouterLog(`   ✅ ${countPT} planning type supprimés`)\r\n            if (errorPT) ajouterLog(`   ❌ Erreur: ${errorPT.message}`)\r\n\r\n            // 2️⃣ Absences\r\n            ajouterLog('2️⃣ Suppression absences...')\r\n            const { data: absences, error: errorAbs } = await supabase\r\n                .from('absences_formateurs')\r\n                .delete()\r\n                .eq('formateur_id', formateurSelectionne.id)\r\n                .select()\r\n\r\n            const countAbs = absences?.length || 0\r\n            totalSupprime += countAbs\r\n            ajouterLog(`   ✅ ${countAbs} absences supprimées`)\r\n            if (errorAbs) ajouterLog(`   ❌ Erreur: ${errorAbs.message}`)\r\n\r\n            // 3️⃣ Planning hebdo\r\n            ajouterLog('3️⃣ Suppression planning hebdo...')\r\n            const { data: planningHebdo, error: errorPH } = await supabase\r\n                .from('planning_formateurs_hebdo')\r\n                .delete()\r\n                .eq('formateur_id', formateurSelectionne.id)\r\n                .select()\r\n\r\n            const countPH = planningHebdo?.length || 0\r\n            totalSupprime += countPH\r\n            ajouterLog(`   ✅ ${countPH} planning hebdo supprimés`)\r\n            if (errorPH) ajouterLog(`   ❌ Erreur: ${errorPH.message}`)\r\n\r\n            // 4️⃣ Messages\r\n            ajouterLog('4️⃣ Suppression messages...')\r\n            const { data: messages, error: errorMsg } = await supabase\r\n                .from('messages')\r\n                .delete()\r\n                .eq('expediteur_id', formateurSelectionne.id)\r\n                .select()\r\n\r\n            const countMsg = messages?.length || 0\r\n            totalSupprime += countMsg\r\n            ajouterLog(`   ✅ ${countMsg} messages supprimés`)\r\n            if (errorMsg) ajouterLog(`   ❌ Erreur: ${errorMsg.message}`)\r\n\r\n            // 5️⃣ Nettoyage planning coordo\r\n            ajouterLog('5️⃣ Nettoyage planning coordo...')\r\n            const { data: planningsCoordoAvec, error: errorSelect } = await supabase\r\n                .from('planning_hebdomadaire')\r\n                .select('*')\r\n                .contains('formateurs_ids', [formateurSelectionne.id])\r\n\r\n            let countCoordo = 0\r\n            if (planningsCoordoAvec && planningsCoordoAvec.length > 0) {\r\n                ajouterLog(`   🔍 ${planningsCoordoAvec.length} plannings coordo à nettoyer`)\r\n                \r\n                for (const planning of planningsCoordoAvec) {\r\n                    const nouveauxFormateurs = planning.formateurs_ids.filter(id => id !== formateurSelectionne.id)\r\n                    \r\n                    const { error: errorUpdate } = await supabase\r\n                        .from('planning_hebdomadaire')\r\n                        .update({ formateurs_ids: nouveauxFormateurs })\r\n                        .eq('id', planning.id)\r\n                    \r\n                    if (!errorUpdate) countCoordo++\r\n                }\r\n                ajouterLog(`   ✅ ${countCoordo} plannings coordo nettoyés`)\r\n            } else {\r\n                ajouterLog('   ℹ️ Aucun planning coordo à nettoyer')\r\n            }\r\n\r\n            // Résultat final\r\n            ajouterLog('🎉 PURGE TERMINÉE !')\r\n            ajouterLog(`📊 TOTAL: ${totalSupprime} entrées supprimées`)\r\n            setMessage(`✅ ${formateurSelectionne.prenom} ${formateurSelectionne.nom} a été complètement purgé !`)\r\n\r\n        } catch (error) {\r\n            console.error('Erreur purge:', error)\r\n            ajouterLog(`💥 ERREUR: ${error.message}`)\r\n            setMessage('❌ Erreur lors de la purge')\r\n        } finally {\r\n            setIsPurging(false)\r\n        }\r\n    }\r\n\r\n    // ✅ NOUVEAU: Rendu du contenu selon l'onglet actif\r\n    const renderContenuOnglet = () => {\r\n        if (!formateurSelectionne) {\r\n            return (\r\n                <div style={{\r\n                    padding: '60px 20px',\r\n                    textAlign: 'center',\r\n                    backgroundColor: '#f8fafc',\r\n                    borderRadius: '12px',\r\n                    border: '2px dashed #cbd5e1'\r\n                }}>\r\n                    <div style={{ fontSize: '48px', marginBottom: '16px' }}>👆</div>\r\n                    <h3 style={{ \r\n                        fontSize: '18px', \r\n                        color: '#475569',\r\n                        margin: '0 0 8px 0'\r\n                    }}>\r\n                        Sélectionnez un formateur\r\n                    </h3>\r\n                    <p style={{ \r\n                        fontSize: '14px', \r\n                        color: '#64748b',\r\n                        margin: '0'\r\n                    }}>\r\n                        Choisissez le formateur pour lequel vous souhaitez effectuer des actions\r\n                    </p>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        // ✅ RENDU CONDITIONNEL SELON ONGLET - TOUS LES COMPOSANTS INTÉGRÉS\r\n        switch (ongletActif) {\r\n            case 'planning-type':\r\n                return (\r\n                    <PlanningFormateurType\r\n                        formateurId={formateurSelectionne.id}\r\n                        formateurData={formateurSelectionne}\r\n                        onSuccess={handleSuccess}\r\n                        onError={handleError}\r\n                    />\r\n                )\r\n                \r\n            case 'mon-planning-type':\r\n                return (\r\n                    <MonPlanningType\r\n                        formateurId={formateurSelectionne.id}\r\n                        formateurData={formateurSelectionne}\r\n                        onError={handleError}\r\n                    />\r\n                )\r\n                \r\n            case 'absences':\r\n                return (\r\n                    <Absence\r\n                        formateurId={formateurSelectionne.id}\r\n                        formateurData={formateurSelectionne}\r\n                        onSuccess={handleSuccess}\r\n                        onError={handleError}\r\n                    />\r\n                )\r\n                \r\n            case 'planning-hebdo':\r\n                return (\r\n                    <MonPlanningHebdo\r\n                        formateurId={formateurSelectionne.id}\r\n                        formateurData={formateurSelectionne}\r\n                        onError={handleError}\r\n                    />\r\n                )\r\n                \r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                backgroundColor: '#ffffff',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n            }}>\r\n                <div style={{\r\n                    textAlign: 'center',\r\n                    padding: '40px'\r\n                }}>\r\n                    <div style={{ fontSize: '48px', marginBottom: '16px' }}>⏳</div>\r\n                    <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement des formateurs...</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            backgroundColor: '#f8fafc',\r\n            padding: '20px'\r\n        }}>\r\n            {/* Header avec navigation */}\r\n            <div style={{\r\n                maxWidth: '1200px',\r\n                margin: '0 auto',\r\n                backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                borderRadius: '12px',\r\n                padding: '15px 25px',\r\n                marginBottom: '20px',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                backdropFilter: 'blur(10px)',\r\n                boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\r\n            }}>\r\n                <nav style={{ fontSize: '14px' }}>\r\n                    <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                    <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                    <span style={{ color: '#8b5cf6', fontWeight: '500' }}>Prise Contrôle Formateur</span>\r\n                </nav>\r\n                \r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        Accueil\r\n                    </button>\r\n\r\n                    {/* Badge de statut avec compte à rebours */}\r\n                    <div style={{\r\n                        padding: '4px 8px',\r\n                        fontSize: '12px',\r\n                        fontWeight: '600',\r\n                        borderRadius: '6px',\r\n                        backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n                        color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#f59e0b' : '#10b981',\r\n                        border: '1px solid',\r\n                        borderColor: inactivityTime >= 240 ? '#fecaca' : inactivityTime >= 180 ? '#fde68a' : '#bbf7d0'\r\n                    }}>\r\n                        Status : {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n                                 inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 `🟢 ACTIF`}\r\n                    </div>\r\n                    \r\n                    {/* Bouton déconnexion */}\r\n                    <button\r\n                        onClick={logout}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            fontWeight: '600',\r\n                            cursor: 'pointer',\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            gap: '6px'\r\n                        }}\r\n                    >\r\n                        🚪 Déconnexion\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            {/* Messages */}\r\n            {message && (\r\n                <div style={{\r\n                    maxWidth: '1200px',\r\n                    margin: '0 auto 20px auto',\r\n                    padding: '12px 16px',\r\n                    borderRadius: '8px',\r\n                    backgroundColor: message.includes('❌') ? '#fee2e2' : '#d1fae5',\r\n                    color: message.includes('❌') ? '#991b1b' : '#065f46',\r\n                    fontSize: '14px',\r\n                    fontWeight: '500'\r\n                }}>\r\n                    {message}\r\n                </div>\r\n            )}\r\n\r\n            {/* Contenu principal */}\r\n            <div style={{\r\n                maxWidth: '1200px',\r\n                margin: '0 auto',\r\n                display: 'grid',\r\n                gridTemplateColumns: '300px 1fr',\r\n                gap: '20px'\r\n            }}>\r\n                \r\n                {/* Colonne gauche - Sélection et navigation */}\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '16px',\r\n                    padding: '20px',\r\n                    height: 'fit-content',\r\n                    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\r\n                }}>\r\n                    \r\n                    {/* Sélection formateur */}\r\n                    <div style={{ marginBottom: '24px' }}>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            fontSize: '14px',\r\n                            fontWeight: 'bold',\r\n                            color: '#374151',\r\n                            marginBottom: '8px'\r\n                        }}>\r\n                            👤 Sélectionner un formateur\r\n                        </label>\r\n                        <select\r\n                            value={formateurSelectionne?.id || ''}\r\n                            onChange={(e) => handleFormateurChange(e.target.value)}\r\n                            disabled={isPurging}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '10px 12px',\r\n                                border: '2px solid #e5e7eb',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                backgroundColor: isPurging ? '#f9fafb' : 'white',\r\n                                cursor: isPurging ? 'not-allowed' : 'pointer'\r\n                            }}\r\n                        >\r\n                            <option value=\"\">-- Choisir un formateur --</option>\r\n                            {formateurs.map(formateur => (\r\n                                <option key={formateur.id} value={formateur.id}>\r\n                                    {formateur.prenom} {formateur.nom}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n\r\n                    {/* Informations formateur sélectionné */}\r\n                    {formateurSelectionne && (\r\n                        <div style={{\r\n                            backgroundColor: '#f0f9ff',\r\n                            borderRadius: '8px',\r\n                            padding: '12px',\r\n                            marginBottom: '24px',\r\n                            border: '2px solid #3b82f6'\r\n                        }}>\r\n                            <h4 style={{\r\n                                fontSize: '14px',\r\n                                fontWeight: 'bold',\r\n                                color: '#1e40af',\r\n                                margin: '0 0 8px 0'\r\n                            }}>\r\n                                Formateur sélectionné\r\n                            </h4>\r\n                            <div style={{ fontSize: '13px', color: '#1e40af' }}>\r\n                                <div><strong>{formateurSelectionne.prenom} {formateurSelectionne.nom}</strong></div>\r\n                                {formateurSelectionne.email && (\r\n                                    <div style={{ marginTop: '4px' }}>{formateurSelectionne.email}</div>\r\n                                )}\r\n                                <div style={{ marginTop: '4px', fontSize: '11px', opacity: 0.8 }}>\r\n                                    ID: {formateurSelectionne.id.substring(0, 8)}...\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Navigation onglets */}\r\n                    <div style={{ marginBottom: '24px' }}>\r\n                        <h4 style={{\r\n                            fontSize: '14px',\r\n                            fontWeight: 'bold',\r\n                            color: '#374151',\r\n                            margin: '0 0 12px 0'\r\n                        }}>\r\n                            🔑 Actions disponibles\r\n                        </h4>\r\n                        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\r\n                            {onglets.map(onglet => (\r\n                                <button\r\n                                    key={onglet.id}\r\n                                    onClick={() => handleOngletChange(onglet.id)}\r\n                                    disabled={!formateurSelectionne || isPurging}\r\n                                    style={{\r\n                                        padding: '12px 16px',\r\n                                        borderRadius: '8px',\r\n                                        border: 'none',\r\n                                        backgroundColor: ongletActif === onglet.id ? '#3b82f6' : \r\n                                                        (!formateurSelectionne || isPurging) ? '#f3f4f6' : '#e5e7eb',\r\n                                        color: ongletActif === onglet.id ? 'white' : \r\n                                               (!formateurSelectionne || isPurging) ? '#9ca3af' : '#374151',\r\n                                        cursor: (!formateurSelectionne || isPurging) ? 'not-allowed' : 'pointer',\r\n                                        fontSize: '13px',\r\n                                        fontWeight: '600',\r\n                                        textAlign: 'left',\r\n                                        transition: 'all 0.2s',\r\n                                        opacity: (!formateurSelectionne || isPurging) ? 0.6 : 1\r\n                                    }}\r\n                                >\r\n                                    <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                                        <span>{onglet.icon}</span>\r\n                                        <span>{onglet.label}</span>\r\n                                    </div>\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Bouton Purge */}\r\n                    <div style={{ marginBottom: '24px' }}>\r\n                        <button\r\n                            onClick={purgerFormateur}\r\n                            disabled={!formateurSelectionne || isPurging}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '12px 16px',\r\n                                borderRadius: '8px',\r\n                                border: 'none',\r\n                                backgroundColor: (!formateurSelectionne || isPurging) ? '#f3f4f6' : '#dc2626',\r\n                                color: (!formateurSelectionne || isPurging) ? '#9ca3af' : 'white',\r\n                                cursor: (!formateurSelectionne || isPurging) ? 'not-allowed' : 'pointer',\r\n                                fontSize: '13px',\r\n                                fontWeight: 'bold',\r\n                                textAlign: 'center',\r\n                                transition: 'all 0.2s',\r\n                                opacity: (!formateurSelectionne || isPurging) ? 0.6 : 1\r\n                            }}\r\n                        >\r\n                            {isPurging ? '🧹 Purge en cours...' : '🗑️ PURGER PLANNING'}\r\n                        </button>\r\n                        {formateurSelectionne && (\r\n                            <div style={{\r\n                                marginTop: '8px',\r\n                                fontSize: '11px',\r\n                                color: '#dc2626',\r\n                                textAlign: 'center',\r\n                                lineHeight: '1.3'\r\n                            }}>\r\n                                ⚠️ Supprime définitivement toutes les données planning\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Compteur formateurs */}\r\n                    <div style={{\r\n                        padding: '12px',\r\n                        backgroundColor: '#f9fafb',\r\n                        borderRadius: '8px',\r\n                        fontSize: '12px',\r\n                        color: '#6b7280',\r\n                        textAlign: 'center'\r\n                    }}>\r\n                        📊 {formateurs.length} formateur{formateurs.length > 1 ? 's' : ''} disponible{formateurs.length > 1 ? 's' : ''}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Colonne droite - Contenu */}\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '16px',\r\n                    padding: '20px',\r\n                    minHeight: '600px',\r\n                    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\r\n                }}>\r\n                    {renderContenuOnglet()}\r\n                    \r\n                    {/* Logs de purge */}\r\n                    {logs.length > 0 && (\r\n                        <div style={{\r\n                            marginTop: '20px',\r\n                            backgroundColor: '#1f2937',\r\n                            color: '#f9fafb',\r\n                            padding: '15px',\r\n                            borderRadius: '8px',\r\n                            fontFamily: 'monospace',\r\n                            fontSize: '12px',\r\n                            maxHeight: '300px',\r\n                            overflowY: 'auto'\r\n                        }}>\r\n                            <div style={{\r\n                                fontSize: '14px',\r\n                                fontWeight: 'bold',\r\n                                marginBottom: '10px',\r\n                                color: '#fbbf24'\r\n                            }}>\r\n                                📋 Logs de purge :\r\n                            </div>\r\n                            {logs.map((log, index) => (\r\n                                <div key={index} style={{ marginBottom: '2px' }}>\r\n                                    {log}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Footer */}\r\n            <div style={{\r\n                maxWidth: '1200px',\r\n                margin: '20px auto 0 auto',\r\n                textAlign: 'center',\r\n                fontSize: '12px',\r\n                color: '#9ca3af'\r\n            }}>\r\n                Interface d'assistance - ACLEF Planning v8.0\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC - Page titre personnalisé\r\nexport default withAuthAdmin(PriseControleFormateur, \"Assistance Formateur\")",
          "taille": 27922,
          "lignes": 647,
          "dateModif": "2025-08-28T19:00:40.561Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { supabase } from '../lib/supabaseClient'\r\nimport { withAuthAdmin } from '../components/withAuthAdmin'\r\nimport PlanningFormateurType from '../components/assistance/PlanningFormateurType'\r\nimport MonPlanningType from '../components/assistance/MonPlanningType'\r\nimport Absence from '../components/assistance/Absence'\r\nimport MonPlanningHebdo from '../components/assistance/MonPlanningHebdo'\r\n\r\nfunction PriseControleFormateur({ user, logout, inactivityTime }) {\r\n    const router = useRouter()\r\n    const [formateurs, setFormateurs] = useState([])\r\n    const [formateurSelectionne, setFormateurSelectionne] = useState(null)\r\n    const [ongletActif, setOngletActif] = useState('planning-type')\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [message, setMessage] = useState('')\r\n    const [isPurging, setIsPurging] = useState(false)\r\n    const [logs, setLogs] = useState([])\r\n\r\n    // Configuration des onglets\r\n    const onglets = [\r\n        { \r\n            id: 'planning-type', \r\n            label: 'Planning Type', \r\n            description: 'Déclarer le planning type du formateur',\r\n            icon: '📅'\r\n        },\r\n        { \r\n            id: 'mon-planning-type', \r\n            label: 'Mon Planning Type', \r\n            description: 'Voir le planning type validé',\r\n            icon: '✅'\r\n        },\r\n        { \r\n            id: 'absences', \r\n            label: 'Absences', \r\n            description: 'Déclarer les absences/disponibilités exceptionnelles',\r\n            icon: '🚫'\r\n        },\r\n        { \r\n            id: 'planning-hebdo', \r\n            label: 'Planning Hebdo', \r\n            description: 'Voir le planning hebdomadaire du formateur',\r\n            icon: '📊'\r\n        }\r\n    ]\r\n\r\n    useEffect(() => {\r\n        chargerFormateurs()\r\n    }, [])\r\n\r\n    const chargerFormateurs = async () => {\r\n        try {\r\n            setIsLoading(true)\r\n            \r\n            const { data: formateursData, error } = await supabase\r\n                .from('users')\r\n                .select('id, prenom, nom, email, archive')\r\n                .eq('role', 'formateur')\r\n                .eq('archive', false)\r\n                .order('nom')\r\n\r\n            if (error) {\r\n                throw error\r\n            }\r\n\r\n            console.log(`✅ ${formateursData?.length || 0} formateurs chargés`)\r\n            setFormateurs(formateursData || [])\r\n\r\n        } catch (error) {\r\n            console.error('❌ Erreur chargement formateurs:', error)\r\n            setMessage(`❌ Erreur: ${error.message}`)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const handleFormateurChange = (formateurId) => {\r\n        const formateur = formateurs.find(f => f.id === formateurId)\r\n        setFormateurSelectionne(formateur)\r\n        setMessage('')\r\n        setLogs([])\r\n        \r\n        if (formateur) {\r\n            console.log(`👤 Formateur sélectionné: ${formateur.prenom} ${formateur.nom}`)\r\n        }\r\n    }\r\n\r\n    const handleOngletChange = (ongletId) => {\r\n        setOngletActif(ongletId)\r\n        setMessage('')\r\n        \r\n        const onglet = onglets.find(o => o.id === ongletId)\r\n        console.log(`🔑 Onglet activé: ${onglet?.label}`)\r\n    }\r\n\r\n    // ✅ Callbacks pour les composants\r\n    const handleSuccess = (successMessage) => {\r\n        setMessage(successMessage)\r\n        // Auto-clear message après 5 secondes\r\n        setTimeout(() => setMessage(''), 5000)\r\n    }\r\n\r\n    const handleError = (errorMessage) => {\r\n        setMessage(errorMessage)\r\n        // Auto-clear message après 5 secondes\r\n        setTimeout(() => setMessage(''), 5000)\r\n    }\r\n\r\n    // Fonction d'ajout de logs\r\n    const ajouterLog = (texte) => {\r\n        console.log(texte)\r\n        setLogs(prev => [...prev, `${new Date().toLocaleTimeString()}: ${texte}`])\r\n    }\r\n\r\n    // Fonction de purge complète\r\n    const purgerFormateur = async () => {\r\n        if (!formateurSelectionne) {\r\n            setMessage('⚠️ Aucun formateur sélectionné')\r\n            return\r\n        }\r\n\r\n        // Confirmation double sécurité\r\n        if (!confirm(`⚠️ ATTENTION !\\n\\nVous allez SUPPRIMER DÉFINITIVEMENT toutes les données de :\\n\\n${formateurSelectionne.prenom} ${formateurSelectionne.nom}\\n\\n- Planning type\\n- Absences déclarées\\n- Planning hebdomadaire\\n- Messages\\n- Références dans planning coordo\\n\\nCette action est IRRÉVERSIBLE !\\n\\nÊtes-vous sûr ?`)) {\r\n            return\r\n        }\r\n\r\n        setIsPurging(true)\r\n        setMessage('')\r\n        setLogs([])\r\n        ajouterLog(`🧹 DÉBUT PURGE: ${formateurSelectionne.prenom} ${formateurSelectionne.nom}`)\r\n\r\n        try {\r\n            let totalSupprime = 0\r\n\r\n            // 1️⃣ Planning type\r\n            ajouterLog('1️⃣ Suppression planning type...')\r\n            const { data: planningType, error: errorPT } = await supabase\r\n                .from('planning_type_formateurs')\r\n                .delete()\r\n                .eq('formateur_id', formateurSelectionne.id)\r\n                .select()\r\n\r\n            const countPT = planningType?.length || 0\r\n            totalSupprime += countPT\r\n            ajouterLog(`   ✅ ${countPT} planning type supprimés`)\r\n            if (errorPT) ajouterLog(`   ❌ Erreur: ${errorPT.message}`)\r\n\r\n            // 2️⃣ Absences\r\n            ajouterLog('2️⃣ Suppression absences...')\r\n            const { data: absences, error: errorAbs } = await supabase\r\n                .from('absences_formateurs')\r\n                .delete()\r\n                .eq('formateur_id', formateurSelectionne.id)\r\n                .select()\r\n\r\n            const countAbs = absences?.length || 0\r\n            totalSupprime += countAbs\r\n            ajouterLog(`   ✅ ${countAbs} absences supprimées`)\r\n            if (errorAbs) ajouterLog(`   ❌ Erreur: ${errorAbs.message}`)\r\n\r\n            // 3️⃣ Planning hebdo\r\n            ajouterLog('3️⃣ Suppression planning hebdo...')\r\n            const { data: planningHebdo, error: errorPH } = await supabase\r\n                .from('planning_formateurs_hebdo')\r\n                .delete()\r\n                .eq('formateur_id', formateurSelectionne.id)\r\n                .select()\r\n\r\n            const countPH = planningHebdo?.length || 0\r\n            totalSupprime += countPH\r\n            ajouterLog(`   ✅ ${countPH} planning hebdo supprimés`)\r\n            if (errorPH) ajouterLog(`   ❌ Erreur: ${errorPH.message}`)\r\n\r\n            // 4️⃣ Messages\r\n            ajouterLog('4️⃣ Suppression messages...')\r\n            const { data: messages, error: errorMsg } = await supabase\r\n                .from('messages')\r\n                .delete()\r\n                .eq('expediteur_id', formateurSelectionne.id)\r\n                .select()\r\n\r\n            const countMsg = messages?.length || 0\r\n            totalSupprime += countMsg\r\n            ajouterLog(`   ✅ ${countMsg} messages supprimés`)\r\n            if (errorMsg) ajouterLog(`   ❌ Erreur: ${errorMsg.message}`)\r\n\r\n            // 5️⃣ Nettoyage planning coordo\r\n            ajouterLog('5️⃣ Nettoyage planning coordo...')\r\n            const { data: planningsCoordoAvec, error: errorSelect } = await supabase\r\n                .from('planning_hebdomadaire')\r\n                .select('*')\r\n                .contains('formateurs_ids', [formateurSelectionne.id])\r\n\r\n            let countCoordo = 0\r\n            if (planningsCoordoAvec && planningsCoordoAvec.length > 0) {\r\n                ajouterLog(`   🔍 ${planningsCoordoAvec.length} plannings coordo à nettoyer`)\r\n                \r\n                for (const planning of planningsCoordoAvec) {\r\n                    const nouveauxFormateurs = planning.formateurs_ids.filter(id => id !== formateurSelectionne.id)\r\n                    \r\n                    const { error: errorUpdate } = await supabase\r\n                        .from('planning_hebdomadaire')\r\n                        .update({ formateurs_ids: nouveauxFormateurs })\r\n                        .eq('id', planning.id)\r\n                    \r\n                    if (!errorUpdate) countCoordo++\r\n                }\r\n                ajouterLog(`   ✅ ${countCoordo} plannings coordo nettoyés`)\r\n            } else {\r\n                ajouterLog('   ℹ️ Aucun planning coordo à nettoyer')\r\n            }\r\n\r\n            // Résultat final\r\n            ajouterLog('🎉 PURGE TERMINÉE !')\r\n            ajouterLog(`📊 TOTAL: ${totalSupprime} entrées supprimées`)\r\n            setMessage(`✅ ${formateurSelectionne.prenom} ${formateurSelectionne.nom} a été complètement purgé !`)\r\n\r\n        } catch (error) {\r\n            console.error('Erreur purge:', error)\r\n            ajouterLog(`💥 ERREUR: ${error.message}`)\r\n            setMessage('❌ Erreur lors de la purge')\r\n        } finally {\r\n            setIsPurging(false)\r\n        }\r\n    }\r\n\r\n    // ✅ NOUVEAU: Rendu du contenu selon l'onglet actif\r\n    const renderContenuOnglet = () => {\r\n        if (!formateurSelectionne) {\r\n            return (\r\n                <div style={{\r\n                    padding: '60px 20px',\r\n                    textAlign: 'center',\r\n                    backgroundColor: '#f8fafc',\r\n                    borderRadius: '12px',\r\n                    border: '2px dashed #cbd5e1'\r\n                }}>\r\n                    <div style={{ fontSize: '48px', marginBottom: '16px' }}>👆</div>\r\n                    <h3 style={{ \r\n                        fontSize: '18px', \r\n                        color: '#475569',\r\n                        margin: '0 0 8px 0'\r\n                    }}>\r\n                        Sélectionnez un formateur\r\n                    </h3>\r\n                    <p style={{ \r\n                        fontSize: '14px', \r\n                        color: '#64748b',\r\n                        margin: '0'\r\n                    }}>\r\n                        Choisissez le formateur pour lequel vous souhaitez effectuer des actions\r\n                    </p>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        // ✅ RENDU CONDITIONNEL SELON ONGLET - TOUS LES COMPOSANTS INTÉGRÉS\r\n        switch (ongletActif) {\r\n            case 'planning-type':\r\n                return (\r\n                    <PlanningFormateurType\r\n                        formateurId={formateurSelectionne.id}\r\n                        formateurData={formateurSelectionne}\r\n                        onSuccess={handleSuccess}\r\n                        onError={handleError}\r\n                    />\r\n                )\r\n                \r\n            case 'mon-planning-type':\r\n                return (\r\n                    <MonPlanningType\r\n                        formateurId={formateurSelectionne.id}\r\n                        formateurData={formateurSelectionne}\r\n                        onError={handleError}\r\n                    />\r\n                )\r\n                \r\n            case 'absences':\r\n                return (\r\n                    <Absence\r\n                        formateurId={formateurSelectionne.id}\r\n                        formateurData={formateurSelectionne}\r\n                        onSuccess={handleSuccess}\r\n                        onError={handleError}\r\n                    />\r\n                )\r\n                \r\n            case 'planning-hebdo':\r\n                return (\r\n                    <MonPlanningHebdo\r\n                        formateurId={formateurSelectionne.id}\r\n                        formateurData={formateurSelectionne}\r\n                        onError={handleError}\r\n                    />\r\n                )\r\n                \r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div style={{\r\n                minHeight: '100vh',\r\n                backgroundColor: '#ffffff',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n            }}>\r\n                <div style={{\r\n                    textAlign: 'center',\r\n                    padding: '40px'\r\n                }}>\r\n                    <div style={{ fontSize: '48px', marginBottom: '16px' }}>⏳</div>\r\n                    <div style={{ color: '#667eea', fontSize: '18px' }}>Chargement des formateurs...</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            backgroundColor: '#f8fafc',\r\n            padding: '20px'\r\n        }}>\r\n            {/* Header avec navigation */}\r\n            <div style={{\r\n                maxWidth: '1200px',\r\n                margin: '0 auto',\r\n                backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                borderRadius: '12px',\r\n                padding: '15px 25px',\r\n                marginBottom: '20px',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                backdropFilter: 'blur(10px)',\r\n                boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\r\n            }}>\r\n                <nav style={{ fontSize: '14px' }}>\r\n                    <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                    <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                    <span style={{ color: '#8b5cf6', fontWeight: '500' }}>Prise Contrôle Formateur</span>\r\n                </nav>\r\n                \r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        Accueil\r\n                    </button>\r\n\r\n                    {/* Badge de statut avec compte à rebours */}\r\n                    <div style={{\r\n                        padding: '4px 8px',\r\n                        fontSize: '12px',\r\n                        fontWeight: '600',\r\n                        borderRadius: '6px',\r\n                        backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n                        color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#f59e0b' : '#10b981',\r\n                        border: '1px solid',\r\n                        borderColor: inactivityTime >= 240 ? '#fecaca' : inactivityTime >= 180 ? '#fde68a' : '#bbf7d0'\r\n                    }}>\r\n                        Status : {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n                                 inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 `🟢 ACTIF`}\r\n                    </div>\r\n                    \r\n                    {/* Bouton déconnexion */}\r\n                    <button\r\n                        onClick={logout}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            fontWeight: '600',\r\n                            cursor: 'pointer',\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            gap: '6px'\r\n                        }}\r\n                    >\r\n                        🚪 Déconnexion\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            {/* Messages */}\r\n            {message && (\r\n                <div style={{\r\n                    maxWidth: '1200px',\r\n                    margin: '0 auto 20px auto',\r\n                    padding: '12px 16px',\r\n                    borderRadius: '8px',\r\n                    backgroundColor: message.includes('❌') ? '#fee2e2' : '#d1fae5',\r\n                    color: message.includes('❌') ? '#991b1b' : '#065f46',\r\n                    fontSize: '14px',\r\n                    fontWeight: '500'\r\n                }}>\r\n                    {message}\r\n                </div>\r\n            )}\r\n\r\n            {/* Contenu principal */}\r\n            <div style={{\r\n                maxWidth: '1200px',\r\n                margin: '0 auto',\r\n                display: 'grid',\r\n                gridTemplateColumns: '300px 1fr',\r\n                gap: '20px'\r\n            }}>\r\n                \r\n                {/* Colonne gauche - Sélection et navigation */}\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '16px',\r\n                    padding: '20px',\r\n                    height: 'fit-content',\r\n                    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\r\n                }}>\r\n                    \r\n                    {/* Sélection formateur */}\r\n                    <div style={{ marginBottom: '24px' }}>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            fontSize: '14px',\r\n                            fontWeight: 'bold',\r\n                            color: '#374151',\r\n                            marginBottom: '8px'\r\n                        }}>\r\n                            👤 Sélectionner un formateur\r\n                        </label>\r\n                        <select\r\n                            value={formateurSelectionne?.id || ''}\r\n                            onChange={(e) => handleFormateurChange(e.target.value)}\r\n                            disabled={isPurging}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '10px 12px',\r\n                                border: '2px solid #e5e7eb',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                backgroundColor: isPurging ? '#f9fafb' : 'white',\r\n                                cursor: isPurging ? 'not-allowed' : 'pointer'\r\n                            }}\r\n                        >\r\n                            <option value=\"\">-- Choisir un formateur --</option>\r\n                            {formateurs.map(formateur => (\r\n                                <option key={formateur.id} value={formateur.id}>\r\n                                    {formateur.prenom} {formateur.nom}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n\r\n                    {/* Informations formateur sélectionné */}\r\n                    {formateurSelectionne && (\r\n                        <div style={{\r\n                            backgroundColor: '#f0f9ff',\r\n                            borderRadius: '8px',\r\n                            padding: '12px',\r\n                            marginBottom: '24px',\r\n                            border: '2px solid #3b82f6'\r\n                        }}>\r\n                            <h4 style={{\r\n                                fontSize: '14px',\r\n                                fontWeight: 'bold',\r\n                                color: '#1e40af',\r\n                                margin: '0 0 8px 0'\r\n                            }}>\r\n                                Formateur sélectionné\r\n                            </h4>\r\n                            <div style={{ fontSize: '13px', color: '#1e40af' }}>\r\n                                <div><strong>{formateurSelectionne.prenom} {formateurSelectionne.nom}</strong></div>\r\n                                {formateurSelectionne.email && (\r\n                                    <div style={{ marginTop: '4px' }}>{formateurSelectionne.email}</div>\r\n                                )}\r\n                                <div style={{ marginTop: '4px', fontSize: '11px', opacity: 0.8 }}>\r\n                                    ID: {formateurSelectionne.id.substring(0, 8)}...\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Navigation onglets */}\r\n                    <div style={{ marginBottom: '24px' }}>\r\n                        <h4 style={{\r\n                            fontSize: '14px',\r\n                            fontWeight: 'bold',\r\n                            color: '#374151',\r\n                            margin: '0 0 12px 0'\r\n                        }}>\r\n                            🔑 Actions disponibles\r\n                        </h4>\r\n                        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\r\n                            {onglets.map(onglet => (\r\n                                <button\r\n                                    key={onglet.id}\r\n                                    onClick={() => handleOngletChange(onglet.id)}\r\n                                    disabled={!formateurSelectionne || isPurging}\r\n                                    style={{\r\n                                        padding: '12px 16px',\r\n                                        borderRadius: '8px',\r\n                                        border: 'none',\r\n                                        backgroundColor: ongletActif === onglet.id ? '#3b82f6' : \r\n                                                        (!formateurSelectionne || isPurging) ? '#f3f4f6' : '#e5e7eb',\r\n                                        color: ongletActif === onglet.id ? 'white' : \r\n                                               (!formateurSelectionne || isPurging) ? '#9ca3af' : '#374151',\r\n                                        cursor: (!formateurSelectionne || isPurging) ? 'not-allowed' : 'pointer',\r\n                                        fontSize: '13px',\r\n                                        fontWeight: '600',\r\n                                        textAlign: 'left',\r\n                                        transition: 'all 0.2s',\r\n                                        opacity: (!formateurSelectionne || isPurging) ? 0.6 : 1\r\n                                    }}\r\n                                >\r\n                                    <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                                        <span>{onglet.icon}</span>\r\n                                        <span>{onglet.label}</span>\r\n                                    </div>\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Bouton Purge */}\r\n                    <div style={{ marginBottom: '24px' }}>\r\n                        <button\r\n                            onClick={purgerFormateur}\r\n                            disabled={!formateurSelectionne || isPurging}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '12px 16px',\r\n                                borderRadius: '8px',\r\n                                border: 'none',\r\n                                backgroundColor: (!formateurSelectionne || isPurging) ? '#f3f4f6' : '#dc2626',\r\n                                color: (!formateurSelectionne || isPurging) ? '#9ca3af' : 'white',\r\n                                cursor: (!formateurSelectionne || isPurging) ? 'not-allowed' : 'pointer',\r\n                                fontSize: '13px',\r\n                                fontWeight: 'bold',\r\n                                textAlign: 'center',\r\n                                transition: 'all 0.2s',\r\n                                opacity: (!formateurSelectionne || isPurging) ? 0.6 : 1\r\n                            }}\r\n                        >\r\n                            {isPurging ? '🧹 Purge en cours...' : '🗑️ PURGER PLANNING'}\r\n                        </button>\r\n                        {formateurSelectionne && (\r\n                            <div style={{\r\n                                marginTop: '8px',\r\n                                fontSize: '11px',\r\n                                color: '#dc2626',\r\n                                textAlign: 'center',\r\n                                lineHeight: '1.3'\r\n                            }}>\r\n                                ⚠️ Supprime définitivement toutes les données planning\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Compteur formateurs */}\r\n                    <div style={{\r\n                        padding: '12px',\r\n                        backgroundColor: '#f9fafb',\r\n                        borderRadius: '8px',\r\n                        fontSize: '12px',\r\n                        color: '#6b7280',\r\n                        textAlign: 'center'\r\n                    }}>\r\n                        📊 {formateurs.length} formateur{formateurs.length > 1 ? 's' : ''} disponible{formateurs.length > 1 ? 's' : ''}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Colonne droite - Contenu */}\r\n                <div style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: '16px',\r\n                    padding: '20px',\r\n                    minHeight: '600px',\r\n                    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\r\n                }}>\r\n                    {renderContenuOnglet()}\r\n                    \r\n                    {/* Logs de purge */}\r\n                    {logs.length > 0 && (\r\n                        <div style={{\r\n                            marginTop: '20px',\r\n                            backgroundColor: '#1f2937',\r\n                            color: '#f9fafb',\r\n                            padding: '15px',\r\n                            borderRadius: '8px',\r\n                            fontFamily: 'monospace',\r\n                            fontSize: '12px',\r\n                            maxHeight: '300px',\r\n                            overflowY: 'auto'\r\n                        }}>\r\n                            <div style={{\r\n                                fontSize: '14px',\r\n                                fontWeight: 'bold',\r\n                                marginBottom: '10px',\r\n                                color: '#fbbf24'\r\n                            }}>\r\n                                📋 Logs de purge :\r\n                            </div>\r\n                            {logs.map((log, index) => (\r\n                                <div key={index} style={{ marginBottom: '2px' }}>\r\n                                    {log}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Footer */}\r\n            <div style={{\r\n                maxWidth: '1200px',\r\n                margin: '20px auto 0 auto',\r\n                textAlign: 'center',\r\n                fontSize: '12px',\r\n                color: '#9ca3af'\r\n            }}>\r\n                Interface d'assistance - ACLEF Planning v8.0\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC - Page titre personnalisé\r\nexport default withAuthAdmin(PriseControleFormateur, \"Assistance Formateur\")",
          "taille": 27922,
          "lignes": 647,
          "dateModif": "2025-08-28T18:19:16.651Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "pages/test-admin-reset.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState } from 'react'\r\n\r\nfunction TestAdminReset() {\r\n  const [message, setMessage] = useState('')\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const resetComplet = async () => {\r\n    if (!window.confirm('⚠️ Confirmer le reset complet de tous les tests admin ?')) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      setLoading(true)\r\n      setMessage('🔄 Reset en cours...')\r\n\r\n      const response = await fetch('/api/test-verrou-admin', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          action: 'reset'\r\n        })\r\n      })\r\n\r\n      const data = await response.json()\r\n\r\n      if (response.ok) {\r\n        setMessage('✅ Reset complet effectué avec succès !\\n\\nToutes les sessions test ont été supprimées.\\nLe verrou admin est maintenant libre.')\r\n        console.log('✅ Reset complet terminé')\r\n      } else {\r\n        setMessage(`❌ Erreur reset: ${data.message}`)\r\n      }\r\n\r\n    } catch (error) {\r\n      setMessage(`❌ Erreur: ${error.message}`)\r\n      console.error('Erreur reset:', error)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  const verifierStatus = async () => {\r\n    try {\r\n      setLoading(true)\r\n      setMessage('🔍 Vérification du status...')\r\n\r\n      const response = await fetch('/api/test-verrou-admin')\r\n      const data = await response.json()\r\n\r\n      if (data.hasActiveSession) {\r\n        setMessage(`📊 Status actuel:\\n🔒 VERROU ACTIF\\n👤 Admin connecté: ${data.activeAdmin}\\n\\n📝 Sessions actives: ${Object.keys(data.allSessions).length}`)\r\n      } else {\r\n        setMessage(`📊 Status actuel:\\n🔓 VERROU LIBRE\\n✅ Aucun admin connecté\\n\\n📝 Sessions enregistrées: ${Object.keys(data.allSessions || {}).length}`)\r\n      }\r\n\r\n    } catch (error) {\r\n      setMessage(`❌ Erreur vérification: ${error.message}`)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ \r\n      padding: '20px', \r\n      fontFamily: 'monospace', \r\n      backgroundColor: '#fef5e7', \r\n      minHeight: '100vh' \r\n    }}>\r\n      <div style={{ \r\n        maxWidth: '600px', \r\n        margin: '0 auto', \r\n        backgroundColor: 'white', \r\n        padding: '30px', \r\n        borderRadius: '12px', \r\n        boxShadow: '0 4px 6px rgba(0,0,0,0.1)' \r\n      }}>\r\n        \r\n        <h1 style={{ fontSize: '24px', marginBottom: '20px', color: '#c05621' }}>\r\n          🔄 Reset Système Test Admin\r\n        </h1>\r\n\r\n        <div style={{ \r\n          backgroundColor: '#fed7d7', \r\n          border: '2px solid #e53e3e',\r\n          padding: '20px', \r\n          borderRadius: '8px', \r\n          marginBottom: '30px' \r\n        }}>\r\n          <h2 style={{ fontSize: '18px', marginBottom: '10px', color: '#e53e3e' }}>\r\n            ⚠️ Attention - Zone Dangereuse\r\n          </h2>\r\n          <p style={{ margin: 0, color: '#c53030' }}>\r\n            Cette page permet de reset complètement le système de test admin.\r\n            <br/>Toutes les sessions de test seront supprimées.\r\n            <br/><strong>Utilise uniquement en cas de problème ou pour recommencer les tests.</strong>\r\n          </p>\r\n        </div>\r\n\r\n        <div style={{ marginBottom: '30px' }}>\r\n          <button \r\n            onClick={verifierStatus}\r\n            disabled={loading}\r\n            style={{ \r\n              padding: '12px 24px', \r\n              backgroundColor: '#3182ce', \r\n              color: 'white', \r\n              border: 'none', \r\n              borderRadius: '8px', \r\n              cursor: loading ? 'not-allowed' : 'pointer',\r\n              marginRight: '15px',\r\n              opacity: loading ? 0.6 : 1\r\n            }}\r\n          >\r\n            🔍 Vérifier Status Actuel\r\n          </button>\r\n\r\n          <button \r\n            onClick={resetComplet}\r\n            disabled={loading}\r\n            style={{ \r\n              padding: '12px 24px', \r\n              backgroundColor: '#e53e3e', \r\n              color: 'white', \r\n              border: 'none', \r\n              borderRadius: '8px', \r\n              cursor: loading ? 'not-allowed' : 'pointer',\r\n              opacity: loading ? 0.6 : 1\r\n            }}\r\n          >\r\n            🚨 RESET COMPLET\r\n          </button>\r\n        </div>\r\n\r\n        {message && (\r\n          <div style={{ \r\n            backgroundColor: message.includes('❌') ? '#fed7d7' : \r\n                           message.includes('✅') ? '#c6f6d5' : '#e6fffa',\r\n            color: message.includes('❌') ? '#e53e3e' : \r\n                   message.includes('✅') ? '#38a169' : '#2d3748',\r\n            padding: '20px', \r\n            borderRadius: '8px', \r\n            marginBottom: '20px',\r\n            whiteSpace: 'pre-line',\r\n            fontSize: '14px',\r\n            border: '1px solid',\r\n            borderColor: message.includes('❌') ? '#e53e3e' : \r\n                        message.includes('✅') ? '#38a169' : '#2d3748'\r\n          }}>\r\n            {message}\r\n          </div>\r\n        )}\r\n\r\n        <div style={{ \r\n          backgroundColor: '#f7fafc', \r\n          padding: '20px', \r\n          borderRadius: '8px',\r\n          marginBottom: '20px'\r\n        }}>\r\n          <h3 style={{ fontSize: '16px', marginBottom: '15px', color: '#2d3748' }}>\r\n            🎯 Cas d'utilisation du Reset\r\n          </h3>\r\n          \r\n          <ul style={{ color: '#4a5568', lineHeight: '1.6' }}>\r\n            <li><strong>🐛 Bug dans les tests:</strong> Sessions bloquées anormalement</li>\r\n            <li><strong>🔄 Recommencer:</strong> Repartir de zéro pour nouveaux tests</li>\r\n            <li><strong>🧹 Nettoyage:</strong> Supprimer toutes les données de test</li>\r\n            <li><strong>🚨 Urgence:</strong> Libérer un verrou coincé</li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div style={{ \r\n          backgroundColor: '#edf2f7', \r\n          padding: '20px', \r\n          borderRadius: '8px' \r\n        }}>\r\n          <h3 style={{ fontSize: '16px', marginBottom: '15px', color: '#2d3748' }}>\r\n            🧪 Navigation Tests\r\n          </h3>\r\n          \r\n          <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap' }}>\r\n            <a \r\n              href=\"/test-admin1\" \r\n              style={{ \r\n                padding: '10px 15px', \r\n                backgroundColor: '#3182ce', \r\n                color: 'white', \r\n                textDecoration: 'none', \r\n                borderRadius: '5px',\r\n                fontSize: '14px'\r\n              }}\r\n            >\r\n              🔵 Admin 1\r\n            </a>\r\n            \r\n            <a \r\n              href=\"/test-admin2\" \r\n              style={{ \r\n                padding: '10px 15px', \r\n                backgroundColor: '#7b1fa2', \r\n                color: 'white', \r\n                textDecoration: 'none', \r\n                borderRadius: '5px',\r\n                fontSize: '14px'\r\n              }}\r\n            >\r\n              🟣 Admin 2\r\n            </a>\r\n            \r\n            <a \r\n              href=\"/test-admin-status\" \r\n              style={{ \r\n                padding: '10px 15px', \r\n                backgroundColor: '#38a169', \r\n                color: 'white', \r\n                textDecoration: 'none', \r\n                borderRadius: '5px',\r\n                fontSize: '14px'\r\n              }}\r\n            >\r\n              📊 Status\r\n            </a>\r\n            \r\n            <a \r\n              href=\"/test-deconnexion\" \r\n              style={{ \r\n                padding: '10px 15px', \r\n                backgroundColor: '#805ad5', \r\n                color: 'white', \r\n                textDecoration: 'none', \r\n                borderRadius: '5px',\r\n                fontSize: '14px'\r\n              }}\r\n            >\r\n              🧪 Test Déconnexion\r\n            </a>\r\n          </div>\r\n        </div>\r\n\r\n        <div style={{ marginTop: '20px', fontSize: '12px', color: '#718096' }}>\r\n          <strong>Mode d'emploi:</strong><br/>\r\n          1. <strong>\"Vérifier Status\"</strong> → Voir l'état actuel sans modifications<br/>\r\n          2. <strong>\"RESET COMPLET\"</strong> → Supprimer toutes les sessions de test<br/>\r\n          3. Après reset, tous les admins test peuvent se reconnecter<br/>\r\n          4. Utilise le Status en temps réel pour surveiller les changements\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TestAdminReset",
          "taille": 8372,
          "lignes": 251,
          "dateModif": "2025-08-22T21:43:24.451Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "pages/test-admin-status.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useEffect, useState } from 'react'\r\n\r\nfunction TestAdminStatus() {\r\n  const [status, setStatus] = useState(null)\r\n  const [loading, setLoading] = useState(true)\r\n  const [refreshInterval, setRefreshInterval] = useState(null)\r\n\r\n  const chargerStatus = async () => {\r\n    try {\r\n      const response = await fetch('/api/test-verrou-admin')\r\n      const data = await response.json()\r\n      setStatus(data)\r\n    } catch (error) {\r\n      console.error('Erreur chargement status:', error)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    chargerStatus()\r\n    \r\n    // Refresh automatique toutes les 2 secondes\r\n    const interval = setInterval(chargerStatus, 2000)\r\n    setRefreshInterval(interval)\r\n    \r\n    return () => {\r\n      if (interval) clearInterval(interval)\r\n    }\r\n  }, [])\r\n\r\n  const toggleAutoRefresh = () => {\r\n    if (refreshInterval) {\r\n      clearInterval(refreshInterval)\r\n      setRefreshInterval(null)\r\n    } else {\r\n      const interval = setInterval(chargerStatus, 2000)\r\n      setRefreshInterval(interval)\r\n    }\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <div style={{ padding: '20px', textAlign: 'center' }}>\r\n        Chargement du statut...\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div style={{ \r\n      padding: '20px', \r\n      fontFamily: 'monospace', \r\n      backgroundColor: '#f0f4f8', \r\n      minHeight: '100vh' \r\n    }}>\r\n      <div style={{ \r\n        maxWidth: '800px', \r\n        margin: '0 auto', \r\n        backgroundColor: 'white', \r\n        padding: '30px', \r\n        borderRadius: '12px', \r\n        boxShadow: '0 4px 6px rgba(0,0,0,0.1)' \r\n      }}>\r\n        \r\n        <h1 style={{ fontSize: '24px', marginBottom: '20px', color: '#2d3748' }}>\r\n          📊 Status du Verrou Admin en Temps Réel\r\n        </h1>\r\n\r\n        <div style={{ marginBottom: '20px' }}>\r\n          <button \r\n            onClick={chargerStatus}\r\n            style={{ \r\n              padding: '10px 20px', \r\n              backgroundColor: '#3182ce', \r\n              color: 'white', \r\n              border: 'none', \r\n              borderRadius: '5px', \r\n              cursor: 'pointer', \r\n              marginRight: '10px' \r\n            }}\r\n          >\r\n            🔄 Actualiser\r\n          </button>\r\n          \r\n          <button \r\n            onClick={toggleAutoRefresh}\r\n            style={{ \r\n              padding: '10px 20px', \r\n              backgroundColor: refreshInterval ? '#e53e3e' : '#38a169', \r\n              color: 'white', \r\n              border: 'none', \r\n              borderRadius: '5px', \r\n              cursor: 'pointer',\r\n              marginRight: '10px'\r\n            }}\r\n          >\r\n            {refreshInterval ? '⏸️ Arrêter Auto-Refresh' : '▶️ Démarrer Auto-Refresh'}\r\n          </button>\r\n\r\n          <span style={{ fontSize: '14px', color: '#666' }}>\r\n            (Auto-refresh toutes les 2 secondes)\r\n          </span>\r\n        </div>\r\n\r\n        {/* État Principal */}\r\n        <div style={{ \r\n          marginBottom: '30px', \r\n          padding: '20px', \r\n          backgroundColor: status?.hasActiveSession ? '#fed7d7' : '#c6f6d5', \r\n          borderRadius: '8px', \r\n          border: '2px solid',\r\n          borderColor: status?.hasActiveSession ? '#e53e3e' : '#38a169'\r\n        }}>\r\n          <h2 style={{ fontSize: '20px', marginBottom: '10px' }}>\r\n            🚪 État du Verrou\r\n          </h2>\r\n          \r\n          <div style={{ fontSize: '18px', fontWeight: 'bold' }}>\r\n            {status?.hasActiveSession ? (\r\n              <span style={{ color: '#e53e3e' }}>\r\n                🔒 VERROU ACTIF - {status.activeAdmin} connecté\r\n              </span>\r\n            ) : (\r\n              <span style={{ color: '#38a169' }}>\r\n                🔓 VERROU LIBRE - Aucun admin connecté\r\n              </span>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Détails Sessions */}\r\n        <div style={{ \r\n          backgroundColor: '#f7fafc', \r\n          padding: '20px', \r\n          borderRadius: '8px', \r\n          marginBottom: '20px' \r\n        }}>\r\n          <h3 style={{ fontSize: '16px', marginBottom: '15px', color: '#2d3748' }}>\r\n            📋 Détails des Sessions\r\n          </h3>\r\n          \r\n          {status?.allSessions && Object.keys(status.allSessions).length > 0 ? (\r\n            <div style={{ overflowX: 'auto' }}>\r\n              <table style={{ \r\n                width: '100%', \r\n                borderCollapse: 'collapse',\r\n                fontSize: '14px'\r\n              }}>\r\n                <thead>\r\n                  <tr style={{ backgroundColor: '#edf2f7' }}>\r\n                    <th style={{ padding: '8px', border: '1px solid #cbd5e0', textAlign: 'left' }}>Admin</th>\r\n                    <th style={{ padding: '8px', border: '1px solid #cbd5e0', textAlign: 'left' }}>User ID</th>\r\n                    <th style={{ padding: '8px', border: '1px solid #cbd5e0', textAlign: 'left' }}>Status</th>\r\n                    <th style={{ padding: '8px', border: '1px solid #cbd5e0', textAlign: 'left' }}>Début Session</th>\r\n                    <th style={{ padding: '8px', border: '1px solid #cbd5e0', textAlign: 'left' }}>Dernier Heartbeat</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {Object.entries(status.allSessions).map(([userId, session]) => (\r\n                    <tr key={userId}>\r\n                      <td style={{ padding: '8px', border: '1px solid #cbd5e0' }}>\r\n                        {session.adminEmail}\r\n                      </td>\r\n                      <td style={{ padding: '8px', border: '1px solid #cbd5e0', fontFamily: 'monospace' }}>\r\n                        {userId}\r\n                      </td>\r\n                      <td style={{ padding: '8px', border: '1px solid #cbd5e0' }}>\r\n                        <span style={{ \r\n                          padding: '4px 8px', \r\n                          borderRadius: '4px',\r\n                          backgroundColor: session.isActive ? '#fed7d7' : '#c6f6d5',\r\n                          color: session.isActive ? '#e53e3e' : '#38a169',\r\n                          fontWeight: 'bold',\r\n                          fontSize: '12px'\r\n                        }}>\r\n                          {session.isActive ? '🔴 ACTIF' : '⚫ INACTIF'}\r\n                        </span>\r\n                      </td>\r\n                      <td style={{ padding: '8px', border: '1px solid #cbd5e0' }}>\r\n                        {new Date(session.sessionStart).toLocaleString('fr-FR')}\r\n                      </td>\r\n                      <td style={{ padding: '8px', border: '1px solid #cbd5e0' }}>\r\n                        {new Date(session.lastHeartbeat).toLocaleString('fr-FR')}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          ) : (\r\n            <div style={{ \r\n              textAlign: 'center', \r\n              color: '#718096', \r\n              fontStyle: 'italic',\r\n              padding: '20px'\r\n            }}>\r\n              Aucune session enregistrée\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Navigation */}\r\n        <div style={{ \r\n          backgroundColor: '#edf2f7', \r\n          padding: '20px', \r\n          borderRadius: '8px' \r\n        }}>\r\n          <h3 style={{ fontSize: '16px', marginBottom: '15px', color: '#2d3748' }}>\r\n            🧪 Pages de Test\r\n          </h3>\r\n          \r\n          <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap' }}>\r\n            <a \r\n              href=\"/test-admin1\" \r\n              style={{ \r\n                padding: '10px 15px', \r\n                backgroundColor: '#3182ce', \r\n                color: 'white', \r\n                textDecoration: 'none', \r\n                borderRadius: '5px',\r\n                fontSize: '14px'\r\n              }}\r\n            >\r\n              🔵 Admin 1\r\n            </a>\r\n            \r\n            <a \r\n              href=\"/test-admin2\" \r\n              style={{ \r\n                padding: '10px 15px', \r\n                backgroundColor: '#7b1fa2', \r\n                color: 'white', \r\n                textDecoration: 'none', \r\n                borderRadius: '5px',\r\n                fontSize: '14px'\r\n              }}\r\n            >\r\n              🟣 Admin 2\r\n            </a>\r\n            \r\n            <a \r\n              href=\"/test-admin-reset\" \r\n              style={{ \r\n                padding: '10px 15px', \r\n                backgroundColor: '#e53e3e', \r\n                color: 'white', \r\n                textDecoration: 'none', \r\n                borderRadius: '5px',\r\n                fontSize: '14px'\r\n              }}\r\n            >\r\n              🔄 Reset\r\n            </a>\r\n            \r\n            <a \r\n              href=\"/test-deconnexion\" \r\n              style={{ \r\n                padding: '10px 15px', \r\n                backgroundColor: '#38a169', \r\n                color: 'white', \r\n                textDecoration: 'none', \r\n                borderRadius: '5px',\r\n                fontSize: '14px'\r\n              }}\r\n            >\r\n              🧪 Test Déconnexion\r\n            </a>\r\n          </div>\r\n        </div>\r\n\r\n        <div style={{ marginTop: '20px', fontSize: '12px', color: '#718096' }}>\r\n          <strong>Instructions de test:</strong><br/>\r\n          1. Observe cet écran en temps réel<br/>\r\n          2. Ouvre Admin 1 et connecte-toi → Verrou devient ACTIF<br/>\r\n          3. Ouvre Admin 2 et essaie de te connecter → Doit être bloqué<br/>\r\n          4. Ferme l'onglet Admin 1 brutalement → Verrou devient LIBRE automatiquement<br/>\r\n          5. Admin 2 peut maintenant se connecter\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TestAdminStatus",
          "taille": 9792,
          "lignes": 285,
          "dateModif": "2025-08-22T21:42:01.677Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "pages/test-admin1.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useEffect, useState } from 'react'\r\n\r\nfunction TestAdmin1() {\r\n  const [isConnected, setIsConnected] = useState(false)\r\n  const [logs, setLogs] = useState([])\r\n  const [userId] = useState('admin1-test-123')\r\n  const [adminEmail] = useState('admin1@test.aclef')\r\n  const [sessionId, setSessionId] = useState('')\r\n\r\n  useEffect(() => {\r\n    setSessionId(`session-${Date.now()}`)\r\n  }, [])\r\n  const [loginError, setLoginError] = useState('')\r\n\r\n  const ajouterLog = (message) => {\r\n    const timestamp = new Date().toLocaleTimeString()\r\n    const nouveauLog = `${timestamp}: ${message}`\r\n    setLogs(prev => [...prev, nouveauLog])\r\n    console.log('🧪 ADMIN1:', nouveauLog)\r\n  }\r\n\r\n  // 🧪 SOLUTION SENDBEACON + XHR POUR FERMETURE\r\n  const deconnexionUrgence = () => {\r\n    try {\r\n      const data = JSON.stringify({\r\n        action: 'logout_emergency',\r\n        userId,\r\n        adminEmail,\r\n        sessionId,\r\n        timestamp: Date.now()\r\n      })\r\n\r\n      // Essayer SendBeacon d'abord\r\n      if (navigator.sendBeacon) {\r\n        const success = navigator.sendBeacon('/api/test-verrou-admin', data)\r\n        console.log('🚨 SendBeacon déconnexion urgence:', success ? 'ENVOYÉ' : 'ÉCHEC')\r\n        \r\n        if (success) {\r\n          ajouterLog('🚨 Déconnexion urgence SendBeacon envoyée')\r\n          return true\r\n        }\r\n      }\r\n\r\n      // Fallback XHR synchrone\r\n      const client = new XMLHttpRequest()\r\n      client.open(\"POST\", \"/api/test-verrou-admin\", false)\r\n      client.setRequestHeader(\"Content-Type\", \"application/json\")\r\n      client.send(data)\r\n\r\n      if (client.status === 200) {\r\n        ajouterLog('🚨 Déconnexion urgence XHR envoyée')\r\n        console.log('🚨 XHR déconnexion urgence: SUCCÈS')\r\n        return true\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('❌ Erreur déconnexion urgence:', error)\r\n      ajouterLog(`❌ Erreur déconnexion urgence: ${error.message}`)\r\n    }\r\n    \r\n    return false\r\n  }\r\n\r\n  // Gestionnaire fermeture d'onglet\r\n  const handlePageUnload = (e) => {\r\n    if (isConnected) {\r\n      console.log('🚪 ADMIN1 - Fermeture détectée, déconnexion urgence...')\r\n      deconnexionUrgence()\r\n    }\r\n  }\r\n\r\n  // Setup des event listeners\r\n  useEffect(() => {\r\n    if (isConnected) {\r\n      window.addEventListener('beforeunload', handlePageUnload)\r\n      window.addEventListener('unload', handlePageUnload)\r\n      \r\n      return () => {\r\n        window.removeEventListener('beforeunload', handlePageUnload)\r\n        window.removeEventListener('unload', handlePageUnload)\r\n      }\r\n    }\r\n  }, [isConnected])\r\n\r\n  const login = async () => {\r\n    try {\r\n      setLoginError('')\r\n      ajouterLog('🔐 Tentative de connexion...')\r\n      \r\n      const response = await fetch('/api/test-verrou-admin', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          action: 'login',\r\n          userId,\r\n          adminEmail,\r\n          sessionId\r\n        })\r\n      })\r\n\r\n      const data = await response.json()\r\n\r\n      if (response.status === 200) {\r\n        setIsConnected(true)\r\n        ajouterLog('✅ Connexion réussie - Verrou activé')\r\n      } else if (response.status === 423) {\r\n        setLoginError(`❌ Accès refusé: ${data.activeAdmin} est déjà connecté`)\r\n        ajouterLog(`❌ Connexion refusée: ${data.activeAdmin} déjà connecté`)\r\n      } else {\r\n        setLoginError(`❌ Erreur: ${data.message}`)\r\n        ajouterLog(`❌ Erreur connexion: ${data.message}`)\r\n      }\r\n\r\n    } catch (error) {\r\n      setLoginError(`❌ Erreur: ${error.message}`)\r\n      ajouterLog(`❌ Erreur: ${error.message}`)\r\n    }\r\n  }\r\n\r\n  const logout = async () => {\r\n    try {\r\n      ajouterLog('🚪 Déconnexion normale...')\r\n      \r\n      await fetch('/api/test-verrou-admin', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          action: 'logout',\r\n          userId,\r\n          adminEmail\r\n        })\r\n      })\r\n\r\n      setIsConnected(false)\r\n      ajouterLog('✅ Déconnexion normale réussie - Verrou libéré')\r\n\r\n    } catch (error) {\r\n      ajouterLog(`❌ Erreur déconnexion: ${error.message}`)\r\n    }\r\n  }\r\n\r\n  const simulerFermeture = () => {\r\n    ajouterLog('🧪 Simulation fermeture onglet...')\r\n    deconnexionUrgence()\r\n    setIsConnected(false)\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding: '20px', fontFamily: 'monospace', backgroundColor: '#e3f2fd', minHeight: '100vh' }}>\r\n      <div style={{ maxWidth: '600px', margin: '0 auto', backgroundColor: 'white', padding: '30px', borderRadius: '12px', boxShadow: '0 4px 6px rgba(0,0,0,0.1)' }}>\r\n        \r\n        <h1 style={{ fontSize: '24px', marginBottom: '20px', color: '#1976d2' }}>\r\n          🧪 Test Admin 1 - Système Verrou\r\n        </h1>\r\n\r\n        <div style={{ marginBottom: '20px', padding: '15px', backgroundColor: isConnected ? '#e8f5e8' : '#fff3e0', borderRadius: '8px', border: '2px solid', borderColor: isConnected ? '#4caf50' : '#ff9800' }}>\r\n          <strong>Status:</strong> \r\n          <span style={{ marginLeft: '10px', fontWeight: 'bold', color: isConnected ? '#4caf50' : '#ff9800' }}>\r\n            {isConnected ? '🟢 CONNECTÉ (Verrou actif)' : '🟡 DÉCONNECTÉ'}\r\n          </span>\r\n        </div>\r\n\r\n        <div style={{ marginBottom: '20px' }}>\r\n          <strong>Admin:</strong> {adminEmail}<br/>\r\n          <strong>User ID:</strong> {userId}<br/>\r\n          <strong>Session:</strong> {sessionId}\r\n        </div>\r\n\r\n        {loginError && (\r\n          <div style={{ backgroundColor: '#ffebee', color: '#c62828', padding: '10px', borderRadius: '5px', marginBottom: '20px' }}>\r\n            {loginError}\r\n          </div>\r\n        )}\r\n\r\n        <div style={{ marginBottom: '20px' }}>\r\n          {!isConnected ? (\r\n            <button onClick={login} style={{ padding: '12px 24px', backgroundColor: '#1976d2', color: 'white', border: 'none', borderRadius: '8px', cursor: 'pointer', marginRight: '10px' }}>\r\n              🔐 Se Connecter\r\n            </button>\r\n          ) : (\r\n            <>\r\n              <button onClick={logout} style={{ padding: '12px 24px', backgroundColor: '#4caf50', color: 'white', border: 'none', borderRadius: '8px', cursor: 'pointer', marginRight: '10px' }}>\r\n                🚪 Déconnexion Normale\r\n              </button>\r\n              \r\n              <button onClick={simulerFermeture} style={{ padding: '12px 24px', backgroundColor: '#f44336', color: 'white', border: 'none', borderRadius: '8px', cursor: 'pointer', marginRight: '10px' }}>\r\n                🚨 Simuler Fermeture Onglet\r\n              </button>\r\n            </>\r\n          )}\r\n          \r\n          <button onClick={() => setLogs([])} style={{ padding: '12px 24px', backgroundColor: '#6b7280', color: 'white', border: 'none', borderRadius: '8px', cursor: 'pointer' }}>\r\n            🗑️ Vider Logs\r\n          </button>\r\n        </div>\r\n\r\n        <div style={{ backgroundColor: '#1f2937', color: '#f9fafb', padding: '20px', borderRadius: '8px', height: '200px', overflow: 'auto', fontSize: '14px' }}>\r\n          <div style={{ fontWeight: 'bold', marginBottom: '10px' }}>📊 Logs Admin 1:</div>\r\n          {logs.map((log, index) => (\r\n            <div key={index} style={{ marginBottom: '5px' }}>{log}</div>\r\n          ))}\r\n          {logs.length === 0 && (\r\n            <div style={{ color: '#9ca3af', fontStyle: 'italic' }}>Aucun log...</div>\r\n          )}\r\n        </div>\r\n\r\n        <div style={{ marginTop: '20px', fontSize: '14px', color: '#6b7280' }}>\r\n          <strong>Test:</strong><br/>\r\n          1. Connecte-toi en tant qu'Admin 1<br/>\r\n          2. Ouvre Admin 2 dans un nouvel onglet<br/>\r\n          3. Essaie de connecter Admin 2 (doit être bloqué)<br/>\r\n          4. Ferme cet onglet ou simule fermeture<br/>\r\n          5. Réessaie Admin 2 (doit pouvoir se connecter)\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TestAdmin1",
          "taille": 8012,
          "lignes": 220,
          "dateModif": "2025-08-22T21:48:04.935Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "pages/test-admin2.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useEffect, useState } from 'react'\r\n\r\nfunction TestAdmin2() {\r\n  const [isConnected, setIsConnected] = useState(false)\r\n  const [logs, setLogs] = useState([])\r\n  const [userId] = useState('admin2-test-456')\r\n  const [adminEmail] = useState('admin2@test.aclef')\r\n  const [sessionId, setSessionId] = useState('')\r\n\r\n  useEffect(() => {\r\n    setSessionId(`session-${Date.now()}`)\r\n  }, [])\r\n  const [loginError, setLoginError] = useState('')\r\n\r\n  const ajouterLog = (message) => {\r\n    const timestamp = new Date().toLocaleTimeString()\r\n    const nouveauLog = `${timestamp}: ${message}`\r\n    setLogs(prev => [...prev, nouveauLog])\r\n    console.log('🧪 ADMIN2:', nouveauLog)\r\n  }\r\n\r\n  // 🧪 SOLUTION SENDBEACON + XHR POUR FERMETURE\r\n  const deconnexionUrgence = () => {\r\n    try {\r\n      const data = JSON.stringify({\r\n        action: 'logout_emergency',\r\n        userId,\r\n        adminEmail,\r\n        sessionId,\r\n        timestamp: Date.now()\r\n      })\r\n\r\n      // Essayer SendBeacon d'abord\r\n      if (navigator.sendBeacon) {\r\n        const success = navigator.sendBeacon('/api/test-verrou-admin', data)\r\n        console.log('🚨 SendBeacon déconnexion urgence:', success ? 'ENVOYÉ' : 'ÉCHEC')\r\n        \r\n        if (success) {\r\n          ajouterLog('🚨 Déconnexion urgence SendBeacon envoyée')\r\n          return true\r\n        }\r\n      }\r\n\r\n      // Fallback XHR synchrone\r\n      const client = new XMLHttpRequest()\r\n      client.open(\"POST\", \"/api/test-verrou-admin\", false)\r\n      client.setRequestHeader(\"Content-Type\", \"application/json\")\r\n      client.send(data)\r\n\r\n      if (client.status === 200) {\r\n        ajouterLog('🚨 Déconnexion urgence XHR envoyée')\r\n        console.log('🚨 XHR déconnexion urgence: SUCCÈS')\r\n        return true\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('❌ Erreur déconnexion urgence:', error)\r\n      ajouterLog(`❌ Erreur déconnexion urgence: ${error.message}`)\r\n    }\r\n    \r\n    return false\r\n  }\r\n\r\n  // Gestionnaire fermeture d'onglet\r\n  const handlePageUnload = (e) => {\r\n    if (isConnected) {\r\n      console.log('🚪 ADMIN2 - Fermeture détectée, déconnexion urgence...')\r\n      deconnexionUrgence()\r\n    }\r\n  }\r\n\r\n  // Setup des event listeners\r\n  useEffect(() => {\r\n    if (isConnected) {\r\n      window.addEventListener('beforeunload', handlePageUnload)\r\n      window.addEventListener('unload', handlePageUnload)\r\n      \r\n      return () => {\r\n        window.removeEventListener('beforeunload', handlePageUnload)\r\n        window.removeEventListener('unload', handlePageUnload)\r\n      }\r\n    }\r\n  }, [isConnected])\r\n\r\n  const login = async () => {\r\n    try {\r\n      setLoginError('')\r\n      ajouterLog('🔐 Tentative de connexion...')\r\n      \r\n      const response = await fetch('/api/test-verrou-admin', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          action: 'login',\r\n          userId,\r\n          adminEmail,\r\n          sessionId\r\n        })\r\n      })\r\n\r\n      const data = await response.json()\r\n\r\n      if (response.status === 200) {\r\n        setIsConnected(true)\r\n        ajouterLog('✅ Connexion réussie - Verrou activé')\r\n      } else if (response.status === 423) {\r\n        setLoginError(`❌ Accès refusé: ${data.activeAdmin} est déjà connecté`)\r\n        ajouterLog(`❌ Connexion refusée: ${data.activeAdmin} déjà connecté`)\r\n      } else {\r\n        setLoginError(`❌ Erreur: ${data.message}`)\r\n        ajouterLog(`❌ Erreur connexion: ${data.message}`)\r\n      }\r\n\r\n    } catch (error) {\r\n      setLoginError(`❌ Erreur: ${error.message}`)\r\n      ajouterLog(`❌ Erreur: ${error.message}`)\r\n    }\r\n  }\r\n\r\n  const logout = async () => {\r\n    try {\r\n      ajouterLog('🚪 Déconnexion normale...')\r\n      \r\n      await fetch('/api/test-verrou-admin', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          action: 'logout',\r\n          userId,\r\n          adminEmail\r\n        })\r\n      })\r\n\r\n      setIsConnected(false)\r\n      ajouterLog('✅ Déconnexion normale réussie - Verrou libéré')\r\n\r\n    } catch (error) {\r\n      ajouterLog(`❌ Erreur déconnexion: ${error.message}`)\r\n    }\r\n  }\r\n\r\n  const simulerFermeture = () => {\r\n    ajouterLog('🧪 Simulation fermeture onglet...')\r\n    deconnexionUrgence()\r\n    setIsConnected(false)\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding: '20px', fontFamily: 'monospace', backgroundColor: '#f3e5f5', minHeight: '100vh' }}>\r\n      <div style={{ maxWidth: '600px', margin: '0 auto', backgroundColor: 'white', padding: '30px', borderRadius: '12px', boxShadow: '0 4px 6px rgba(0,0,0,0.1)' }}>\r\n        \r\n        <h1 style={{ fontSize: '24px', marginBottom: '20px', color: '#7b1fa2' }}>\r\n          🧪 Test Admin 2 - Système Verrou\r\n        </h1>\r\n\r\n        <div style={{ marginBottom: '20px', padding: '15px', backgroundColor: isConnected ? '#e8f5e8' : '#fff3e0', borderRadius: '8px', border: '2px solid', borderColor: isConnected ? '#4caf50' : '#ff9800' }}>\r\n          <strong>Status:</strong> \r\n          <span style={{ marginLeft: '10px', fontWeight: 'bold', color: isConnected ? '#4caf50' : '#ff9800' }}>\r\n            {isConnected ? '🟢 CONNECTÉ (Verrou actif)' : '🟡 DÉCONNECTÉ'}\r\n          </span>\r\n        </div>\r\n\r\n        <div style={{ marginBottom: '20px' }}>\r\n          <strong>Admin:</strong> {adminEmail}<br/>\r\n          <strong>User ID:</strong> {userId}<br/>\r\n          <strong>Session:</strong> {sessionId}\r\n        </div>\r\n\r\n        {loginError && (\r\n          <div style={{ backgroundColor: '#ffebee', color: '#c62828', padding: '10px', borderRadius: '5px', marginBottom: '20px' }}>\r\n            {loginError}\r\n          </div>\r\n        )}\r\n\r\n        <div style={{ marginBottom: '20px' }}>\r\n          {!isConnected ? (\r\n            <button onClick={login} style={{ padding: '12px 24px', backgroundColor: '#7b1fa2', color: 'white', border: 'none', borderRadius: '8px', cursor: 'pointer', marginRight: '10px' }}>\r\n              🔐 Se Connecter\r\n            </button>\r\n          ) : (\r\n            <>\r\n              <button onClick={logout} style={{ padding: '12px 24px', backgroundColor: '#4caf50', color: 'white', border: 'none', borderRadius: '8px', cursor: 'pointer', marginRight: '10px' }}>\r\n                🚪 Déconnexion Normale\r\n              </button>\r\n              \r\n              <button onClick={simulerFermeture} style={{ padding: '12px 24px', backgroundColor: '#f44336', color: 'white', border: 'none', borderRadius: '8px', cursor: 'pointer', marginRight: '10px' }}>\r\n                🚨 Simuler Fermeture Onglet\r\n              </button>\r\n            </>\r\n          )}\r\n          \r\n          <button onClick={() => setLogs([])} style={{ padding: '12px 24px', backgroundColor: '#6b7280', color: 'white', border: 'none', borderRadius: '8px', cursor: 'pointer' }}>\r\n            🗑️ Vider Logs\r\n          </button>\r\n        </div>\r\n\r\n        <div style={{ backgroundColor: '#1f2937', color: '#f9fafb', padding: '20px', borderRadius: '8px', height: '200px', overflow: 'auto', fontSize: '14px' }}>\r\n          <div style={{ fontWeight: 'bold', marginBottom: '10px' }}>📊 Logs Admin 2:</div>\r\n          {logs.map((log, index) => (\r\n            <div key={index} style={{ marginBottom: '5px' }}>{log}</div>\r\n          ))}\r\n          {logs.length === 0 && (\r\n            <div style={{ color: '#9ca3af', fontStyle: 'italic' }}>Aucun log...</div>\r\n          )}\r\n        </div>\r\n\r\n        <div style={{ marginTop: '20px', fontSize: '14px', color: '#6b7280' }}>\r\n          <strong>Test:</strong><br/>\r\n          1. Connecte-toi en tant qu'Admin 2<br/>\r\n          2. Si Admin 1 est connecté, tu seras bloqué<br/>\r\n          3. Quand Admin 1 se déconnecte (normal ou fermeture), réessaie<br/>\r\n          4. Tu devrais pouvoir te connecter immédiatement<br/>\r\n          5. Teste la fermeture d'onglet pour libérer le verrou\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TestAdmin2",
          "taille": 8048,
          "lignes": 220,
          "dateModif": "2025-08-22T21:48:15.659Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "pages/test-deconnexion.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useEffect, useState } from 'react'\r\n\r\nfunction TestDeconnexion() {\r\n  const [logs, setLogs] = useState([])\r\n  const [sessionActive, setSessionActive] = useState(true)\r\n  const [testUserId] = useState('test-admin-123')\r\n\r\n  const ajouterLog = (message) => {\r\n    const timestamp = new Date().toLocaleTimeString()\r\n    const nouveauLog = `${timestamp}: ${message}`\r\n    setLogs(prev => [...prev, nouveauLog])\r\n    console.log('🧪 TEST:', nouveauLog)\r\n  }\r\n\r\n  // 🧪 SOLUTION 1 : SEND BEACON\r\n  const testSendBeacon = () => {\r\n    try {\r\n      const data = JSON.stringify({\r\n        userId: testUserId,\r\n        action: 'deconnexion',\r\n        method: 'sendBeacon',\r\n        timestamp: Date.now()\r\n      })\r\n\r\n      if (navigator.sendBeacon) {\r\n        const success = navigator.sendBeacon('/api/test-deconnexion', data)\r\n        ajouterLog(`SendBeacon: ${success ? 'SUCCÈS' : 'ÉCHEC'}`)\r\n        return success\r\n      } else {\r\n        ajouterLog('SendBeacon NON SUPPORTÉ')\r\n        return false\r\n      }\r\n    } catch (error) {\r\n      ajouterLog(`Erreur SendBeacon: ${error.message}`)\r\n      return false\r\n    }\r\n  }\r\n\r\n  // 🧪 SOLUTION 2 : XHR SYNCHRONE\r\n  const testXHRSynchrone = () => {\r\n    try {\r\n      const data = JSON.stringify({\r\n        userId: testUserId,\r\n        action: 'deconnexion',\r\n        method: 'xhr_synchrone',\r\n        timestamp: Date.now()\r\n      })\r\n\r\n      const client = new XMLHttpRequest()\r\n      client.open(\"POST\", \"/api/test-deconnexion\", false) // false = synchrone\r\n      client.setRequestHeader(\"Content-Type\", \"application/json\")\r\n      client.send(data)\r\n\r\n      if (client.status === 200) {\r\n        ajouterLog(`XHR Synchrone: SUCCÈS (${client.status})`)\r\n        return true\r\n      } else {\r\n        ajouterLog(`XHR Synchrone: ÉCHEC (${client.status})`)\r\n        return false\r\n      }\r\n    } catch (error) {\r\n      ajouterLog(`Erreur XHR: ${error.message}`)\r\n      return false\r\n    }\r\n  }\r\n\r\n  // 🧪 DÉTECTION FERMETURE VS REFRESH\r\n  const detecterTypeEvenement = (e) => {\r\n    const isRefresh = e.persisted || \r\n                     (window.performance && window.performance.navigation.type === 1)\r\n    return isRefresh ? 'REFRESH' : 'FERMETURE_REELLE'\r\n  }\r\n\r\n  // 🧪 GESTIONNAIRE PRINCIPAL\r\n  const handlePageUnload = (e) => {\r\n    const typeEvenement = detecterTypeEvenement(e)\r\n    \r\n    if (typeEvenement === 'REFRESH') {\r\n      console.log('🔄 REFRESH DÉTECTÉ - Session préservée')\r\n      return\r\n    }\r\n\r\n    console.log('🚪 FERMETURE RÉELLE - Test déconnexion...')\r\n\r\n    // Tester Solution 1\r\n    const beaconSuccess = testSendBeacon()\r\n    \r\n    // Fallback Solution 2\r\n    if (!beaconSuccess) {\r\n      console.log('🔄 Fallback XHR...')\r\n      testXHRSynchrone()\r\n    }\r\n\r\n    setSessionActive(false)\r\n  }\r\n\r\n  // 🧪 SETUP\r\n  useEffect(() => {\r\n    ajouterLog('🚀 Test démarré')\r\n\r\n    window.addEventListener('beforeunload', handlePageUnload)\r\n    window.addEventListener('unload', handlePageUnload)\r\n\r\n    return () => {\r\n      window.removeEventListener('beforeunload', handlePageUnload)\r\n      window.removeEventListener('unload', handlePageUnload)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div style={{ \r\n      padding: '20px', \r\n      fontFamily: 'monospace',\r\n      backgroundColor: '#f8fafc',\r\n      minHeight: '100vh'\r\n    }}>\r\n      <div style={{\r\n        maxWidth: '800px',\r\n        margin: '0 auto',\r\n        backgroundColor: 'white',\r\n        padding: '30px',\r\n        borderRadius: '12px',\r\n        boxShadow: '0 4px 6px rgba(0,0,0,0.1)'\r\n      }}>\r\n        \r\n        <h1 style={{ fontSize: '24px', marginBottom: '20px' }}>\r\n          🧪 Test Déconnexion sur Fermeture\r\n        </h1>\r\n\r\n        <div style={{ marginBottom: '20px' }}>\r\n          <strong>Status:</strong> \r\n          <span style={{\r\n            color: sessionActive ? 'green' : 'red',\r\n            marginLeft: '10px'\r\n          }}>\r\n            {sessionActive ? '🟢 ACTIVE' : '🔴 DÉCONNECTÉE'}\r\n          </span>\r\n        </div>\r\n\r\n        <div style={{ marginBottom: '20px' }}>\r\n          <button\r\n            onClick={() => testSendBeacon()}\r\n            style={{\r\n              padding: '10px 20px',\r\n              marginRight: '10px',\r\n              backgroundColor: '#3b82f6',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '5px',\r\n              cursor: 'pointer'\r\n            }}\r\n          >\r\n            🧪 Test SendBeacon\r\n          </button>\r\n\r\n          <button\r\n            onClick={() => testXHRSynchrone()}\r\n            style={{\r\n              padding: '10px 20px',\r\n              marginRight: '10px',\r\n              backgroundColor: '#10b981',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '5px',\r\n              cursor: 'pointer'\r\n            }}\r\n          >\r\n            🧪 Test XHR Synchrone\r\n          </button>\r\n\r\n          <button\r\n            onClick={() => setLogs([])}\r\n            style={{\r\n              padding: '10px 20px',\r\n              backgroundColor: '#6b7280',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '5px',\r\n              cursor: 'pointer'\r\n            }}\r\n          >\r\n            🗑️ Vider Logs\r\n          </button>\r\n        </div>\r\n\r\n        <div style={{\r\n          backgroundColor: '#1f2937',\r\n          color: '#f9fafb',\r\n          padding: '20px',\r\n          borderRadius: '8px',\r\n          height: '300px',\r\n          overflow: 'auto',\r\n          fontSize: '14px'\r\n        }}>\r\n          <div style={{ fontWeight: 'bold', marginBottom: '10px' }}>\r\n            📊 Logs de Test:\r\n          </div>\r\n          {logs.map((log, index) => (\r\n            <div key={index} style={{ marginBottom: '5px' }}>\r\n              {log}\r\n            </div>\r\n          ))}\r\n          {logs.length === 0 && (\r\n            <div style={{ color: '#9ca3af', fontStyle: 'italic' }}>\r\n              Aucun log pour le moment...\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div style={{ marginTop: '20px', fontSize: '14px', color: '#6b7280' }}>\r\n          <strong>Instructions:</strong><br/>\r\n          1. Ouvre les outils développeur (F12) pour voir les logs console<br/>\r\n          2. Teste les boutons manuellement<br/>\r\n          3. Ferme l'onglet ou actualise pour tester la détection automatique<br/>\r\n          4. Vérifie les logs dans l'API endpoint\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TestDeconnexion",
          "taille": 6499,
          "lignes": 222,
          "dateModif": "2025-08-22T17:44:43.634Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "pages/test-messagerie.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState } from 'react'\r\n\r\nexport default function TestMessagerie() {\r\n  const [testStep, setTestStep] = useState(0)\r\n  const [testResults, setTestResults] = useState([])\r\n  const [error, setError] = useState(null)\r\n\r\n  const addResult = (step, message, success = true) => {\r\n    setTestResults(prev => [...prev, { step, message, success, timestamp: new Date().toLocaleTimeString() }])\r\n  }\r\n\r\n  const runTest = async (stepNumber) => {\r\n    try {\r\n      setError(null)\r\n      \r\n      switch(stepNumber) {\r\n        case 1:\r\n          addResult(1, \"✅ Page de test chargée avec succès\")\r\n          addResult(1, \"✅ Import React useState OK\")\r\n          break\r\n          \r\n        case 2:\r\n          addResult(2, \"🔍 Test import Supabase...\")\r\n          const { supabase } = await import('../lib/supabaseClient')\r\n          addResult(2, \"✅ Import supabaseClient OK\")\r\n          break\r\n          \r\n        case 3:\r\n          addResult(3, \"🔍 Test simple connexion Supabase...\")\r\n          const { supabase: supabaseTest } = await import('../lib/supabaseClient')\r\n          const { data, error: supabaseError } = await supabaseTest.from('users').select('id').limit(1)\r\n          if (supabaseError) {\r\n            throw new Error(`Supabase: ${supabaseError.message}`)\r\n          }\r\n          addResult(3, `✅ Connexion Supabase OK (${data?.length || 0} résultats)`)\r\n          break\r\n          \r\n        case 4:\r\n          addResult(4, \"🔍 Test import MessagerieSafeWrapper...\")\r\n          const MessagerieSafeWrapper = await import('../components/MessagerieSafeWrapper')\r\n          addResult(4, \"✅ Import MessagerieSafeWrapper OK\")\r\n          break\r\n          \r\n        case 5:\r\n          addResult(5, \"🔍 Test import MessagerieDashboard...\")\r\n          const MessagerieDashboard = await import('../components/MessagerieDashboard')\r\n          addResult(5, \"✅ Import MessagerieDashboard OK\")\r\n          break\r\n          \r\n        default:\r\n          addResult(stepNumber, \"❓ Test non défini\")\r\n      }\r\n      \r\n      setTestStep(stepNumber)\r\n      \r\n    } catch (err) {\r\n      console.error(`Erreur test ${stepNumber}:`, err)\r\n      setError(err)\r\n      addResult(stepNumber, `❌ Erreur: ${err.message}`, false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{\r\n      minHeight: '100vh',\r\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n      padding: '20px'\r\n    }}>\r\n      {/* Header de debug */}\r\n      <div style={{\r\n        backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n        borderRadius: '12px',\r\n        padding: '20px',\r\n        marginBottom: '20px',\r\n        boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n      }}>\r\n        <h1 style={{\r\n          fontSize: '24px',\r\n          fontWeight: 'bold',\r\n          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n          WebkitBackgroundClip: 'text',\r\n          WebkitTextFillColor: 'transparent',\r\n          margin: 0,\r\n          marginBottom: '10px'\r\n        }}>\r\n          🔧 Debug Progressif - Messagerie\r\n        </h1>\r\n        \r\n        <div style={{\r\n          padding: '10px',\r\n          backgroundColor: '#f0f9ff',\r\n          borderRadius: '6px',\r\n          fontSize: '12px',\r\n          color: '#0369a1',\r\n          marginBottom: '15px'\r\n        }}>\r\n          <strong>🎯 Objectif:</strong> Identifier exactement où se trouve le problème en testant chaque étape individuellement.\r\n        </div>\r\n\r\n        {/* Boutons de test */}\r\n        <div style={{\r\n          display: 'flex',\r\n          gap: '10px',\r\n          flexWrap: 'wrap'\r\n        }}>\r\n          <button\r\n            onClick={() => runTest(1)}\r\n            style={{\r\n              padding: '8px 16px',\r\n              backgroundColor: testStep >= 1 ? '#10b981' : '#3b82f6',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '6px',\r\n              fontSize: '12px',\r\n              cursor: 'pointer',\r\n              fontWeight: '600'\r\n            }}\r\n          >\r\n            {testStep >= 1 ? '✅' : '1'} Page Base\r\n          </button>\r\n          \r\n          <button\r\n            onClick={() => runTest(2)}\r\n            disabled={testStep < 1}\r\n            style={{\r\n              padding: '8px 16px',\r\n              backgroundColor: testStep >= 2 ? '#10b981' : testStep >= 1 ? '#3b82f6' : '#d1d5db',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '6px',\r\n              fontSize: '12px',\r\n              cursor: testStep >= 1 ? 'pointer' : 'not-allowed',\r\n              fontWeight: '600'\r\n            }}\r\n          >\r\n            {testStep >= 2 ? '✅' : '2'} Import Supabase\r\n          </button>\r\n          \r\n          <button\r\n            onClick={() => runTest(3)}\r\n            disabled={testStep < 2}\r\n            style={{\r\n              padding: '8px 16px',\r\n              backgroundColor: testStep >= 3 ? '#10b981' : testStep >= 2 ? '#3b82f6' : '#d1d5db',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '6px',\r\n              fontSize: '12px',\r\n              cursor: testStep >= 2 ? 'pointer' : 'not-allowed',\r\n              fontWeight: '600'\r\n            }}\r\n          >\r\n            {testStep >= 3 ? '✅' : '3'} Test Supabase\r\n          </button>\r\n          \r\n          <button\r\n            onClick={() => runTest(4)}\r\n            disabled={testStep < 3}\r\n            style={{\r\n              padding: '8px 16px',\r\n              backgroundColor: testStep >= 4 ? '#10b981' : testStep >= 3 ? '#3b82f6' : '#d1d5db',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '6px',\r\n              fontSize: '12px',\r\n              cursor: testStep >= 3 ? 'pointer' : 'not-allowed',\r\n              fontWeight: '600'\r\n            }}\r\n          >\r\n            {testStep >= 4 ? '✅' : '4'} SafeWrapper\r\n          </button>\r\n          \r\n          <button\r\n            onClick={() => runTest(5)}\r\n            disabled={testStep < 4}\r\n            style={{\r\n              padding: '8px 16px',\r\n              backgroundColor: testStep >= 5 ? '#10b981' : testStep >= 4 ? '#3b82f6' : '#d1d5db',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '6px',\r\n              fontSize: '12px',\r\n              cursor: testStep >= 4 ? 'pointer' : 'not-allowed',\r\n              fontWeight: '600'\r\n            }}\r\n          >\r\n            {testStep >= 5 ? '✅' : '5'} MessagerieDashboard\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Résultats des tests */}\r\n      <div style={{\r\n        backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n        borderRadius: '12px',\r\n        padding: '20px',\r\n        boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n        marginBottom: '20px'\r\n      }}>\r\n        <h2 style={{\r\n          fontSize: '18px',\r\n          fontWeight: 'bold',\r\n          color: '#374151',\r\n          marginBottom: '15px'\r\n        }}>\r\n          📋 Résultats des Tests\r\n        </h2>\r\n\r\n        {testResults.length === 0 ? (\r\n          <div style={{\r\n            padding: '20px',\r\n            textAlign: 'center',\r\n            color: '#6b7280',\r\n            backgroundColor: '#f9fafb',\r\n            borderRadius: '6px'\r\n          }}>\r\n            Cliquez sur \"1 Page Base\" pour commencer les tests progressifs\r\n          </div>\r\n        ) : (\r\n          <div style={{\r\n            maxHeight: '300px',\r\n            overflow: 'auto',\r\n            border: '1px solid #e5e7eb',\r\n            borderRadius: '6px',\r\n            padding: '10px'\r\n          }}>\r\n            {testResults.map((result, index) => (\r\n              <div\r\n                key={index}\r\n                style={{\r\n                  padding: '8px',\r\n                  marginBottom: '5px',\r\n                  backgroundColor: result.success ? '#f0fdf4' : '#fef2f2',\r\n                  borderLeft: `4px solid ${result.success ? '#10b981' : '#ef4444'}`,\r\n                  borderRadius: '4px',\r\n                  fontSize: '12px',\r\n                  fontFamily: 'monospace'\r\n                }}\r\n              >\r\n                <span style={{ color: '#6b7280' }}>[{result.timestamp}]</span> {result.message}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Erreur détaillée */}\r\n      {error && (\r\n        <div style={{\r\n          backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n          borderRadius: '12px',\r\n          padding: '20px',\r\n          boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n          marginBottom: '20px'\r\n        }}>\r\n          <h3 style={{\r\n            fontSize: '16px',\r\n            fontWeight: 'bold',\r\n            color: '#dc2626',\r\n            marginBottom: '10px'\r\n          }}>\r\n            ❌ Erreur Détectée\r\n          </h3>\r\n          \r\n          <div style={{\r\n            backgroundColor: '#fef2f2',\r\n            border: '1px solid #fecaca',\r\n            borderRadius: '6px',\r\n            padding: '15px'\r\n          }}>\r\n            <div style={{\r\n              fontSize: '14px',\r\n              fontWeight: '600',\r\n              color: '#991b1b',\r\n              marginBottom: '5px'\r\n            }}>\r\n              {error.name}: {error.message}\r\n            </div>\r\n            \r\n            {error.stack && (\r\n              <details style={{ marginTop: '10px' }}>\r\n                <summary style={{ \r\n                  cursor: 'pointer', \r\n                  fontSize: '12px', \r\n                  color: '#6b7280' \r\n                }}>\r\n                  Voir la stack trace\r\n                </summary>\r\n                <pre style={{\r\n                  fontSize: '10px',\r\n                  backgroundColor: '#1f2937',\r\n                  color: '#10b981',\r\n                  padding: '10px',\r\n                  borderRadius: '4px',\r\n                  marginTop: '5px',\r\n                  overflow: 'auto'\r\n                }}>\r\n                  {error.stack}\r\n                </pre>\r\n              </details>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Instructions */}\r\n      <div style={{\r\n        backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n        borderRadius: '12px',\r\n        padding: '20px',\r\n        boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n      }}>\r\n        <h3 style={{\r\n          fontSize: '16px',\r\n          fontWeight: 'bold',\r\n          color: '#f59e0b',\r\n          marginBottom: '10px'\r\n        }}>\r\n          📚 Instructions\r\n        </h3>\r\n        \r\n        <ol style={{\r\n          color: '#374151',\r\n          fontSize: '14px',\r\n          lineHeight: '1.6'\r\n        }}>\r\n          <li><strong>Testez progressivement</strong> en cliquant sur chaque bouton dans l'ordre</li>\r\n          <li><strong>Analysez les résultats</strong> - chaque test doit réussir avant de passer au suivant</li>\r\n          <li><strong>En cas d'erreur</strong> - notez exactement à quelle étape ça échoue</li>\r\n          <li><strong>Consultez la console</strong> (F12) pour plus de détails techniques</li>\r\n        </ol>\r\n      </div>\r\n\r\n      {/* Footer */}\r\n      <div style={{\r\n        textAlign: 'center',\r\n        marginTop: '20px',\r\n        color: 'white',\r\n        fontSize: '12px',\r\n        opacity: 0.8\r\n      }}>\r\n        🔧 Debug Progressif - Identification des problèmes étape par étape\r\n      </div>\r\n    </div>\r\n  )\r\n}",
          "taille": 11317,
          "lignes": 346,
          "dateModif": "2025-08-18T05:23:07.014Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "pages/test-surveillance.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useState, useEffect } from 'react'\r\nimport { supabase } from '../lib/supabaseClient'\r\n\r\nexport default function TestSurveillance() {\r\n  const [sessions, setSessions] = useState([])\r\n  const [autoCleanupLogs, setAutoCleanupLogs] = useState([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [lastUpdate, setLastUpdate] = useState(null)\r\n\r\n  // 🔍 FONCTION DE SURVEILLANCE DES SESSIONS\r\n  const surveillerSessions = async () => {\r\n    try {\r\n      console.log('🔍 Surveillance sessions - ' + new Date().toLocaleTimeString())\r\n      \r\n      // Récupérer toutes les sessions admin\r\n      const { data: sessions, error } = await supabase\r\n        .from('admin_sessions')\r\n        .select('*')\r\n        .order('heartbeat', { ascending: false })\r\n\r\n      if (error) {\r\n        console.error('❌ Erreur surveillance:', error)\r\n        return\r\n      }\r\n\r\n      // Calculer l'inactivité pour chaque session\r\n      const sessionsAvecInactivite = sessions.map(session => {\r\n        const dernierHeartbeat = new Date(session.heartbeat)\r\n        const maintenant = new Date()\r\n        const minutesInactif = (maintenant - dernierHeartbeat) / (1000 * 60)\r\n        \r\n        return {\r\n          ...session,\r\n          minutesInactif: minutesInactif.toFixed(1),\r\n          statut: session.is_active ? \r\n            (minutesInactif > 2 ? '💀 À EXPULSER' : \r\n             minutesInactif > 1 ? '⚠️ RISQUE' : '✅ ACTIF') : \r\n            '❌ INACTIF'\r\n        }\r\n      })\r\n\r\n      setSessions(sessionsAvecInactivite)\r\n      setLastUpdate(new Date().toLocaleTimeString())\r\n      setIsLoading(false)\r\n\r\n    } catch (error) {\r\n      console.error('❌ Erreur surveillance:', error)\r\n    }\r\n  }\r\n\r\n  // 🤖 FONCTION DE TEST AUTO-CLEANUP\r\n  const testerAutoCleanup = async () => {\r\n    try {\r\n      console.log('🤖 Test auto-cleanup manuel...')\r\n      \r\n      const response = await fetch('/api/auto-cleanup', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      })\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json()\r\n        const logEntry = {\r\n          timestamp: new Date().toLocaleTimeString(),\r\n          cleaned: result.cleaned,\r\n          success: true\r\n        }\r\n        \r\n        setAutoCleanupLogs(prev => [logEntry, ...prev.slice(0, 9)]) // Garder 10 logs max\r\n        \r\n        if (result.cleaned > 0) {\r\n          console.log(`🧹 AUTO-CLEANUP: ${result.cleaned} session(s) nettoyée(s)`)\r\n        } else {\r\n          console.log('✅ Auto-cleanup: Aucune session à nettoyer')\r\n        }\r\n        \r\n        // Actualiser la surveillance après cleanup\r\n        await surveillerSessions()\r\n      } else {\r\n        console.warn('⚠️ Auto-cleanup: Erreur serveur')\r\n        setAutoCleanupLogs(prev => [{\r\n          timestamp: new Date().toLocaleTimeString(),\r\n          cleaned: 0,\r\n          success: false,\r\n          error: 'Erreur serveur'\r\n        }, ...prev.slice(0, 9)])\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Erreur test auto-cleanup:', error)\r\n      setAutoCleanupLogs(prev => [{\r\n        timestamp: new Date().toLocaleTimeString(),\r\n        cleaned: 0,\r\n        success: false,\r\n        error: error.message\r\n      }, ...prev.slice(0, 9)])\r\n    }\r\n  }\r\n\r\n  // 🔄 SURVEILLANCE AUTOMATIQUE TOUTES LES 30 SECONDES\r\n  useEffect(() => {\r\n    // Surveillance initiale\r\n    surveillerSessions()\r\n\r\n    // Interval de surveillance (30 secondes)\r\n    const surveillanceInterval = setInterval(surveillerSessions, 30 * 1000)\r\n\r\n    // Interval auto-cleanup (30 secondes)\r\n    const cleanupInterval = setInterval(testerAutoCleanup, 30 * 1000)\r\n\r\n    return () => {\r\n      clearInterval(surveillanceInterval)\r\n      clearInterval(cleanupInterval)\r\n    }\r\n  }, [])\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div style={{\r\n        minHeight: '100vh',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: '#f3f4f6'\r\n      }}>\r\n        <div style={{ textAlign: 'center', color: '#666' }}>\r\n          <div style={{ fontSize: '24px', marginBottom: '10px' }}>🔍</div>\r\n          <div>Initialisation surveillance...</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div style={{\r\n      minHeight: '100vh',\r\n      backgroundColor: '#f3f4f6',\r\n      padding: '20px'\r\n    }}>\r\n      {/* Header */}\r\n      <div style={{\r\n        backgroundColor: 'white',\r\n        borderRadius: '12px',\r\n        padding: '20px',\r\n        marginBottom: '20px',\r\n        boxShadow: '0 4px 6px rgba(0,0,0,0.1)'\r\n      }}>\r\n        <h1 style={{\r\n          fontSize: '24px',\r\n          fontWeight: 'bold',\r\n          color: '#333',\r\n          margin: '0 0 10px 0'\r\n        }}>\r\n          🔍 SURVEILLANCE SESSIONS - TEST AUTO-CLEANUP 2 MINUTES\r\n        </h1>\r\n        <div style={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          gap: '20px',\r\n          fontSize: '14px',\r\n          color: '#666'\r\n        }}>\r\n          <span>📊 Surveillance automatique : 30 secondes</span>\r\n          <span>🤖 Auto-cleanup : 30 secondes</span>\r\n          <span>⏰ Seuil expulsion : 2 minutes</span>\r\n          <span>🔄 Dernière MAJ : {lastUpdate}</span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Layout 2 colonnes */}\r\n      <div style={{\r\n        display: 'grid',\r\n        gridTemplateColumns: '2fr 1fr',\r\n        gap: '20px',\r\n        minHeight: 'calc(100vh - 120px)'\r\n      }}>\r\n        \r\n        {/* Colonne 1: Sessions actives */}\r\n        <div style={{\r\n          backgroundColor: 'white',\r\n          borderRadius: '12px',\r\n          padding: '20px',\r\n          boxShadow: '0 4px 6px rgba(0,0,0,0.1)'\r\n        }}>\r\n          <h2 style={{\r\n            fontSize: '18px',\r\n            fontWeight: 'bold',\r\n            color: '#333',\r\n            marginBottom: '15px',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            gap: '10px'\r\n          }}>\r\n            👥 Sessions Admin ({sessions.length})\r\n            <button\r\n              onClick={surveillerSessions}\r\n              style={{\r\n                padding: '4px 8px',\r\n                backgroundColor: '#3b82f6',\r\n                color: 'white',\r\n                border: 'none',\r\n                borderRadius: '4px',\r\n                fontSize: '12px',\r\n                cursor: 'pointer'\r\n              }}\r\n            >\r\n              🔄 Actualiser\r\n            </button>\r\n          </h2>\r\n\r\n          {sessions.length === 0 ? (\r\n            <div style={{\r\n              textAlign: 'center',\r\n              color: '#666',\r\n              fontSize: '14px',\r\n              padding: '40px'\r\n            }}>\r\n              Aucune session trouvée\r\n            </div>\r\n          ) : (\r\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n              {sessions.map((session, idx) => (\r\n                <div\r\n                  key={session.id}\r\n                  style={{\r\n                    border: '1px solid #e5e7eb',\r\n                    borderRadius: '8px',\r\n                    padding: '15px',\r\n                    backgroundColor: session.is_active ? \r\n                      (parseFloat(session.minutesInactif) > 2 ? '#fee2e2' :\r\n                       parseFloat(session.minutesInactif) > 1 ? '#fef3c7' : '#f0f9ff') : \r\n                      '#f3f4f6'\r\n                  }}\r\n                >\r\n                  <div style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    marginBottom: '8px'\r\n                  }}>\r\n                    <div style={{\r\n                      fontWeight: 'bold',\r\n                      fontSize: '16px',\r\n                      color: '#333'\r\n                    }}>\r\n                      {session.email_admin}\r\n                    </div>\r\n                    <div style={{\r\n                      padding: '2px 8px',\r\n                      borderRadius: '4px',\r\n                      fontSize: '12px',\r\n                      fontWeight: 'bold',\r\n                      backgroundColor: session.statut.includes('ACTIF') ? '#d1fae5' :\r\n                                     session.statut.includes('RISQUE') ? '#fef3c7' :\r\n                                     session.statut.includes('EXPULSER') ? '#fee2e2' : '#f3f4f6',\r\n                      color: session.statut.includes('ACTIF') ? '#065f46' :\r\n                             session.statut.includes('RISQUE') ? '#92400e' :\r\n                             session.statut.includes('EXPULSER') ? '#991b1b' : '#6b7280'\r\n                    }}>\r\n                      {session.statut}\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div style={{\r\n                    display: 'grid',\r\n                    gridTemplateColumns: '1fr 1fr',\r\n                    gap: '10px',\r\n                    fontSize: '12px',\r\n                    color: '#666'\r\n                  }}>\r\n                    <div>📅 Début: {new Date(session.session_start).toLocaleString()}</div>\r\n                    <div>💓 Heartbeat: {new Date(session.heartbeat).toLocaleString()}</div>\r\n                    <div>⏱️ Inactivité: {session.minutesInactif} minutes</div>\r\n                    <div>🔐 Token: ...{session.session_token.slice(-8)}</div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Colonne 2: Logs auto-cleanup */}\r\n        <div style={{\r\n          backgroundColor: 'white',\r\n          borderRadius: '12px',\r\n          padding: '20px',\r\n          boxShadow: '0 4px 6px rgba(0,0,0,0.1)'\r\n        }}>\r\n          <h2 style={{\r\n            fontSize: '18px',\r\n            fontWeight: 'bold',\r\n            color: '#333',\r\n            marginBottom: '15px',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            gap: '10px'\r\n          }}>\r\n            🤖 Logs Auto-Cleanup\r\n            <button\r\n              onClick={testerAutoCleanup}\r\n              style={{\r\n                padding: '4px 8px',\r\n                backgroundColor: '#10b981',\r\n                color: 'white',\r\n                border: 'none',\r\n                borderRadius: '4px',\r\n                fontSize: '12px',\r\n                cursor: 'pointer'\r\n              }}\r\n            >\r\n              🧪 Test Manuel\r\n            </button>\r\n          </h2>\r\n\r\n          <div style={{\r\n            fontSize: '12px',\r\n            color: '#666',\r\n            marginBottom: '15px',\r\n            padding: '10px',\r\n            backgroundColor: '#f9fafb',\r\n            borderRadius: '6px'\r\n          }}>\r\n            🎯 <strong>Objectif:</strong> Sessions inactives &gt; 2 minutes doivent être nettoyées automatiquement\r\n          </div>\r\n\r\n          {autoCleanupLogs.length === 0 ? (\r\n            <div style={{\r\n              textAlign: 'center',\r\n              color: '#666',\r\n              fontSize: '14px',\r\n              padding: '20px'\r\n            }}>\r\n              En attente des logs...\r\n            </div>\r\n          ) : (\r\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\r\n              {autoCleanupLogs.map((log, idx) => (\r\n                <div\r\n                  key={idx}\r\n                  style={{\r\n                    padding: '10px',\r\n                    borderRadius: '6px',\r\n                    fontSize: '12px',\r\n                    backgroundColor: log.success ? \r\n                      (log.cleaned > 0 ? '#dcfce7' : '#f0f9ff') : '#fee2e2',\r\n                    color: log.success ? \r\n                      (log.cleaned > 0 ? '#166534' : '#1e40af') : '#991b1b'\r\n                  }}\r\n                >\r\n                  <div style={{ fontWeight: 'bold' }}>\r\n                    {log.timestamp}\r\n                  </div>\r\n                  <div>\r\n                    {log.success ? \r\n                      (log.cleaned > 0 ? \r\n                        `🧹 ${log.cleaned} session(s) nettoyée(s)` : \r\n                        '✅ Aucune session à nettoyer') :\r\n                      `❌ Erreur: ${log.error || 'Inconnu'}`\r\n                    }\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Instructions de test */}\r\n      <div style={{\r\n        backgroundColor: '#fef3c7',\r\n        border: '1px solid #f59e0b',\r\n        borderRadius: '8px',\r\n        padding: '15px',\r\n        marginTop: '20px'\r\n      }}>\r\n        <div style={{ fontWeight: 'bold', color: '#92400e', marginBottom: '8px' }}>\r\n          🧪 INSTRUCTIONS DE TEST\r\n        </div>\r\n        <ol style={{ fontSize: '14px', color: '#92400e', margin: 0, paddingLeft: '20px' }}>\r\n          <li>Connectez-vous avec un autre compte admin dans un autre onglet</li>\r\n          <li>Fermez brutalement cet onglet (ALT+F4 ou fermeture navigateur)</li>\r\n          <li>Surveillez cette page : la session fantôme doit être nettoyée en 2-3 minutes max</li>\r\n          <li>Le statut passera de \"✅ ACTIF\" → \"⚠️ RISQUE\" → \"💀 À EXPULSER\" → \"❌ INACTIF\"</li>\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  )\r\n}",
          "taille": 13230,
          "lignes": 387,
          "dateModif": "2025-08-18T19:14:52.733Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "pages/valider-changements.js",
      "resultat": {
        "statut": "IDENTIQUE",
        "local": {
          "existe": true,
          "contenu": "import { useEffect, useState } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport { supabase } from '../lib/supabaseClient';\r\nimport { withAuthAdmin } from '../components/withAuthAdmin';\r\n\r\n// Skeleton Loader spécifique à la Validation des Changements\r\nconst SkeletonValidationLoader = () => {\r\n  const shimmer = {\r\n    background: 'linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%)',\r\n    backgroundSize: '200% 100%',\r\n    animation: 'shimmer 1.5s infinite'\r\n  };\r\n\r\n  return (\r\n    <div style={{\r\n      minHeight: '100vh',\r\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n      padding: '40px 60px'\r\n    }}>\r\n      <style jsx>{`\r\n        @keyframes shimmer {\r\n          0% { background-position: -200% 0; }\r\n          100% { background-position: 200% 0; }\r\n        }\r\n      `}</style>\r\n\r\n      {/* Header Navigation Skeleton */}\r\n      <div style={{\r\n        backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n        borderRadius: '12px',\r\n        padding: '15px 25px',\r\n        marginBottom: '20px',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        backdropFilter: 'blur(10px)'\r\n      }}>\r\n        <div style={{ \r\n          height: '16px', \r\n          width: '250px', \r\n          borderRadius: '4px',\r\n          ...shimmer \r\n        }} />\r\n        \r\n        <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n          <div style={{ \r\n            height: '32px', \r\n            width: '80px', \r\n            borderRadius: '8px',\r\n            ...shimmer \r\n          }} />\r\n          <div style={{ \r\n            height: '24px', \r\n            width: '160px', \r\n            borderRadius: '6px',\r\n            ...shimmer \r\n          }} />\r\n          <div style={{ \r\n            height: '32px', \r\n            width: '100px', \r\n            borderRadius: '6px',\r\n            ...shimmer \r\n          }} />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Titre principal Skeleton */}\r\n      <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n        <div style={{ \r\n          height: '32px', \r\n          width: '320px', \r\n          borderRadius: '4px',\r\n          margin: '0 auto 10px',\r\n          ...shimmer \r\n        }} />\r\n        <div style={{ \r\n          height: '16px', \r\n          width: '480px', \r\n          borderRadius: '4px',\r\n          margin: '0 auto',\r\n          ...shimmer \r\n        }} />\r\n      </div>\r\n\r\n      {/* Statistiques Skeleton */}\r\n      <div style={{\r\n        display: 'grid',\r\n        gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',\r\n        gap: '20px',\r\n        marginBottom: '30px'\r\n      }}>\r\n        {[1, 2, 3].map(i => (\r\n          <div key={i} style={{\r\n            backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n            borderRadius: '12px',\r\n            padding: '25px',\r\n            textAlign: 'center',\r\n            boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n            backdropFilter: 'blur(10px)'\r\n          }}>\r\n            <div style={{ \r\n              height: '32px', \r\n              width: '60px', \r\n              borderRadius: '4px',\r\n              marginBottom: '8px',\r\n              margin: '0 auto 8px',\r\n              ...shimmer \r\n            }} />\r\n            <div style={{ \r\n              height: '14px', \r\n              width: '80px', \r\n              borderRadius: '4px',\r\n              margin: '0 auto',\r\n              ...shimmer \r\n            }} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Filtres Skeleton */}\r\n      <div style={{\r\n        backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n        borderRadius: '12px',\r\n        padding: '25px',\r\n        marginBottom: '30px',\r\n        boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n        backdropFilter: 'blur(10px)'\r\n      }}>\r\n        <div style={{\r\n          display: 'grid',\r\n          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n          gap: '20px',\r\n          alignItems: 'end'\r\n        }}>\r\n          <div>\r\n            <div style={{ \r\n              height: '14px', \r\n              width: '100px', \r\n              borderRadius: '4px',\r\n              marginBottom: '8px',\r\n              ...shimmer \r\n            }} />\r\n            <div style={{ \r\n              height: '40px', \r\n              width: '100%', \r\n              borderRadius: '8px',\r\n              ...shimmer \r\n            }} />\r\n          </div>\r\n          <div>\r\n            <div style={{ \r\n              height: '14px', \r\n              width: '80px', \r\n              borderRadius: '4px',\r\n              marginBottom: '8px',\r\n              ...shimmer \r\n            }} />\r\n            <div style={{ \r\n              height: '40px', \r\n              width: '100%', \r\n              borderRadius: '8px',\r\n              ...shimmer \r\n            }} />\r\n          </div>\r\n          <div>\r\n            <div style={{ \r\n              height: '40px', \r\n              width: '140px', \r\n              borderRadius: '8px',\r\n              ...shimmer \r\n            }} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Liste Formateurs avec Changements Skeleton */}\r\n      <div style={{\r\n        backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n        borderRadius: '12px',\r\n        padding: '30px',\r\n        boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n        backdropFilter: 'blur(10px)'\r\n      }}>\r\n        {/* Formateur Cards Skeleton */}\r\n        {[1, 2, 3].map(formateurIndex => (\r\n          <div key={formateurIndex} style={{\r\n            backgroundColor: 'white',\r\n            borderRadius: '12px',\r\n            padding: '25px',\r\n            marginBottom: '20px',\r\n            boxShadow: '0 4px 6px rgba(0,0,0,0.1)',\r\n            border: '1px solid #e5e7eb'\r\n          }}>\r\n            {/* En-tête formateur */}\r\n            <div style={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              alignItems: 'center',\r\n              marginBottom: '20px'\r\n            }}>\r\n              <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>\r\n                <div style={{ \r\n                  height: '50px', \r\n                  width: '50px', \r\n                  borderRadius: '25px',\r\n                  ...shimmer \r\n                }} />\r\n                <div>\r\n                  <div style={{ \r\n                    height: '18px', \r\n                    width: '140px', \r\n                    borderRadius: '4px',\r\n                    marginBottom: '4px',\r\n                    ...shimmer \r\n                  }} />\r\n                  <div style={{ \r\n                    height: '14px', \r\n                    width: '100px', \r\n                    borderRadius: '4px',\r\n                    ...shimmer \r\n                  }} />\r\n                </div>\r\n              </div>\r\n              <div style={{ \r\n                height: '24px', \r\n                width: '80px', \r\n                borderRadius: '12px',\r\n                ...shimmer \r\n              }} />\r\n            </div>\r\n\r\n            {/* Changements du formateur */}\r\n            {[1, 2].map(changementIndex => (\r\n              <div key={changementIndex} style={{\r\n                backgroundColor: '#f9fafb',\r\n                borderRadius: '8px',\r\n                padding: '20px',\r\n                marginBottom: '15px',\r\n                border: '1px solid #e5e7eb'\r\n              }}>\r\n                {/* Info changement */}\r\n                <div style={{\r\n                  display: 'grid',\r\n                  gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',\r\n                  gap: '15px',\r\n                  marginBottom: '15px'\r\n                }}>\r\n                  <div>\r\n                    <div style={{ \r\n                      height: '12px', \r\n                      width: '60px', \r\n                      borderRadius: '4px',\r\n                      marginBottom: '6px',\r\n                      ...shimmer \r\n                    }} />\r\n                    <div style={{ \r\n                      height: '16px', \r\n                      width: '80px', \r\n                      borderRadius: '4px',\r\n                      ...shimmer \r\n                    }} />\r\n                  </div>\r\n                  <div>\r\n                    <div style={{ \r\n                      height: '12px', \r\n                      width: '40px', \r\n                      borderRadius: '4px',\r\n                      marginBottom: '6px',\r\n                      ...shimmer \r\n                    }} />\r\n                    <div style={{ \r\n                      height: '16px', \r\n                      width: '90px', \r\n                      borderRadius: '4px',\r\n                      ...shimmer \r\n                    }} />\r\n                  </div>\r\n                  <div>\r\n                    <div style={{ \r\n                      height: '12px', \r\n                      width: '50px', \r\n                      borderRadius: '4px',\r\n                      marginBottom: '6px',\r\n                      ...shimmer \r\n                    }} />\r\n                    <div style={{ \r\n                      height: '16px', \r\n                      width: '70px', \r\n                      borderRadius: '4px',\r\n                      ...shimmer \r\n                    }} />\r\n                  </div>\r\n                  <div>\r\n                    <div style={{ \r\n                      height: '20px', \r\n                      width: '80px', \r\n                      borderRadius: '10px',\r\n                      ...shimmer \r\n                    }} />\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Actions skeleton - seulement pour les en_attente */}\r\n                {changementIndex === 1 && (\r\n                  <div style={{\r\n                    display: 'flex',\r\n                    gap: '12px',\r\n                    justifyContent: 'flex-end',\r\n                    alignItems: 'center',\r\n                    paddingTop: '15px',\r\n                    borderTop: '1px solid #e5e7eb'\r\n                  }}>\r\n                    <div style={{ \r\n                      height: '40px', \r\n                      width: '80px', \r\n                      borderRadius: '8px',\r\n                      ...shimmer \r\n                    }} />\r\n                  </div>\r\n                )}\r\n\r\n                {/* État validé skeleton */}\r\n                {changementIndex === 2 && (\r\n                  <div style={{\r\n                    paddingTop: '15px',\r\n                    borderTop: '1px solid #e5e7eb',\r\n                    textAlign: 'center'\r\n                  }}>\r\n                    <div style={{ \r\n                      height: '20px', \r\n                      width: '60px', \r\n                      borderRadius: '4px',\r\n                      margin: '0 auto',\r\n                      ...shimmer \r\n                    }} />\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction ValiderChangements({ user, logout, inactivityTime }) {\r\n    const [changements, setChangements] = useState([]);\r\n    const [formateurs, setFormateurs] = useState([]);\r\n    const [formateurSelectionne, setFormateurSelectionne] = useState('');\r\n    const [filtreStatut, setFiltreStatut] = useState('en_attente');\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [message, setMessage] = useState('');\r\n    const [traitement, setTraitement] = useState(false);\r\n    const [statsRoi, setStatsRoi] = useState({\r\n        validations: 0,\r\n        suppressions: 0,\r\n        modifications: 0,\r\n        affectationsNettoyees: 0,\r\n        messagesEnvoyes: 0,\r\n        commandementsEnvoyes: 0\r\n    });\r\n    const router = useRouter();\r\n\r\n    useEffect(() => {\r\n        loadFormateurs();\r\n        loadStatsRoi();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (formateurs.length > 0) {\r\n            loadChangements();\r\n        }\r\n    }, [formateurSelectionne, filtreStatut, formateurs]);\r\n\r\n    // Auto-sélection du formateur depuis l'URL (navigation depuis messagerie)\r\n    useEffect(() => {\r\n        const { formateur } = router.query;\r\n        if (formateur && formateurs.length > 0 && !formateurSelectionne) {\r\n            console.log('✅ Auto-sélection formateur depuis URL:', formateur);\r\n            setFormateurSelectionne(formateur);\r\n        }\r\n    }, [router.query, formateurs, formateurSelectionne]);\r\n\r\n    // 👑 NOUVELLE FONCTION ROI - COMMUNICATION AVEC SYSTÈMES\r\n    const commanderSystemes = (action, formateurId, dateStr, details = {}) => {\r\n        const commande = {\r\n            action,           // 'retirer_formateur' | 'ajouter_formateur' | 'changer_statut' | 'refresh_complet'\r\n            formateur_id: formateurId,\r\n            date: dateStr,\r\n            timestamp: Date.now(),\r\n            details,          // Infos supplémentaires (type, creneau, etc.)\r\n            roi: 'valider_changements'\r\n        };\r\n\r\n        console.log('👑 ROI COMMANDE:', commande);\r\n        \r\n        // Envoyer commande via localStorage\r\n        localStorage.setItem('roiCommande', JSON.stringify(commande));\r\n        \r\n        // Mettre à jour stats\r\n        setStatsRoi(prev => ({\r\n            ...prev,\r\n            commandementsEnvoyes: prev.commandementsEnvoyes + 1\r\n        }));\r\n        \r\n        // Auto-nettoyer la commande après 5 secondes\r\n        setTimeout(() => {\r\n            const currentCommande = localStorage.getItem('roiCommande');\r\n            if (currentCommande) {\r\n                const parsed = JSON.parse(currentCommande);\r\n                if (parsed.timestamp === commande.timestamp) {\r\n                    localStorage.removeItem('roiCommande');\r\n                    console.log('🧹 Commande ROI nettoyée automatiquement');\r\n                }\r\n            }\r\n        }, 5000);\r\n\r\n        return commande;\r\n    };\r\n\r\n    // 👑 NOUVELLE FONCTION ROI - NETTOYAGE AFFECTATIONS\r\n    const nettoyerAffectations = async (formateurId, dateStr, creneau = null) => {\r\n        console.log(`🧹 ROI NETTOIE : ${formateurId} le ${dateStr} ${creneau || 'tous créneaux'}`);\r\n        \r\n        let affectationsNettoyees = 0;\r\n        let casesModifiees = 0;\r\n\r\n        try {\r\n            // 1. NETTOYER planning_hebdomadaire\r\n            let query = supabase\r\n                .from('planning_hebdomadaire')\r\n                .select('*')\r\n                .eq('date', dateStr);\r\n                \r\n            if (creneau) {\r\n                const creneauDB = creneau === 'Matin' ? 'matin' : 'AM';\r\n                query = query.eq('creneau', creneauDB);\r\n            }\r\n            \r\n            const { data: plannings, error: planningsError } = await query;\r\n            \r\n            if (planningsError) throw planningsError;\r\n\r\n            for (let planning of plannings || []) {\r\n                if (planning.formateurs_ids && planning.formateurs_ids.includes(formateurId)) {\r\n                    const nouveauxFormateurs = planning.formateurs_ids.filter(id => id !== formateurId);\r\n                    \r\n                    const { error: updateError } = await supabase\r\n                        .from('planning_hebdomadaire')\r\n                        .update({ formateurs_ids: nouveauxFormateurs })\r\n                        .eq('id', planning.id);\r\n                        \r\n                    if (updateError) throw updateError;\r\n                    \r\n                    casesModifiees++;\r\n                    console.log(`✅ Retiré de planning_hebdomadaire case ${planning.jour} ${planning.creneau}`);\r\n                }\r\n            }\r\n            \r\n            // 2. NETTOYER planning_formateurs_hebdo\r\n            let deleteQuery = supabase\r\n                .from('planning_formateurs_hebdo')\r\n                .delete()\r\n                .eq('formateur_id', formateurId)\r\n                .eq('date', dateStr);\r\n                \r\n            if (creneau) {\r\n                const creneauDB = creneau === 'Matin' ? 'matin' : 'AM';\r\n                deleteQuery = deleteQuery.eq('creneau', creneauDB);\r\n            }\r\n            \r\n            const { data: deleted, error: deleteError } = await deleteQuery.select();\r\n                \r\n            if (deleteError) throw deleteError;\r\n            \r\n            affectationsNettoyees = deleted?.length || 0;\r\n            console.log(`✅ Supprimé ${affectationsNettoyees} affectations planning_formateurs_hebdo`);\r\n            \r\n            // Mettre à jour stats\r\n            setStatsRoi(prev => ({\r\n                ...prev,\r\n                affectationsNettoyees: prev.affectationsNettoyees + affectationsNettoyees\r\n            }));\r\n\r\n            return {\r\n                affectationsNettoyees,\r\n                casesModifiees,\r\n                success: true\r\n            };\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur nettoyage affectations:', error);\r\n            throw new Error(`Erreur nettoyage: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    // 👑 NOUVELLE FONCTION ROI - MESSAGES AUTOMATIQUES ÉTENDUS (CORRIGÉE)\r\n    const envoyerConfirmationFormateur = async (formateur, absence, action) => {\r\n        try {\r\n            let contenu = '';\r\n            let objet = '';\r\n            \r\n            switch(action) {\r\n                case 'validee':\r\n                    objet = `Absence validée - ${absence.date_debut}`;\r\n                    contenu = `Bonjour ${formateur.prenom},\\n\\nVotre demande d'absence du ${absence.date_debut} au ${absence.date_fin} a été validée par le coordinateur.\\n\\nType: ${absence.type}\\nVotre planning a été mis à jour automatiquement.\\n\\nCordialement,\\nL'équipe ACLEF`;\r\n                    break;\r\n                case 'supprimee':\r\n                    objet = `Absence supprimée - ${absence.date_debut}`;\r\n                    contenu = `Bonjour ${formateur.prenom},\\n\\nVotre absence du ${absence.date_debut} au ${absence.date_fin} a été supprimée.\\n\\nVous redevenez disponible selon votre planning type habituel.\\n\\nCordialement,\\nL'équipe ACLEF`;\r\n                    break;\r\n                case 'modifiee':\r\n                    objet = `Absence modifiée - ${absence.date_debut}`;\r\n                    contenu = `Bonjour ${formateur.prenom},\\n\\nVotre demande d'absence a été modifiée par le coordinateur.\\n\\nNouveau statut: ${absence.type}\\nPériode: ${absence.date_debut} au ${absence.date_fin}\\n\\nVotre planning a été mis à jour.\\n\\nCordialement,\\nL'équipe ACLEF`;\r\n                    break;\r\n                default:\r\n                    throw new Error(`Action message inconnue: ${action}`);\r\n            }\r\n\r\n            // ✅ CORRECTION : Type contrainte BDD respectée (planning ou messagerie)\r\n            const { error } = await supabase.from('messages').insert({\r\n                expediteur: 'Coordination ACLEF',\r\n                destinataire_id: formateur.id,\r\n                objet: objet,\r\n                contenu: contenu,\r\n                type: 'planning'\r\n            });\r\n\r\n            if (error) throw error;\r\n\r\n            // Mettre à jour stats\r\n            setStatsRoi(prev => ({\r\n                ...prev,\r\n                messagesEnvoyes: prev.messagesEnvoyes + 1\r\n            }));\r\n\r\n            console.log(`📧 Message ${action} envoyé à ${formateur.prenom}`);\r\n            return true;\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur envoi message:', error);\r\n            throw new Error(`Erreur message: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    // 👑 ⭐⭐⭐ NOUVELLE FONCTION ÉTAPE 2.6 - CHANGER TYPE ABSENCE ⭐⭐⭐\r\n    const changerTypeAbsence = async (absenceId, nouveauType) => {\r\n        try {\r\n            setTraitement(true);\r\n            setMessage('Changement de type en cours...');\r\n\r\n            // Types valides\r\n            const typesValides = ['personnel', 'formation', 'maladie', 'congés'];\r\n            if (!typesValides.includes(nouveauType)) {\r\n                throw new Error('Type invalide');\r\n            }\r\n\r\n            // 1. 🔧 Récupérer absence actuelle et formateur\r\n            const { data: absence, error: absenceError } = await supabase\r\n                .from('absences_formateurs')\r\n                .select('*')\r\n                .eq('id', absenceId)\r\n                .single();\r\n\r\n            if (absenceError) throw absenceError;\r\n            if (!absence) throw new Error('Absence non trouvée');\r\n\r\n            const ancienType = absence.type;\r\n            \r\n            // Ne rien faire si c'est le même type\r\n            if (ancienType === nouveauType) {\r\n                setMessage(`⚠️ Type déjà \"${nouveauType}\" - Aucun changement nécessaire`);\r\n                return;\r\n            }\r\n\r\n            // Récupérer formateur\r\n            const { data: formateur, error: formateurError } = await supabase\r\n                .from('users')\r\n                .select('id, prenom, nom')\r\n                .eq('id', absence.formateur_id)\r\n                .single();\r\n\r\n            if (formateurError) throw formateurError;\r\n            if (!formateur) throw new Error('Formateur non trouvé');\r\n\r\n            // 2. 👑 METTRE À JOUR TYPE DANS BDD\r\n            const { error: updateError } = await supabase\r\n                .from('absences_formateurs')\r\n                .update({ \r\n                    type: nouveauType,\r\n                    statut: 'validé'  // Auto-valider lors du changement\r\n                })\r\n                .eq('id', absenceId);\r\n\r\n            if (updateError) throw updateError;\r\n\r\n            // 3. 👑 LOGIQUE TRANSFORMATION SELON CHANGEMENT\r\n            let messageTransformation = '';\r\n\r\n            if (ancienType === 'formation' && nouveauType !== 'formation') {\r\n                // ÉTAIT dispo exceptionnelle → DEVIENT absent\r\n                messageTransformation = `🔄 ${formateur.prenom} : DISPO EXCEPT → ABSENT`;\r\n                \r\n                // Nettoyer affectations (il ne sera plus dispo)\r\n                await nettoyerAffectations(absence.formateur_id, absence.date_debut);\r\n                \r\n                // Commander au coordo de retirer formateur\r\n                commanderSystemes('retirer_formateur', absence.formateur_id, absence.date_debut, {\r\n                    ancienType: 'formation',\r\n                    nouveauType: nouveauType,\r\n                    transformation: 'dispo_except_vers_absent'\r\n                });\r\n\r\n            } else if (ancienType !== 'formation' && nouveauType === 'formation') {\r\n                // ÉTAIT absent → DEVIENT dispo exceptionnelle  \r\n                messageTransformation = `🔄 ${formateur.prenom} : ABSENT → DISPO EXCEPT`;\r\n                \r\n                // Commander au coordo d'ajouter formateur (il devient dispo)\r\n                commanderSystemes('ajouter_formateur', absence.formateur_id, absence.date_debut, {\r\n                    ancienType: ancienType,\r\n                    nouveauType: 'formation',\r\n                    transformation: 'absent_vers_dispo_except'\r\n                });\r\n\r\n            } else {\r\n                // Changement entre types d'absence (personnel → maladie, etc.)\r\n                messageTransformation = `🔄 ${formateur.prenom} : ${ancienType.toUpperCase()} → ${nouveauType.toUpperCase()}`;\r\n                \r\n                // Reste absent, juste changement de type\r\n                commanderSystemes('changer_statut', absence.formateur_id, absence.date_debut, {\r\n                    ancienType: ancienType,\r\n                    nouveauType: nouveauType,\r\n                    transformation: 'changement_type_absence'\r\n                });\r\n            }\r\n\r\n            // 4. 👑 ENVOYER MESSAGE AU FORMATEUR\r\n            const absenceModifiee = { ...absence, type: nouveauType };\r\n            await envoyerConfirmationFormateur(formateur, absenceModifiee, 'modifiee');\r\n\r\n            // 5. 👑 METTRE À JOUR STATS ROI\r\n            setStatsRoi(prev => ({\r\n                ...prev,\r\n                modifications: prev.modifications + 1\r\n            }));\r\n\r\n            // 6. 👑 MESSAGE DE SUCCÈS DÉTAILLÉ\r\n            setMessage(`Changement de type effectué avec succès !\r\n${messageTransformation}\r\n📧 Message envoyé au formateur\r\n✅ Coordination informée de la modification`);\r\n\r\n            // 7. 👑 RECHARGER LES DONNÉES\r\n            await loadChangements();\r\n\r\n        } catch (error) {\r\n            console.error('❌ Erreur changement type ROI:', error);\r\n            setMessage(`❌ Erreur: ${error.message}`);\r\n        } finally {\r\n            setTraitement(false);\r\n            setTimeout(() => setMessage(''), 6000);\r\n        }\r\n    };\r\n\r\n    // 👑 FONCTION SUPPRESSION ABSENCE (ÉTAPE 2.5)\r\n    const supprimerAbsence = async (absenceId) => {\r\n        try {\r\n            setTraitement(true);\r\n            setMessage('Suppression en cours...');\r\n\r\n            // 1. 🔧 Récupérer absence et formateur séparément\r\n            const { data: absence, error: absenceError } = await supabase\r\n                .from('absences_formateurs')\r\n                .select('*')\r\n                .eq('id', absenceId)\r\n                .single();\r\n\r\n            if (absenceError) throw absenceError;\r\n            if (!absence) throw new Error('Absence non trouvée');\r\n\r\n            // Récupérer formateur séparément\r\n            const { data: formateur, error: formateurError } = await supabase\r\n                .from('users')\r\n                .select('id, prenom, nom')\r\n                .eq('id', absence.formateur_id)\r\n                .single();\r\n\r\n            if (formateurError) throw formateurError;\r\n            if (!formateur) throw new Error('Formateur non trouvé');\r\n\r\n            // 2. 👑 SUPPRIMER DE BDD\r\n            const { error: deleteError } = await supabase\r\n                .from('absences_formateurs')\r\n                .delete()\r\n                .eq('id', absenceId);\r\n\r\n            if (deleteError) throw deleteError;\r\n\r\n            // 3. 👑 NETTOYAGE AFFECTATIONS ROI\r\n            const resultatsNettoyage = await nettoyerAffectations(\r\n                absence.formateur_id, \r\n                absence.date_debut\r\n            );\r\n\r\n            // 4. 👑 COMMANDER AU COORDO DE REMETTRE FORMATEUR DISPONIBLE\r\n            commanderSystemes('remettre_disponible', absence.formateur_id, absence.date_debut, {\r\n                type: absence.type,\r\n                date_fin: absence.date_fin,\r\n                motif: absence.motif,\r\n                action: 'suppression',\r\n                affectationsNettoyees: resultatsNettoyage.affectationsNettoyees\r\n            });\r\n\r\n            // 5. 👑 ENVOYER MESSAGE AU FORMATEUR\r\n            await envoyerConfirmationFormateur(formateur, absence, 'supprimee');\r\n\r\n            // 6. 👑 METTRE À JOUR STATS ROI\r\n            setStatsRoi(prev => ({\r\n                ...prev,\r\n                suppressions: prev.suppressions + 1\r\n            }));\r\n\r\n            // 7. 👑 MESSAGE DE SUCCÈS DÉTAILLÉ\r\n            setMessage(`Absence supprimée avec succès pour ${formateur.prenom} !\r\n✅ ${resultatsNettoyage.affectationsNettoyees} affectations nettoyées\r\n✅ ${resultatsNettoyage.casesModifiees} cases planning libérées\r\n📧 Message envoyé au formateur\r\n✅ Coordination informée : formateur remis disponible`);\r\n\r\n            // 8. 👑 RECHARGER LES DONNÉES\r\n            await loadChangements();\r\n\r\n        } catch (error) {\r\n            console.error('❌ Erreur suppression ROI:', error);\r\n            setMessage(`❌ Erreur: ${error.message}`);\r\n        } finally {\r\n            setTraitement(false);\r\n            setTimeout(() => setMessage(''), 6000);\r\n        }\r\n    };\r\n\r\n    // 👑 FONCTION ROI AMÉLIORÉE - VALIDATION AVEC PROPAGATION\r\n    const validerChangement = async (changementId) => {\r\n        try {\r\n            setTraitement(true);\r\n            setMessage('Validation en cours...');\r\n\r\n            // 🔧 CORRECTION BDD : Récupérer absence et formateur séparément\r\n            const { data: changement, error: changeError } = await supabase\r\n                .from('absences_formateurs')\r\n                .select('*')\r\n                .eq('id', changementId)\r\n                .single();\r\n\r\n            if (changeError) throw changeError;\r\n            if (!changement) throw new Error('Changement non trouvé');\r\n\r\n            // Récupérer formateur séparément\r\n            const { data: formateur, error: formateurError } = await supabase\r\n                .from('users')\r\n                .select('id, prenom, nom')\r\n                .eq('id', changement.formateur_id)\r\n                .single();\r\n\r\n            if (formateurError) throw formateurError;\r\n            if (!formateur) throw new Error('Formateur non trouvé');\r\n\r\n            // 2. Valider = passer à 'validé'\r\n            const { error: updateError } = await supabase\r\n                .from('absences_formateurs')\r\n                .update({ statut: 'validé' })\r\n                .eq('id', changementId);\r\n\r\n            if (updateError) throw updateError;\r\n\r\n            // 3. 👑 NETTOYAGE ROI si absence (pas si dispo exceptionnelle)\r\n            if (changement.type !== 'formation') {\r\n                await nettoyerAffectations(changement.formateur_id, changement.date_debut);\r\n                \r\n                // 4. 👑 COMMANDER au coordo de retirer le formateur\r\n                commanderSystemes('retirer_formateur', changement.formateur_id, changement.date_debut, {\r\n                    type: changement.type,\r\n                    date_fin: changement.date_fin,\r\n                    motif: changement.motif\r\n                });\r\n            } else {\r\n                // Dispo exceptionnelle -> Commander d'ajouter\r\n                commanderSystemes('ajouter_formateur', changement.formateur_id, changement.date_debut, {\r\n                    type: 'dispo_except',\r\n                    date_fin: changement.date_fin,\r\n                    motif: changement.motif\r\n                });\r\n            }\r\n\r\n            // 5. 👑 ENVOYER MESSAGE AU FORMATEUR (avec objet formateur complet)\r\n            const changementAvecFormateur = { ...changement, formateur };\r\n            await envoyerConfirmationFormateur(formateur, changementAvecFormateur, 'validee');\r\n\r\n            // 6. Mettre à jour stats\r\n            setStatsRoi(prev => ({\r\n                ...prev,\r\n                validations: prev.validations + 1\r\n            }));\r\n\r\n            setMessage(`Changement validé`);\r\n            await loadChangements();\r\n\r\n        } catch (error) {\r\n            console.error('❌ Erreur validation ROI:', error);\r\n            setMessage(`❌ Erreur: ${error.message}`);\r\n        } finally {\r\n            setTraitement(false);\r\n            setTimeout(() => setMessage(''), 5000);\r\n        }\r\n    };\r\n\r\n    const loadFormateurs = async () => {\r\n        try {\r\n            const { data: formateursData, error } = await supabase\r\n                .from('users')\r\n                .select('id, prenom, nom')\r\n                .eq('role', 'formateur')\r\n                .eq('archive', false)\r\n                .order('prenom');\r\n\r\n            if (error) throw error;\r\n            setFormateurs(formateursData || []);\r\n        } catch (error) {\r\n            console.error('Erreur lors du chargement des formateurs:', error);\r\n            setMessage(`Erreur: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    const loadStatsRoi = () => {\r\n        // Charger stats depuis localStorage ou BDD\r\n        const savedStats = localStorage.getItem('statsRoi');\r\n        if (savedStats) {\r\n            setStatsRoi(JSON.parse(savedStats));\r\n        }\r\n    };\r\n\r\n    // Sauvegarder stats à chaque changement\r\n    useEffect(() => {\r\n        localStorage.setItem('statsRoi', JSON.stringify(statsRoi));\r\n    }, [statsRoi]);\r\n\r\n    const loadChangements = async () => {\r\n        try {\r\n            setIsLoading(true);\r\n\r\n            let query = supabase\r\n                .from('absences_formateurs')\r\n                .select('*')\r\n                .order('created_at', { ascending: false });\r\n\r\n            // Filtrer par formateur si sélectionné\r\n            if (formateurSelectionne) {\r\n                query = query.eq('formateur_id', formateurSelectionne);\r\n            }\r\n\r\n            // Filtrer par statut\r\n            if (filtreStatut === 'en_attente') {\r\n                query = query.eq('statut', 'en_attente');\r\n            } else if (filtreStatut === 'archivees') {\r\n                query = query.eq('statut', 'validé');\r\n            }\r\n            // Si \"toutes\", pas de filtre sur le statut\r\n\r\n            const { data: changementsData, error } = await query;\r\n\r\n            if (error) throw error;\r\n\r\n            // Enrichir avec les noms des formateurs\r\n            const changementsEnrichis = changementsData.map(changement => {\r\n                const formateur = formateurs.find(f => f.id === changement.formateur_id);\r\n                return {\r\n                    ...changement,\r\n                    formateurNom: formateur ? `${formateur.prenom} ${formateur.nom}` : 'Formateur inconnu'\r\n                };\r\n            });\r\n\r\n            setChangements(changementsEnrichis || []);\r\n            \r\n        } catch (error) {\r\n            console.error('Erreur lors du chargement:', error);\r\n            setMessage(`Erreur: ${error.message}`);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const validerTous = async () => {\r\n        if (!window.confirm('Valider et archiver tous les changements en attente ?')) return;\r\n\r\n        try {\r\n            setTraitement(true);\r\n            setMessage('Traitement de tous les changements...');\r\n\r\n            let query = supabase\r\n                .from('absences_formateurs')\r\n                .update({ statut: 'validé' })\r\n                .eq('statut', 'en_attente');\r\n\r\n            if (formateurSelectionne) {\r\n                query = query.eq('formateur_id', formateurSelectionne);\r\n            }\r\n\r\n            const { error } = await query;\r\n\r\n            if (error) throw error;\r\n\r\n            // Commander refresh complet\r\n            commanderSystemes('refresh_complet', null, null, {\r\n                action: 'validation_massive',\r\n                filtreFormateur: formateurSelectionne\r\n            });\r\n\r\n            setMessage('Tous les changements ont été validés');\r\n            await loadChangements();\r\n\r\n        } catch (error) {\r\n            console.error('Erreur:', error);\r\n            setMessage(`❌ Erreur: ${error.message}`);\r\n        } finally {\r\n            setTraitement(false);\r\n            setTimeout(() => setMessage(''), 3000);\r\n        }\r\n    };\r\n\r\n    const getTypeDetails = (type) => {\r\n        switch (type) {\r\n            case 'personnel':\r\n                return { \r\n                    label: 'Absence',\r\n                    couleur: '#ef4444'\r\n                };\r\n            case 'formation':\r\n                return { \r\n                    label: 'Dispo exceptionnelle',\r\n                    couleur: '#f59e0b'\r\n                };\r\n            case 'maladie':\r\n                return { \r\n                    label: 'Maladie',\r\n                    couleur: '#dc2626'\r\n                };\r\n            case 'congés':\r\n                return { \r\n                    label: 'Congés',\r\n                    couleur: '#059669'\r\n                };\r\n            default:\r\n                return { \r\n                    label: 'Autre',\r\n                    couleur: '#6b7280'\r\n                };\r\n        }\r\n    };\r\n\r\n    const formatDate = (dateString) => {\r\n        const date = new Date(dateString);\r\n        return date.toLocaleDateString('fr-FR');\r\n    };\r\n\r\n    // Grouper par formateur\r\n    const changementsParFormateur = changements.reduce((acc, changement) => {\r\n        const formateurId = changement.formateur_id;\r\n        if (!acc[formateurId]) {\r\n            acc[formateurId] = {\r\n                formateur: changement.formateurNom,\r\n                changements: []\r\n            };\r\n        }\r\n        acc[formateurId].changements.push(changement);\r\n        return acc;\r\n    }, {});\r\n\r\n    const changementsEnAttente = changements.filter(c => c.statut === 'en_attente').length;\r\n    const changementsArchives = changements.filter(c => c.statut === 'validé').length;\r\n\r\n    if (isLoading) {\r\n        return <SkeletonValidationLoader />;\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            padding: '40px 60px',\r\n            opacity: 1,\r\n            transition: 'opacity 0.3s ease-in-out'\r\n        }}>\r\n            {/* Header avec navigation */}\r\n            <div style={{\r\n                backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                borderRadius: '12px',\r\n                padding: '8px 20px',\r\n                marginBottom: '20px',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                backdropFilter: 'blur(10px)'\r\n            }}>\r\n                <nav style={{ fontSize: '14px' }}>\r\n                    <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                    <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                    <span style={{ color: '#8b5cf6', fontWeight: '500' }}>Validation Changements</span>\r\n                </nav>\r\n                \r\n                <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        Accueil\r\n                    </button>\r\n\r\n                    <div style={{\r\n                        padding: '4px 8px',\r\n                        fontSize: '12px',\r\n                        fontWeight: '600',\r\n                        borderRadius: '6px',\r\n                        backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n                        color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#f59e0b' : '#10b981',\r\n                        border: '1px solid',\r\n                        borderColor: inactivityTime >= 240 ? '#fecaca' : inactivityTime >= 180 ? '#fde68a' : '#bbf7d0'\r\n                    }}>\r\n                        Status : {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n                                 inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 `🟢 ACTIF`}\r\n                    </div>\r\n\r\n                    <button\r\n                        onClick={logout}\r\n                        style={{\r\n                            padding: '6px 16px',\r\n                            backgroundColor: '#dc2626',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '6px',\r\n                            fontSize: '14px',\r\n                            fontWeight: '600',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🚪 Déconnexion\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            {/* Titre principal */}\r\n            <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n                <h1 style={{\r\n                    fontSize: '36px',\r\n                    fontWeight: 'bold',\r\n                    color: 'white',\r\n                    marginBottom: '10px'\r\n                }}>\r\n                    Validation des Changements\r\n                </h1>\r\n                <p style={{ color: 'rgba(255,255,255,0.8)', fontSize: '16px' }}>\r\n                    Gérer les demandes de modifications de planning des formateurs\r\n                </p>\r\n            </div>\r\n\r\n            {/* Messages */}\r\n            {message && (\r\n                <div style={{\r\n                    backgroundColor: message.includes('❌') ? '#fee2e2' : '#d1fae5',\r\n                    color: message.includes('❌') ? '#991b1b' : '#065f46',\r\n                    padding: '15px',\r\n                    borderRadius: '8px',\r\n                    marginBottom: '20px',\r\n                    fontWeight: '500',\r\n                    textAlign: 'center',\r\n                    whiteSpace: 'pre-line'\r\n                }}>\r\n                    {message}\r\n                </div>\r\n            )}\r\n\r\n            {/* Statistiques */}\r\n            <div style={{\r\n                display: 'grid',\r\n                gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',\r\n                gap: '20px',\r\n                marginBottom: '30px'\r\n            }}>\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                    borderRadius: '12px',\r\n                    padding: '25px',\r\n                    textAlign: 'center',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n                    backdropFilter: 'blur(10px)'\r\n                }}>\r\n                    <div style={{fontSize: '28px', fontWeight: 'bold', marginBottom: '5px', color: '#f59e0b'}}>\r\n                        {changementsEnAttente}\r\n                    </div>\r\n                    <div style={{fontSize: '14px', color: '#6b7280'}}>En attente</div>\r\n                </div>\r\n\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                    borderRadius: '12px',\r\n                    padding: '25px',\r\n                    textAlign: 'center',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n                    backdropFilter: 'blur(10px)'\r\n                }}>\r\n                    <div style={{fontSize: '28px', fontWeight: 'bold', marginBottom: '5px', color: '#10b981'}}>\r\n                        {changementsArchives}\r\n                    </div>\r\n                    <div style={{fontSize: '14px', color: '#6b7280'}}>Archivées</div>\r\n                </div>\r\n\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                    borderRadius: '12px',\r\n                    padding: '25px',\r\n                    textAlign: 'center',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n                    backdropFilter: 'blur(10px)'\r\n                }}>\r\n                    <div style={{fontSize: '28px', fontWeight: 'bold', marginBottom: '5px', color: '#8b5cf6'}}>\r\n                        {Object.keys(changementsParFormateur).length}\r\n                    </div>\r\n                    <div style={{fontSize: '14px', color: '#6b7280'}}>Formateurs</div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Filtres */}\r\n            <div style={{\r\n                backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                borderRadius: '12px',\r\n                padding: '25px',\r\n                marginBottom: '30px',\r\n                boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n                backdropFilter: 'blur(10px)'\r\n            }}>\r\n                <div style={{\r\n                    display: 'grid',\r\n                    gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n                    gap: '20px',\r\n                    alignItems: 'end'\r\n                }}>\r\n                    <div>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            fontSize: '14px',\r\n                            fontWeight: '600',\r\n                            color: '#374151',\r\n                            marginBottom: '8px'\r\n                        }}>\r\n                            Formateur :\r\n                        </label>\r\n                        <select\r\n                            value={formateurSelectionne}\r\n                            onChange={(e) => setFormateurSelectionne(e.target.value)}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '12px',\r\n                                border: '1px solid #d1d5db',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            <option value=\"\">-- Tous les formateurs --</option>\r\n                            {formateurs.map(formateur => (\r\n                                <option key={formateur.id} value={formateur.id}>\r\n                                    {formateur.prenom} {formateur.nom}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            fontSize: '14px',\r\n                            fontWeight: '600',\r\n                            color: '#374151',\r\n                            marginBottom: '8px'\r\n                        }}>\r\n                            Statut :\r\n                        </label>\r\n                        <select\r\n                            value={filtreStatut}\r\n                            onChange={(e) => setFiltreStatut(e.target.value)}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '12px',\r\n                                border: '1px solid #d1d5db',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            <option value=\"en_attente\">En attente</option>\r\n                            <option value=\"archivees\">Archivées</option>\r\n                            <option value=\"toutes\">Toutes les demandes</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    {filtreStatut === 'en_attente' && changements.length > 0 && (\r\n                        <div>\r\n                            <button\r\n                                onClick={validerTous}\r\n                                disabled={traitement}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '12px',\r\n                                    background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontWeight: '600',\r\n                                    fontSize: '14px',\r\n                                    cursor: traitement ? 'not-allowed' : 'pointer',\r\n                                    opacity: traitement ? 0.6 : 1\r\n                                }}\r\n                            >\r\n                                Valider Tout\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Liste des changements */}\r\n            {Object.keys(changementsParFormateur).length > 0 ? (\r\n                <div style={{display: 'flex', flexDirection: 'column', gap: '20px'}}>\r\n                    {Object.entries(changementsParFormateur).map(([formateurId, data]) => (\r\n                        <div key={formateurId} style={{\r\n                            backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                            borderRadius: '12px',\r\n                            overflow: 'hidden',\r\n                            boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n                            backdropFilter: 'blur(10px)'\r\n                        }}>\r\n                            \r\n                            {/* En-tête formateur */}\r\n                            <div style={{\r\n                                backgroundColor: '#f9fafb',\r\n                                padding: '20px',\r\n                                borderBottom: '1px solid #e5e7eb',\r\n                                display: 'flex',\r\n                                justifyContent: 'space-between',\r\n                                alignItems: 'center'\r\n                            }}>\r\n                                <h3 style={{\r\n                                    fontSize: '18px',\r\n                                    fontWeight: '600',\r\n                                    margin: 0,\r\n                                    color: '#1f2937'\r\n                                }}>\r\n                                    {data.formateur}\r\n                                </h3>\r\n                                <div style={{\r\n                                    backgroundColor: '#ede9fe',\r\n                                    color: '#7c3aed',\r\n                                    padding: '6px 12px',\r\n                                    borderRadius: '20px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: '500'\r\n                                }}>\r\n                                    {data.changements.length} demande(s)\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Liste des changements */}\r\n                            <div style={{padding: '20px'}}>\r\n                                {data.changements.map(changement => {\r\n                                    const typeDetails = getTypeDetails(changement.type);\r\n                                    const estPeriode = changement.date_debut !== changement.date_fin;\r\n                                    \r\n                                    return (\r\n                                        <div key={changement.id} style={{\r\n                                            backgroundColor: '#f9fafb',\r\n                                            borderRadius: '8px',\r\n                                            padding: '20px',\r\n                                            marginBottom: '15px',\r\n                                            display: 'grid',\r\n                                            gridTemplateColumns: '1fr auto',\r\n                                            gap: '20px',\r\n                                            alignItems: 'center',\r\n                                            border: '1px solid #e5e7eb'\r\n                                        }}>\r\n                                            <div>\r\n                                                <div style={{\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                    gap: '10px',\r\n                                                    marginBottom: '10px'\r\n                                                }}>\r\n                                                    <span style={{\r\n                                                        backgroundColor: typeDetails.couleur,\r\n                                                        color: 'white',\r\n                                                        padding: '4px 12px',\r\n                                                        borderRadius: '20px',\r\n                                                        fontSize: '12px',\r\n                                                        fontWeight: '600'\r\n                                                    }}>\r\n                                                        {typeDetails.label}\r\n                                                    </span>\r\n                                                    <span style={{\r\n                                                        backgroundColor: changement.statut === 'en_attente' ? '#fef3c7' : '#d1fae5',\r\n                                                        color: changement.statut === 'en_attente' ? '#92400e' : '#065f46',\r\n                                                        padding: '4px 12px',\r\n                                                        borderRadius: '20px',\r\n                                                        fontSize: '12px',\r\n                                                        fontWeight: '600'\r\n                                                    }}>\r\n                                                        {changement.statut === 'en_attente' ? 'En attente' : 'Validée'}\r\n                                                    </span>\r\n                                                </div>\r\n                                                \r\n                                                <div style={{\r\n                                                    fontSize: '16px',\r\n                                                    fontWeight: '600',\r\n                                                    marginBottom: '5px',\r\n                                                    color: '#1f2937'\r\n                                                }}>\r\n                                                    {formatDate(changement.date_debut)}\r\n                                                    {estPeriode && (\r\n                                                        <span> → {formatDate(changement.date_fin)}</span>\r\n                                                    )}\r\n                                                </div>\r\n                                                \r\n                                                <div style={{\r\n                                                    fontSize: '14px',\r\n                                                    color: '#6b7280'\r\n                                                }}>\r\n                                                    Demandé le {formatDate(changement.created_at)}\r\n                                                </div>\r\n                                                \r\n                                                {changement.motif && (\r\n                                                    <div style={{\r\n                                                        fontSize: '14px',\r\n                                                        color: '#374151',\r\n                                                        marginTop: '5px',\r\n                                                        fontStyle: 'italic'\r\n                                                    }}>\r\n                                                        \"{changement.motif}\"\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n\r\n                                            {/* ⭐⭐⭐ ACTIONS ROI COMPLÈTES - ÉTAPE 2.6 ⭐⭐⭐ */}\r\n                                            <div>\r\n                                                {changement.statut === 'en_attente' ? (\r\n                                                    <div style={{\r\n                                                        display: 'flex',\r\n                                                        flexDirection: 'column',\r\n                                                        gap: '8px'\r\n                                                    }}>\r\n                                                        <button\r\n                                                            onClick={() => validerChangement(changement.id)}\r\n                                                            disabled={traitement}\r\n                                                            style={{\r\n                                                                background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n                                                                color: 'white',\r\n                                                                border: 'none',\r\n                                                                padding: '10px 20px',\r\n                                                                borderRadius: '8px',\r\n                                                                fontWeight: '600',\r\n                                                                fontSize: '14px',\r\n                                                                cursor: traitement ? 'not-allowed' : 'pointer',\r\n                                                                opacity: traitement ? 0.6 : 1,\r\n                                                                display: 'flex',\r\n                                                                alignItems: 'center',\r\n                                                                gap: '6px'\r\n                                                            }}\r\n                                                        >\r\n                                                            Valider\r\n                                                        </button>\r\n                                                    </div>\r\n                                                ) : (\r\n                                                    <div style={{\r\n                                                        backgroundColor: '#d1fae5',\r\n                                                        color: '#065f46',\r\n                                                        padding: '10px 20px',\r\n                                                        borderRadius: '8px',\r\n                                                        textAlign: 'center',\r\n                                                        fontWeight: '600',\r\n                                                        fontSize: '14px'\r\n                                                    }}>\r\n                                                        Validée\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ) : (\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                    borderRadius: '12px',\r\n                    padding: '60px',\r\n                    textAlign: 'center',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n                    backdropFilter: 'blur(10px)'\r\n                }}>\r\n                    <div style={{fontSize: '64px', marginBottom: '20px'}}>\r\n                        {filtreStatut === 'en_attente' ? '✅' : '📋'}\r\n                    </div>\r\n                    <h3 style={{\r\n                        fontSize: '24px',\r\n                        fontWeight: '600',\r\n                        marginBottom: '10px',\r\n                        color: '#1f2937'\r\n                    }}>\r\n                        {filtreStatut === 'en_attente' ? 'Aucune demande en attente' : 'Aucun changement trouvé'}\r\n                    </h3>\r\n                    <p style={{fontSize: '16px', color: '#6b7280'}}>\r\n                        {filtreStatut === 'en_attente' \r\n                            ? 'Toutes les demandes ont été traitées.'\r\n                            : 'Aucune demande ne correspond aux filtres sélectionnés.'\r\n                        }\r\n                    </p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC - Page titre personnalisé\r\nexport default withAuthAdmin(ValiderChangements, \"Validation Changements\");",
          "taille": 60358,
          "lignes": 1444,
          "dateModif": "2025-08-28T19:00:40.586Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": "import { useEffect, useState } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport { supabase } from '../lib/supabaseClient';\r\nimport { withAuthAdmin } from '../components/withAuthAdmin';\r\n\r\n// Skeleton Loader spécifique à la Validation des Changements\r\nconst SkeletonValidationLoader = () => {\r\n  const shimmer = {\r\n    background: 'linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%)',\r\n    backgroundSize: '200% 100%',\r\n    animation: 'shimmer 1.5s infinite'\r\n  };\r\n\r\n  return (\r\n    <div style={{\r\n      minHeight: '100vh',\r\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n      padding: '40px 60px'\r\n    }}>\r\n      <style jsx>{`\r\n        @keyframes shimmer {\r\n          0% { background-position: -200% 0; }\r\n          100% { background-position: 200% 0; }\r\n        }\r\n      `}</style>\r\n\r\n      {/* Header Navigation Skeleton */}\r\n      <div style={{\r\n        backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n        borderRadius: '12px',\r\n        padding: '15px 25px',\r\n        marginBottom: '20px',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        backdropFilter: 'blur(10px)'\r\n      }}>\r\n        <div style={{ \r\n          height: '16px', \r\n          width: '250px', \r\n          borderRadius: '4px',\r\n          ...shimmer \r\n        }} />\r\n        \r\n        <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n          <div style={{ \r\n            height: '32px', \r\n            width: '80px', \r\n            borderRadius: '8px',\r\n            ...shimmer \r\n          }} />\r\n          <div style={{ \r\n            height: '24px', \r\n            width: '160px', \r\n            borderRadius: '6px',\r\n            ...shimmer \r\n          }} />\r\n          <div style={{ \r\n            height: '32px', \r\n            width: '100px', \r\n            borderRadius: '6px',\r\n            ...shimmer \r\n          }} />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Titre principal Skeleton */}\r\n      <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n        <div style={{ \r\n          height: '32px', \r\n          width: '320px', \r\n          borderRadius: '4px',\r\n          margin: '0 auto 10px',\r\n          ...shimmer \r\n        }} />\r\n        <div style={{ \r\n          height: '16px', \r\n          width: '480px', \r\n          borderRadius: '4px',\r\n          margin: '0 auto',\r\n          ...shimmer \r\n        }} />\r\n      </div>\r\n\r\n      {/* Statistiques Skeleton */}\r\n      <div style={{\r\n        display: 'grid',\r\n        gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',\r\n        gap: '20px',\r\n        marginBottom: '30px'\r\n      }}>\r\n        {[1, 2, 3].map(i => (\r\n          <div key={i} style={{\r\n            backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n            borderRadius: '12px',\r\n            padding: '25px',\r\n            textAlign: 'center',\r\n            boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n            backdropFilter: 'blur(10px)'\r\n          }}>\r\n            <div style={{ \r\n              height: '32px', \r\n              width: '60px', \r\n              borderRadius: '4px',\r\n              marginBottom: '8px',\r\n              margin: '0 auto 8px',\r\n              ...shimmer \r\n            }} />\r\n            <div style={{ \r\n              height: '14px', \r\n              width: '80px', \r\n              borderRadius: '4px',\r\n              margin: '0 auto',\r\n              ...shimmer \r\n            }} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Filtres Skeleton */}\r\n      <div style={{\r\n        backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n        borderRadius: '12px',\r\n        padding: '25px',\r\n        marginBottom: '30px',\r\n        boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n        backdropFilter: 'blur(10px)'\r\n      }}>\r\n        <div style={{\r\n          display: 'grid',\r\n          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n          gap: '20px',\r\n          alignItems: 'end'\r\n        }}>\r\n          <div>\r\n            <div style={{ \r\n              height: '14px', \r\n              width: '100px', \r\n              borderRadius: '4px',\r\n              marginBottom: '8px',\r\n              ...shimmer \r\n            }} />\r\n            <div style={{ \r\n              height: '40px', \r\n              width: '100%', \r\n              borderRadius: '8px',\r\n              ...shimmer \r\n            }} />\r\n          </div>\r\n          <div>\r\n            <div style={{ \r\n              height: '14px', \r\n              width: '80px', \r\n              borderRadius: '4px',\r\n              marginBottom: '8px',\r\n              ...shimmer \r\n            }} />\r\n            <div style={{ \r\n              height: '40px', \r\n              width: '100%', \r\n              borderRadius: '8px',\r\n              ...shimmer \r\n            }} />\r\n          </div>\r\n          <div>\r\n            <div style={{ \r\n              height: '40px', \r\n              width: '140px', \r\n              borderRadius: '8px',\r\n              ...shimmer \r\n            }} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Liste Formateurs avec Changements Skeleton */}\r\n      <div style={{\r\n        backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n        borderRadius: '12px',\r\n        padding: '30px',\r\n        boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n        backdropFilter: 'blur(10px)'\r\n      }}>\r\n        {/* Formateur Cards Skeleton */}\r\n        {[1, 2, 3].map(formateurIndex => (\r\n          <div key={formateurIndex} style={{\r\n            backgroundColor: 'white',\r\n            borderRadius: '12px',\r\n            padding: '25px',\r\n            marginBottom: '20px',\r\n            boxShadow: '0 4px 6px rgba(0,0,0,0.1)',\r\n            border: '1px solid #e5e7eb'\r\n          }}>\r\n            {/* En-tête formateur */}\r\n            <div style={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              alignItems: 'center',\r\n              marginBottom: '20px'\r\n            }}>\r\n              <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>\r\n                <div style={{ \r\n                  height: '50px', \r\n                  width: '50px', \r\n                  borderRadius: '25px',\r\n                  ...shimmer \r\n                }} />\r\n                <div>\r\n                  <div style={{ \r\n                    height: '18px', \r\n                    width: '140px', \r\n                    borderRadius: '4px',\r\n                    marginBottom: '4px',\r\n                    ...shimmer \r\n                  }} />\r\n                  <div style={{ \r\n                    height: '14px', \r\n                    width: '100px', \r\n                    borderRadius: '4px',\r\n                    ...shimmer \r\n                  }} />\r\n                </div>\r\n              </div>\r\n              <div style={{ \r\n                height: '24px', \r\n                width: '80px', \r\n                borderRadius: '12px',\r\n                ...shimmer \r\n              }} />\r\n            </div>\r\n\r\n            {/* Changements du formateur */}\r\n            {[1, 2].map(changementIndex => (\r\n              <div key={changementIndex} style={{\r\n                backgroundColor: '#f9fafb',\r\n                borderRadius: '8px',\r\n                padding: '20px',\r\n                marginBottom: '15px',\r\n                border: '1px solid #e5e7eb'\r\n              }}>\r\n                {/* Info changement */}\r\n                <div style={{\r\n                  display: 'grid',\r\n                  gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',\r\n                  gap: '15px',\r\n                  marginBottom: '15px'\r\n                }}>\r\n                  <div>\r\n                    <div style={{ \r\n                      height: '12px', \r\n                      width: '60px', \r\n                      borderRadius: '4px',\r\n                      marginBottom: '6px',\r\n                      ...shimmer \r\n                    }} />\r\n                    <div style={{ \r\n                      height: '16px', \r\n                      width: '80px', \r\n                      borderRadius: '4px',\r\n                      ...shimmer \r\n                    }} />\r\n                  </div>\r\n                  <div>\r\n                    <div style={{ \r\n                      height: '12px', \r\n                      width: '40px', \r\n                      borderRadius: '4px',\r\n                      marginBottom: '6px',\r\n                      ...shimmer \r\n                    }} />\r\n                    <div style={{ \r\n                      height: '16px', \r\n                      width: '90px', \r\n                      borderRadius: '4px',\r\n                      ...shimmer \r\n                    }} />\r\n                  </div>\r\n                  <div>\r\n                    <div style={{ \r\n                      height: '12px', \r\n                      width: '50px', \r\n                      borderRadius: '4px',\r\n                      marginBottom: '6px',\r\n                      ...shimmer \r\n                    }} />\r\n                    <div style={{ \r\n                      height: '16px', \r\n                      width: '70px', \r\n                      borderRadius: '4px',\r\n                      ...shimmer \r\n                    }} />\r\n                  </div>\r\n                  <div>\r\n                    <div style={{ \r\n                      height: '20px', \r\n                      width: '80px', \r\n                      borderRadius: '10px',\r\n                      ...shimmer \r\n                    }} />\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Actions skeleton - seulement pour les en_attente */}\r\n                {changementIndex === 1 && (\r\n                  <div style={{\r\n                    display: 'flex',\r\n                    gap: '12px',\r\n                    justifyContent: 'flex-end',\r\n                    alignItems: 'center',\r\n                    paddingTop: '15px',\r\n                    borderTop: '1px solid #e5e7eb'\r\n                  }}>\r\n                    <div style={{ \r\n                      height: '40px', \r\n                      width: '80px', \r\n                      borderRadius: '8px',\r\n                      ...shimmer \r\n                    }} />\r\n                  </div>\r\n                )}\r\n\r\n                {/* État validé skeleton */}\r\n                {changementIndex === 2 && (\r\n                  <div style={{\r\n                    paddingTop: '15px',\r\n                    borderTop: '1px solid #e5e7eb',\r\n                    textAlign: 'center'\r\n                  }}>\r\n                    <div style={{ \r\n                      height: '20px', \r\n                      width: '60px', \r\n                      borderRadius: '4px',\r\n                      margin: '0 auto',\r\n                      ...shimmer \r\n                    }} />\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction ValiderChangements({ user, logout, inactivityTime }) {\r\n    const [changements, setChangements] = useState([]);\r\n    const [formateurs, setFormateurs] = useState([]);\r\n    const [formateurSelectionne, setFormateurSelectionne] = useState('');\r\n    const [filtreStatut, setFiltreStatut] = useState('en_attente');\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [message, setMessage] = useState('');\r\n    const [traitement, setTraitement] = useState(false);\r\n    const [statsRoi, setStatsRoi] = useState({\r\n        validations: 0,\r\n        suppressions: 0,\r\n        modifications: 0,\r\n        affectationsNettoyees: 0,\r\n        messagesEnvoyes: 0,\r\n        commandementsEnvoyes: 0\r\n    });\r\n    const router = useRouter();\r\n\r\n    useEffect(() => {\r\n        loadFormateurs();\r\n        loadStatsRoi();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (formateurs.length > 0) {\r\n            loadChangements();\r\n        }\r\n    }, [formateurSelectionne, filtreStatut, formateurs]);\r\n\r\n    // Auto-sélection du formateur depuis l'URL (navigation depuis messagerie)\r\n    useEffect(() => {\r\n        const { formateur } = router.query;\r\n        if (formateur && formateurs.length > 0 && !formateurSelectionne) {\r\n            console.log('✅ Auto-sélection formateur depuis URL:', formateur);\r\n            setFormateurSelectionne(formateur);\r\n        }\r\n    }, [router.query, formateurs, formateurSelectionne]);\r\n\r\n    // 👑 NOUVELLE FONCTION ROI - COMMUNICATION AVEC SYSTÈMES\r\n    const commanderSystemes = (action, formateurId, dateStr, details = {}) => {\r\n        const commande = {\r\n            action,           // 'retirer_formateur' | 'ajouter_formateur' | 'changer_statut' | 'refresh_complet'\r\n            formateur_id: formateurId,\r\n            date: dateStr,\r\n            timestamp: Date.now(),\r\n            details,          // Infos supplémentaires (type, creneau, etc.)\r\n            roi: 'valider_changements'\r\n        };\r\n\r\n        console.log('👑 ROI COMMANDE:', commande);\r\n        \r\n        // Envoyer commande via localStorage\r\n        localStorage.setItem('roiCommande', JSON.stringify(commande));\r\n        \r\n        // Mettre à jour stats\r\n        setStatsRoi(prev => ({\r\n            ...prev,\r\n            commandementsEnvoyes: prev.commandementsEnvoyes + 1\r\n        }));\r\n        \r\n        // Auto-nettoyer la commande après 5 secondes\r\n        setTimeout(() => {\r\n            const currentCommande = localStorage.getItem('roiCommande');\r\n            if (currentCommande) {\r\n                const parsed = JSON.parse(currentCommande);\r\n                if (parsed.timestamp === commande.timestamp) {\r\n                    localStorage.removeItem('roiCommande');\r\n                    console.log('🧹 Commande ROI nettoyée automatiquement');\r\n                }\r\n            }\r\n        }, 5000);\r\n\r\n        return commande;\r\n    };\r\n\r\n    // 👑 NOUVELLE FONCTION ROI - NETTOYAGE AFFECTATIONS\r\n    const nettoyerAffectations = async (formateurId, dateStr, creneau = null) => {\r\n        console.log(`🧹 ROI NETTOIE : ${formateurId} le ${dateStr} ${creneau || 'tous créneaux'}`);\r\n        \r\n        let affectationsNettoyees = 0;\r\n        let casesModifiees = 0;\r\n\r\n        try {\r\n            // 1. NETTOYER planning_hebdomadaire\r\n            let query = supabase\r\n                .from('planning_hebdomadaire')\r\n                .select('*')\r\n                .eq('date', dateStr);\r\n                \r\n            if (creneau) {\r\n                const creneauDB = creneau === 'Matin' ? 'matin' : 'AM';\r\n                query = query.eq('creneau', creneauDB);\r\n            }\r\n            \r\n            const { data: plannings, error: planningsError } = await query;\r\n            \r\n            if (planningsError) throw planningsError;\r\n\r\n            for (let planning of plannings || []) {\r\n                if (planning.formateurs_ids && planning.formateurs_ids.includes(formateurId)) {\r\n                    const nouveauxFormateurs = planning.formateurs_ids.filter(id => id !== formateurId);\r\n                    \r\n                    const { error: updateError } = await supabase\r\n                        .from('planning_hebdomadaire')\r\n                        .update({ formateurs_ids: nouveauxFormateurs })\r\n                        .eq('id', planning.id);\r\n                        \r\n                    if (updateError) throw updateError;\r\n                    \r\n                    casesModifiees++;\r\n                    console.log(`✅ Retiré de planning_hebdomadaire case ${planning.jour} ${planning.creneau}`);\r\n                }\r\n            }\r\n            \r\n            // 2. NETTOYER planning_formateurs_hebdo\r\n            let deleteQuery = supabase\r\n                .from('planning_formateurs_hebdo')\r\n                .delete()\r\n                .eq('formateur_id', formateurId)\r\n                .eq('date', dateStr);\r\n                \r\n            if (creneau) {\r\n                const creneauDB = creneau === 'Matin' ? 'matin' : 'AM';\r\n                deleteQuery = deleteQuery.eq('creneau', creneauDB);\r\n            }\r\n            \r\n            const { data: deleted, error: deleteError } = await deleteQuery.select();\r\n                \r\n            if (deleteError) throw deleteError;\r\n            \r\n            affectationsNettoyees = deleted?.length || 0;\r\n            console.log(`✅ Supprimé ${affectationsNettoyees} affectations planning_formateurs_hebdo`);\r\n            \r\n            // Mettre à jour stats\r\n            setStatsRoi(prev => ({\r\n                ...prev,\r\n                affectationsNettoyees: prev.affectationsNettoyees + affectationsNettoyees\r\n            }));\r\n\r\n            return {\r\n                affectationsNettoyees,\r\n                casesModifiees,\r\n                success: true\r\n            };\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur nettoyage affectations:', error);\r\n            throw new Error(`Erreur nettoyage: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    // 👑 NOUVELLE FONCTION ROI - MESSAGES AUTOMATIQUES ÉTENDUS (CORRIGÉE)\r\n    const envoyerConfirmationFormateur = async (formateur, absence, action) => {\r\n        try {\r\n            let contenu = '';\r\n            let objet = '';\r\n            \r\n            switch(action) {\r\n                case 'validee':\r\n                    objet = `Absence validée - ${absence.date_debut}`;\r\n                    contenu = `Bonjour ${formateur.prenom},\\n\\nVotre demande d'absence du ${absence.date_debut} au ${absence.date_fin} a été validée par le coordinateur.\\n\\nType: ${absence.type}\\nVotre planning a été mis à jour automatiquement.\\n\\nCordialement,\\nL'équipe ACLEF`;\r\n                    break;\r\n                case 'supprimee':\r\n                    objet = `Absence supprimée - ${absence.date_debut}`;\r\n                    contenu = `Bonjour ${formateur.prenom},\\n\\nVotre absence du ${absence.date_debut} au ${absence.date_fin} a été supprimée.\\n\\nVous redevenez disponible selon votre planning type habituel.\\n\\nCordialement,\\nL'équipe ACLEF`;\r\n                    break;\r\n                case 'modifiee':\r\n                    objet = `Absence modifiée - ${absence.date_debut}`;\r\n                    contenu = `Bonjour ${formateur.prenom},\\n\\nVotre demande d'absence a été modifiée par le coordinateur.\\n\\nNouveau statut: ${absence.type}\\nPériode: ${absence.date_debut} au ${absence.date_fin}\\n\\nVotre planning a été mis à jour.\\n\\nCordialement,\\nL'équipe ACLEF`;\r\n                    break;\r\n                default:\r\n                    throw new Error(`Action message inconnue: ${action}`);\r\n            }\r\n\r\n            // ✅ CORRECTION : Type contrainte BDD respectée (planning ou messagerie)\r\n            const { error } = await supabase.from('messages').insert({\r\n                expediteur: 'Coordination ACLEF',\r\n                destinataire_id: formateur.id,\r\n                objet: objet,\r\n                contenu: contenu,\r\n                type: 'planning'\r\n            });\r\n\r\n            if (error) throw error;\r\n\r\n            // Mettre à jour stats\r\n            setStatsRoi(prev => ({\r\n                ...prev,\r\n                messagesEnvoyes: prev.messagesEnvoyes + 1\r\n            }));\r\n\r\n            console.log(`📧 Message ${action} envoyé à ${formateur.prenom}`);\r\n            return true;\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur envoi message:', error);\r\n            throw new Error(`Erreur message: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    // 👑 ⭐⭐⭐ NOUVELLE FONCTION ÉTAPE 2.6 - CHANGER TYPE ABSENCE ⭐⭐⭐\r\n    const changerTypeAbsence = async (absenceId, nouveauType) => {\r\n        try {\r\n            setTraitement(true);\r\n            setMessage('Changement de type en cours...');\r\n\r\n            // Types valides\r\n            const typesValides = ['personnel', 'formation', 'maladie', 'congés'];\r\n            if (!typesValides.includes(nouveauType)) {\r\n                throw new Error('Type invalide');\r\n            }\r\n\r\n            // 1. 🔧 Récupérer absence actuelle et formateur\r\n            const { data: absence, error: absenceError } = await supabase\r\n                .from('absences_formateurs')\r\n                .select('*')\r\n                .eq('id', absenceId)\r\n                .single();\r\n\r\n            if (absenceError) throw absenceError;\r\n            if (!absence) throw new Error('Absence non trouvée');\r\n\r\n            const ancienType = absence.type;\r\n            \r\n            // Ne rien faire si c'est le même type\r\n            if (ancienType === nouveauType) {\r\n                setMessage(`⚠️ Type déjà \"${nouveauType}\" - Aucun changement nécessaire`);\r\n                return;\r\n            }\r\n\r\n            // Récupérer formateur\r\n            const { data: formateur, error: formateurError } = await supabase\r\n                .from('users')\r\n                .select('id, prenom, nom')\r\n                .eq('id', absence.formateur_id)\r\n                .single();\r\n\r\n            if (formateurError) throw formateurError;\r\n            if (!formateur) throw new Error('Formateur non trouvé');\r\n\r\n            // 2. 👑 METTRE À JOUR TYPE DANS BDD\r\n            const { error: updateError } = await supabase\r\n                .from('absences_formateurs')\r\n                .update({ \r\n                    type: nouveauType,\r\n                    statut: 'validé'  // Auto-valider lors du changement\r\n                })\r\n                .eq('id', absenceId);\r\n\r\n            if (updateError) throw updateError;\r\n\r\n            // 3. 👑 LOGIQUE TRANSFORMATION SELON CHANGEMENT\r\n            let messageTransformation = '';\r\n\r\n            if (ancienType === 'formation' && nouveauType !== 'formation') {\r\n                // ÉTAIT dispo exceptionnelle → DEVIENT absent\r\n                messageTransformation = `🔄 ${formateur.prenom} : DISPO EXCEPT → ABSENT`;\r\n                \r\n                // Nettoyer affectations (il ne sera plus dispo)\r\n                await nettoyerAffectations(absence.formateur_id, absence.date_debut);\r\n                \r\n                // Commander au coordo de retirer formateur\r\n                commanderSystemes('retirer_formateur', absence.formateur_id, absence.date_debut, {\r\n                    ancienType: 'formation',\r\n                    nouveauType: nouveauType,\r\n                    transformation: 'dispo_except_vers_absent'\r\n                });\r\n\r\n            } else if (ancienType !== 'formation' && nouveauType === 'formation') {\r\n                // ÉTAIT absent → DEVIENT dispo exceptionnelle  \r\n                messageTransformation = `🔄 ${formateur.prenom} : ABSENT → DISPO EXCEPT`;\r\n                \r\n                // Commander au coordo d'ajouter formateur (il devient dispo)\r\n                commanderSystemes('ajouter_formateur', absence.formateur_id, absence.date_debut, {\r\n                    ancienType: ancienType,\r\n                    nouveauType: 'formation',\r\n                    transformation: 'absent_vers_dispo_except'\r\n                });\r\n\r\n            } else {\r\n                // Changement entre types d'absence (personnel → maladie, etc.)\r\n                messageTransformation = `🔄 ${formateur.prenom} : ${ancienType.toUpperCase()} → ${nouveauType.toUpperCase()}`;\r\n                \r\n                // Reste absent, juste changement de type\r\n                commanderSystemes('changer_statut', absence.formateur_id, absence.date_debut, {\r\n                    ancienType: ancienType,\r\n                    nouveauType: nouveauType,\r\n                    transformation: 'changement_type_absence'\r\n                });\r\n            }\r\n\r\n            // 4. 👑 ENVOYER MESSAGE AU FORMATEUR\r\n            const absenceModifiee = { ...absence, type: nouveauType };\r\n            await envoyerConfirmationFormateur(formateur, absenceModifiee, 'modifiee');\r\n\r\n            // 5. 👑 METTRE À JOUR STATS ROI\r\n            setStatsRoi(prev => ({\r\n                ...prev,\r\n                modifications: prev.modifications + 1\r\n            }));\r\n\r\n            // 6. 👑 MESSAGE DE SUCCÈS DÉTAILLÉ\r\n            setMessage(`Changement de type effectué avec succès !\r\n${messageTransformation}\r\n📧 Message envoyé au formateur\r\n✅ Coordination informée de la modification`);\r\n\r\n            // 7. 👑 RECHARGER LES DONNÉES\r\n            await loadChangements();\r\n\r\n        } catch (error) {\r\n            console.error('❌ Erreur changement type ROI:', error);\r\n            setMessage(`❌ Erreur: ${error.message}`);\r\n        } finally {\r\n            setTraitement(false);\r\n            setTimeout(() => setMessage(''), 6000);\r\n        }\r\n    };\r\n\r\n    // 👑 FONCTION SUPPRESSION ABSENCE (ÉTAPE 2.5)\r\n    const supprimerAbsence = async (absenceId) => {\r\n        try {\r\n            setTraitement(true);\r\n            setMessage('Suppression en cours...');\r\n\r\n            // 1. 🔧 Récupérer absence et formateur séparément\r\n            const { data: absence, error: absenceError } = await supabase\r\n                .from('absences_formateurs')\r\n                .select('*')\r\n                .eq('id', absenceId)\r\n                .single();\r\n\r\n            if (absenceError) throw absenceError;\r\n            if (!absence) throw new Error('Absence non trouvée');\r\n\r\n            // Récupérer formateur séparément\r\n            const { data: formateur, error: formateurError } = await supabase\r\n                .from('users')\r\n                .select('id, prenom, nom')\r\n                .eq('id', absence.formateur_id)\r\n                .single();\r\n\r\n            if (formateurError) throw formateurError;\r\n            if (!formateur) throw new Error('Formateur non trouvé');\r\n\r\n            // 2. 👑 SUPPRIMER DE BDD\r\n            const { error: deleteError } = await supabase\r\n                .from('absences_formateurs')\r\n                .delete()\r\n                .eq('id', absenceId);\r\n\r\n            if (deleteError) throw deleteError;\r\n\r\n            // 3. 👑 NETTOYAGE AFFECTATIONS ROI\r\n            const resultatsNettoyage = await nettoyerAffectations(\r\n                absence.formateur_id, \r\n                absence.date_debut\r\n            );\r\n\r\n            // 4. 👑 COMMANDER AU COORDO DE REMETTRE FORMATEUR DISPONIBLE\r\n            commanderSystemes('remettre_disponible', absence.formateur_id, absence.date_debut, {\r\n                type: absence.type,\r\n                date_fin: absence.date_fin,\r\n                motif: absence.motif,\r\n                action: 'suppression',\r\n                affectationsNettoyees: resultatsNettoyage.affectationsNettoyees\r\n            });\r\n\r\n            // 5. 👑 ENVOYER MESSAGE AU FORMATEUR\r\n            await envoyerConfirmationFormateur(formateur, absence, 'supprimee');\r\n\r\n            // 6. 👑 METTRE À JOUR STATS ROI\r\n            setStatsRoi(prev => ({\r\n                ...prev,\r\n                suppressions: prev.suppressions + 1\r\n            }));\r\n\r\n            // 7. 👑 MESSAGE DE SUCCÈS DÉTAILLÉ\r\n            setMessage(`Absence supprimée avec succès pour ${formateur.prenom} !\r\n✅ ${resultatsNettoyage.affectationsNettoyees} affectations nettoyées\r\n✅ ${resultatsNettoyage.casesModifiees} cases planning libérées\r\n📧 Message envoyé au formateur\r\n✅ Coordination informée : formateur remis disponible`);\r\n\r\n            // 8. 👑 RECHARGER LES DONNÉES\r\n            await loadChangements();\r\n\r\n        } catch (error) {\r\n            console.error('❌ Erreur suppression ROI:', error);\r\n            setMessage(`❌ Erreur: ${error.message}`);\r\n        } finally {\r\n            setTraitement(false);\r\n            setTimeout(() => setMessage(''), 6000);\r\n        }\r\n    };\r\n\r\n    // 👑 FONCTION ROI AMÉLIORÉE - VALIDATION AVEC PROPAGATION\r\n    const validerChangement = async (changementId) => {\r\n        try {\r\n            setTraitement(true);\r\n            setMessage('Validation en cours...');\r\n\r\n            // 🔧 CORRECTION BDD : Récupérer absence et formateur séparément\r\n            const { data: changement, error: changeError } = await supabase\r\n                .from('absences_formateurs')\r\n                .select('*')\r\n                .eq('id', changementId)\r\n                .single();\r\n\r\n            if (changeError) throw changeError;\r\n            if (!changement) throw new Error('Changement non trouvé');\r\n\r\n            // Récupérer formateur séparément\r\n            const { data: formateur, error: formateurError } = await supabase\r\n                .from('users')\r\n                .select('id, prenom, nom')\r\n                .eq('id', changement.formateur_id)\r\n                .single();\r\n\r\n            if (formateurError) throw formateurError;\r\n            if (!formateur) throw new Error('Formateur non trouvé');\r\n\r\n            // 2. Valider = passer à 'validé'\r\n            const { error: updateError } = await supabase\r\n                .from('absences_formateurs')\r\n                .update({ statut: 'validé' })\r\n                .eq('id', changementId);\r\n\r\n            if (updateError) throw updateError;\r\n\r\n            // 3. 👑 NETTOYAGE ROI si absence (pas si dispo exceptionnelle)\r\n            if (changement.type !== 'formation') {\r\n                await nettoyerAffectations(changement.formateur_id, changement.date_debut);\r\n                \r\n                // 4. 👑 COMMANDER au coordo de retirer le formateur\r\n                commanderSystemes('retirer_formateur', changement.formateur_id, changement.date_debut, {\r\n                    type: changement.type,\r\n                    date_fin: changement.date_fin,\r\n                    motif: changement.motif\r\n                });\r\n            } else {\r\n                // Dispo exceptionnelle -> Commander d'ajouter\r\n                commanderSystemes('ajouter_formateur', changement.formateur_id, changement.date_debut, {\r\n                    type: 'dispo_except',\r\n                    date_fin: changement.date_fin,\r\n                    motif: changement.motif\r\n                });\r\n            }\r\n\r\n            // 5. 👑 ENVOYER MESSAGE AU FORMATEUR (avec objet formateur complet)\r\n            const changementAvecFormateur = { ...changement, formateur };\r\n            await envoyerConfirmationFormateur(formateur, changementAvecFormateur, 'validee');\r\n\r\n            // 6. Mettre à jour stats\r\n            setStatsRoi(prev => ({\r\n                ...prev,\r\n                validations: prev.validations + 1\r\n            }));\r\n\r\n            setMessage(`Changement validé`);\r\n            await loadChangements();\r\n\r\n        } catch (error) {\r\n            console.error('❌ Erreur validation ROI:', error);\r\n            setMessage(`❌ Erreur: ${error.message}`);\r\n        } finally {\r\n            setTraitement(false);\r\n            setTimeout(() => setMessage(''), 5000);\r\n        }\r\n    };\r\n\r\n    const loadFormateurs = async () => {\r\n        try {\r\n            const { data: formateursData, error } = await supabase\r\n                .from('users')\r\n                .select('id, prenom, nom')\r\n                .eq('role', 'formateur')\r\n                .eq('archive', false)\r\n                .order('prenom');\r\n\r\n            if (error) throw error;\r\n            setFormateurs(formateursData || []);\r\n        } catch (error) {\r\n            console.error('Erreur lors du chargement des formateurs:', error);\r\n            setMessage(`Erreur: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    const loadStatsRoi = () => {\r\n        // Charger stats depuis localStorage ou BDD\r\n        const savedStats = localStorage.getItem('statsRoi');\r\n        if (savedStats) {\r\n            setStatsRoi(JSON.parse(savedStats));\r\n        }\r\n    };\r\n\r\n    // Sauvegarder stats à chaque changement\r\n    useEffect(() => {\r\n        localStorage.setItem('statsRoi', JSON.stringify(statsRoi));\r\n    }, [statsRoi]);\r\n\r\n    const loadChangements = async () => {\r\n        try {\r\n            setIsLoading(true);\r\n\r\n            let query = supabase\r\n                .from('absences_formateurs')\r\n                .select('*')\r\n                .order('created_at', { ascending: false });\r\n\r\n            // Filtrer par formateur si sélectionné\r\n            if (formateurSelectionne) {\r\n                query = query.eq('formateur_id', formateurSelectionne);\r\n            }\r\n\r\n            // Filtrer par statut\r\n            if (filtreStatut === 'en_attente') {\r\n                query = query.eq('statut', 'en_attente');\r\n            } else if (filtreStatut === 'archivees') {\r\n                query = query.eq('statut', 'validé');\r\n            }\r\n            // Si \"toutes\", pas de filtre sur le statut\r\n\r\n            const { data: changementsData, error } = await query;\r\n\r\n            if (error) throw error;\r\n\r\n            // Enrichir avec les noms des formateurs\r\n            const changementsEnrichis = changementsData.map(changement => {\r\n                const formateur = formateurs.find(f => f.id === changement.formateur_id);\r\n                return {\r\n                    ...changement,\r\n                    formateurNom: formateur ? `${formateur.prenom} ${formateur.nom}` : 'Formateur inconnu'\r\n                };\r\n            });\r\n\r\n            setChangements(changementsEnrichis || []);\r\n            \r\n        } catch (error) {\r\n            console.error('Erreur lors du chargement:', error);\r\n            setMessage(`Erreur: ${error.message}`);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const validerTous = async () => {\r\n        if (!window.confirm('Valider et archiver tous les changements en attente ?')) return;\r\n\r\n        try {\r\n            setTraitement(true);\r\n            setMessage('Traitement de tous les changements...');\r\n\r\n            let query = supabase\r\n                .from('absences_formateurs')\r\n                .update({ statut: 'validé' })\r\n                .eq('statut', 'en_attente');\r\n\r\n            if (formateurSelectionne) {\r\n                query = query.eq('formateur_id', formateurSelectionne);\r\n            }\r\n\r\n            const { error } = await query;\r\n\r\n            if (error) throw error;\r\n\r\n            // Commander refresh complet\r\n            commanderSystemes('refresh_complet', null, null, {\r\n                action: 'validation_massive',\r\n                filtreFormateur: formateurSelectionne\r\n            });\r\n\r\n            setMessage('Tous les changements ont été validés');\r\n            await loadChangements();\r\n\r\n        } catch (error) {\r\n            console.error('Erreur:', error);\r\n            setMessage(`❌ Erreur: ${error.message}`);\r\n        } finally {\r\n            setTraitement(false);\r\n            setTimeout(() => setMessage(''), 3000);\r\n        }\r\n    };\r\n\r\n    const getTypeDetails = (type) => {\r\n        switch (type) {\r\n            case 'personnel':\r\n                return { \r\n                    label: 'Absence',\r\n                    couleur: '#ef4444'\r\n                };\r\n            case 'formation':\r\n                return { \r\n                    label: 'Dispo exceptionnelle',\r\n                    couleur: '#f59e0b'\r\n                };\r\n            case 'maladie':\r\n                return { \r\n                    label: 'Maladie',\r\n                    couleur: '#dc2626'\r\n                };\r\n            case 'congés':\r\n                return { \r\n                    label: 'Congés',\r\n                    couleur: '#059669'\r\n                };\r\n            default:\r\n                return { \r\n                    label: 'Autre',\r\n                    couleur: '#6b7280'\r\n                };\r\n        }\r\n    };\r\n\r\n    const formatDate = (dateString) => {\r\n        const date = new Date(dateString);\r\n        return date.toLocaleDateString('fr-FR');\r\n    };\r\n\r\n    // Grouper par formateur\r\n    const changementsParFormateur = changements.reduce((acc, changement) => {\r\n        const formateurId = changement.formateur_id;\r\n        if (!acc[formateurId]) {\r\n            acc[formateurId] = {\r\n                formateur: changement.formateurNom,\r\n                changements: []\r\n            };\r\n        }\r\n        acc[formateurId].changements.push(changement);\r\n        return acc;\r\n    }, {});\r\n\r\n    const changementsEnAttente = changements.filter(c => c.statut === 'en_attente').length;\r\n    const changementsArchives = changements.filter(c => c.statut === 'validé').length;\r\n\r\n    if (isLoading) {\r\n        return <SkeletonValidationLoader />;\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            minHeight: '100vh',\r\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n            padding: '40px 60px',\r\n            opacity: 1,\r\n            transition: 'opacity 0.3s ease-in-out'\r\n        }}>\r\n            {/* Header avec navigation */}\r\n            <div style={{\r\n                backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                borderRadius: '12px',\r\n                padding: '8px 20px',\r\n                marginBottom: '20px',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                backdropFilter: 'blur(10px)'\r\n            }}>\r\n                <nav style={{ fontSize: '14px' }}>\r\n                    <span style={{ color: '#6b7280' }}>Dashboard</span>\r\n                    <span style={{ margin: '0 10px', color: '#9ca3af' }}>/</span>\r\n                    <span style={{ color: '#8b5cf6', fontWeight: '500' }}>Validation Changements</span>\r\n                </nav>\r\n                \r\n                <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n                    <button\r\n                        onClick={() => router.push('/')}\r\n                        style={{\r\n                            padding: '8px 16px',\r\n                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            fontSize: '14px',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        Accueil\r\n                    </button>\r\n\r\n                    <div style={{\r\n                        padding: '4px 8px',\r\n                        fontSize: '12px',\r\n                        fontWeight: '600',\r\n                        borderRadius: '6px',\r\n                        backgroundColor: inactivityTime >= 240 ? '#fee2e2' : inactivityTime >= 180 ? '#fef3c7' : '#d1fae5',\r\n                        color: inactivityTime >= 240 ? '#dc2626' : inactivityTime >= 180 ? '#f59e0b' : '#10b981',\r\n                        border: '1px solid',\r\n                        borderColor: inactivityTime >= 240 ? '#fecaca' : inactivityTime >= 180 ? '#fde68a' : '#bbf7d0'\r\n                    }}>\r\n                        Status : {inactivityTime >= 300 ? '😴 ENDORMI!' : \r\n                                 inactivityTime >= 240 ? `⚠️ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 inactivityTime >= 180 ? `⏰ ${Math.floor((300 - inactivityTime) / 60)}m${(300 - inactivityTime) % 60}s` :\r\n                                 `🟢 ACTIF`}\r\n                    </div>\r\n\r\n                    <button\r\n                        onClick={logout}\r\n                        style={{\r\n                            padding: '6px 16px',\r\n                            backgroundColor: '#dc2626',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '6px',\r\n                            fontSize: '14px',\r\n                            fontWeight: '600',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        🚪 Déconnexion\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            {/* Titre principal */}\r\n            <div style={{ textAlign: 'center', marginBottom: '30px' }}>\r\n                <h1 style={{\r\n                    fontSize: '36px',\r\n                    fontWeight: 'bold',\r\n                    color: 'white',\r\n                    marginBottom: '10px'\r\n                }}>\r\n                    Validation des Changements\r\n                </h1>\r\n                <p style={{ color: 'rgba(255,255,255,0.8)', fontSize: '16px' }}>\r\n                    Gérer les demandes de modifications de planning des formateurs\r\n                </p>\r\n            </div>\r\n\r\n            {/* Messages */}\r\n            {message && (\r\n                <div style={{\r\n                    backgroundColor: message.includes('❌') ? '#fee2e2' : '#d1fae5',\r\n                    color: message.includes('❌') ? '#991b1b' : '#065f46',\r\n                    padding: '15px',\r\n                    borderRadius: '8px',\r\n                    marginBottom: '20px',\r\n                    fontWeight: '500',\r\n                    textAlign: 'center',\r\n                    whiteSpace: 'pre-line'\r\n                }}>\r\n                    {message}\r\n                </div>\r\n            )}\r\n\r\n            {/* Statistiques */}\r\n            <div style={{\r\n                display: 'grid',\r\n                gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',\r\n                gap: '20px',\r\n                marginBottom: '30px'\r\n            }}>\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                    borderRadius: '12px',\r\n                    padding: '25px',\r\n                    textAlign: 'center',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n                    backdropFilter: 'blur(10px)'\r\n                }}>\r\n                    <div style={{fontSize: '28px', fontWeight: 'bold', marginBottom: '5px', color: '#f59e0b'}}>\r\n                        {changementsEnAttente}\r\n                    </div>\r\n                    <div style={{fontSize: '14px', color: '#6b7280'}}>En attente</div>\r\n                </div>\r\n\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                    borderRadius: '12px',\r\n                    padding: '25px',\r\n                    textAlign: 'center',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n                    backdropFilter: 'blur(10px)'\r\n                }}>\r\n                    <div style={{fontSize: '28px', fontWeight: 'bold', marginBottom: '5px', color: '#10b981'}}>\r\n                        {changementsArchives}\r\n                    </div>\r\n                    <div style={{fontSize: '14px', color: '#6b7280'}}>Archivées</div>\r\n                </div>\r\n\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                    borderRadius: '12px',\r\n                    padding: '25px',\r\n                    textAlign: 'center',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n                    backdropFilter: 'blur(10px)'\r\n                }}>\r\n                    <div style={{fontSize: '28px', fontWeight: 'bold', marginBottom: '5px', color: '#8b5cf6'}}>\r\n                        {Object.keys(changementsParFormateur).length}\r\n                    </div>\r\n                    <div style={{fontSize: '14px', color: '#6b7280'}}>Formateurs</div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Filtres */}\r\n            <div style={{\r\n                backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                borderRadius: '12px',\r\n                padding: '25px',\r\n                marginBottom: '30px',\r\n                boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n                backdropFilter: 'blur(10px)'\r\n            }}>\r\n                <div style={{\r\n                    display: 'grid',\r\n                    gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n                    gap: '20px',\r\n                    alignItems: 'end'\r\n                }}>\r\n                    <div>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            fontSize: '14px',\r\n                            fontWeight: '600',\r\n                            color: '#374151',\r\n                            marginBottom: '8px'\r\n                        }}>\r\n                            Formateur :\r\n                        </label>\r\n                        <select\r\n                            value={formateurSelectionne}\r\n                            onChange={(e) => setFormateurSelectionne(e.target.value)}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '12px',\r\n                                border: '1px solid #d1d5db',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            <option value=\"\">-- Tous les formateurs --</option>\r\n                            {formateurs.map(formateur => (\r\n                                <option key={formateur.id} value={formateur.id}>\r\n                                    {formateur.prenom} {formateur.nom}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label style={{\r\n                            display: 'block',\r\n                            fontSize: '14px',\r\n                            fontWeight: '600',\r\n                            color: '#374151',\r\n                            marginBottom: '8px'\r\n                        }}>\r\n                            Statut :\r\n                        </label>\r\n                        <select\r\n                            value={filtreStatut}\r\n                            onChange={(e) => setFiltreStatut(e.target.value)}\r\n                            style={{\r\n                                width: '100%',\r\n                                padding: '12px',\r\n                                border: '1px solid #d1d5db',\r\n                                borderRadius: '8px',\r\n                                fontSize: '14px',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            <option value=\"en_attente\">En attente</option>\r\n                            <option value=\"archivees\">Archivées</option>\r\n                            <option value=\"toutes\">Toutes les demandes</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    {filtreStatut === 'en_attente' && changements.length > 0 && (\r\n                        <div>\r\n                            <button\r\n                                onClick={validerTous}\r\n                                disabled={traitement}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    padding: '12px',\r\n                                    background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n                                    color: 'white',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    fontWeight: '600',\r\n                                    fontSize: '14px',\r\n                                    cursor: traitement ? 'not-allowed' : 'pointer',\r\n                                    opacity: traitement ? 0.6 : 1\r\n                                }}\r\n                            >\r\n                                Valider Tout\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Liste des changements */}\r\n            {Object.keys(changementsParFormateur).length > 0 ? (\r\n                <div style={{display: 'flex', flexDirection: 'column', gap: '20px'}}>\r\n                    {Object.entries(changementsParFormateur).map(([formateurId, data]) => (\r\n                        <div key={formateurId} style={{\r\n                            backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                            borderRadius: '12px',\r\n                            overflow: 'hidden',\r\n                            boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n                            backdropFilter: 'blur(10px)'\r\n                        }}>\r\n                            \r\n                            {/* En-tête formateur */}\r\n                            <div style={{\r\n                                backgroundColor: '#f9fafb',\r\n                                padding: '20px',\r\n                                borderBottom: '1px solid #e5e7eb',\r\n                                display: 'flex',\r\n                                justifyContent: 'space-between',\r\n                                alignItems: 'center'\r\n                            }}>\r\n                                <h3 style={{\r\n                                    fontSize: '18px',\r\n                                    fontWeight: '600',\r\n                                    margin: 0,\r\n                                    color: '#1f2937'\r\n                                }}>\r\n                                    {data.formateur}\r\n                                </h3>\r\n                                <div style={{\r\n                                    backgroundColor: '#ede9fe',\r\n                                    color: '#7c3aed',\r\n                                    padding: '6px 12px',\r\n                                    borderRadius: '20px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: '500'\r\n                                }}>\r\n                                    {data.changements.length} demande(s)\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Liste des changements */}\r\n                            <div style={{padding: '20px'}}>\r\n                                {data.changements.map(changement => {\r\n                                    const typeDetails = getTypeDetails(changement.type);\r\n                                    const estPeriode = changement.date_debut !== changement.date_fin;\r\n                                    \r\n                                    return (\r\n                                        <div key={changement.id} style={{\r\n                                            backgroundColor: '#f9fafb',\r\n                                            borderRadius: '8px',\r\n                                            padding: '20px',\r\n                                            marginBottom: '15px',\r\n                                            display: 'grid',\r\n                                            gridTemplateColumns: '1fr auto',\r\n                                            gap: '20px',\r\n                                            alignItems: 'center',\r\n                                            border: '1px solid #e5e7eb'\r\n                                        }}>\r\n                                            <div>\r\n                                                <div style={{\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                    gap: '10px',\r\n                                                    marginBottom: '10px'\r\n                                                }}>\r\n                                                    <span style={{\r\n                                                        backgroundColor: typeDetails.couleur,\r\n                                                        color: 'white',\r\n                                                        padding: '4px 12px',\r\n                                                        borderRadius: '20px',\r\n                                                        fontSize: '12px',\r\n                                                        fontWeight: '600'\r\n                                                    }}>\r\n                                                        {typeDetails.label}\r\n                                                    </span>\r\n                                                    <span style={{\r\n                                                        backgroundColor: changement.statut === 'en_attente' ? '#fef3c7' : '#d1fae5',\r\n                                                        color: changement.statut === 'en_attente' ? '#92400e' : '#065f46',\r\n                                                        padding: '4px 12px',\r\n                                                        borderRadius: '20px',\r\n                                                        fontSize: '12px',\r\n                                                        fontWeight: '600'\r\n                                                    }}>\r\n                                                        {changement.statut === 'en_attente' ? 'En attente' : 'Validée'}\r\n                                                    </span>\r\n                                                </div>\r\n                                                \r\n                                                <div style={{\r\n                                                    fontSize: '16px',\r\n                                                    fontWeight: '600',\r\n                                                    marginBottom: '5px',\r\n                                                    color: '#1f2937'\r\n                                                }}>\r\n                                                    {formatDate(changement.date_debut)}\r\n                                                    {estPeriode && (\r\n                                                        <span> → {formatDate(changement.date_fin)}</span>\r\n                                                    )}\r\n                                                </div>\r\n                                                \r\n                                                <div style={{\r\n                                                    fontSize: '14px',\r\n                                                    color: '#6b7280'\r\n                                                }}>\r\n                                                    Demandé le {formatDate(changement.created_at)}\r\n                                                </div>\r\n                                                \r\n                                                {changement.motif && (\r\n                                                    <div style={{\r\n                                                        fontSize: '14px',\r\n                                                        color: '#374151',\r\n                                                        marginTop: '5px',\r\n                                                        fontStyle: 'italic'\r\n                                                    }}>\r\n                                                        \"{changement.motif}\"\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n\r\n                                            {/* ⭐⭐⭐ ACTIONS ROI COMPLÈTES - ÉTAPE 2.6 ⭐⭐⭐ */}\r\n                                            <div>\r\n                                                {changement.statut === 'en_attente' ? (\r\n                                                    <div style={{\r\n                                                        display: 'flex',\r\n                                                        flexDirection: 'column',\r\n                                                        gap: '8px'\r\n                                                    }}>\r\n                                                        <button\r\n                                                            onClick={() => validerChangement(changement.id)}\r\n                                                            disabled={traitement}\r\n                                                            style={{\r\n                                                                background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n                                                                color: 'white',\r\n                                                                border: 'none',\r\n                                                                padding: '10px 20px',\r\n                                                                borderRadius: '8px',\r\n                                                                fontWeight: '600',\r\n                                                                fontSize: '14px',\r\n                                                                cursor: traitement ? 'not-allowed' : 'pointer',\r\n                                                                opacity: traitement ? 0.6 : 1,\r\n                                                                display: 'flex',\r\n                                                                alignItems: 'center',\r\n                                                                gap: '6px'\r\n                                                            }}\r\n                                                        >\r\n                                                            Valider\r\n                                                        </button>\r\n                                                    </div>\r\n                                                ) : (\r\n                                                    <div style={{\r\n                                                        backgroundColor: '#d1fae5',\r\n                                                        color: '#065f46',\r\n                                                        padding: '10px 20px',\r\n                                                        borderRadius: '8px',\r\n                                                        textAlign: 'center',\r\n                                                        fontWeight: '600',\r\n                                                        fontSize: '14px'\r\n                                                    }}>\r\n                                                        Validée\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ) : (\r\n                <div style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n                    borderRadius: '12px',\r\n                    padding: '60px',\r\n                    textAlign: 'center',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n                    backdropFilter: 'blur(10px)'\r\n                }}>\r\n                    <div style={{fontSize: '64px', marginBottom: '20px'}}>\r\n                        {filtreStatut === 'en_attente' ? '✅' : '📋'}\r\n                    </div>\r\n                    <h3 style={{\r\n                        fontSize: '24px',\r\n                        fontWeight: '600',\r\n                        marginBottom: '10px',\r\n                        color: '#1f2937'\r\n                    }}>\r\n                        {filtreStatut === 'en_attente' ? 'Aucune demande en attente' : 'Aucun changement trouvé'}\r\n                    </h3>\r\n                    <p style={{fontSize: '16px', color: '#6b7280'}}>\r\n                        {filtreStatut === 'en_attente' \r\n                            ? 'Toutes les demandes ont été traitées.'\r\n                            : 'Aucune demande ne correspond aux filtres sélectionnés.'\r\n                        }\r\n                    </p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\n// 🛡️ PROTECTION AVEC HOC - Page titre personnalisé\r\nexport default withAuthAdmin(ValiderChangements, \"Validation Changements\");",
          "taille": 60358,
          "lignes": 1444,
          "dateModif": "2025-08-28T17:10:53.955Z",
          "erreur": null
        },
        "identique": true,
        "diffTaille": 0,
        "diffLignes": 0,
        "pourcentageSimilarite": 100,
        "message": "✅ Fichiers parfaitement identiques"
      }
    },
    {
      "fichier": "styles/Home.module.css",
      "resultat": {
        "statut": "SIMILAIRE",
        "local": {
          "existe": true,
          "contenu": ".page {\r\n  --gray-rgb: 0, 0, 0;\r\n  --gray-alpha-200: rgba(var(--gray-rgb), 0.08);\r\n  --gray-alpha-100: rgba(var(--gray-rgb), 0.05);\r\n\r\n  --button-primary-hover: #383838;\r\n  --button-secondary-hover: #f2f2f2;\r\n\r\n  display: grid;\r\n  grid-template-rows: 20px 1fr 20px;\r\n  align-items: center;\r\n  justify-items: center;\r\n  min-height: 100svh;\r\n  padding: 80px;\r\n  gap: 64px;\r\n  font-family: var(--font-geist-sans);\r\n}\r\n\r\n@media (prefers-color-scheme: dark) {\r\n  .page {\r\n    --gray-rgb: 255, 255, 255;\r\n    --gray-alpha-200: rgba(var(--gray-rgb), 0.145);\r\n    --gray-alpha-100: rgba(var(--gray-rgb), 0.06);\r\n\r\n    --button-primary-hover: #ccc;\r\n    --button-secondary-hover: #1a1a1a;\r\n  }\r\n}\r\n\r\n.main {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 32px;\r\n  grid-row-start: 2;\r\n}\r\n\r\n.main ol {\r\n  font-family: var(--font-geist-mono);\r\n  padding-left: 0;\r\n  margin: 0;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  letter-spacing: -0.01em;\r\n  list-style-position: inside;\r\n}\r\n\r\n.main li:not(:last-of-type) {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.main code {\r\n  font-family: inherit;\r\n  background: var(--gray-alpha-100);\r\n  padding: 2px 4px;\r\n  border-radius: 4px;\r\n  font-weight: 600;\r\n}\r\n\r\n.ctas {\r\n  display: flex;\r\n  gap: 16px;\r\n}\r\n\r\n.ctas a {\r\n  appearance: none;\r\n  border-radius: 128px;\r\n  height: 48px;\r\n  padding: 0 20px;\r\n  border: none;\r\n  border: 1px solid transparent;\r\n  transition:\r\n    background 0.2s,\r\n    color 0.2s,\r\n    border-color 0.2s;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 16px;\r\n  line-height: 20px;\r\n  font-weight: 500;\r\n}\r\n\r\na.primary {\r\n  background: var(--foreground);\r\n  color: var(--background);\r\n  gap: 8px;\r\n}\r\n\r\na.secondary {\r\n  border-color: var(--gray-alpha-200);\r\n  min-width: 158px;\r\n}\r\n\r\n.footer {\r\n  grid-row-start: 3;\r\n  display: flex;\r\n  gap: 24px;\r\n}\r\n\r\n.footer a {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.footer img {\r\n  flex-shrink: 0;\r\n}\r\n\r\n/* Enable hover only on non-touch devices */\r\n@media (hover: hover) and (pointer: fine) {\r\n  a.primary:hover {\r\n    background: var(--button-primary-hover);\r\n    border-color: transparent;\r\n  }\r\n\r\n  a.secondary:hover {\r\n    background: var(--button-secondary-hover);\r\n    border-color: transparent;\r\n  }\r\n\r\n  .footer a:hover {\r\n    text-decoration: underline;\r\n    text-underline-offset: 4px;\r\n  }\r\n}\r\n\r\n@media (max-width: 600px) {\r\n  .page {\r\n    padding: 32px;\r\n    padding-bottom: 80px;\r\n  }\r\n\r\n  .main {\r\n    align-items: center;\r\n  }\r\n\r\n  .main ol {\r\n    text-align: center;\r\n  }\r\n\r\n  .ctas {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .ctas a {\r\n    font-size: 14px;\r\n    height: 40px;\r\n    padding: 0 16px;\r\n  }\r\n\r\n  a.secondary {\r\n    min-width: auto;\r\n  }\r\n\r\n  .footer {\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n}\r\n\r\n@media (prefers-color-scheme: dark) {\r\n  .logo {\r\n    filter: invert();\r\n  }\r\n}\r\n",
          "taille": 2915,
          "lignes": 169,
          "dateModif": "2025-08-28T19:00:40.675Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": ".page {\n  --gray-rgb: 0, 0, 0;\n  --gray-alpha-200: rgba(var(--gray-rgb), 0.08);\n  --gray-alpha-100: rgba(var(--gray-rgb), 0.05);\n\n  --button-primary-hover: #383838;\n  --button-secondary-hover: #f2f2f2;\n\n  display: grid;\n  grid-template-rows: 20px 1fr 20px;\n  align-items: center;\n  justify-items: center;\n  min-height: 100svh;\n  padding: 80px;\n  gap: 64px;\n  font-family: var(--font-geist-sans);\n}\n\n@media (prefers-color-scheme: dark) {\n  .page {\n    --gray-rgb: 255, 255, 255;\n    --gray-alpha-200: rgba(var(--gray-rgb), 0.145);\n    --gray-alpha-100: rgba(var(--gray-rgb), 0.06);\n\n    --button-primary-hover: #ccc;\n    --button-secondary-hover: #1a1a1a;\n  }\n}\n\n.main {\n  display: flex;\n  flex-direction: column;\n  gap: 32px;\n  grid-row-start: 2;\n}\n\n.main ol {\n  font-family: var(--font-geist-mono);\n  padding-left: 0;\n  margin: 0;\n  font-size: 14px;\n  line-height: 24px;\n  letter-spacing: -0.01em;\n  list-style-position: inside;\n}\n\n.main li:not(:last-of-type) {\n  margin-bottom: 8px;\n}\n\n.main code {\n  font-family: inherit;\n  background: var(--gray-alpha-100);\n  padding: 2px 4px;\n  border-radius: 4px;\n  font-weight: 600;\n}\n\n.ctas {\n  display: flex;\n  gap: 16px;\n}\n\n.ctas a {\n  appearance: none;\n  border-radius: 128px;\n  height: 48px;\n  padding: 0 20px;\n  border: none;\n  border: 1px solid transparent;\n  transition:\n    background 0.2s,\n    color 0.2s,\n    border-color 0.2s;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n  line-height: 20px;\n  font-weight: 500;\n}\n\na.primary {\n  background: var(--foreground);\n  color: var(--background);\n  gap: 8px;\n}\n\na.secondary {\n  border-color: var(--gray-alpha-200);\n  min-width: 158px;\n}\n\n.footer {\n  grid-row-start: 3;\n  display: flex;\n  gap: 24px;\n}\n\n.footer a {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.footer img {\n  flex-shrink: 0;\n}\n\n/* Enable hover only on non-touch devices */\n@media (hover: hover) and (pointer: fine) {\n  a.primary:hover {\n    background: var(--button-primary-hover);\n    border-color: transparent;\n  }\n\n  a.secondary:hover {\n    background: var(--button-secondary-hover);\n    border-color: transparent;\n  }\n\n  .footer a:hover {\n    text-decoration: underline;\n    text-underline-offset: 4px;\n  }\n}\n\n@media (max-width: 600px) {\n  .page {\n    padding: 32px;\n    padding-bottom: 80px;\n  }\n\n  .main {\n    align-items: center;\n  }\n\n  .main ol {\n    text-align: center;\n  }\n\n  .ctas {\n    flex-direction: column;\n  }\n\n  .ctas a {\n    font-size: 14px;\n    height: 40px;\n    padding: 0 16px;\n  }\n\n  a.secondary {\n    min-width: auto;\n  }\n\n  .footer {\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n  }\n}\n\n@media (prefers-color-scheme: dark) {\n  .logo {\n    filter: invert();\n  }\n}\n",
          "taille": 2747,
          "lignes": 169,
          "dateModif": "2025-08-11T17:08:49.345Z",
          "erreur": null
        },
        "identique": false,
        "diffTaille": 168,
        "diffLignes": 0,
        "pourcentageSimilarite": 94,
        "message": "🟡 SIMILAIRE - Similarité: 94% (±168 bytes, ±0 lignes)"
      }
    },
    {
      "fichier": "styles/globals.css",
      "resultat": {
        "statut": "SIMILAIRE",
        "local": {
          "existe": true,
          "contenu": ":root {\r\n  --background: #ffffff;\r\n  --foreground: #171717;\r\n}\r\n\r\n@media (prefers-color-scheme: dark) {\r\n  :root {\r\n    --background: #0a0a0a;\r\n    --foreground: #ededed;\r\n  }\r\n}\r\n\r\nhtml,\r\nbody {\r\n  max-width: 100vw;\r\n  overflow-x: hidden;\r\n}\r\n\r\nbody {\r\n  color: var(--foreground);\r\n  background: var(--background);\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\n* {\r\n  box-sizing: border-box;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\na {\r\n  color: inherit;\r\n  text-decoration: none;\r\n}\r\n\r\n@media (prefers-color-scheme: dark) {\r\n  html {\r\n    color-scheme: dark;\r\n  }\r\n}\r\n",
          "taille": 650,
          "lignes": 43,
          "dateModif": "2025-08-28T19:00:40.683Z",
          "erreur": null
        },
        "vercel": {
          "existe": true,
          "contenu": ":root {\n  --background: #ffffff;\n  --foreground: #171717;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --background: #0a0a0a;\n    --foreground: #ededed;\n  }\n}\n\nhtml,\nbody {\n  max-width: 100vw;\n  overflow-x: hidden;\n}\n\nbody {\n  color: var(--foreground);\n  background: var(--background);\n  font-family: Arial, Helvetica, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n* {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\n@media (prefers-color-scheme: dark) {\n  html {\n    color-scheme: dark;\n  }\n}\n",
          "taille": 608,
          "lignes": 43,
          "dateModif": "2025-08-11T17:08:49.342Z",
          "erreur": null
        },
        "identique": false,
        "diffTaille": 42,
        "diffLignes": 0,
        "pourcentageSimilarite": 94,
        "message": "🟡 SIMILAIRE - Similarité: 94% (±42 bytes, ±0 lignes)"
      }
    },
    {
      "fichier": "test-api-create-user.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "// Test direct de création via API interne\r\nconsole.log('🧪 Création manuelle de Véronique Bénard dans la console...')\r\n\r\n// Simuler la création avec INSERT SQL direct\r\n// Nous allons utiliser un script pour insérer directement via l'API\r\nconst userData = {\r\n    prenom: 'Véronique', \r\n    nom: 'Bénard',\r\n    email: 'veronique.benard@formateur.aclef',\r\n    role: 'formateur',\r\n    archive: false,\r\n    password_hash: null,\r\n    custom_password: null,\r\n    must_change_password: false\r\n}\r\n\r\nconsole.log('Données utilisateur à créer:', userData)\r\nconsole.log('📋 INSTRUCTIONS :')\r\nconsole.log('1. Ouvrir http://localhost:3005/gestion-formateurs')\r\nconsole.log('2. Se connecter comme admin') \r\nconsole.log('3. Ajouter formateur: Prénom=Véronique, Nom=Bénard')\r\nconsole.log('4. Tester login: username=Véronique, password=Bénard')",
          "taille": 846,
          "lignes": 22,
          "dateModif": "2025-08-26T20:25:07.915Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "test-auth.md",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "# Test du système d'authentification formateur\r\n\r\n## 1. Initialiser les mots de passe (une seule fois)\r\n\r\n```bash\r\ncurl -X POST \"http://localhost:3000/api/auth/init-passwords?secret=init-aclef-2024\"\r\n```\r\n\r\n## 2. Tester la connexion\r\n\r\n### Première connexion (avec nom comme mot de passe)\r\n```bash\r\ncurl -X POST \"http://localhost:3000/api/auth/formateur/login\" \\\r\n  -H \"Content-Type: application/json\" \\\r\n  -d '{\r\n    \"username\": \"Alain\",\r\n    \"password\": \"Terieur\"\r\n  }'\r\n```\r\n\r\nCela devrait retourner :\r\n- `mustChangePassword: true` si c'est la première connexion\r\n- Un token JWT\r\n\r\n## 3. Changer le mot de passe\r\n\r\n```bash\r\ncurl -X POST \"http://localhost:3000/api/auth/formateur/change-password\" \\\r\n  -H \"Content-Type: application/json\" \\\r\n  -H \"Authorization: Bearer [TOKEN_RECU]\" \\\r\n  -d '{\r\n    \"currentPassword\": \"Terieur\",\r\n    \"newPassword\": \"NouveauMotDePasse123\"\r\n  }'\r\n```\r\n\r\n## 4. Se reconnecter avec le nouveau mot de passe\r\n\r\n```bash\r\ncurl -X POST \"http://localhost:3000/api/auth/formateur/login\" \\\r\n  -H \"Content-Type: application/json\" \\\r\n  -d '{\r\n    \"username\": \"Alain\",\r\n    \"password\": \"NouveauMotDePasse123\"\r\n  }'\r\n```\r\n\r\n## Workflow complet\r\n\r\n1. **Première connexion** : prénom/nom\r\n2. **Changement obligatoire** : redirection vers `/formateur/change-password`\r\n3. **Connexions suivantes** : prénom/nouveau mot de passe\r\n\r\n## Structure simplifiée\r\n\r\n- ✅ Table `users` uniquement (pas de `formateurs_auth`)\r\n- ✅ Login = prénom du formateur\r\n- ✅ Mot de passe initial = nom du formateur\r\n- ✅ Changement obligatoire à la première connexion\r\n- ✅ JWT pour la session\r\n- ✅ Design existant conservé",
          "taille": 1637,
          "lignes": 61,
          "dateModif": "2025-08-21T05:52:30.093Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "test-create-veronique.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "import { supabase } from './lib/supabaseClient.js'\r\n\r\nasync function createVeronique() {\r\n    try {\r\n        console.log('🧪 [TEST] Création de Véronique Bénard pour les tests...')\r\n        \r\n        // Vérifier si elle existe déjà\r\n        const { data: existing, error: checkError } = await supabase\r\n            .from('users')\r\n            .select('*')\r\n            .eq('prenom', 'Véronique')\r\n            .eq('nom', 'Bénard')\r\n            .single()\r\n            \r\n        if (existing) {\r\n            console.log('✅ [TEST] Véronique Bénard existe déjà:', existing)\r\n            return existing\r\n        }\r\n        \r\n        // Créer Véronique Bénard\r\n        const { data: newUser, error: insertError } = await supabase\r\n            .from('users')\r\n            .insert({\r\n                prenom: 'Véronique',\r\n                nom: 'Bénard', \r\n                email: 'veronique.benard@formateur.aclef',\r\n                role: 'formateur',\r\n                archive: false,\r\n                password_hash: null, // Pas de mot de passe personnalisé initialement\r\n                custom_password: null,\r\n                must_change_password: false,\r\n                created_at: new Date().toISOString()\r\n            })\r\n            .select()\r\n            .single()\r\n            \r\n        if (insertError) {\r\n            console.error('❌ [TEST] Erreur création:', insertError)\r\n            throw insertError\r\n        }\r\n        \r\n        console.log('✅ [TEST] Véronique Bénard créée avec succès:', newUser)\r\n        return newUser\r\n        \r\n    } catch (error) {\r\n        console.error('💥 [TEST] Erreur globale:', error)\r\n    }\r\n}\r\n\r\ncreateVeronique().then(() => {\r\n    console.log('🏁 [TEST] Terminé')\r\n    process.exit(0)\r\n})",
          "taille": 1764,
          "lignes": 53,
          "dateModif": "2025-08-26T20:23:08.390Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "test-reset-password.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "// Test de la fonctionnalité de réinitialisation mot de passe\r\n// Simule un appel admin vers l'API\r\n\r\n// Simuler un token admin (en production, récupéré du localStorage)\r\nconst adminToken = 'admin_test_token_for_simulation'\r\nconst formateurIdJean = '3a3bd552-141c-4136-8a83-81caf23750a8'\r\n\r\nasync function testResetPassword() {\r\n    console.log('🧪 [TEST-RESET] Test de réinitialisation mot de passe...')\r\n    \r\n    try {\r\n        console.log('1️⃣ Appel API reset-formateur-password...')\r\n        const response = await fetch('http://localhost:3005/api/admin/reset-formateur-password', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${adminToken}`\r\n            },\r\n            body: JSON.stringify({\r\n                formateurId: formateurIdJean,\r\n                formateurNom: 'Tanrien'\r\n            })\r\n        })\r\n\r\n        console.log('📊 Status:', response.status, response.statusText)\r\n        \r\n        const data = await response.json()\r\n        console.log('📋 Réponse API:', data)\r\n\r\n        if (data.success) {\r\n            console.log('✅ Reset réussi!')\r\n            console.log(`🔑 Nouveau mot de passe temporaire: \"${data.fallbackPassword}\"`)\r\n            \r\n            // Test de connexion avec le mot de passe réinitialisé\r\n            console.log('\\n2️⃣ Test connexion après reset...')\r\n            const loginResponse = await fetch('http://localhost:3005/api/auth/formateur/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username: 'Jean',\r\n                    password: data.fallbackPassword\r\n                })\r\n            })\r\n\r\n            const loginData = await loginResponse.json()\r\n            console.log('🔐 Login avec nom:', loginData.success ? '✅ SUCCÈS' : '❌ ÉCHEC')\r\n            \r\n            if (!loginData.success) {\r\n                console.log('❌ Erreur login:', loginData.error)\r\n            }\r\n            \r\n        } else {\r\n            console.log('❌ Reset échoué:', data.error)\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error('💥 Erreur test:', error.message)\r\n    }\r\n}\r\n\r\ntestResetPassword()\r\n    .then(() => {\r\n        console.log('\\n🏁 Test terminé')\r\n        process.exit(0)\r\n    })\r\n    .catch(err => {\r\n        console.error('💥 Erreur globale:', err)\r\n        process.exit(1)\r\n    })",
          "taille": 2555,
          "lignes": 71,
          "dateModif": "2025-08-26T20:48:38.962Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "test-rls-debug.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "// Test RLS Supabase - Diagnostic précis du problème\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\n// Données du .env.local\r\nconst supabaseUrl = 'https://mkbchdhbgdynxwfhpxbw.supabase.co'\r\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1rYmNoZGhiZ2R5bnh3ZmhweGJ3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUxMTQ5OTYsImV4cCI6MjA3MDY5MDk5Nn0.vvJBJtX9H1vakOwqhDEt_yYJcp_giBY50PMggJ7YZic'\r\nconst serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1rYmNoZGhiZ2R5bnh3ZmhweGJ3Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTExNDk5NiwiZXhwIjoyMDcwNjkwOTk2fQ._8zQliKa7WsYx5PWO-wTMmNWaOkcV_3BpaD7yuPgkBw'\r\n\r\nconst supabaseAnon = createClient(supabaseUrl, supabaseKey)\r\nconst supabaseAdmin = createClient(supabaseUrl, serviceRoleKey)\r\n\r\nasync function testRLSPermissions() {\r\n    console.log('🔍 [RLS-TEST] Diagnostic complet des permissions...')\r\n    \r\n    const userId = '3a3bd552-141c-4136-8a83-81caf23750a8' // Jean Tanrien\r\n    \r\n    try {\r\n        // 1. Test SELECT avec client anon (devrait fonctionner)\r\n        console.log('\\n1️⃣ Test SELECT avec client ANON:')\r\n        const { data: selectData, error: selectError } = await supabaseAnon\r\n            .from('users')\r\n            .select('*')\r\n            .eq('id', userId)\r\n            .single()\r\n            \r\n        console.log('   SELECT résultat:', selectError ? `ERROR: ${selectError.message}` : `SUCCESS: ${selectData.prenom} ${selectData.nom}`)\r\n        \r\n        // 2. Test UPDATE avec client anon (PROBLÈME ATTENDU)\r\n        console.log('\\n2️⃣ Test UPDATE avec client ANON:')\r\n        const { data: updateData, error: updateError, count: updateCount } = await supabaseAnon\r\n            .from('users')\r\n            .update({ \r\n                password_hash: '$2b$10$TEST.HASH.FOR.DIAGNOSIS',\r\n                password_changed_at: new Date().toISOString()\r\n            })\r\n            .eq('id', userId)\r\n            .select()\r\n            \r\n        console.log('   UPDATE résultat:', updateError ? `ERROR: ${updateError.message}` : `SUCCESS: ${updateCount} lignes`)\r\n        console.log('   UPDATE data:', updateData)\r\n        \r\n        // 3. Test UPDATE avec client admin (devrait fonctionner)\r\n        console.log('\\n3️⃣ Test UPDATE avec client ADMIN (service_role):')\r\n        const { data: adminUpdateData, error: adminUpdateError, count: adminUpdateCount } = await supabaseAdmin\r\n            .from('users')\r\n            .update({ \r\n                password_hash: '$2b$10$ADMIN.TEST.HASH.FOR.DIAGNOSIS',\r\n                password_changed_at: new Date().toISOString()\r\n            })\r\n            .eq('id', userId)\r\n            .select()\r\n            \r\n        console.log('   ADMIN UPDATE résultat:', adminUpdateError ? `ERROR: ${adminUpdateError.message}` : `SUCCESS: ${adminUpdateCount} lignes`)\r\n        console.log('   ADMIN UPDATE data:', adminUpdateData)\r\n        \r\n        // 4. Vérifier les policies existantes\r\n        console.log('\\n4️⃣ Requête policies existantes:')\r\n        const { data: policies, error: policyError } = await supabaseAdmin\r\n            .rpc('get_policies_for_table', { table_name: 'users' })\r\n            .catch(() => {\r\n                console.log('   RPC get_policies_for_table non disponible, utilisation requête directe...')\r\n                return { data: null, error: 'RPC non disponible' }\r\n            })\r\n        \r\n        if (policyError) {\r\n            console.log('   Tentative requête SQL directe pour les policies...')\r\n            const { data: sqlPolicies, error: sqlError } = await supabaseAdmin\r\n                .from('pg_policies')\r\n                .select('*')\r\n                .eq('tablename', 'users')\r\n                .catch(() => ({ data: [], error: 'Accès pg_policies refusé' }))\r\n                \r\n            console.log('   Policies SQL résultat:', sqlError ? `ERROR: ${sqlError}` : `SUCCESS: ${sqlPolicies?.length} policies`)\r\n        } else {\r\n            console.log('   Policies RPC:', policies)\r\n        }\r\n        \r\n        // 5. Diagnostic final\r\n        console.log('\\n🎯 DIAGNOSTIC:')\r\n        if (selectError) {\r\n            console.log('   ❌ SELECT échoue - Problème d\\'accès basique')\r\n        } else if (updateError && updateError.message.includes('RLS')) {\r\n            console.log('   ❌ UPDATE bloqué par RLS - Policies manquantes/restrictives')\r\n            console.log('   💡 SOLUTION: Créer policy UPDATE pour formateurs')\r\n        } else if (updateError) {\r\n            console.log('   ❌ UPDATE échoue pour autre raison:', updateError.message)\r\n        } else if (!updateData || updateData.length === 0) {\r\n            console.log('   ❌ UPDATE \"réussit\" mais aucune ligne affectée - Policy USING restrictive')\r\n            console.log('   💡 SOLUTION: Ajuster conditions USING dans policy existante')\r\n        } else {\r\n            console.log('   ✅ UPDATE fonctionne - Problème ailleurs')\r\n        }\r\n        \r\n    } catch (error) {\r\n        console.error('💥 Erreur globale:', error.message)\r\n    }\r\n}\r\n\r\ntestRLSPermissions().then(() => {\r\n    console.log('\\n🏁 Test RLS terminé')\r\n    process.exit(0)\r\n})",
          "taille": 5190,
          "lignes": 102,
          "dateModif": "2025-08-26T20:35:06.371Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "test-supabase-admin.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "// Test avec authentification Supabase admin\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = 'https://mkbchdhbgdynxwfhpxbw.supabase.co'\r\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1rYmNoZGhiZ2R5bnh3ZmhweGJ3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUxMTQ5OTYsImV4cCI6MjA3MDY5MDk5Nn0.vvJBJtX9H1vakOwqhDEt_yYJcp_giBY50PMggJ7YZic'\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseKey)\r\n\r\nasync function testSupabaseAdminAuth() {\r\n    console.log('🧪 [TEST] Test authentification Supabase admin...')\r\n    \r\n    try {\r\n        // 1. Se connecter avec un admin test\r\n        console.log('1️⃣ Connexion admin test...')\r\n        const { data: authData, error: authError } = await supabase.auth.signInWithPassword({\r\n            email: 'admin@test.com',\r\n            password: 'test123456'\r\n        })\r\n\r\n        if (authError) {\r\n            console.log('❌ Connexion échouée:', authError.message)\r\n            console.log('🔧 Tentative création utilisateur admin test...')\r\n            \r\n            // Créer un utilisateur admin test si nécessaire\r\n            const { data: signUpData, error: signUpError } = await supabase.auth.signUp({\r\n                email: 'admin@test.com',\r\n                password: 'test123456'\r\n            })\r\n            \r\n            if (signUpError) {\r\n                console.error('❌ Impossible de créer utilisateur test:', signUpError.message)\r\n                return\r\n            }\r\n            \r\n            console.log('✅ Utilisateur admin test créé')\r\n            return // Attendre confirmation email\r\n        }\r\n\r\n        console.log('✅ Connexion réussie:', authData.user.email)\r\n        console.log('🔑 Access token disponible:', authData.session.access_token ? 'OUI' : 'NON')\r\n\r\n        // 2. Tester l'API avec le token Supabase\r\n        console.log('\\n2️⃣ Test API reset password...')\r\n        const response = await fetch('http://localhost:3003/api/admin/reset-formateur-password', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${authData.session.access_token}`\r\n            },\r\n            body: JSON.stringify({\r\n                formateurId: '3a3bd552-141c-4136-8a83-81caf23750a8',\r\n                formateurNom: 'Tanrien'\r\n            })\r\n        })\r\n\r\n        const data = await response.json()\r\n        console.log('📊 Résultat API:', response.status, data)\r\n\r\n        if (data.success) {\r\n            console.log('✅ Reset réussi avec auth Supabase!')\r\n        } else {\r\n            console.log('❌ Reset échoué:', data.error)\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error('💥 Erreur test:', error.message)\r\n    }\r\n}\r\n\r\ntestSupabaseAdminAuth()\r\n    .then(() => {\r\n        console.log('\\n🏁 Test terminé')\r\n        process.exit(0)\r\n    })\r\n    .catch(err => {\r\n        console.error('💥 Erreur globale:', err)\r\n        process.exit(1)\r\n    })",
          "taille": 3021,
          "lignes": 78,
          "dateModif": "2025-08-26T21:01:38.772Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "test-vulnerability-audit.js",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "// Test pratique des vulnérabilités RLS identifiées dans l'audit\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = 'https://mkbchdhbgdynxwfhpxbw.supabase.co'\r\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1rYmNoZGhiZ2R5bnh3ZmhweGJ3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUxMTQ5OTYsImV4cCI6MjA3MDY5MDk5Nn0.vvJBJtX9H1vakOwqhDEt_yYJcp_giBY50PMggJ7YZic'\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseKey)\r\n\r\nconsole.log('╔═══════════════════════════════════════════════════════════════╗')\r\nconsole.log('║       TEST VULNÉRABILITÉS RLS - ACLEF PLANNING               ║')\r\nconsole.log('╚═══════════════════════════════════════════════════════════════╝')\r\nconsole.log('')\r\n\r\n// TEST 1 : Tentative de création utilisateur non autorisée\r\nasync function testUserCreationVulnerability() {\r\n    console.log('🧪 TEST 1 - CRÉATION UTILISATEUR NON AUTORISÉE')\r\n    console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━')\r\n    \r\n    try {\r\n        // Tentative d'insertion directe sans authentification admin\r\n        console.log('→ Tentative INSERT sur table users sans auth admin...')\r\n        \r\n        const testEmail = `hack.test.${Date.now()}@vulnerability.com`\r\n        const { data, error, count } = await supabase\r\n            .from('users')\r\n            .insert([{\r\n                prenom: 'TestHack',\r\n                nom: 'Vulnerability',\r\n                email: testEmail,\r\n                role: 'formateur',\r\n                archive: false\r\n            }])\r\n            .select()\r\n        \r\n        if (error) {\r\n            console.log('✅ SÉCURISÉ - Insertion bloquée')\r\n            console.log(`   Message: ${error.message}`)\r\n            console.log(`   Code: ${error.code}`)\r\n            \r\n            if (error.message.includes('policy') || error.code === '42501') {\r\n                console.log('   → RLS Policy active et fonctionnelle')\r\n            }\r\n        } else if (data && data.length > 0) {\r\n            console.log('🚨 VULNÉRABILITÉ CONFIRMÉE - Insertion réussie sans auth!')\r\n            console.log(`   ID créé: ${data[0].id}`)\r\n            \r\n            // Nettoyer immédiatement le test\r\n            const { error: deleteError } = await supabase\r\n                .from('users')\r\n                .delete()\r\n                .eq('email', testEmail)\r\n            \r\n            if (!deleteError) {\r\n                console.log('   🧹 Données de test supprimées')\r\n            }\r\n        } else {\r\n            console.log('⚠️  RÉSULTAT AMBIGU')\r\n            console.log(`   Data: ${JSON.stringify(data)}`)\r\n            console.log(`   Count: ${count}`)\r\n        }\r\n        \r\n    } catch (error) {\r\n        console.log('✅ EXCEPTION - Opération bloquée')\r\n        console.log(`   ${error.message}`)\r\n    }\r\n    console.log('')\r\n}\r\n\r\n// TEST 2 : Vérification des politiques RLS sur différentes opérations\r\nasync function checkRLSPolicies() {\r\n    console.log('🔍 TEST 2 - ÉTAT DES POLITIQUES RLS')\r\n    console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━')\r\n    \r\n    const results = {\r\n        read: false,\r\n        update: false,\r\n        delete: false\r\n    }\r\n    \r\n    try {\r\n        // Test SELECT\r\n        console.log('→ Test SELECT sur table users...')\r\n        const { data: readData, error: readError } = await supabase\r\n            .from('users')\r\n            .select('id, prenom, nom, role')\r\n            .limit(1)\r\n        \r\n        if (readError) {\r\n            console.log('✅ SELECT bloqué par RLS')\r\n            console.log(`   ${readError.message}`)\r\n        } else if (readData && readData.length > 0) {\r\n            results.read = true\r\n            console.log(`⚠️  SELECT autorisé - ${readData.length} ligne(s) lisible(s)`)\r\n            console.log(`   Exemple: ${readData[0].prenom} ${readData[0].nom}`)\r\n        } else {\r\n            console.log('✅ SELECT retourne 0 lignes (RLS filtre actif)')\r\n        }\r\n        \r\n        // Test UPDATE\r\n        console.log('\\n→ Test UPDATE sur table users...')\r\n        const { data: updateData, error: updateError, count: updateCount } = await supabase\r\n            .from('users')\r\n            .update({ nom: 'TestUpdateHack' })\r\n            .eq('email', 'nonexistent.test@hack.com')\r\n            .select()\r\n        \r\n        if (updateError) {\r\n            console.log('✅ UPDATE bloqué par RLS')\r\n            console.log(`   ${updateError.message}`)\r\n        } else if (updateCount && updateCount > 0) {\r\n            results.update = true\r\n            console.log(`🚨 UPDATE autorisé - ${updateCount} ligne(s) modifiée(s)`)\r\n        } else {\r\n            console.log('✅ UPDATE exécuté mais 0 lignes affectées')\r\n        }\r\n        \r\n        // Test DELETE\r\n        console.log('\\n→ Test DELETE sur table users...')\r\n        const { data: deleteData, error: deleteError, count: deleteCount } = await supabase\r\n            .from('users')\r\n            .delete()\r\n            .eq('email', 'nonexistent.test@hack.com')\r\n            .select()\r\n        \r\n        if (deleteError) {\r\n            console.log('✅ DELETE bloqué par RLS')\r\n            console.log(`   ${deleteError.message}`)\r\n        } else if (deleteCount && deleteCount > 0) {\r\n            results.delete = true\r\n            console.log(`🚨 DELETE autorisé - ${deleteCount} ligne(s) supprimée(s)`)\r\n        } else {\r\n            console.log('✅ DELETE exécuté mais 0 lignes affectées')\r\n        }\r\n        \r\n    } catch (error) {\r\n        console.log('✅ EXCEPTION RLS - Opérations bloquées')\r\n        console.log(`   ${error.message}`)\r\n    }\r\n    \r\n    console.log('')\r\n    return results\r\n}\r\n\r\n// TEST 3 : Vérification protection authentification des pages\r\nasync function testPageAuthentication() {\r\n    console.log('🔐 TEST 3 - PROTECTION AUTHENTIFICATION PAGES')\r\n    console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━')\r\n    \r\n    const pagesToTest = [\r\n        '/gestion-formateurs',\r\n        '/gestion-apprenants', \r\n        '/planning-coordo',\r\n        '/api/admin/reset-formateur-password'\r\n    ]\r\n    \r\n    const results = []\r\n    \r\n    for (const page of pagesToTest) {\r\n        try {\r\n            console.log(`\\n→ Test accès ${page} sans auth...`)\r\n            const response = await fetch(`http://localhost:3003${page}`)\r\n            const contentType = response.headers.get('content-type')\r\n            \r\n            if (response.status === 401 || response.status === 403) {\r\n                console.log(`✅ Protégé - Status ${response.status}`)\r\n                results.push({ page, protected: true })\r\n            } else if (response.status === 200) {\r\n                const content = await response.text()\r\n                \r\n                // Vérifier si c'est une redirection vers login\r\n                if (content.includes('Login') || content.includes('Connexion') || \r\n                    content.includes('Vérification des accès') || content.includes('🔑')) {\r\n                    console.log('✅ Protégé - Redirection/vérification auth')\r\n                    results.push({ page, protected: true })\r\n                } else if (content.includes('gestion') || content.includes('planning')) {\r\n                    console.log('🚨 VULNÉRABLE - Contenu accessible sans auth!')\r\n                    results.push({ page, protected: false })\r\n                } else {\r\n                    console.log('⚠️  Status 200 mais contenu indéterminé')\r\n                    results.push({ page, protected: 'unknown' })\r\n                }\r\n            } else {\r\n                console.log(`⚠️  Status inhabituel: ${response.status}`)\r\n                results.push({ page, protected: 'unknown' })\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.log(`   Erreur test: ${error.message}`)\r\n            results.push({ page, protected: 'error' })\r\n        }\r\n    }\r\n    \r\n    console.log('')\r\n    return results\r\n}\r\n\r\n// TEST 4 : Test spécifique sur d'autres tables critiques\r\nasync function testOtherTablesVulnerability() {\r\n    console.log('🎯 TEST 4 - AUTRES TABLES CRITIQUES')\r\n    console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━')\r\n    \r\n    const tables = [\r\n        { name: 'lieux', test: { nom: 'TestLieu', adresse: 'Test' } },\r\n        { name: 'messages', test: { contenu: 'TestMessage', expediteur: 'test' } },\r\n        { name: 'planning_hebdomadaire', test: { semaine: '2025-01', formateurs_ids: [] } }\r\n    ]\r\n    \r\n    for (const table of tables) {\r\n        console.log(`\\n→ Test INSERT sur table ${table.name}...`)\r\n        \r\n        try {\r\n            const { data, error } = await supabase\r\n                .from(table.name)\r\n                .insert([table.test])\r\n                .select()\r\n            \r\n            if (error) {\r\n                console.log(`✅ Insertion bloquée`)\r\n                console.log(`   ${error.message}`)\r\n            } else if (data && data.length > 0) {\r\n                console.log(`🚨 VULNÉRABLE - Insertion réussie sans auth!`)\r\n                \r\n                // Nettoyer\r\n                await supabase.from(table.name).delete().eq('id', data[0].id)\r\n                console.log(`   🧹 Test nettoyé`)\r\n            } else {\r\n                console.log(`⚠️  Résultat ambigu`)\r\n            }\r\n        } catch (err) {\r\n            console.log(`✅ Exception: ${err.message}`)\r\n        }\r\n    }\r\n    \r\n    console.log('')\r\n}\r\n\r\n// Fonction principale d'exécution des tests\r\nasync function runAllTests() {\r\n    const startTime = Date.now()\r\n    \r\n    console.log('📅 Date:', new Date().toLocaleString())\r\n    console.log('🌐 Supabase URL:', supabaseUrl)\r\n    console.log('🔑 Using anon key (client standard)')\r\n    console.log('')\r\n    \r\n    // Exécuter tous les tests\r\n    await testUserCreationVulnerability()\r\n    const rlsResults = await checkRLSPolicies()\r\n    const authResults = await testPageAuthentication()\r\n    await testOtherTablesVulnerability()\r\n    \r\n    // Rapport final\r\n    console.log('═══════════════════════════════════════════════════════════════')\r\n    console.log('📊 RAPPORT FINAL')\r\n    console.log('═══════════════════════════════════════════════════════════════')\r\n    \r\n    // Analyser les résultats\r\n    const vulnerabilities = []\r\n    const protections = []\r\n    \r\n    // Analyse RLS\r\n    if (rlsResults.read) vulnerabilities.push('SELECT non protégé')\r\n    else protections.push('SELECT protégé par RLS')\r\n    \r\n    if (rlsResults.update) vulnerabilities.push('UPDATE non protégé')\r\n    else protections.push('UPDATE protégé par RLS')\r\n    \r\n    if (rlsResults.delete) vulnerabilities.push('DELETE non protégé')\r\n    else protections.push('DELETE protégé par RLS')\r\n    \r\n    // Analyse auth pages\r\n    const unprotectedPages = authResults.filter(r => r.protected === false)\r\n    if (unprotectedPages.length > 0) {\r\n        vulnerabilities.push(`${unprotectedPages.length} page(s) accessible(s) sans auth`)\r\n    } else {\r\n        protections.push('Toutes les pages protégées par auth')\r\n    }\r\n    \r\n    // Conclusion\r\n    console.log('\\n✅ PROTECTIONS ACTIVES:')\r\n    protections.forEach(p => console.log(`   • ${p}`))\r\n    \r\n    if (vulnerabilities.length > 0) {\r\n        console.log('\\n🚨 VULNÉRABILITÉS DÉTECTÉES:')\r\n        vulnerabilities.forEach(v => console.log(`   • ${v}`))\r\n        \r\n        console.log('\\n🔴 STATUT: SYSTÈME VULNÉRABLE')\r\n        console.log('   Des corrections sont nécessaires')\r\n    } else {\r\n        console.log('\\n✅ STATUT: SYSTÈME SÉCURISÉ')\r\n        console.log('   Les politiques RLS sont actives et fonctionnelles')\r\n    }\r\n    \r\n    const duration = ((Date.now() - startTime) / 1000).toFixed(2)\r\n    console.log(`\\n⏱️  Durée totale des tests: ${duration} secondes`)\r\n    console.log('═══════════════════════════════════════════════════════════════')\r\n}\r\n\r\n// Lancer les tests\r\nrunAllTests()\r\n    .then(() => {\r\n        console.log('\\n✅ Tests terminés avec succès')\r\n        process.exit(0)\r\n    })\r\n    .catch(error => {\r\n        console.error('\\n❌ Erreur fatale:', error)\r\n        process.exit(1)\r\n    })",
          "taille": 13167,
          "lignes": 308,
          "dateModif": "2025-08-26T21:25:24.727Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    },
    {
      "fichier": "validate-corrections.md",
      "resultat": {
        "statut": "VERCEL_SEULEMENT",
        "local": {
          "existe": false,
          "contenu": null,
          "taille": 0,
          "lignes": 0,
          "erreur": "Fichier non trouvé"
        },
        "vercel": {
          "existe": true,
          "contenu": "# ✅ VALIDATION DES CORRECTIONS SÉCURISÉES\r\n\r\n## 📋 Problème Initial\r\n- ❌ `localStorage.getItem('adminToken')` retournait null\r\n- ❌ Tentative dangereuse de créer JWT côté client avec secret exposé\r\n\r\n## 🔧 Corrections Appliquées\r\n\r\n### 1. API `/api/admin/reset-formateur-password.js`\r\n\r\n**AVANT (JWT dangereux):**\r\n```javascript\r\nconst decoded = jwt.verify(token, process.env.JWT_SECRET)\r\nif (decoded.role !== 'admin') { ... }\r\n```\r\n\r\n**APRÈS (Supabase sécurisé):**\r\n```javascript\r\nconst { data: { user }, error: authError } = await supabase.auth.getUser(token)\r\nconst adminEmails = ['albena@aclef.fr', 'fanny@aclef.fr', ...]\r\nif (!adminEmails.includes(user.email)) { ... }\r\n```\r\n\r\n### 2. Frontend `prise-controle-formateur.js`\r\n\r\n**AVANT (localStorage inexistant):**\r\n```javascript\r\nconst adminToken = localStorage.getItem('adminToken') // ❌ null\r\n```\r\n\r\n**APRÈS (Session Supabase):**\r\n```javascript\r\nconst { data: { session } } = await supabase.auth.getSession()\r\n'Authorization': `Bearer ${session.access_token}` // ✅ Token valide\r\n```\r\n\r\n## 🛡️ Sécurité Renforcée\r\n\r\n1. **Secret JWT protégé** ✅\r\n   - Jamais exposé côté client\r\n   - Reste uniquement côté serveur\r\n\r\n2. **Authentification native Supabase** ✅\r\n   - Utilise le système d'auth existant\r\n   - Pas de duplication de système JWT\r\n\r\n3. **Validation email admin** ✅\r\n   - Liste blanche d'emails autorisés\r\n   - Contrôle granulaire des accès\r\n\r\n## 🧪 Tests de Validation\r\n\r\n### Test 1: API avec token invalide\r\n```bash\r\ncurl -H \"Authorization: Bearer fake_token\" /api/admin/reset-formateur-password\r\n→ {\"error\":\"Token invalide\"} ✅\r\n```\r\n\r\n### Test 2: Frontend utilise session Supabase\r\n```javascript\r\nconst { data: { session } } = await supabase.auth.getSession()\r\n// Utilise session.access_token au lieu de localStorage ✅\r\n```\r\n\r\n## 🎯 Workflow Final Sécurisé\r\n\r\n1. **Admin se connecte** → Supabase auth active ✅\r\n2. **Session créée** → `session.access_token` disponible ✅  \r\n3. **Clic reset button** → Token envoyé à l'API ✅\r\n4. **API vérifie token** → `supabase.auth.getUser(token)` ✅\r\n5. **Email validé** → Liste blanche adminEmails ✅\r\n6. **Reset exécuté** → `password_hash = NULL` ✅\r\n\r\n## ✅ CORRECTION COMPLÈTE ET SÉCURISÉE\r\n\r\nLa fonctionnalité est maintenant prête pour la production avec :\r\n- ✅ Authentification Supabase native\r\n- ✅ Aucun secret exposé côté client  \r\n- ✅ Validation email admin rigoureuse\r\n- ✅ Gestion d'erreur appropriée",
          "taille": 2519,
          "lignes": 80,
          "dateModif": "2025-08-26T21:04:33.292Z",
          "erreur": null
        },
        "identique": false,
        "pourcentageSimilarite": 0,
        "message": "🔴 Fichier existe seulement sur Vercel"
      }
    }
  ]
}